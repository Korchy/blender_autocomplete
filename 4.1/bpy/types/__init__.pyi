"""

--------------------

This script demonstrates basic operations on object like creating new
object, placing it into a view layer, selecting it and making it active.

```../examples/bpy.types.Object.py```

Base class for integrating USD Hydra based renderers.


--------------------

```../examples/bpy.types.HydraRenderEngine.py```

bpy.types.*

:maxdepth: 1
:glob:

Shared Enum Types <bpy_types_enum_items/index>

:hidden:
:maxdepth: 1


--------------------

PropertyGroups are the base class for dynamically defined sets of properties.

They can be used to extend existing blender data with your own types which can
be animated, accessed from the user interface and from python.

[NOTE]
The values assigned to blender data are saved to disk but the class
definitions are not, this means whenever you load blender the class needs
to be registered too.
This is best done by creating an add-on which loads on startup and registers
your properties.

[NOTE]
PropertyGroups must be registered before assigning them to blender data.

Property types used in class declarations are all in bpy.props



```../examples/bpy.types.PropertyGroup.py```


--------------------

Here is an example of a simple menu. Menus differ from panels in that they must
reference from a header, panel or another menu.

Notice the 'CATEGORY_MT_name' in  Menu.bl_idname, this is a naming
convention for menus.

[NOTE]
Menu subclasses must be registered before referencing them from blender.

[NOTE]
Menus have their Layout.operator_context initialized as
'EXEC_REGION_WIN' rather than 'INVOKE_DEFAULT' (see Execution Context <operator-execution_context>).
If the operator context needs to initialize inputs from the
Operator.invoke function, then this needs to be explicitly set.

```../examples/bpy.types.Menu.py```


--------------------

This menu demonstrates some different functions.

```../examples/bpy.types.Menu.1.py```


--------------------

When creating menus for add-ons you can't reference menus
in Blender's default scripts.
Instead, the add-on can add menu items to existing menus.

The function menu_draw acts like Menu.draw.

```../examples/bpy.types.Menu.2.py```


--------------------

Preset menus are simply a convention that uses a menu sub-class
to perform the common task of managing presets.

This example shows how you can add a preset menu.

This example uses the object display options,
however you can use properties defined by your own scripts too.

```../examples/bpy.types.Menu.3.py```


--------------------

This example enables you to insert your own menu entry into the common
right click menu that you get while hovering over a UI button (e.g. operator,
value field, color, string, etc.)

To make the example work, you have to first select an object
then right click on an user interface element (maybe a color in the
material properties) and choose *Execute Custom Action*.

Executing the operator will then print all values.

```../examples/bpy.types.Menu.4.py```


--------------------

The mesh data is accessed in object mode and intended for compact storage,
for more flexible mesh editing from python see bmesh.

Blender stores 4 main arrays to define mesh geometry.

* Mesh.vertices (3 points in space)
* Mesh.edges (reference 2 vertices)
* Mesh.loops (reference a single vertex and edge)
* Mesh.polygons: (reference a range of loops)

Each polygon references a slice in the loop array, this way, polygons do not store vertices or corner data such as UVs directly,
only a reference to loops that the polygon uses.

Mesh.loops, Mesh.uv_layers Mesh.vertex_colors are all aligned so the same polygon loop
indices can be used to find the UVs and vertex colors as with as the vertices.

To compare mesh API options see: NGons and Tessellation Faces <info_gotcha_mesh_faces>

This example script prints the vertices and UVs for each polygon, assumes the active object is a mesh with UVs.

```../examples/bpy.types.Mesh.py```

```../examples/bpy.types.AddonPreferences.1.py```


--------------------

This script is the UIList subclass used to show material slots, with a bunch of additional commentaries.

Notice the name of the class, this naming convention is similar as the one for panels or menus.

[NOTE]
UIList subclasses must be registered for blender to use them.

```../examples/bpy.types.UIList.1.py```


--------------------

This script is an extended version of the UIList

 subclass used to show vertex groups. It is not used 'as is',
because iterating over all vertices in a 'draw' function is a very bad idea for UI performances! However, it's a good
example of how to create/use filtering/reordering callbacks.

```../examples/bpy.types.UIList.2.py```


--------------------

The NodeTree.poll function determines if a node tree is visible
in the given context (similar to how Panel.poll
and Menu.poll define visibility). If it returns False,
the node tree type will not be selectable in the node editor.

A typical condition for shader nodes would be to check the active render engine
of the scene and only show nodes of the renderer they are designed for.

```../examples/bpy.types.NodeTree.py```


--------------------

The Image data-block is a shallow wrapper around image or video file(s)
(on disk, as packed data, or generated).

All actual data like the pixel buffer, size, resolution etc. is
cached in an imbuf.types.ImBuf image buffer (or several buffers
in some cases, like UDIM textures, multi-views, animations...).

Several properties and functions of the Image data-block are then actually
using/modifying its image buffer, and not the Image data-block itself.

[WARNING]
One key limitation is that image buffers are not shared between different
Image data-blocks, and they are not duplicated when copying an image.
So until a modified image buffer is saved on disk, duplicating its Image
data-block will not propagate the underlying buffer changes to the new Image.

This example script generates an Image data-block with a given size,
change its first pixel, rescale it, and duplicates the image.

The duplicated image still has the same size and colors as the original image
at its creation, all editing in the original image's buffer is 'lost' in its copy.

```../examples/bpy.types.Image.py```


--------------------

When creating a Operator

 that imports files, you may want to
add them 'drag-and-drop' support, File Handlers helps to define
a set of files extensions (FileHandler.bl_file_extensions)
that the Operator

 support and a FileHandler.poll_drop
function that can be used to check in what specific context the Operator


can be invoked with 'drag-and-drop' filepath data.

Same as operators that uses the file select window, this operators
required a set of properties, when the Operator

 can import just one
file per execution it needs to define the following property:

```
filepath: bpy.props.StringProperty(subtype='FILE_PATH')
```

This filepath

 property now will be used by the FileHandler

 to
set the 'drag-and-drop' filepath data.

```../examples/bpy.types.FileHandler.1.py```


--------------------

Also operators can be invoked with multiple files from 'drag-and-drop',
but for this it is require to define the following properties:

```
directory: StringProperty(subtype='FILE_PATH')
files: CollectionProperty(type=bpy.types.OperatorFileListElement)
```

This directory

 and files

 properties now will be used by the
FileHandler

 to set 'drag-and-drop' filepath data.

```../examples/bpy.types.FileHandler.2.py```


--------------------

This script shows simple operator which prints a message.

Since the operator only has an Operator.execute function it takes no
user input.

The function should return {'FINISHED'}

 or {'CANCELLED'}

, the latter
meaning that operator execution was aborted without making any changes, and
saving an undo entry isn't neccesary. If an error is detected after some changes
have already been made, use the {'FINISHED'}

 return code, or the behavior
of undo will be confusing for the user.

[NOTE]
Operator subclasses must be registered before accessing them from blender.

```../examples/bpy.types.Operator.py```


--------------------

Operator.invoke is used to initialize the operator from the context
at the moment the operator is called.
invoke() is typically used to assign properties which are then used by
execute().
Some operators don't have an execute() function, removing the ability to be
repeated from a script or macro.

This example shows how to define an operator which gets mouse input to
execute a function and that this operator can be invoked or executed from
the python api.

Also notice this operator defines its own properties, these are different
to typical class properties because blender registers them with the
operator, to use as arguments when called, saved for operator undo/redo and
automatically added into the user interface.

```../examples/bpy.types.Operator.1.py```


--------------------

This example shows how an operator can use the file selector.

Notice the invoke function calls a window manager method and returns
{'RUNNING_MODAL'}

, this means the file selector stays open and the operator does not
exit immediately after invoke finishes.

The file selector runs the operator, calling Operator.execute when the
user confirms.

The Operator.poll function is optional, used to check if the operator
can run.

```../examples/bpy.types.Operator.2.py```


--------------------

This operator uses its Operator.invoke function to call a popup.

```../examples/bpy.types.Operator.3.py```


--------------------

By default operator properties use an automatic user interface layout.
If you need more control you can create your own layout with a
Operator.draw function.

This works like the Panel and Menu draw functions, its used
for dialogs and file selectors.

```../examples/bpy.types.Operator.4.py```


--------------------

This operator defines a Operator.modal function that will keep being
run to handle events until it returns {'FINISHED'}

 or {'CANCELLED'}

.

Modal operators run every time a new event is detected, such as a mouse click
or key press. Conversely, when no new events are detected, the modal operator
will not run. Modal operators are especially useful for interactive tools, an
operator can have its own state where keys toggle options as the operator runs.
Grab, Rotate, Scale, and Fly-Mode are examples of modal operators.

Operator.invoke is used to initialize the operator as being active
by returning {'RUNNING_MODAL'}

, initializing the modal loop.

Notice __init__()

 and __del__()

 are declared.
For other operator types they are not useful but for modal operators they will
be called before the Operator.invoke and after the operator finishes.

```../examples/bpy.types.Operator.5.py```


--------------------

You may want to have an operator prompt the user to select an item
from a search field, this can be done using bpy.types.Operator.invoke_search_popup.

```../examples/bpy.types.Operator.6.py```


--------------------

```../examples/bpy.types.RenderEngine.py```


--------------------

This script is a simple panel which will draw into the object properties
section.

Notice the 'CATEGORY_PT_name' Panel.bl_idname, this is a naming
convention for panels.

[NOTE]
Panel subclasses must be registered for blender to use them.

```../examples/bpy.types.Panel.py```


--------------------

This panel has a Panel.poll and Panel.draw_header function,
even though the contents is basic this closely resembles blenders panels.

```../examples/bpy.types.Panel.1.py```


--------------------

A mix-in parent class can be used to share common properties and
Menu.poll function.

```../examples/bpy.types.Panel.2.py```


--------------------

This example demonstrates access to the evaluated ID (such as object, material, etc.) state from
an original ID.
This is needed every time one needs to access state with animation, constraints, and modifiers
taken into account.

```../examples/bpy.types.Depsgraph.1.py```


--------------------

This example demonstrates access to the original ID.
Such access is needed to check whether object is selected, or to compare pointers.

```../examples/bpy.types.Depsgraph.2.py```


--------------------

Sometimes it is needed to know all the instances with their matrices (for example, when writing an
exporter or a custom render engine).
This example shows how to access all objects and instances in the scene.

```../examples/bpy.types.Depsgraph.3.py```


--------------------

Function to get a mesh from any object with geometry. It is typically used by exporters, render
engines and tools that need to access the evaluated mesh as displayed in the viewport.

Object.to_mesh() is closely interacting with dependency graph: its behavior depends on whether it
is used on original or evaluated object.

When is used on original object, the result mesh is calculated from the object without taking
animation or modifiers into account:

* For meshes this is similar to duplicating the source mesh.
* For curves this disables own modifiers, and modifiers of objects used as bevel and taper.
* For metaballs this produces an empty mesh since polygonization is done as a modifier evaluation.

When is used on evaluated object all modifiers are taken into account.

[NOTE]
The result mesh is owned by the object. It can be freed by calling object.to_mesh_clear().

[NOTE]
The result mesh must be treated as temporary, and cannot be referenced from objects in the main
database. If the mesh intended to be used in a persistent manner use bpy.data.meshes.new_from_object()
instead.

[NOTE]
If object does not have geometry (i.e. camera) the functions returns None.

```../examples/bpy.types.Depsgraph.4.py```


--------------------

Function to copy a new mesh from any object with geometry. The mesh is added to the main
database and can be referenced by objects. Typically used by tools that create new objects
or apply modifiers.

When is used on original object, the result mesh is calculated from the object without taking
animation or modifiers into account:

* For meshes this is similar to duplicating the source mesh.
* For curves this disables own modifiers, and modifiers of objects used as bevel and taper.
* For metaballs this produces an empty mesh since polygonization is done as a modifier evaluation.

When is used on evaluated object all modifiers are taken into account.

All the references (such as materials) are re-mapped to original. This ensures validity and
consistency of the main database.

[NOTE]
If object does not have geometry (i.e. camera) the functions returns None.

```../examples/bpy.types.Depsgraph.5.py```


--------------------

This example is a combination of all previous ones, and shows how to write a simple exporter
script.

```../examples/bpy.types.Depsgraph.6.py```


--------------------

Function to get a curve from text and curve objects. It is typically used by exporters, render
engines, and tools that need to access the curve representing the object.

The function takes the evaluated dependency graph as a required parameter and optionally a boolean
apply_modifiers which defaults to false. If apply_modifiers is true and the object is a curve object,
the spline deform modifiers are applied on the control points. Note that constructive modifiers and
modifiers that are not spline-enabled will not be applied. So modifiers like Array will not be applied
and deform modifiers that have Apply On Spline disabled will not be applied.

If the object is a text object. The text will be converted into a 3D curve and returned. Modifiers are
never applied on text objects and apply_modifiers will be ignored. If the object is neither a curve nor
a text object, an error will be reported.

[NOTE]
The resulting curve is owned by the object. It can be freed by calling object.to_curve_clear().

[NOTE]
The resulting curve must be treated as temporary, and cannot be referenced from objects in the main
database.

```../examples/bpy.types.Depsgraph.7.py```


--------------------

This example shows an implementation of USDHook

 to extend USD
export and import functionalty.

One may optionally define any or all of the following callback functions
in the USDHook

 subclass.

Hook function on_export()

 is called before the USD export finalizes,
allowing modifications to the USD stage immediately before it is
saved.  This function takes as an argument an instance of an
internally defined class USDSceneExportContext

 which provides the
following accessors to the scene data:

* get_stage()

 returns the USD stage to be saved.
* get_depsgraph()

 returns the Blender scene dependency graph.

Hook function on_material_export()

 is called for each material that is exported,
allowing modifications to the USD material, such as shader generation.
It is called with three arguments:

-export_context

: An instance of the internally defined type USDMaterialExportContext

.
-bl_material

: The source Blender material.
-usd_material

: The target USD material to be exported.

USDMaterialExportContext

 implements a get_stage()

 function which returns the
USD stage to be saved.

Note that the target USD material might already have connected shaders created by the USD exporter or
by other material export hooks.

Hook function on_import()

 is called after the USD import finalizes. This function takes
as an argument an instance of an internally defined class USDSceneImportContext

 which provides the
following accessors to the scene data:

* get_stage()

 returns the USD stage which was imported.

The hook functions should return True

 on success or False

 if the operation was bypassed or
otherwise failed to complete.  Exceptions raised by these functions will be reported in Blender, with
the exception details printed to the console.

The USDHookExample

 class in this example impements the fllowing functions:

* on_export()

 function to add custom data to the stage's root layer.
* on_material_export()

 function to create a simple MaterialX

 shader on the givne USD material.
* on_import()

 function to create a text object to display the stage's custom layer data.

```../examples/bpy.types.USDHook.py```

"""

import typing
import collections.abc
import bl_operators.anim
import bl_operators.assets
import bl_operators.clip
import bl_operators.constraint
import bl_operators.file
import bl_operators.freestyle
import bl_operators.node
import bl_operators.object
import bl_operators.presets
import bl_operators.spreadsheet
import bl_operators.userpref
import bl_operators.view3d
import bl_operators.wm
import bl_ui
import bl_ui.anim
import bl_ui.asset_shelf
import bl_ui.generic_ui_list
import bl_ui.node_add_menu
import bl_ui.node_add_menu_compositor
import bl_ui.node_add_menu_geometry
import bl_ui.node_add_menu_shader
import bl_ui.node_add_menu_texture
import bl_ui.properties_collection
import bl_ui.properties_constraint
import bl_ui.properties_data_armature
import bl_ui.properties_data_bone
import bl_ui.properties_data_camera
import bl_ui.properties_data_curve
import bl_ui.properties_data_curves
import bl_ui.properties_data_empty
import bl_ui.properties_data_gpencil
import bl_ui.properties_data_grease_pencil
import bl_ui.properties_data_lattice
import bl_ui.properties_data_light
import bl_ui.properties_data_lightprobe
import bl_ui.properties_data_mesh
import bl_ui.properties_data_metaball
import bl_ui.properties_data_modifier
import bl_ui.properties_data_pointcloud
import bl_ui.properties_data_shaderfx
import bl_ui.properties_data_speaker
import bl_ui.properties_data_volume
import bl_ui.properties_freestyle
import bl_ui.properties_grease_pencil_common
import bl_ui.properties_mask_common
import bl_ui.properties_material
import bl_ui.properties_material_gpencil
import bl_ui.properties_object
import bl_ui.properties_output
import bl_ui.properties_paint_common
import bl_ui.properties_particle
import bl_ui.properties_physics_cloth
import bl_ui.properties_physics_common
import bl_ui.properties_physics_dynamicpaint
import bl_ui.properties_physics_field
import bl_ui.properties_physics_fluid
import bl_ui.properties_physics_geometry_nodes
import bl_ui.properties_physics_rigidbody
import bl_ui.properties_physics_rigidbody_constraint
import bl_ui.properties_physics_softbody
import bl_ui.properties_render
import bl_ui.properties_scene
import bl_ui.properties_texture
import bl_ui.properties_view_layer
import bl_ui.properties_workspace
import bl_ui.properties_world
import bl_ui.space_clip
import bl_ui.space_console
import bl_ui.space_dopesheet
import bl_ui.space_filebrowser
import bl_ui.space_graph
import bl_ui.space_image
import bl_ui.space_info
import bl_ui.space_nla
import bl_ui.space_node
import bl_ui.space_outliner
import bl_ui.space_properties
import bl_ui.space_sequencer
import bl_ui.space_spreadsheet
import bl_ui.space_statusbar
import bl_ui.space_text
import bl_ui.space_time
import bl_ui.space_toolsystem_common
import bl_ui.space_toolsystem_toolbar
import bl_ui.space_topbar
import bl_ui.space_userpref
import bl_ui.space_view3d
import bl_ui.space_view3d_toolbar
import mathutils

GenericType1 = typing.TypeVar("GenericType1")
GenericType2 = typing.TypeVar("GenericType2")

class bpy_prop_collection(typing.Generic[GenericType1]):
    """built-in class used for all collections."""

    def find(self, key: str | None) -> int:
        """Returns the index of a key in a collection or -1 when not found
        (matches Python's string find function of the same name).

                :param key: The identifier for the collection member.
                :type key: str | None
                :return: index of the key.
                :rtype: int
        """
        ...

    def foreach_get(
        self,
        attr: str,
        seq: collections.abc.MutableSequence[bool]
        | collections.abc.MutableSequence[int]
        | collections.abc.MutableSequence[float],
    ):
        """This is a function to give fast access to attributes within a collection.Only works for 'basic type' properties (bool, int and float)!
        Multi-dimensional arrays (like array of vectors) will be flattened into seq.

                :param attr:
                :type attr: str
                :param seq:
                :type seq: collections.abc.MutableSequence[bool] | collections.abc.MutableSequence[int] | collections.abc.MutableSequence[float]
        """
        ...

    def foreach_set(
        self,
        attr: str,
        seq: collections.abc.Sequence[bool]
        | collections.abc.Sequence[int]
        | collections.abc.Sequence[float],
    ):
        """This is a function to give fast access to attributes within a collection.Only works for 'basic type' properties (bool, int and float)!
        seq must be uni-dimensional, multi-dimensional arrays (like array of vectors) will be re-created from it.

                :param attr:
                :type attr: str
                :param seq:
                :type seq: collections.abc.Sequence[bool] | collections.abc.Sequence[int] | collections.abc.Sequence[float]
        """
        ...

    def get(
        self, key: str | None, default: GenericType2 = None
    ) -> GenericType1 | GenericType2:
        """Returns the value of the item assigned to key or default when not found
        (matches Python's dictionary function of the same name).

                :param key: The identifier for the collection member.
                :type key: str | None
                :param default: Optional argument for the value to return if
        key is not found.
                :type default: GenericType2
                :return:
                :rtype: GenericType1 | GenericType2
        """
        ...

    def items(self) -> list[tuple[str, GenericType1]]:
        """Return the identifiers of collection members
        (matching Python's dict.items() functionality).

                :return:
                :rtype: list[tuple[str, GenericType1]]
        """
        ...

    def keys(self) -> list[str]:
        """Return the identifiers of collection members
        (matching Python's dict.keys() functionality).

                :return: the identifiers for each member of this collection.
                :rtype: list[str]
        """
        ...

    def values(self) -> list[GenericType1]:
        """Return the values of collection
        (matching Python's dict.values() functionality).

                :return:
                :rtype: list[GenericType1]
        """
        ...

    @typing.overload
    def __getitem__(self, key: int | str) -> GenericType1:
        """

        :param key:
        :type key: int | str
        :return:
        :rtype: GenericType1
        """
        ...

    @typing.overload
    def __getitem__(self, key: slice) -> tuple[GenericType1]:
        """

        :param key:
        :type key: slice
        :return:
        :rtype: tuple[GenericType1]
        """
        ...

    def __getitem__(self, key: int | str | slice) -> GenericType1 | tuple[GenericType1]:
        """

        :param key:
        :type key: int | str | slice
        :return:
        :rtype: GenericType1 | tuple[GenericType1]
        """
        ...

    @typing.overload
    def __setitem__(self, key: int | str, value: GenericType1):
        """

        :param key:
        :type key: int | str
        :param value:
        :type value: GenericType1
        """
        ...

    @typing.overload
    def __setitem__(self, key: slice, value: tuple[GenericType1]):
        """

        :param key:
        :type key: slice
        :param value:
        :type value: tuple[GenericType1]
        """
        ...

    def __setitem__(
        self, key: int | str | slice, value: GenericType1 | tuple[GenericType1]
    ):
        """

        :param key:
        :type key: int | str | slice
        :param value:
        :type value: GenericType1 | tuple[GenericType1]
        """
        ...

    def __delitem__(self, key: int | str | slice):
        """

        :param key:
        :type key: int | str | slice
        """
        ...

    def __iter__(self) -> collections.abc.Iterator[GenericType1]:
        """

        :return:
        :rtype: collections.abc.Iterator[GenericType1]
        """
        ...

    def __next__(self) -> GenericType1:
        """

        :return:
        :rtype: GenericType1
        """
        ...

    def __len__(self) -> int:
        """

        :return:
        :rtype: int
        """
        ...

    def __contains__(self, key: str | tuple[str, ...]) -> bool:
        """

        :param key:
        :type key: str | tuple[str, ...]
        :return:
        :rtype: bool
        """
        ...

class bpy_struct(typing.Generic[GenericType1]):
    """built-in base class for all classes in bpy.types."""

    id_data: typing.Any
    """ The `bpy.types.ID` object this datablock is from or None, (not available for all data types)"""

    def as_pointer(self) -> int:
        """Returns the memory address which holds a pointer to Blender's internal data

        :return: int (memory address).
        :rtype: int
        """
        ...

    def driver_add(self, path: str | None, index: int | None = -1) -> FCurve:
        """Adds driver(s) to the given property

        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str | None
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int | None
        :return: The driver(s) added.
        :rtype: FCurve
        """
        ...

    def driver_remove(self, path: str | None, index: int | None = -1) -> bool:
        """Remove driver(s) from the given property

        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str | None
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int | None
        :return: Success of driver removal.
        :rtype: bool
        """
        ...

    def get(self, key: str | None, default=None):
        """Returns the value of the custom property assigned to key or default
        when not found (matches Python's dictionary function of the same name).

                :param key: The key associated with the custom property.
                :type key: str | None
                :param default: Optional argument for the value to return if
        key is not found.
        """
        ...

    def id_properties_clear(self):
        """

        :return: Remove the parent group for an RNA struct's custom IDProperties.
        """
        ...

    def id_properties_ensure(self):
        """

        :return: the parent group for an RNA struct's custom IDProperties.
        """
        ...

    def id_properties_ui(self, key):
        """

        :param key: String name of the property.
        :return: Return an object used to manage an IDProperty's UI data.
        """
        ...

    def is_property_hidden(self, property) -> bool:
        """Check if a property is hidden.

        :param property:
        :return: True when the property is hidden.
        :rtype: bool
        """
        ...

    def is_property_overridable_library(self, property) -> bool:
        """Check if a property is overridable.

        :param property:
        :return: True when the property is overridable.
        :rtype: bool
        """
        ...

    def is_property_readonly(self, property) -> bool:
        """Check if a property is readonly.

        :param property:
        :return: True when the property is readonly (not writable).
        :rtype: bool
        """
        ...

    def is_property_set(self, property, ghost: bool | None = True) -> bool:
        """Check if a property is set, use for testing operator properties.

                :param property:
                :param ghost: Used for operators that re-run with previous settings.
        In this case the property is not marked as set,
        yet the value from the previous execution is used.

        In rare cases you may want to set this option to false.
                :type ghost: bool | None
                :return: True when the property has been set.
                :rtype: bool
        """
        ...

    def items(self):
        """Returns the items of this objects custom properties (matches Python's
        dictionary function of the same name).

                :return: custom property key, value pairs.
        """
        ...

    def keyframe_delete(
        self,
        data_path: str | None,
        index: int | None = -1,
        frame: float | None = None,
        group: str | None = "",
    ) -> bool:
        """Remove a keyframe from this properties fcurve.

        :param data_path: path to the property to remove a key, analogous to the fcurve's data path.
        :type data_path: str | None
        :param index: array index of the property to remove a key. Defaults to -1 removing all indices or a single channel if the property is not an array.
        :type index: int | None
        :param frame: The frame on which the keyframe is deleted, defaulting to the current frame.
        :type frame: float | None
        :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
        :type group: str | None
        :return: Success of keyframe deletion.
        :rtype: bool
        """
        ...

    def keyframe_insert(
        self,
        data_path: str | None,
        index: int | None = -1,
        frame: float | None = None,
        group: str | None = "",
        options=None(),
    ) -> bool:
        """Insert a keyframe on the property given, adding fcurves and animation data when necessary.This is the most simple example of inserting a keyframe from python.Note that when keying data paths which contain nested properties this must be
        done from the `ID` subclass, in this case the `Armature` rather
        than the bone.

                :param data_path: path to the property to key, analogous to the fcurve's data path.
                :type data_path: str | None
                :param index: array index of the property to key.
        Defaults to -1 which will key all indices or a single channel if the property is not an array.
                :type index: int | None
                :param frame: The frame on which the keyframe is inserted, defaulting to the current frame.
                :type frame: float | None
                :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
                :type group: str | None
                :param options: Optional set of flags:

        INSERTKEY_NEEDED Only insert keyframes where they're needed in the relevant F-Curves.

        INSERTKEY_VISUAL Insert keyframes based on 'visual transforms'.

        INSERTKEY_XYZ_TO_RGB This flag is no longer in use, and is here so that code that uses it doesn't break. The XYZ=RGB coloring is determined by the animation preferences.

        INSERTKEY_REPLACE Only replace already existing keyframes.

        INSERTKEY_AVAILABLE Only insert into already existing F-Curves.

        INSERTKEY_CYCLE_AWARE Take cyclic extrapolation into account (Cycle-Aware Keying option).
                :return: Success of keyframe insertion.
                :rtype: bool
        """
        ...

    def keys(self):
        """Returns the keys of this objects custom properties (matches Python's
        dictionary function of the same name).

                :return: custom property keys.
        """
        ...

    def path_from_id(self, property: str | None = "") -> str:
        """Returns the data path from the ID to this object (string).

                :param property: Optional property name which can be used if the path is
        to a property of this object.
                :type property: str | None
                :return: The path from `bpy.types.bpy_struct.id_data`
        to this struct and property (when given).
                :rtype: str
        """
        ...

    def path_resolve(self, path: str | None, coerce: bool | None = True):
        """Returns the property from the path, raise an exception when not found.

                :param path: path which this property resolves.
                :type path: str | None
                :param coerce: optional argument, when True, the property will be converted
        into its Python representation.
                :type coerce: bool | None
        """
        ...

    def pop(self, key: str | None, default=None):
        """Remove and return the value of the custom property assigned to key or default
        when not found (matches Python's dictionary function of the same name).

                :param key: The key associated with the custom property.
                :type key: str | None
                :param default: Optional argument for the value to return if
        key is not found.
        """
        ...

    def property_overridable_library_set(self, property, overridable) -> bool:
        """Define a property as overridable or not (only for custom properties!).

        :param property:
        :param overridable:
        :return: True when the overridable status of the property was successfully set.
        :rtype: bool
        """
        ...

    def property_unset(self, property):
        """Unset a property, will use default value afterward.

        :param property:
        """
        ...

    def type_recast(self):
        """Return a new instance, this is needed because types
        such as textures can be changed at runtime.

                :return: a new instance of this object with the type initialized again.
        """
        ...

    def values(self):
        """Returns the values of this objects custom properties (matches Python's
        dictionary function of the same name).

                :return: custom property values.
        """
        ...

    def __getitem__(self, key: int | str) -> typing.Any:
        """

        :param key:
        :type key: int | str
        :return:
        :rtype: typing.Any
        """
        ...

    def __setitem__(self, key: int | str, value: typing.Any):
        """

        :param key:
        :type key: int | str
        :param value:
        :type value: typing.Any
        """
        ...

    def __delitem__(self, key: int | str):
        """

        :param key:
        :type key: int | str
        """
        ...

class bpy_prop_array(typing.Generic[GenericType1]):
    def __get__(self, instance, owner) -> bpy_prop_array[GenericType1]:
        """

        :param instance:
        :param owner:
        :return:
        :rtype: bpy_prop_array[GenericType1]
        """
        ...

    def __set__(self, instance, value: collections.abc.Iterable[GenericType1]):
        """

        :param instance:
        :param value:
        :type value: collections.abc.Iterable[GenericType1]
        """
        ...

    def foreach_get(self, seq: collections.abc.MutableSequence[GenericType1]):
        """

        :param seq:
        :type seq: collections.abc.MutableSequence[GenericType1]
        """
        ...

    def foreach_set(self, seq: typing.Sequence[GenericType1]):
        """

        :param seq:
        :type seq: typing.Sequence[GenericType1]
        """
        ...

    @typing.overload
    def __getitem__(self, key: int) -> GenericType1:
        """

        :param key:
        :type key: int
        :return:
        :rtype: GenericType1
        """
        ...

    @typing.overload
    def __getitem__(self, key: slice) -> tuple[GenericType1]:
        """

        :param key:
        :type key: slice
        :return:
        :rtype: tuple[GenericType1]
        """
        ...

    def __getitem__(self, key: int | slice) -> GenericType1 | tuple[GenericType1]:
        """

        :param key:
        :type key: int | slice
        :return:
        :rtype: GenericType1 | tuple[GenericType1]
        """
        ...

    @typing.overload
    def __setitem__(self, key: int, value: GenericType1):
        """

        :param key:
        :type key: int
        :param value:
        :type value: GenericType1
        """
        ...

    @typing.overload
    def __setitem__(self, key: slice, value: tuple[GenericType1]):
        """

        :param key:
        :type key: slice
        :param value:
        :type value: tuple[GenericType1]
        """
        ...

    def __setitem__(self, key: int | slice, value: GenericType1 | tuple[GenericType1]):
        """

        :param key:
        :type key: int | slice
        :param value:
        :type value: GenericType1 | tuple[GenericType1]
        """
        ...

    def __delitem__(self, key: int | slice):
        """

        :param key:
        :type key: int | slice
        """
        ...

    def __iter__(self) -> collections.abc.Iterator[GenericType1]:
        """

        :return:
        :rtype: collections.abc.Iterator[GenericType1]
        """
        ...

    def __next__(self) -> GenericType1:
        """

        :return:
        :rtype: GenericType1
        """
        ...

    def __len__(self) -> int:
        """

        :return:
        :rtype: int
        """
        ...

class AOV(bpy_struct):
    is_valid: bool
    """ Is the name of the AOV conflicting

    :type: bool
    """

    name: str
    """ Name of the AOV

    :type: str
    """

    type: str
    """ Data type of the AOV

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AOVs(bpy_prop_collection[AOV], bpy_struct):
    """Collection of AOVs"""

    def add(self) -> AOV:
        """add

        :return: Newly created AOV
        :rtype: AOV
        """
        ...

    def remove(self, aov: AOV):
        """Remove an AOV

        :param aov: AOV to remove
        :type aov: AOV
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ActionFCurves(bpy_prop_collection[FCurve], bpy_struct):
    """Collection of action F-Curves"""

    def new(
        self,
        data_path: str | typing.Any,
        index: typing.Any | None = 0,
        action_group: str | typing.Any = "",
    ) -> FCurve:
        """Add an F-Curve to the action

        :param data_path: Data Path, F-Curve data path to use
        :type data_path: str | typing.Any
        :param index: Index, Array index
        :type index: typing.Any | None
        :param action_group: Action Group, Acton group to add this F-Curve into
        :type action_group: str | typing.Any
        :return: Newly created F-Curve
        :rtype: FCurve
        """
        ...

    def find(self, data_path: str | typing.Any, index: typing.Any | None = 0) -> FCurve:
        """Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the action.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str | typing.Any
        :param index: Index, Array index
        :type index: typing.Any | None
        :return: The found F-Curve, or None if it doesn't exist
        :rtype: FCurve
        """
        ...

    def remove(self, fcurve: FCurve):
        """Remove F-Curve

        :param fcurve: F-Curve to remove
        :type fcurve: FCurve
        """
        ...

    def clear(self):
        """Remove all F-Curves"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ActionGroup(bpy_struct):
    """Groups of F-Curves"""

    channels: bpy_prop_collection[FCurve]
    """ F-Curves in this group

    :type: bpy_prop_collection[FCurve]
    """

    color_set: str
    """ Custom color set to use

    :type: str
    """

    colors: ThemeBoneColorSet
    """ Copy of the colors associated with the group's color set

    :type: ThemeBoneColorSet
    """

    is_custom_color_set: bool
    """ Color set is user-defined instead of a fixed theme color set

    :type: bool
    """

    lock: bool
    """ Action group is locked

    :type: bool
    """

    mute: bool
    """ Action group is muted

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    select: bool
    """ Action group is selected

    :type: bool
    """

    show_expanded: bool
    """ Action group is expanded except in graph editor

    :type: bool
    """

    show_expanded_graph: bool
    """ Action group is expanded in graph editor

    :type: bool
    """

    use_pin: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ActionGroups(bpy_prop_collection[ActionGroup], bpy_struct):
    """Collection of action groups"""

    def new(self, name: str | typing.Any) -> ActionGroup:
        """Create a new action group and add it to the action

        :param name: New name for the action group
        :type name: str | typing.Any
        :return: Newly created action group
        :rtype: ActionGroup
        """
        ...

    def remove(self, action_group: ActionGroup):
        """Remove action group

        :param action_group: Action group to remove
        :type action_group: ActionGroup
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ActionPoseMarkers(bpy_prop_collection[TimelineMarker], bpy_struct):
    """Collection of timeline markers"""

    active: TimelineMarker | None
    """ Active pose marker for this action

    :type: TimelineMarker | None
    """

    active_index: int | None
    """ Index of active pose marker

    :type: int | None
    """

    def new(self, name: str | typing.Any) -> TimelineMarker:
        """Add a pose marker to the action

        :param name: New name for the marker (not unique)
        :type name: str | typing.Any
        :return: Newly created marker
        :rtype: TimelineMarker
        """
        ...

    def remove(self, marker: TimelineMarker):
        """Remove a timeline marker

        :param marker: Timeline marker to remove
        :type marker: TimelineMarker
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Addon(bpy_struct):
    """Python add-ons to be loaded automatically"""

    module: str
    """ Module name

    :type: str
    """

    preferences: AddonPreferences
    """ 

    :type: AddonPreferences
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AddonPreferences(bpy_struct):
    bl_idname: str
    """ 

    :type: str
    """

    layout: UILayout
    """ 

    :type: UILayout
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Addons(bpy_prop_collection[Addon], bpy_struct):
    """Collection of add-ons"""

    @classmethod
    def new(cls) -> Addon:
        """Add a new add-on

        :return: Add-on data
        :rtype: Addon
        """
        ...

    @classmethod
    def remove(cls, addon: Addon):
        """Remove add-on

        :param addon: Add-on to remove
        :type addon: Addon
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AnimData(bpy_struct):
    """Animation data for data-block"""

    action: Action
    """ Active Action for this data-block

    :type: Action
    """

    action_blend_type: str
    """ Method used for combining Active Action's result with result of NLA stack

    :type: str
    """

    action_extrapolation: str
    """ Action to take for gaps past the Active Action's range (when evaluating with NLA)

    :type: str
    """

    action_influence: float
    """ Amount the Active Action contributes to the result of the NLA stack

    :type: float
    """

    action_tweak_storage: Action
    """ Slot to temporarily hold the main action while in tweak mode

    :type: Action
    """

    drivers: AnimDataDrivers
    """ The Drivers/Expressions for this data-block

    :type: AnimDataDrivers
    """

    nla_tracks: NlaTracks
    """ NLA Tracks (i.e. Animation Layers)

    :type: NlaTracks
    """

    use_nla: bool
    """ NLA stack is evaluated when evaluating this block

    :type: bool
    """

    use_pin: bool
    """ 

    :type: bool
    """

    use_tweak_mode: bool
    """ Whether to enable or disable tweak mode in NLA

    :type: bool
    """

    def nla_tweak_strip_time_to_scene(
        self, frame: float | None, invert: bool | typing.Any | None = False
    ) -> float:
        """Convert a time value from the local time of the tweaked strip to scene time, exactly as done by built-in key editing tools. Returns the input time unchanged if not tweaking.

        :param frame: Input time
        :type frame: float | None
        :param invert: Invert, Convert scene time to action time
        :type invert: bool | typing.Any | None
        :return: Converted time
        :rtype: float
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AnimDataDrivers(bpy_prop_collection[FCurve], bpy_struct):
    """Collection of Driver F-Curves"""

    def new(self, data_path: str | typing.Any, index: typing.Any | None = 0) -> FCurve:
        """new

        :param data_path: Data Path, F-Curve data path to use
        :type data_path: str | typing.Any
        :param index: Index, Array index
        :type index: typing.Any | None
        :return: Newly Driver F-Curve
        :rtype: FCurve
        """
        ...

    def remove(self, driver: FCurve):
        """remove

        :param driver:
        :type driver: FCurve
        """
        ...

    def from_existing(self, src_driver: FCurve | None = None) -> FCurve:
        """Add a new driver given an existing one

        :param src_driver: Existing Driver F-Curve to use as template for a new one
        :type src_driver: FCurve | None
        :return: New Driver F-Curve
        :rtype: FCurve
        """
        ...

    def find(self, data_path: str | typing.Any, index: typing.Any | None = 0) -> FCurve:
        """Find a driver F-Curve. Note that this function performs a linear scan of all driver F-Curves.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str | typing.Any
        :param index: Index, Array index
        :type index: typing.Any | None
        :return: The found F-Curve, or None if it doesn't exist
        :rtype: FCurve
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AnimViz(bpy_struct):
    """Settings for the visualization of motion"""

    motion_path: AnimVizMotionPaths
    """ Motion Path settings for visualization

    :type: AnimVizMotionPaths
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AnimVizMotionPaths(bpy_struct):
    """Motion Path settings for animation visualization"""

    bake_in_camera_space: bool
    """ Motion path points will be baked into the camera space of the active camera. This means they will only look right when looking through that camera. Switching cameras using markers is not supported

    :type: bool
    """

    bake_location: str
    """ When calculating Bone Paths, use Head or Tips

    :type: str
    """

    frame_after: int
    """ Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_before: int
    """ Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_end: int
    """ End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_start: int
    """ Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)

    :type: int
    """

    frame_step: int
    """ Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)

    :type: int
    """

    has_motion_paths: bool
    """ Are there any bone paths that will need updating (read-only)

    :type: bool
    """

    range: str
    """ Type of range to calculate for Motion Paths

    :type: str
    """

    show_frame_numbers: bool
    """ Show frame numbers on Motion Paths

    :type: bool
    """

    show_keyframe_action_all: bool
    """ For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)

    :type: bool
    """

    show_keyframe_highlight: bool
    """ Emphasize position of keyframes on Motion Paths

    :type: bool
    """

    show_keyframe_numbers: bool
    """ Show frame numbers of Keyframes on Motion Paths

    :type: bool
    """

    type: str
    """ Type of range to show for Motion Paths

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AnyType(bpy_struct):
    """RNA type used for pointers to any possible data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Area(bpy_struct):
    """Area in a subdivided screen, containing an editor"""

    height: int
    """ Area height

    :type: int
    """

    regions: bpy_prop_collection[Region]
    """ Regions this area is subdivided in

    :type: bpy_prop_collection[Region]
    """

    show_menus: bool
    """ Show menus in the header

    :type: bool
    """

    spaces: AreaSpaces
    """ Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)

    :type: AreaSpaces
    """

    type: str
    """ Current editor type for this area

    :type: str
    """

    ui_type: str
    """ Current editor type for this area

    :type: str
    """

    width: int
    """ Area width

    :type: int
    """

    x: int
    """ The window relative vertical location of the area

    :type: int
    """

    y: int
    """ The window relative horizontal location of the area

    :type: int
    """

    def tag_redraw(self):
        """tag_redraw"""
        ...

    def header_text_set(self, text: str | None):
        """Set the header status text

        :param text: Text, New string for the header, None clears the text
        :type text: str | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AreaSpaces(bpy_prop_collection[Space], bpy_struct):
    """Collection of spaces"""

    active: Space
    """ Space currently being displayed in this area

    :type: Space
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArmatureBones(bpy_prop_collection[Bone], bpy_struct):
    """Collection of armature bones"""

    active: Bone | None
    """ Armature's active bone

    :type: Bone | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArmatureConstraintTargets(bpy_prop_collection[ConstraintTargetBone], bpy_struct):
    """Collection of target bones and weights"""

    def new(self) -> ConstraintTargetBone:
        """Add a new target to the constraint

        :return: New target bone
        :rtype: ConstraintTargetBone
        """
        ...

    def remove(self, target: ConstraintTargetBone):
        """Delete target from the constraint

        :param target: Target to remove
        :type target: ConstraintTargetBone
        """
        ...

    def clear(self):
        """Delete all targets from object"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArmatureEditBones(bpy_prop_collection[EditBone], bpy_struct):
    """Collection of armature edit bones"""

    active: EditBone | None
    """ Armatures active edit bone

    :type: EditBone | None
    """

    def new(self, name: str | typing.Any) -> EditBone:
        """Add a new bone

        :param name: New name for the bone
        :type name: str | typing.Any
        :return: Newly created edit bone
        :rtype: EditBone
        """
        ...

    def remove(self, bone: EditBone):
        """Remove an existing bone from the armature

        :param bone: EditBone to remove
        :type bone: EditBone
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetCatalogPath(bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetLibraryCollection(bpy_prop_collection[UserAssetLibrary], bpy_struct):
    """Collection of user asset libraries"""

    @classmethod
    def new(
        cls, name: str | typing.Any = "", directory: str | typing.Any = ""
    ) -> UserAssetLibrary:
        """Add a new Asset Library

        :param name: Name
        :type name: str | typing.Any
        :param directory: Directory
        :type directory: str | typing.Any
        :return: Newly added asset library
        :rtype: UserAssetLibrary
        """
        ...

    @classmethod
    def remove(cls, library: UserAssetLibrary):
        """Remove an Asset Library

        :param library:
        :type library: UserAssetLibrary
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetLibraryReference(bpy_struct):
    """Identifier to refer to the asset library"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetMetaData(bpy_struct):
    """Additional data stored for an asset data-block"""

    active_tag: int | None
    """ Index of the tag set for editing

    :type: int | None
    """

    author: str
    """ Name of the creator of the asset

    :type: str
    """

    catalog_id: str
    """ Identifier for the asset's catalog, used by Blender to look up the asset's catalog path. Must be a UUID according to RFC4122

    :type: str
    """

    catalog_simple_name: str
    """ Simple name of the asset's catalog, for debugging and data recovery purposes

    :type: str
    """

    copyright: str
    """ Copyright notice for this asset. An empty copyright notice does not necessarily indicate that this is copyright-free. Contact the author if any clarification is needed

    :type: str
    """

    description: str
    """ A description of the asset to be displayed for the user

    :type: str
    """

    license: str
    """ The type of license this asset is distributed under. An empty license name does not necessarily indicate that this is free of licensing terms. Contact the author if any clarification is needed

    :type: str
    """

    tags: AssetTags
    """ Custom tags (name tokens) for the asset, used for filtering and general asset management

    :type: AssetTags
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetRepresentation(bpy_struct):
    """Information about an entity that makes it possible for the asset system to deal with the entity as asset"""

    full_library_path: str
    """ Absolute path to the .blend file containing this asset

    :type: str
    """

    full_path: str
    """ Absolute path to the .blend file containing this asset extended with the path of the asset inside the file

    :type: str
    """

    id_type: str
    """ The type of the data-block, if the asset represents one ('NONE' otherwise)

    :type: str
    """

    local_id: ID
    """ The local data-block this asset represents; only valid if that is a data-block in this file

    :type: ID
    """

    metadata: AssetMetaData
    """ Additional information about the asset

    :type: AssetMetaData
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetShelf(bpy_struct):
    """Regions for quick access to assets"""

    asset_library_reference: str
    """ Choose the asset library to display assets from

    :type: str
    """

    bl_idname: str
    """ If this is set, the asset gets a custom ID, otherwise it takes the name of the class used to define the asset (for example, if the class name is "OBJECT_AST_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_AST_hello")

    :type: str
    """

    bl_options: set[str]
    """ Options for this asset shelf type

    :type: set[str]
    """

    bl_space_type: str
    """ The space where the asset shelf is going to be used in

    :type: str
    """

    preview_size: int
    """ Size of the asset preview thumbnails in pixels

    :type: int
    """

    search_filter: str
    """ Filter assets by name

    :type: str
    """

    show_names: bool
    """ Show the asset name together with the preview. Otherwise only the preview will be visible

    :type: bool
    """

    @classmethod
    def poll(cls, context: Context | None) -> bool:
        """If this method returns a non-null output, the asset shelf will be visible

        :param context:
        :type context: Context | None
        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def asset_poll(cls, asset: AssetRepresentation | None) -> bool:
        """Determine if an asset should be visible in the asset shelf. If this method returns a non-null output, the asset will be visible

        :param asset:
        :type asset: AssetRepresentation | None
        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def draw_context_menu(
        cls,
        context: Context | None,
        asset: AssetRepresentation | None,
        layout: UILayout | None,
    ):
        """Draw UI elements into the context menu UI layout displayed on right click

        :param context:
        :type context: Context | None
        :param asset:
        :type asset: AssetRepresentation | None
        :param layout:
        :type layout: UILayout | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetTag(bpy_struct):
    """User defined tag (name token)"""

    name: str
    """ The identifier that makes up this tag

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetTags(bpy_prop_collection[AssetTag], bpy_struct):
    """Collection of custom asset tags"""

    def new(
        self, name: str | typing.Any, skip_if_exists: bool | typing.Any | None = False
    ) -> AssetTag:
        """Add a new tag to this asset

        :param name: Name
        :type name: str | typing.Any
        :param skip_if_exists: Skip if Exists, Do not add a new tag if one of the same type already exists
        :type skip_if_exists: bool | typing.Any | None
        :return: New tag
        :rtype: AssetTag
        """
        ...

    def remove(self, tag: AssetTag):
        """Remove an existing tag from this asset

        :param tag: Removed tag
        :type tag: AssetTag
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetWeakReference(bpy_struct):
    """Weak reference to some asset"""

    asset_library_identifier: str
    """ 

    :type: str
    """

    asset_library_type: str
    """ 

    :type: str
    """

    relative_asset_identifier: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Attribute(bpy_struct):
    """Geometry attribute"""

    data_type: str
    """ Type of data stored in attribute

    :type: str
    """

    domain: str
    """ Domain of the Attribute

    :type: str
    """

    is_internal: bool
    """ The attribute is meant for internal use by Blender

    :type: bool
    """

    is_required: bool
    """ Whether the attribute can be removed or renamed

    :type: bool
    """

    name: str
    """ Name of the Attribute

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AttributeGroup(bpy_prop_collection[Attribute], bpy_struct):
    """Group of geometry attributes"""

    active: Attribute | None
    """ Active attribute

    :type: Attribute | None
    """

    active_color: Attribute | None
    """ Active color attribute for display and editing

    :type: Attribute | None
    """

    active_color_index: int | None
    """ Active color attribute index

    :type: int | None
    """

    active_color_name: str
    """ The name of the active color attribute for display and editing

    :type: str
    """

    active_index: int | None
    """ Active attribute index

    :type: int | None
    """

    default_color_name: str
    """ The name of the default color attribute used as a fallback for rendering

    :type: str
    """

    render_color_index: int
    """ The index of the color attribute used as a fallback for rendering

    :type: int
    """

    def new(
        self, name: str | typing.Any, type: str | None, domain: str | None
    ) -> Attribute:
        """Add attribute to geometry

        :param name: Name, Name of geometry attribute
        :type name: str | typing.Any
        :param type: Type, Attribute type
        :type type: str | None
        :param domain: Domain, Type of element that attribute is stored on
        :type domain: str | None
        :return: New geometry attribute
        :rtype: Attribute
        """
        ...

    def remove(self, attribute: Attribute):
        """Remove attribute from geometry

        :param attribute: Geometry Attribute
        :type attribute: Attribute
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BakeSettings(bpy_struct):
    """Bake data for a Scene data-block"""

    cage_extrusion: float
    """ Inflate the active object by the specified distance for baking. This helps matching to points nearer to the outside of the selected object meshes

    :type: float
    """

    cage_object: Object
    """ Object to use as cage instead of calculating the cage from the active object with cage extrusion

    :type: Object
    """

    filepath: str
    """ Image filepath to use when saving externally

    :type: str
    """

    height: int
    """ Vertical dimension of the baking map

    :type: int
    """

    image_settings: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    margin: int
    """ Extends the baked result as a post process filter

    :type: int
    """

    margin_type: str
    """ Algorithm to extend the baked result

    :type: str
    """

    max_ray_distance: float
    """ The maximum ray distance for matching points between the active and selected objects. If zero, there is no limit

    :type: float
    """

    normal_b: str
    """ Axis to bake in blue channel

    :type: str
    """

    normal_g: str
    """ Axis to bake in green channel

    :type: str
    """

    normal_r: str
    """ Axis to bake in red channel

    :type: str
    """

    normal_space: str
    """ Choose normal space for baking

    :type: str
    """

    pass_filter: typing.Any
    """ Passes to include in the active baking pass

    :type: typing.Any
    """

    save_mode: str
    """ Where to save baked image textures

    :type: str
    """

    target: str
    """ Where to output the baked map

    :type: str
    """

    use_automatic_name: bool
    """ Automatically name the output file with the pass type (external only)

    :type: bool
    """

    use_cage: bool
    """ Cast rays to active object from a cage

    :type: bool
    """

    use_clear: bool
    """ Clear Images before baking (internal only)

    :type: bool
    """

    use_pass_color: bool
    """ Color the pass

    :type: bool
    """

    use_pass_diffuse: bool
    """ Add diffuse contribution

    :type: bool
    """

    use_pass_direct: bool
    """ Add direct lighting contribution

    :type: bool
    """

    use_pass_emit: bool
    """ Add emission contribution

    :type: bool
    """

    use_pass_glossy: bool
    """ Add glossy contribution

    :type: bool
    """

    use_pass_indirect: bool
    """ Add indirect lighting contribution

    :type: bool
    """

    use_pass_transmission: bool
    """ Add transmission contribution

    :type: bool
    """

    use_selected_to_active: bool
    """ Bake shading on the surface of selected objects to the active object

    :type: bool
    """

    use_split_materials: bool
    """ Split external images per material (external only)

    :type: bool
    """

    view_from: str
    """ Source of reflection ray directions

    :type: str
    """

    width: int
    """ Horizontal dimension of the baking map

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BezierSplinePoint(bpy_struct):
    """Bézier curve point with two handles"""

    co: mathutils.Vector
    """ Coordinates of the control point

    :type: mathutils.Vector
    """

    handle_left: mathutils.Vector
    """ Coordinates of the first handle

    :type: mathutils.Vector
    """

    handle_left_type: str
    """ Handle types

    :type: str
    """

    handle_right: mathutils.Vector
    """ Coordinates of the second handle

    :type: mathutils.Vector
    """

    handle_right_type: str
    """ Handle types

    :type: str
    """

    hide: bool
    """ Visibility status

    :type: bool
    """

    radius: float
    """ Radius for beveling

    :type: float
    """

    select_control_point: bool
    """ Control point selection status

    :type: bool
    """

    select_left_handle: bool
    """ Handle 1 selection status

    :type: bool
    """

    select_right_handle: bool
    """ Handle 2 selection status

    :type: bool
    """

    tilt: float
    """ Tilt in 3D View

    :type: float
    """

    weight_softbody: float
    """ Softbody goal weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendData(bpy_struct):
    """Main data structure representing a .blend file and all its data-blocks"""

    actions: BlendDataActions
    """ Action data-blocks

    :type: BlendDataActions
    """

    armatures: BlendDataArmatures
    """ Armature data-blocks

    :type: BlendDataArmatures
    """

    brushes: BlendDataBrushes
    """ Brush data-blocks

    :type: BlendDataBrushes
    """

    cache_files: BlendDataCacheFiles
    """ Cache Files data-blocks

    :type: BlendDataCacheFiles
    """

    cameras: BlendDataCameras
    """ Camera data-blocks

    :type: BlendDataCameras
    """

    collections: BlendDataCollections
    """ Collection data-blocks

    :type: BlendDataCollections
    """

    curves: BlendDataCurves
    """ Curve data-blocks

    :type: BlendDataCurves
    """

    filepath: str
    """ Path to the .blend file

    :type: str
    """

    fonts: BlendDataFonts
    """ Vector font data-blocks

    :type: BlendDataFonts
    """

    grease_pencils: BlendDataGreasePencils
    """ Grease Pencil data-blocks

    :type: BlendDataGreasePencils
    """

    hair_curves: BlendDataHairCurves
    """ Hair curve data-blocks

    :type: BlendDataHairCurves
    """

    images: BlendDataImages
    """ Image data-blocks

    :type: BlendDataImages
    """

    is_dirty: bool
    """ Have recent edits been saved to disk

    :type: bool
    """

    is_saved: bool
    """ Has the current session been saved to disk as a .blend file

    :type: bool
    """

    lattices: BlendDataLattices
    """ Lattice data-blocks

    :type: BlendDataLattices
    """

    libraries: BlendDataLibraries
    """ Library data-blocks

    :type: BlendDataLibraries
    """

    lightprobes: BlendDataProbes
    """ Light Probe data-blocks

    :type: BlendDataProbes
    """

    lights: BlendDataLights
    """ Light data-blocks

    :type: BlendDataLights
    """

    linestyles: BlendDataLineStyles
    """ Line Style data-blocks

    :type: BlendDataLineStyles
    """

    masks: BlendDataMasks
    """ Masks data-blocks

    :type: BlendDataMasks
    """

    materials: BlendDataMaterials
    """ Material data-blocks

    :type: BlendDataMaterials
    """

    meshes: BlendDataMeshes
    """ Mesh data-blocks

    :type: BlendDataMeshes
    """

    metaballs: BlendDataMetaBalls
    """ Metaball data-blocks

    :type: BlendDataMetaBalls
    """

    movieclips: BlendDataMovieClips
    """ Movie Clip data-blocks

    :type: BlendDataMovieClips
    """

    node_groups: BlendDataNodeTrees
    """ Node group data-blocks

    :type: BlendDataNodeTrees
    """

    objects: BlendDataObjects
    """ Object data-blocks

    :type: BlendDataObjects
    """

    paint_curves: BlendDataPaintCurves
    """ Paint Curves data-blocks

    :type: BlendDataPaintCurves
    """

    palettes: BlendDataPalettes
    """ Palette data-blocks

    :type: BlendDataPalettes
    """

    particles: BlendDataParticles
    """ Particle data-blocks

    :type: BlendDataParticles
    """

    pointclouds: BlendDataPointClouds
    """ Point cloud data-blocks

    :type: BlendDataPointClouds
    """

    scenes: BlendDataScenes
    """ Scene data-blocks

    :type: BlendDataScenes
    """

    screens: BlendDataScreens
    """ Screen data-blocks

    :type: BlendDataScreens
    """

    shape_keys: bpy_prop_collection[Key]
    """ Shape Key data-blocks

    :type: bpy_prop_collection[Key]
    """

    sounds: BlendDataSounds
    """ Sound data-blocks

    :type: BlendDataSounds
    """

    speakers: BlendDataSpeakers
    """ Speaker data-blocks

    :type: BlendDataSpeakers
    """

    texts: BlendDataTexts
    """ Text data-blocks

    :type: BlendDataTexts
    """

    textures: BlendDataTextures
    """ Texture data-blocks

    :type: BlendDataTextures
    """

    use_autopack: bool
    """ Automatically pack all external data into .blend file

    :type: bool
    """

    version: bpy_prop_array[int]
    """ File format version the .blend file was saved with

    :type: bpy_prop_array[int]
    """

    volumes: BlendDataVolumes
    """ Volume data-blocks

    :type: BlendDataVolumes
    """

    window_managers: BlendDataWindowManagers
    """ Window manager data-blocks

    :type: BlendDataWindowManagers
    """

    workspaces: BlendDataWorkSpaces
    """ Workspace data-blocks

    :type: BlendDataWorkSpaces
    """

    worlds: BlendDataWorlds
    """ World data-blocks

    :type: BlendDataWorlds
    """

    def batch_remove(self, ids):
        """Remove (delete) several IDs at once.WARNING: Considered experimental feature currently.Note that this function is quicker than individual calls to `remove()` (from `bpy.types.BlendData`
        ID collections), but less safe/versatile (it can break Blender, e.g. by removing all scenes...).

                :param ids: Iterables of IDs (types can be mixed).
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    def orphans_purge(self):
        """Remove (delete) all IDs with no user.

        :return: The number of deleted IDs.
        """
        ...

    def temp_data(self, filepath: bytes | str | None = None) -> BlendData:
        """A context manager that temporarily creates blender file data.

        :param filepath: The file path for the newly temporary data. When None, the path of the currently open file is used.
        :type filepath: bytes | str | None
        :return: Blend file data which is freed once the context exists.
        :rtype: BlendData
        """
        ...

    def user_map(
        self,
        subset: collections.abc.Sequence | None,
        key_types: set[str] | None,
        value_types: set[str] | None,
    ) -> dict:
        """Returns a mapping of all ID data-blocks in current bpy.data to a set of all datablocks using them.For list of valid set members for key_types & value_types, see: `bpy.types.KeyingSetPath.id_type`.

        :param subset: When passed, only these data-blocks and their users will be included as keys/values in the map.
        :type subset: collections.abc.Sequence | None
        :param key_types: Filter the keys mapped by ID types.
        :type key_types: set[str] | None
        :param value_types: Filter the values in the set by ID types.
        :type value_types: set[str] | None
        :return: dictionary of `bpy.types.ID` instances, with sets of ID's as their values.
        :rtype: dict
        """
        ...

class BlendDataActions(bpy_prop_collection[Action], bpy_struct):
    """Collection of actions"""

    def new(self, name: str | typing.Any) -> Action:
        """Add a new action to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New action data-block
        :rtype: Action
        """
        ...

    def remove(
        self,
        action: Action,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove an action from the current blendfile

        :param action: Action to remove
        :type action: Action
        :param do_unlink: Unlink all usages of this action before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this action
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this action
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataArmatures(bpy_prop_collection[Armature], bpy_struct):
    """Collection of armatures"""

    def new(self, name: str | typing.Any) -> Armature:
        """Add a new armature to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New armature data-block
        :rtype: Armature
        """
        ...

    def remove(
        self,
        armature: Armature,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove an armature from the current blendfile

        :param armature: Armature to remove
        :type armature: Armature
        :param do_unlink: Unlink all usages of this armature before deleting it (WARNING: will also delete objects instancing that armature data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this armature data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this armature data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataBrushes(bpy_prop_collection[Brush], bpy_struct):
    """Collection of brushes"""

    def new(self, name: str | typing.Any, mode: str | None = "TEXTURE_PAINT") -> Brush:
        """Add a new brush to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param mode: Paint Mode for the new brush
        :type mode: str | None
        :return: New brush data-block
        :rtype: Brush
        """
        ...

    def remove(
        self,
        brush: Brush,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a brush from the current blendfile

        :param brush: Brush to remove
        :type brush: Brush
        :param do_unlink: Unlink all usages of this brush before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this brush
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this brush
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    def create_gpencil_data(self, brush: Brush):
        """Add grease pencil brush settings

        :param brush: Brush
        :type brush: Brush
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataCacheFiles(bpy_prop_collection[CacheFile], bpy_struct):
    """Collection of cache files"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataCameras(bpy_prop_collection[Camera], bpy_struct):
    """Collection of cameras"""

    def new(self, name: str | typing.Any) -> Camera:
        """Add a new camera to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New camera data-block
        :rtype: Camera
        """
        ...

    def remove(
        self,
        camera: Camera,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a camera from the current blendfile

        :param camera: Camera to remove
        :type camera: Camera
        :param do_unlink: Unlink all usages of this camera before deleting it (WARNING: will also delete objects instancing that camera data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this camera
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this camera
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataCollections(bpy_prop_collection[Collection], bpy_struct):
    """Collection of collections"""

    def new(self, name: str | typing.Any) -> Collection:
        """Add a new collection to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New collection data-block
        :rtype: Collection
        """
        ...

    def remove(
        self,
        collection: Collection,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a collection from the current blendfile

        :param collection: Collection to remove
        :type collection: Collection
        :param do_unlink: Unlink all usages of this collection before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this collection
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this collection
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataCurves(bpy_prop_collection[Curve], bpy_struct):
    """Collection of curves"""

    def new(self, name: str | typing.Any, type: str | None) -> Curve:
        """Add a new curve to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param type: Type, The type of curve to add
        :type type: str | None
        :return: New curve data-block
        :rtype: Curve
        """
        ...

    def remove(
        self,
        curve: Curve,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a curve from the current blendfile

        :param curve: Curve to remove
        :type curve: Curve
        :param do_unlink: Unlink all usages of this curve before deleting it (WARNING: will also delete objects instancing that curve data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this curve data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this curve data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataFonts(bpy_prop_collection[VectorFont], bpy_struct):
    """Collection of fonts"""

    def load(
        self,
        filepath: str | typing.Any,
        check_existing: bool | typing.Any | None = False,
    ) -> VectorFont:
        """Load a new font into the main database

        :param filepath: path of the font to load
        :type filepath: str | typing.Any
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | typing.Any | None
        :return: New font data-block
        :rtype: VectorFont
        """
        ...

    def remove(
        self,
        vfont: VectorFont,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a font from the current blendfile

        :param vfont: Font to remove
        :type vfont: VectorFont
        :param do_unlink: Unlink all usages of this font before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this font
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this font
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataGreasePencils(bpy_prop_collection[GreasePencil], bpy_struct):
    """Collection of grease pencils"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    def new(self, name: str | typing.Any) -> GreasePencil:
        """Add a new grease pencil datablock to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New grease pencil data-block
        :rtype: GreasePencil
        """
        ...

    def remove(
        self,
        grease_pencil: GreasePencil,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a grease pencil instance from the current blendfile

        :param grease_pencil: Grease Pencil to remove
        :type grease_pencil: GreasePencil
        :param do_unlink: Unlink all usages of this grease pencil before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this grease pencil
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this grease pencil
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataHairCurves(bpy_prop_collection[Curves], bpy_struct):
    """Collection of hair curves"""

    def new(self, name: str | typing.Any) -> Curves:
        """Add a new hair to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New curves data-block
        :rtype: Curves
        """
        ...

    def remove(
        self,
        curves: Curves,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a curves data-block from the current blendfile

        :param curves: Curves data-block to remove
        :type curves: Curves
        :param do_unlink: Unlink all usages of this curves before deleting it (WARNING: will also delete objects instancing that curves data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this curves data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this curves data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataImages(bpy_prop_collection[Image], bpy_struct):
    """Collection of images"""

    def new(
        self,
        name: str | typing.Any,
        width: int | None,
        height: int | None,
        alpha: bool | typing.Any | None = False,
        float_buffer: bool | typing.Any | None = False,
        stereo3d: bool | typing.Any | None = False,
        is_data: bool | typing.Any | None = False,
        tiled: bool | typing.Any | None = False,
    ) -> Image:
        """Add a new image to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param width: Width of the image
        :type width: int | None
        :param height: Height of the image
        :type height: int | None
        :param alpha: Alpha, Use alpha channel
        :type alpha: bool | typing.Any | None
        :param float_buffer: Float Buffer, Create an image with floating-point color
        :type float_buffer: bool | typing.Any | None
        :param stereo3d: Stereo 3D, Create left and right views
        :type stereo3d: bool | typing.Any | None
        :param is_data: Is Data, Create image with non-color data color space
        :type is_data: bool | typing.Any | None
        :param tiled: Tiled, Create a tiled image
        :type tiled: bool | typing.Any | None
        :return: New image data-block
        :rtype: Image
        """
        ...

    def load(
        self,
        filepath: str | typing.Any,
        check_existing: bool | typing.Any | None = False,
    ) -> Image:
        """Load a new image into the main database

        :param filepath: Path of the file to load
        :type filepath: str | typing.Any
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | typing.Any | None
        :return: New image data-block
        :rtype: Image
        """
        ...

    def remove(
        self,
        image: Image,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove an image from the current blendfile

        :param image: Image to remove
        :type image: Image
        :param do_unlink: Unlink all usages of this image before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this image
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this image
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataLattices(bpy_prop_collection[Lattice], bpy_struct):
    """Collection of lattices"""

    def new(self, name: str | typing.Any) -> Lattice:
        """Add a new lattice to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New lattice data-block
        :rtype: Lattice
        """
        ...

    def remove(
        self,
        lattice: Lattice,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a lattice from the current blendfile

        :param lattice: Lattice to remove
        :type lattice: Lattice
        :param do_unlink: Unlink all usages of this lattice before deleting it (WARNING: will also delete objects instancing that lattice data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this lattice data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this lattice data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataLibraries(bpy_prop_collection[Library], bpy_struct):
    """Collection of libraries"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    def remove(
        self,
        library: Library,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a library from the current blendfile

        :param library: Library to remove
        :type library: Library
        :param do_unlink: Unlink all usages of this library before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this library
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this library
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    def load(
        self,
        filepath: bytes | str | None,
        link: bool | None = False,
        relative: bool | None = False,
        assets_only: bool | None = False,
        create_liboverrides: bool | None = False,
        reuse_liboverrides: bool | None = False,
        create_liboverrides_runtime: bool | None = False,
    ):
        """Returns a context manager which exposes 2 library objects on entering.
        Each object has attributes matching bpy.data which are lists of strings to be linked.

                :param filepath: The path to a blend file.
                :type filepath: bytes | str | None
                :param link: When False reference to the original file is lost.
                :type link: bool | None
                :param relative: When True the path is stored relative to the open blend file.
                :type relative: bool | None
                :param assets_only: If True, only list data-blocks marked as assets.
                :type assets_only: bool | None
                :param create_liboverrides: If True and link is True, liboverrides will
        be created for linked data.
                :type create_liboverrides: bool | None
                :param reuse_liboverrides: If True and create_liboverride is True,
        search for existing liboverride first.
                :type reuse_liboverrides: bool | None
                :param create_liboverrides_runtime: If True and create_liboverride is True,
        create (or search for existing) runtime liboverride.
                :type create_liboverrides_runtime: bool | None
        """
        ...

    def write(
        self,
        filepath: bytes | str | None,
        datablocks: set | None,
        path_remap: str | None = False,
        fake_user: bool | None = False,
        compress: bool | None = False,
    ):
        """Write data-blocks into a blend file.

                :param filepath: The path to write the blend-file.
                :type filepath: bytes | str | None
                :param datablocks: set of data-blocks (`bpy.types.ID` instances).
                :type datablocks: set | None
                :param path_remap: Optionally remap paths when writing the file:

        NONE No path manipulation (default).

        RELATIVE Remap paths that are already relative to the new location.

        RELATIVE_ALL Remap all paths to be relative to the new location.

        ABSOLUTE Make all paths absolute on writing.
                :type path_remap: str | None
                :param fake_user: When True, data-blocks will be written with fake-user flag enabled.
                :type fake_user: bool | None
                :param compress: When True, write a compressed blend file.
                :type compress: bool | None
        """
        ...

class BlendDataLights(bpy_prop_collection[Light], bpy_struct):
    """Collection of lights"""

    def new(self, name: str | typing.Any, type: str | None) -> Light:
        """Add a new light to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param type: Type, The type of light to add
        :type type: str | None
        :return: New light data-block
        :rtype: Light
        """
        ...

    def remove(
        self,
        light: Light,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a light from the current blendfile

        :param light: Light to remove
        :type light: Light
        :param do_unlink: Unlink all usages of this light before deleting it (WARNING: will also delete objects instancing that light data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this light data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this light data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataLineStyles(bpy_prop_collection[FreestyleLineStyle], bpy_struct):
    """Collection of line styles"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    def new(self, name: str | typing.Any) -> FreestyleLineStyle:
        """Add a new line style instance to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New line style data-block
        :rtype: FreestyleLineStyle
        """
        ...

    def remove(
        self,
        linestyle: FreestyleLineStyle,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a line style instance from the current blendfile

        :param linestyle: Line style to remove
        :type linestyle: FreestyleLineStyle
        :param do_unlink: Unlink all usages of this line style before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this line style
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this line style
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataMasks(bpy_prop_collection[Mask], bpy_struct):
    """Collection of masks"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    def new(self, name: str | typing.Any) -> Mask:
        """Add a new mask with a given name to the main database

        :param name: Mask, Name of new mask data-block
        :type name: str | typing.Any
        :return: New mask data-block
        :rtype: Mask
        """
        ...

    def remove(
        self,
        mask: Mask,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a mask from the current blendfile

        :param mask: Mask to remove
        :type mask: Mask
        :param do_unlink: Unlink all usages of this mask before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this mask
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this mask
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataMaterials(bpy_prop_collection[Material], bpy_struct):
    """Collection of materials"""

    def new(self, name: str | typing.Any) -> Material:
        """Add a new material to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New material data-block
        :rtype: Material
        """
        ...

    def create_gpencil_data(self, material: Material):
        """Add grease pencil material settings

        :param material: Material
        :type material: Material
        """
        ...

    def remove_gpencil_data(self, material: Material):
        """Remove grease pencil material settings

        :param material: Material
        :type material: Material
        """
        ...

    def remove(
        self,
        material: Material,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a material from the current blendfile

        :param material: Material to remove
        :type material: Material
        :param do_unlink: Unlink all usages of this material before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this material
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this material
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataMeshes(bpy_prop_collection[Mesh], bpy_struct):
    """Collection of meshes"""

    def new(self, name: str | typing.Any) -> Mesh:
        """Add a new mesh to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New mesh data-block
        :rtype: Mesh
        """
        ...

    def new_from_object(
        self,
        object: Object,
        preserve_all_data_layers: bool | typing.Any | None = False,
        depsgraph: Depsgraph | None = None,
    ) -> Mesh:
        """Add a new mesh created from given object (undeformed geometry if object is original, and final evaluated geometry, with all modifiers etc., if object is evaluated)

        :param object: Object to create mesh from
        :type object: Object
        :param preserve_all_data_layers: Preserve all data layers in the mesh, like UV maps and vertex groups. By default Blender only computes the subset of data layers needed for viewport display and rendering, for better performance
        :type preserve_all_data_layers: bool | typing.Any | None
        :param depsgraph: Dependency Graph, Evaluated dependency graph which is required when preserve_all_data_layers is true
        :type depsgraph: Depsgraph | None
        :return: Mesh created from object, remove it if it is only used for export
        :rtype: Mesh
        """
        ...

    def remove(
        self,
        mesh: Mesh,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a mesh from the current blendfile

        :param mesh: Mesh to remove
        :type mesh: Mesh
        :param do_unlink: Unlink all usages of this mesh before deleting it (WARNING: will also delete objects instancing that mesh data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this mesh data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this mesh data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataMetaBalls(bpy_prop_collection[MetaBall], bpy_struct):
    """Collection of metaballs"""

    def new(self, name: str | typing.Any) -> MetaBall:
        """Add a new metaball to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New metaball data-block
        :rtype: MetaBall
        """
        ...

    def remove(
        self,
        metaball: MetaBall,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a metaball from the current blendfile

        :param metaball: Metaball to remove
        :type metaball: MetaBall
        :param do_unlink: Unlink all usages of this metaball before deleting it (WARNING: will also delete objects instancing that metaball data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this metaball data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this metaball data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataMovieClips(bpy_prop_collection[MovieClip], bpy_struct):
    """Collection of movie clips"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    def remove(
        self,
        clip: MovieClip,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a movie clip from the current blendfile.

        :param clip: Movie clip to remove
        :type clip: MovieClip
        :param do_unlink: Unlink all usages of this movie clip before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this movie clip
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this movie clip
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def load(
        self,
        filepath: str | typing.Any,
        check_existing: bool | typing.Any | None = False,
    ) -> MovieClip:
        """Add a new movie clip to the main database from a file (while check_existing is disabled for consistency with other load functions, behavior with multiple movie-clips using the same file may incorrectly generate proxies)

        :param filepath: path for the data-block
        :type filepath: str | typing.Any
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | typing.Any | None
        :return: New movie clip data-block
        :rtype: MovieClip
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataNodeTrees(bpy_prop_collection[NodeTree], bpy_struct):
    """Collection of node trees"""

    def new(self, name: str | typing.Any, type: str | None) -> NodeTree:
        """Add a new node tree to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param type: Type, The type of node_group to add
        :type type: str | None
        :return: New node tree data-block
        :rtype: NodeTree
        """
        ...

    def remove(
        self,
        tree: NodeTree,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a node tree from the current blendfile

        :param tree: Node tree to remove
        :type tree: NodeTree
        :param do_unlink: Unlink all usages of this node tree before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this node tree
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this node tree
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataObjects(bpy_prop_collection[Object], bpy_struct):
    """Collection of objects"""

    def new(self, name: str | typing.Any, object_data: ID | None) -> Object:
        """Add a new object to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param object_data: Object data or None for an empty object
        :type object_data: ID | None
        :return: New object data-block
        :rtype: Object
        """
        ...

    def remove(
        self,
        object: Object,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove an object from the current blendfile

        :param object: Object to remove
        :type object: Object
        :param do_unlink: Unlink all usages of this object before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this object
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this object
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataPaintCurves(bpy_prop_collection[PaintCurve], bpy_struct):
    """Collection of paint curves"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataPalettes(bpy_prop_collection[Palette], bpy_struct):
    """Collection of palettes"""

    def new(self, name: str | typing.Any) -> Palette:
        """Add a new palette to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New palette data-block
        :rtype: Palette
        """
        ...

    def remove(
        self,
        palette: Palette,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a palette from the current blendfile

        :param palette: Palette to remove
        :type palette: Palette
        :param do_unlink: Unlink all usages of this palette before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this palette
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this palette
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataParticles(bpy_prop_collection[ParticleSettings], bpy_struct):
    """Collection of particle settings"""

    def new(self, name: str | typing.Any) -> ParticleSettings:
        """Add a new particle settings instance to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New particle settings data-block
        :rtype: ParticleSettings
        """
        ...

    def remove(
        self,
        particle: ParticleSettings,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a particle settings instance from the current blendfile

        :param particle: Particle Settings to remove
        :type particle: ParticleSettings
        :param do_unlink: Unlink all usages of those particle settings before deleting them
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this particle settings
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this particle settings
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataPointClouds(bpy_prop_collection[PointCloud], bpy_struct):
    """Collection of point clouds"""

    def new(self, name: str | typing.Any) -> PointCloud:
        """Add a new point cloud to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New point cloud data-block
        :rtype: PointCloud
        """
        ...

    def remove(
        self,
        pointcloud: PointCloud,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a point cloud from the current blendfile

        :param pointcloud: Point cloud to remove
        :type pointcloud: PointCloud
        :param do_unlink: Unlink all usages of this point cloud before deleting it (WARNING: will also delete objects instancing that point cloud data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this point cloud data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this point cloud data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataProbes(bpy_prop_collection[LightProbe], bpy_struct):
    """Collection of light probes"""

    def new(self, name: str | typing.Any, type: str | None) -> LightProbe:
        """Add a new light probe to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param type: Type, The type of light probe to add
        :type type: str | None
        :return: New light probe data-block
        :rtype: LightProbe
        """
        ...

    def remove(
        self,
        lightprobe: LightProbe,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a light probe from the current blendfile

        :param lightprobe: Light probe to remove
        :type lightprobe: LightProbe
        :param do_unlink: Unlink all usages of this light probe before deleting it (WARNING: will also delete objects instancing that light probe data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this light probe
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this light probe
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataScenes(bpy_prop_collection[Scene], bpy_struct):
    """Collection of scenes"""

    def new(self, name: str | typing.Any) -> Scene:
        """Add a new scene to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New scene data-block
        :rtype: Scene
        """
        ...

    def remove(self, scene: Scene, do_unlink: bool | typing.Any | None = True):
        """Remove a scene from the current blendfile

        :param scene: Scene to remove
        :type scene: Scene
        :param do_unlink: Unlink all usages of this scene before deleting it
        :type do_unlink: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataScreens(bpy_prop_collection[Screen], bpy_struct):
    """Collection of screens"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataSounds(bpy_prop_collection[Sound], bpy_struct):
    """Collection of sounds"""

    def load(
        self,
        filepath: str | typing.Any,
        check_existing: bool | typing.Any | None = False,
    ) -> Sound:
        """Add a new sound to the main database from a file

        :param filepath: path for the data-block
        :type filepath: str | typing.Any
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool | typing.Any | None
        :return: New text data-block
        :rtype: Sound
        """
        ...

    def remove(
        self,
        sound: Sound,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a sound from the current blendfile

        :param sound: Sound to remove
        :type sound: Sound
        :param do_unlink: Unlink all usages of this sound before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this sound
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this sound
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataSpeakers(bpy_prop_collection[Speaker], bpy_struct):
    """Collection of speakers"""

    def new(self, name: str | typing.Any) -> Speaker:
        """Add a new speaker to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New speaker data-block
        :rtype: Speaker
        """
        ...

    def remove(
        self,
        speaker: Speaker,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a speaker from the current blendfile

        :param speaker: Speaker to remove
        :type speaker: Speaker
        :param do_unlink: Unlink all usages of this speaker before deleting it (WARNING: will also delete objects instancing that speaker data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this speaker data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this speaker data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataTexts(bpy_prop_collection[Text], bpy_struct):
    """Collection of texts"""

    def new(self, name: str | typing.Any) -> Text:
        """Add a new text to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New text data-block
        :rtype: Text
        """
        ...

    def remove(
        self,
        text: Text,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a text from the current blendfile

        :param text: Text to remove
        :type text: Text
        :param do_unlink: Unlink all usages of this text before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this text
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this text
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def load(
        self, filepath: str | typing.Any, internal: bool | typing.Any | None = False
    ) -> Text:
        """Add a new text to the main database from a file

        :param filepath: path for the data-block
        :type filepath: str | typing.Any
        :param internal: Make internal, Make text file internal after loading
        :type internal: bool | typing.Any | None
        :return: New text data-block
        :rtype: Text
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataTextures(bpy_prop_collection[Texture], bpy_struct):
    """Collection of textures"""

    def new(self, name: str | typing.Any, type: str | None) -> Texture:
        """Add a new texture to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :param type: Type, The type of texture to add
        :type type: str | None
        :return: New texture data-block
        :rtype: Texture
        """
        ...

    def remove(
        self,
        texture: Texture,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a texture from the current blendfile

        :param texture: Texture to remove
        :type texture: Texture
        :param do_unlink: Unlink all usages of this texture before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this texture
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this texture
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataVolumes(bpy_prop_collection[Volume], bpy_struct):
    """Collection of volumes"""

    def new(self, name: str | typing.Any) -> Volume:
        """Add a new volume to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New volume data-block
        :rtype: Volume
        """
        ...

    def remove(
        self,
        volume: Volume,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a volume from the current blendfile

        :param volume: Volume to remove
        :type volume: Volume
        :param do_unlink: Unlink all usages of this volume before deleting it (WARNING: will also delete objects instancing that volume data)
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this volume data
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this volume data
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataWindowManagers(bpy_prop_collection[WindowManager], bpy_struct):
    """Collection of window managers"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataWorkSpaces(bpy_prop_collection[WorkSpace], bpy_struct):
    """Collection of workspaces"""

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendDataWorlds(bpy_prop_collection[World], bpy_struct):
    """Collection of worlds"""

    def new(self, name: str | typing.Any) -> World:
        """Add a new world to the main database

        :param name: New name for the data-block
        :type name: str | typing.Any
        :return: New world data-block
        :rtype: World
        """
        ...

    def remove(
        self,
        world: World,
        do_unlink: bool | typing.Any | None = True,
        do_id_user: bool | typing.Any | None = True,
        do_ui_user: bool | typing.Any | None = True,
    ):
        """Remove a world from the current blendfile

        :param world: World to remove
        :type world: World
        :param do_unlink: Unlink all usages of this world before deleting it
        :type do_unlink: bool | typing.Any | None
        :param do_id_user: Decrement user counter of all datablocks used by this world
        :type do_id_user: bool | typing.Any | None
        :param do_ui_user: Make sure interface does not reference this world
        :type do_ui_user: bool | typing.Any | None
        """
        ...

    def tag(self, value: bool | None):
        """tag

        :param value: Value
        :type value: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlenderRNA(bpy_struct):
    """Blender RNA structure definitions"""

    structs: bpy_prop_collection[Struct]
    """ 

    :type: bpy_prop_collection[Struct]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidRule(bpy_struct):
    name: str
    """ Boid rule name

    :type: str
    """

    type: str
    """ 

    :type: str
    """

    use_in_air: bool
    """ Use rule when boid is flying

    :type: bool
    """

    use_on_land: bool
    """ Use rule when boid is on land

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidSettings(bpy_struct):
    """Settings for boid physics"""

    accuracy: float
    """ Accuracy of attack

    :type: float
    """

    active_boid_state: BoidRule
    """ 

    :type: BoidRule
    """

    active_boid_state_index: int | None
    """ 

    :type: int | None
    """

    aggression: float
    """ Boid will fight this times stronger enemy

    :type: float
    """

    air_acc_max: float
    """ Maximum acceleration in air (relative to maximum speed)

    :type: float
    """

    air_ave_max: float
    """ Maximum angular velocity in air (relative to 180 degrees)

    :type: float
    """

    air_personal_space: float
    """ Radius of boids personal space in air (% of particle size)

    :type: float
    """

    air_speed_max: float
    """ Maximum speed in air

    :type: float
    """

    air_speed_min: float
    """ Minimum speed in air (relative to maximum speed)

    :type: float
    """

    bank: float
    """ Amount of rotation around velocity vector on turns

    :type: float
    """

    health: float
    """ Initial boid health when born

    :type: float
    """

    height: float
    """ Boid height relative to particle size

    :type: float
    """

    land_acc_max: float
    """ Maximum acceleration on land (relative to maximum speed)

    :type: float
    """

    land_ave_max: float
    """ Maximum angular velocity on land (relative to 180 degrees)

    :type: float
    """

    land_jump_speed: float
    """ Maximum speed for jumping

    :type: float
    """

    land_personal_space: float
    """ Radius of boids personal space on land (% of particle size)

    :type: float
    """

    land_smooth: float
    """ How smoothly the boids land

    :type: float
    """

    land_speed_max: float
    """ Maximum speed on land

    :type: float
    """

    land_stick_force: float
    """ How strong a force must be to start effecting a boid on land

    :type: float
    """

    pitch: float
    """ Amount of rotation around side vector

    :type: float
    """

    range: float
    """ Maximum distance from which a boid can attack

    :type: float
    """

    states: bpy_prop_collection[BoidState]
    """ 

    :type: bpy_prop_collection[BoidState]
    """

    strength: float
    """ Maximum caused damage on attack per second

    :type: float
    """

    use_climb: bool
    """ Allow boids to climb goal objects

    :type: bool
    """

    use_flight: bool
    """ Allow boids to move in air

    :type: bool
    """

    use_land: bool
    """ Allow boids to move on land

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidState(bpy_struct):
    """Boid state for boid physics"""

    active_boid_rule: BoidRule
    """ 

    :type: BoidRule
    """

    active_boid_rule_index: int | None
    """ 

    :type: int | None
    """

    falloff: float
    """ 

    :type: float
    """

    name: str
    """ Boid state name

    :type: str
    """

    rule_fuzzy: float
    """ 

    :type: float
    """

    rules: bpy_prop_collection[BoidRule]
    """ 

    :type: bpy_prop_collection[BoidRule]
    """

    ruleset_type: str
    """ How the rules in the list are evaluated

    :type: str
    """

    volume: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Bone(bpy_struct):
    """Bone in an Armature data-block"""

    bbone_curveinx: float
    """ X-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveinz: float
    """ Z-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutx: float
    """ X-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutz: float
    """ Z-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_custom_handle_end: Bone
    """ Bone that serves as the end handle for the B-Bone curve

    :type: Bone
    """

    bbone_custom_handle_start: Bone
    """ Bone that serves as the start handle for the B-Bone curve

    :type: Bone
    """

    bbone_easein: float
    """ Length of first Bézier Handle (for B-Bones only)

    :type: float
    """

    bbone_easeout: float
    """ Length of second Bézier Handle (for B-Bones only)

    :type: float
    """

    bbone_handle_type_end: str
    """ Selects how the end handle of the B-Bone is computed

    :type: str
    """

    bbone_handle_type_start: str
    """ Selects how the start handle of the B-Bone is computed

    :type: str
    """

    bbone_handle_use_ease_end: bool
    """ Multiply the B-Bone Ease Out channel by the local Y scale value of the end handle. This is done after the Scale Easing option and isn't affected by it

    :type: bool
    """

    bbone_handle_use_ease_start: bool
    """ Multiply the B-Bone Ease In channel by the local Y scale value of the start handle. This is done after the Scale Easing option and isn't affected by it

    :type: bool
    """

    bbone_handle_use_scale_end: list[bool]
    """ Multiply B-Bone Scale Out channels by the local scale values of the end handle. This is done after the Scale Easing option and isn't affected by it

    :type: list[bool]
    """

    bbone_handle_use_scale_start: list[bool]
    """ Multiply B-Bone Scale In channels by the local scale values of the start handle. This is done after the Scale Easing option and isn't affected by it

    :type: list[bool]
    """

    bbone_mapping_mode: str
    """ Selects how the vertices are mapped to B-Bone segments based on their position

    :type: str
    """

    bbone_rollin: float
    """ Roll offset for the start of the B-Bone, adjusts twist

    :type: float
    """

    bbone_rollout: float
    """ Roll offset for the end of the B-Bone, adjusts twist

    :type: float
    """

    bbone_scalein: mathutils.Vector
    """ Scale factors for the start of the B-Bone, adjusts thickness (for tapering effects)

    :type: mathutils.Vector
    """

    bbone_scaleout: mathutils.Vector
    """ Scale factors for the end of the B-Bone, adjusts thickness (for tapering effects)

    :type: mathutils.Vector
    """

    bbone_segments: int
    """ Number of subdivisions of bone (for B-Bones only)

    :type: int
    """

    bbone_x: float
    """ B-Bone X size

    :type: float
    """

    bbone_z: float
    """ B-Bone Z size

    :type: float
    """

    children: bpy_prop_collection[Bone]
    """ Bones which are children of this bone

    :type: bpy_prop_collection[Bone]
    """

    collections: BoneCollectionMemberships
    """ Bone Collections that contain this bone

    :type: BoneCollectionMemberships
    """

    color: BoneColor
    """ 

    :type: BoneColor
    """

    envelope_distance: float
    """ Bone deformation distance (for Envelope deform only)

    :type: float
    """

    envelope_weight: float
    """ Bone deformation weight (for Envelope deform only)

    :type: float
    """

    head: mathutils.Vector
    """ Location of head end of the bone relative to its parent

    :type: mathutils.Vector
    """

    head_local: mathutils.Vector
    """ Location of head end of the bone relative to armature

    :type: mathutils.Vector
    """

    head_radius: float
    """ Radius of head of bone (for Envelope deform only)

    :type: float
    """

    hide: bool
    """ Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)

    :type: bool
    """

    hide_select: bool
    """ Bone is able to be selected

    :type: bool
    """

    inherit_scale: str
    """ Specifies how the bone inherits scaling from the parent bone

    :type: str
    """

    length: float
    """ Length of the bone

    :type: float
    """

    matrix: mathutils.Matrix
    """ 3×3 bone matrix

    :type: mathutils.Matrix
    """

    matrix_local: mathutils.Matrix
    """ 4×4 bone matrix relative to armature

    :type: mathutils.Matrix
    """

    name: str
    """ 

    :type: str
    """

    parent: Bone
    """ Parent bone (in same Armature)

    :type: Bone
    """

    select: bool
    """ 

    :type: bool
    """

    select_head: bool
    """ 

    :type: bool
    """

    select_tail: bool
    """ 

    :type: bool
    """

    show_wire: bool
    """ Bone is always displayed in wireframe regardless of viewport shading mode (useful for non-obstructive custom bone shapes)

    :type: bool
    """

    tail: mathutils.Vector
    """ Location of tail end of the bone relative to its parent

    :type: mathutils.Vector
    """

    tail_local: mathutils.Vector
    """ Location of tail end of the bone relative to armature

    :type: mathutils.Vector
    """

    tail_radius: float
    """ Radius of tail of bone (for Envelope deform only)

    :type: float
    """

    use_connect: bool
    """ When bone has a parent, bone's head is stuck to the parent's tail

    :type: bool
    """

    use_cyclic_offset: bool
    """ When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)

    :type: bool
    """

    use_deform: bool
    """ Enable Bone to deform geometry

    :type: bool
    """

    use_endroll_as_inroll: bool
    """ Add Roll Out of the Start Handle bone to the Roll In value

    :type: bool
    """

    use_envelope_multiply: bool
    """ When deforming bone, multiply effects of Vertex Group weights with Envelope influence

    :type: bool
    """

    use_inherit_rotation: bool
    """ Bone inherits rotation or scale from parent bone

    :type: bool
    """

    use_local_location: bool
    """ Bone location is set in local space

    :type: bool
    """

    use_relative_parent: bool
    """ Object children will use relative transform, like deform

    :type: bool
    """

    use_scale_easing: bool
    """ Multiply the final easing values by the Scale In/Out Y factors

    :type: bool
    """

    basename: typing.Any
    """ The name of this bone before any '.' character(readonly)"""

    center: typing.Any
    """ The midpoint between the head and the tail.(readonly)"""

    children_recursive: typing.Any
    """ A list of all children from this bone.(readonly)"""

    children_recursive_basename: typing.Any
    """ Returns a chain of children with the same base name as this bone.
Only direct chains are supported, forks caused by multiple children
with matching base names will terminate the function
and not be returned.(readonly)"""

    parent_recursive: typing.Any
    """ A list of parents, starting with the immediate parent(readonly)"""

    vector: typing.Any
    """ The direction this bone is pointing.
Utility function for (tail - head)(readonly)"""

    x_axis: typing.Any
    """ Vector pointing down the x-axis of the bone.(readonly)"""

    y_axis: typing.Any
    """ Vector pointing down the y-axis of the bone.(readonly)"""

    z_axis: typing.Any
    """ Vector pointing down the z-axis of the bone.(readonly)"""

    def evaluate_envelope(
        self, point: collections.abc.Sequence[float] | mathutils.Vector | None
    ) -> float:
        """Calculate bone envelope at given point

        :param point: Point, Position in 3d space to evaluate
        :type point: collections.abc.Sequence[float] | mathutils.Vector | None
        :return: Factor, Envelope factor
        :rtype: float
        """
        ...

    def convert_local_to_pose(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        matrix_local: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        parent_matrix: typing.Any | None = (
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
        ),
        parent_matrix_local: typing.Any | None = (
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
        ),
        invert: bool | typing.Any | None = False,
    ) -> mathutils.Matrix:
        """Transform a matrix from Local to Pose space (or back), taking into account options like Inherit Scale and Local Location. Unlike Object.convert_space, this uses custom rest and pose matrices provided by the caller. If the parent matrices are omitted, the bone is assumed to have no parent.This method enables conversions between Local and Pose space for bones in
        the middle of updating the armature without having to update dependencies
        after each change, by manually carrying updated matrices in a recursive walk.

                :param matrix: The matrix to transform
                :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
                :param matrix_local: The custom rest matrix of this bone (Bone.matrix_local)
                :type matrix_local: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
                :param parent_matrix: The custom pose matrix of the parent bone (PoseBone.matrix)
                :type parent_matrix: typing.Any | None
                :param parent_matrix_local: The custom rest matrix of the parent bone (Bone.matrix_local)
                :type parent_matrix_local: typing.Any | None
                :param invert: Convert from Pose to Local space
                :type invert: bool | typing.Any | None
                :return: The transformed matrix
                :rtype: mathutils.Matrix
        """
        ...

    @classmethod
    def MatrixFromAxisRoll(
        cls, axis: typing.Any, roll: float | None
    ) -> mathutils.Matrix:
        """Convert the axis + roll representation to a matrix

        :param axis: The main axis of the bone (tail - head)
        :type axis: typing.Any
        :param roll: The roll of the bone
        :type roll: float | None
        :return: The resulting orientation matrix
        :rtype: mathutils.Matrix
        """
        ...

    @classmethod
    def AxisRollFromMatrix(
        cls, matrix: typing.Any, axis: typing.Any | None = (0.0, 0.0, 0.0)
    ):
        """Convert a rotational matrix to the axis + roll representation. Note that the resulting value of the roll may not be as expected if the matrix has shear or negative determinant.

                :param matrix: The orientation matrix of the bone
                :type matrix: typing.Any
                :param axis: The optional override for the axis (finds closest approximation for the matrix)
                :type axis: typing.Any | None
                :return: result_axis, The main axis of the bone, `mathutils.Vector` of 3 items in [-inf, inf]

        result_roll, The roll of the bone, float in [-inf, inf]
        """
        ...

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
        but saved generating a list.

                :param parent_test:
        """
        ...

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone

        :param vec:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoneCollection(bpy_struct):
    """Bone collection in an Armature data-block"""

    bones: bpy_prop_collection[Bone]
    """ Bones assigned to this bone collection. In armature edit mode this will always return an empty list of bones, as the bone collection memberships are only synchronized when exiting edit mode

    :type: bpy_prop_collection[Bone]
    """

    child_number: int
    """ Index of this collection into its parent's list of children. Note that finding this index requires a scan of all the bone collections, so do access this with care

    :type: int
    """

    children: bpy_prop_collection[BoneCollection]
    """ 

    :type: bpy_prop_collection[BoneCollection]
    """

    index: int
    """ Index of this bone collection in the armature.collections_all array. Note that finding this index requires a scan of all the bone collections, so do access this with care

    :type: int
    """

    is_editable: bool
    """ This collection is owned by a local Armature, or was added via a library override in the current blend file

    :type: bool
    """

    is_expanded: bool
    """ This bone collection is expanded in the bone collections tree view

    :type: bool
    """

    is_local_override: bool
    """ This collection was added via a library override in the current blend file

    :type: bool
    """

    is_solo: bool
    """ Show only this bone collection, and others also marked as 'solo'

    :type: bool
    """

    is_visible: bool
    """ Bones in this collection will be visible in pose/object mode

    :type: bool
    """

    is_visible_ancestors: bool
    """ True when all of the ancestors of this bone collection are marked as visible; always True for root bone collections

    :type: bool
    """

    is_visible_effectively: bool
    """ Whether this bone collection is effectively visible in the viewport. This is True when this bone collection and all of its ancestors are visible, or when it is marked as 'solo'

    :type: bool
    """

    name: str
    """ Unique within the Armature

    :type: str
    """

    parent: BoneCollection
    """ Parent bone collection. Note that accessing this requires a scan of all the bone collections to find the parent

    :type: BoneCollection
    """

    bones_recursive: typing.Any
    """ A set of all bones assigned to this bone collection and its child collections.(readonly)"""

    def assign(self, bone: typing.Any | None) -> bool:
        """Assign the given bone to this collection

        :param bone: Bone to assign to this collection. This must be a Bone, PoseBone, or EditBone
        :type bone: typing.Any | None
        :return: Assigned, Whether the bone was actually assigned; will be false if the bone was already member of the collection
        :rtype: bool
        """
        ...

    def unassign(self, bone: typing.Any | None) -> bool:
        """Remove the given bone from this collection

        :param bone: Bone to remove from this collection. This must be a Bone, PoseBone, or EditBone
        :type bone: typing.Any | None
        :return: Unassigned, Whether the bone was actually removed; will be false if the bone was not a member of the collection to begin with
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoneCollectionMemberships(bpy_prop_collection[BoneCollection], bpy_struct):
    """The Bone Collections that contain this Bone"""

    def clear(self):
        """Remove this bone from all bone collections"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoneCollections(bpy_struct):
    """The Bone Collections of this Armature"""

    active: BoneCollection | None
    """ Armature's active bone collection

    :type: BoneCollection | None
    """

    active_index: int | None
    """ The index of the Armature's active bone collection; -1 when there is no active collection. Note that this is indexing the underlying array of bone collections, which may not be in the order you expect. Root collections are listed first, and siblings are always sequential. Apart from that, bone collections can be in any order, and thus incrementing or decrementing this index can make the active bone collection jump around in unexpected ways. For a more predictable interface, use active or active_name

    :type: int | None
    """

    active_name: str
    """ The name of the Armature's active bone collection; empty when there is no active collection

    :type: str
    """

    is_solo_active: bool
    """ Read-only flag that indicates there is at least one bone collection marked as 'solo'

    :type: bool
    """

    def new(
        self, name: str | typing.Any, parent: BoneCollection | None = None
    ) -> BoneCollection:
        """Add a new empty bone collection to the armature

        :param name: Name, Name of the new collection. Blender will ensure it is unique within the collections of the Armature
        :type name: str | typing.Any
        :param parent: Parent Collection, If not None, the new bone collection becomes a child of this collection
        :type parent: BoneCollection | None
        :return: Newly created bone collection
        :rtype: BoneCollection
        """
        ...

    def remove(self, bone_collection: BoneCollection | None):
        """Remove the bone collection from the armature. If this bone collection has any children, they will be reassigned to their grandparent; in other words, the children will take the place of the removed bone collection

        :param bone_collection: Bone Collection, The bone collection to remove
        :type bone_collection: BoneCollection | None
        """
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a bone collection to a different position in the collection list. This can only be used to reorder siblings, and not to change parent-child relationships

        :param from_index: From Index, Index to move
        :type from_index: int | None
        :param to_index: To Index, Target index
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoneColor(bpy_struct):
    """Theme color or custom color of a bone"""

    custom: ThemeBoneColorSet
    """ The custom bone colors, used when palette is 'CUSTOM'

    :type: ThemeBoneColorSet
    """

    is_custom: bool
    """ A color palette is user-defined, instead of using a theme-defined one

    :type: bool
    """

    palette: str
    """ Color palette to use

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoolAttributeValue(bpy_struct):
    """Bool value in geometry attribute"""

    value: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrushCapabilities(bpy_struct):
    """Read-only indications of supported operations"""

    has_overlay: bool
    """ 

    :type: bool
    """

    has_random_texture_angle: bool
    """ 

    :type: bool
    """

    has_smooth_stroke: bool
    """ 

    :type: bool
    """

    has_spacing: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrushCapabilitiesImagePaint(bpy_struct):
    """Read-only indications of supported operations"""

    has_accumulate: bool
    """ 

    :type: bool
    """

    has_color: bool
    """ 

    :type: bool
    """

    has_radius: bool
    """ 

    :type: bool
    """

    has_space_attenuation: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrushCapabilitiesSculpt(bpy_struct):
    """Read-only indications of which brush operations are supported by the current sculpt tool"""

    has_accumulate: bool
    """ 

    :type: bool
    """

    has_auto_smooth: bool
    """ 

    :type: bool
    """

    has_color: bool
    """ 

    :type: bool
    """

    has_direction: bool
    """ 

    :type: bool
    """

    has_gravity: bool
    """ 

    :type: bool
    """

    has_height: bool
    """ 

    :type: bool
    """

    has_jitter: bool
    """ 

    :type: bool
    """

    has_normal_weight: bool
    """ 

    :type: bool
    """

    has_persistence: bool
    """ 

    :type: bool
    """

    has_pinch_factor: bool
    """ 

    :type: bool
    """

    has_plane_offset: bool
    """ 

    :type: bool
    """

    has_rake_factor: bool
    """ 

    :type: bool
    """

    has_random_texture_angle: bool
    """ 

    :type: bool
    """

    has_sculpt_plane: bool
    """ 

    :type: bool
    """

    has_secondary_color: bool
    """ 

    :type: bool
    """

    has_smooth_stroke: bool
    """ 

    :type: bool
    """

    has_space_attenuation: bool
    """ 

    :type: bool
    """

    has_strength_pressure: bool
    """ 

    :type: bool
    """

    has_tilt: bool
    """ 

    :type: bool
    """

    has_topology_rake: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrushCapabilitiesVertexPaint(bpy_struct):
    """Read-only indications of supported operations"""

    has_color: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrushCapabilitiesWeightPaint(bpy_struct):
    """Read-only indications of supported operations"""

    has_weight: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrushCurvesSculptSettings(bpy_struct):
    add_amount: int
    """ Number of curves added by the Add brush

    :type: int
    """

    curve_length: float
    """ Length of newly added curves when it is not interpolated from other curves

    :type: float
    """

    curve_parameter_falloff: CurveMapping
    """ Falloff that is applied from the tip to the root of each curve

    :type: CurveMapping
    """

    density_add_attempts: int
    """ How many times the Density brush tries to add a new curve

    :type: int
    """

    density_mode: str
    """ Determines whether the brush adds or removes curves

    :type: str
    """

    interpolate_length: bool
    """ Use length of the curves in close proximity

    :type: bool
    """

    interpolate_point_count: bool
    """ Use the number of points from the curves in close proximity

    :type: bool
    """

    interpolate_shape: bool
    """ Use shape of the curves in close proximity

    :type: bool
    """

    minimum_distance: float
    """ Goal distance between curve roots for the Density brush

    :type: float
    """

    minimum_length: float
    """ Avoid shrinking curves shorter than this length

    :type: float
    """

    points_per_curve: int
    """ Number of control points in a newly added curve

    :type: int
    """

    scale_uniform: bool
    """ Grow or shrink curves by changing their size uniformly instead of using trimming or extrapolation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrushGpencilSettings(bpy_struct):
    """Settings for grease pencil brush"""

    active_smooth_factor: float | None
    """ Amount of smoothing while drawing

    :type: float | None
    """

    angle: float
    """ Direction of the stroke at which brush gives maximal thickness (0° for horizontal)

    :type: float
    """

    angle_factor: float
    """ Reduce brush thickness by this factor when stroke is perpendicular to 'Angle' direction

    :type: float
    """

    aspect: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    brush_draw_mode: str
    """ Preselected mode when using this brush

    :type: str
    """

    caps_type: str
    """ The shape of the start and end of the stroke

    :type: str
    """

    curve_jitter: CurveMapping
    """ Curve used for the jitter effect

    :type: CurveMapping
    """

    curve_random_hue: CurveMapping
    """ Curve used for modulating effect

    :type: CurveMapping
    """

    curve_random_pressure: CurveMapping
    """ Curve used for modulating effect

    :type: CurveMapping
    """

    curve_random_saturation: CurveMapping
    """ Curve used for modulating effect

    :type: CurveMapping
    """

    curve_random_strength: CurveMapping
    """ Curve used for modulating effect

    :type: CurveMapping
    """

    curve_random_uv: CurveMapping
    """ Curve used for modulating effect

    :type: CurveMapping
    """

    curve_random_value: CurveMapping
    """ Curve used for modulating effect

    :type: CurveMapping
    """

    curve_sensitivity: CurveMapping
    """ Curve used for the sensitivity

    :type: CurveMapping
    """

    curve_strength: CurveMapping
    """ Curve used for the strength

    :type: CurveMapping
    """

    dilate: int
    """ Number of pixels to expand or contract fill area

    :type: int
    """

    eraser_mode: str
    """ Eraser Mode

    :type: str
    """

    eraser_strength_factor: float
    """ Amount of erasing for strength

    :type: float
    """

    eraser_thickness_factor: float
    """ Amount of erasing for thickness

    :type: float
    """

    extend_stroke_factor: float
    """ Strokes end extension for closing gaps, use zero to disable

    :type: float
    """

    fill_direction: str
    """ Direction of the fill

    :type: str
    """

    fill_draw_mode: str
    """ Mode to draw boundary limits

    :type: str
    """

    fill_extend_mode: str
    """ Types of stroke extensions used for closing gaps

    :type: str
    """

    fill_factor: float
    """ Factor for fill boundary accuracy, higher values are more accurate but slower

    :type: float
    """

    fill_layer_mode: str
    """ Layers used as boundaries

    :type: str
    """

    fill_simplify_level: int
    """ Number of simplify steps (large values reduce fill accuracy)

    :type: int
    """

    fill_threshold: float
    """ Threshold to consider color transparent for filling

    :type: float
    """

    gpencil_paint_icon: str
    """ 

    :type: str
    """

    gpencil_sculpt_icon: str
    """ 

    :type: str
    """

    gpencil_vertex_icon: str
    """ 

    :type: str
    """

    gpencil_weight_icon: str
    """ 

    :type: str
    """

    hardness: float
    """ Gradient from the center of Dot and Box strokes (set to 1 for a solid stroke)

    :type: float
    """

    input_samples: int
    """ Generate intermediate points for very fast mouse movements. Set to 0 to disable

    :type: int
    """

    material: Material
    """ Material used for strokes drawn using this brush

    :type: Material
    """

    material_alt: Material
    """ Material used for secondary uses for this brush

    :type: Material
    """

    outline_thickness_factor: float
    """ Thickness of the outline stroke relative to current brush thickness

    :type: float
    """

    pen_jitter: float
    """ Jitter factor for new strokes

    :type: float
    """

    pen_smooth_factor: float
    """ Amount of smoothing to apply after finish newly created strokes, to reduce jitter/noise

    :type: float
    """

    pen_smooth_steps: int
    """ Number of times to smooth newly created strokes

    :type: int
    """

    pen_strength: float
    """ Color strength for new strokes (affect alpha factor of color)

    :type: float
    """

    pen_subdivision_steps: int
    """ Number of times to subdivide newly created strokes, for less jagged strokes

    :type: int
    """

    pin_draw_mode: bool
    """ Pin the mode to the brush

    :type: bool
    """

    random_hue_factor: float
    """ Random factor to modify original hue

    :type: float
    """

    random_pressure: float
    """ Randomness factor for pressure in new strokes

    :type: float
    """

    random_saturation_factor: float
    """ Random factor to modify original saturation

    :type: float
    """

    random_strength: float
    """ Randomness factor strength in new strokes

    :type: float
    """

    random_value_factor: float
    """ Random factor to modify original value

    :type: float
    """

    show_fill: bool
    """ Show transparent lines to use as boundary for filling

    :type: bool
    """

    show_fill_boundary: bool
    """ Show help lines for filling to see boundaries

    :type: bool
    """

    show_fill_extend: bool
    """ Show help lines for stroke extension

    :type: bool
    """

    show_lasso: bool
    """ Do not display fill color while drawing the stroke

    :type: bool
    """

    simplify_factor: float
    """ Factor of Simplify using adaptive algorithm

    :type: float
    """

    use_active_layer_only: bool
    """ Only edit the active layer of the object

    :type: bool
    """

    use_collide_strokes: bool
    """ Check if extend lines collide with strokes

    :type: bool
    """

    use_default_eraser: bool
    """ Use this brush when enable eraser with fast switch key

    :type: bool
    """

    use_edit_position: bool
    """ The brush affects the position of the point

    :type: bool
    """

    use_edit_strength: bool
    """ The brush affects the color strength of the point

    :type: bool
    """

    use_edit_thickness: bool
    """ The brush affects the thickness of the point

    :type: bool
    """

    use_edit_uv: bool
    """ The brush affects the UV rotation of the point

    :type: bool
    """

    use_fill_limit: bool
    """ Fill only visible areas in viewport

    :type: bool
    """

    use_jitter_pressure: bool
    """ Use tablet pressure for jitter

    :type: bool
    """

    use_keep_caps_eraser: bool
    """ Keep the caps as they are and don't flatten them when erasing

    :type: bool
    """

    use_material_pin: bool
    """ Keep material assigned to brush

    :type: bool
    """

    use_occlude_eraser: bool
    """ Erase only strokes visible and not occluded

    :type: bool
    """

    use_pressure: bool
    """ Use tablet pressure

    :type: bool
    """

    use_random_press_hue: bool
    """ Use pressure to modulate randomness

    :type: bool
    """

    use_random_press_radius: bool
    """ Use pressure to modulate randomness

    :type: bool
    """

    use_random_press_sat: bool
    """ Use pressure to modulate randomness

    :type: bool
    """

    use_random_press_strength: bool
    """ Use pressure to modulate randomness

    :type: bool
    """

    use_random_press_uv: bool
    """ Use pressure to modulate randomness

    :type: bool
    """

    use_random_press_val: bool
    """ Use pressure to modulate randomness

    :type: bool
    """

    use_settings_outline: bool
    """ Convert stroke to perimeter

    :type: bool
    """

    use_settings_postprocess: bool
    """ Additional post processing options for new strokes

    :type: bool
    """

    use_settings_random: bool
    """ Random brush settings

    :type: bool
    """

    use_settings_stabilizer: bool
    """ Draw lines with a delay to allow smooth strokes. Press Shift key to override while drawing

    :type: bool
    """

    use_strength_pressure: bool
    """ Use tablet pressure for color strength

    :type: bool
    """

    use_stroke_random_hue: bool
    """ Use randomness at stroke level

    :type: bool
    """

    use_stroke_random_radius: bool
    """ Use randomness at stroke level

    :type: bool
    """

    use_stroke_random_sat: bool
    """ Use randomness at stroke level

    :type: bool
    """

    use_stroke_random_strength: bool
    """ Use randomness at stroke level

    :type: bool
    """

    use_stroke_random_uv: bool
    """ Use randomness at stroke level

    :type: bool
    """

    use_stroke_random_val: bool
    """ Use randomness at stroke level

    :type: bool
    """

    use_trim: bool
    """ Trim intersecting stroke ends

    :type: bool
    """

    uv_random: float
    """ Random factor for auto-generated UV rotation

    :type: float
    """

    vertex_color_factor: float
    """ Factor used to mix vertex color to get final color

    :type: float
    """

    vertex_mode: str
    """ Defines how vertex color affect to the strokes

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ByteColorAttributeValue(bpy_struct):
    """Color value in geometry attribute"""

    color: bpy_prop_array[float]
    """ RGBA color in scene linear color space

    :type: bpy_prop_array[float]
    """

    color_srgb: bpy_prop_array[float]
    """ RGBA color in sRGB color space

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ByteIntAttributeValue(bpy_struct):
    """8-bit value in geometry attribute"""

    value: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CacheFileLayer(bpy_struct):
    """Layer of the cache, used to load or override data from the first the first layer"""

    filepath: str
    """ Path to the archive

    :type: str
    """

    hide_layer: bool
    """ Do not load data from this layer

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CacheFileLayers(bpy_prop_collection[CacheFileLayer], bpy_struct):
    """Collection of cache layers"""

    active: CacheFileLayer | None
    """ Active layer of the CacheFile

    :type: CacheFileLayer | None
    """

    def new(self, filepath: str | typing.Any) -> CacheFileLayer:
        """Add a new layer

        :param filepath: File path to the archive used as a layer
        :type filepath: str | typing.Any
        :return: Newly created layer
        :rtype: CacheFileLayer
        """
        ...

    def remove(self, layer: CacheFileLayer):
        """Remove an existing layer from the cache file

        :param layer: Layer to remove
        :type layer: CacheFileLayer
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CacheObjectPath(bpy_struct):
    """Path of an object inside of an Alembic archive"""

    path: str
    """ Object path

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CacheObjectPaths(bpy_prop_collection[CacheObjectPath], bpy_struct):
    """Collection of object paths"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CameraBackgroundImage(bpy_struct):
    """Image and settings for display in the 3D View background"""

    alpha: float
    """ Image opacity to blend the image against the background color

    :type: float
    """

    clip: MovieClip
    """ Movie clip displayed and edited in this space

    :type: MovieClip
    """

    clip_user: MovieClipUser
    """ Parameters defining which frame of the movie clip is displayed

    :type: MovieClipUser
    """

    display_depth: str
    """ Display under or over everything

    :type: str
    """

    frame_method: str
    """ How the image fits in the camera frame

    :type: str
    """

    image: Image
    """ Image displayed and edited in this space

    :type: Image
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    is_override_data: bool
    """ In a local override camera, whether this background image comes from the linked reference camera, or is local to the override

    :type: bool
    """

    offset: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    rotation: float
    """ Rotation for the background image (ortho view only)

    :type: float
    """

    scale: float
    """ Scale the background image

    :type: float
    """

    show_background_image: bool
    """ Show this image as background

    :type: bool
    """

    show_expanded: bool
    """ Show the details in the user interface

    :type: bool
    """

    show_on_foreground: bool
    """ Show this image in front of objects in viewport

    :type: bool
    """

    source: str
    """ Data source used for background

    :type: str
    """

    use_camera_clip: bool
    """ Use movie clip from active scene camera

    :type: bool
    """

    use_flip_x: bool
    """ Flip the background image horizontally

    :type: bool
    """

    use_flip_y: bool
    """ Flip the background image vertically

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CameraBackgroundImages(bpy_prop_collection[CameraBackgroundImage], bpy_struct):
    """Collection of background images"""

    def new(self) -> CameraBackgroundImage:
        """Add new background image

        :return: Image displayed as viewport background
        :rtype: CameraBackgroundImage
        """
        ...

    def remove(self, image: CameraBackgroundImage):
        """Remove background image

        :param image: Image displayed as viewport background
        :type image: CameraBackgroundImage
        """
        ...

    def clear(self):
        """Remove all background images"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CameraDOFSettings(bpy_struct):
    """Depth of Field settings"""

    aperture_blades: int
    """ Number of blades in aperture for polygonal bokeh (at least 3)

    :type: int
    """

    aperture_fstop: float
    """ F-Stop ratio (lower numbers give more defocus, higher numbers give a sharper image)

    :type: float
    """

    aperture_ratio: float
    """ Distortion to simulate anamorphic lens bokeh

    :type: float
    """

    aperture_rotation: float
    """ Rotation of blades in aperture

    :type: float
    """

    focus_distance: float
    """ Distance to the focus point for depth of field

    :type: float
    """

    focus_object: Object
    """ Use this object to define the depth of field focal point

    :type: Object
    """

    focus_subtarget: str
    """ Use this armature bone to define the depth of field focal point

    :type: str
    """

    use_dof: bool
    """ Use Depth of Field

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CameraStereoData(bpy_struct):
    """Stereoscopy settings for a Camera data-block"""

    convergence_distance: float
    """ The converge point for the stereo cameras (often the distance between a projector and the projection screen)

    :type: float
    """

    convergence_mode: str
    """ 

    :type: str
    """

    interocular_distance: float
    """ Set the distance between the eyes - the stereo plane distance / 30 should be fine

    :type: float
    """

    pivot: str
    """ 

    :type: str
    """

    pole_merge_angle_from: float
    """ Angle at which interocular distance starts to fade to 0

    :type: float
    """

    pole_merge_angle_to: float
    """ Angle at which interocular distance is 0

    :type: float
    """

    use_pole_merge: bool
    """ Fade interocular distance to 0 after the given cutoff angle

    :type: bool
    """

    use_spherical_stereo: bool
    """ Render every pixel rotating the camera around the middle of the interocular distance

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ChannelDriverVariables(bpy_prop_collection[DriverVariable], bpy_struct):
    """Collection of channel driver Variables"""

    def new(self) -> DriverVariable:
        """Add a new variable for the driver

        :return: Newly created Driver Variable
        :rtype: DriverVariable
        """
        ...

    def remove(self, variable: DriverVariable):
        """Remove an existing variable from the driver

        :param variable: Variable to remove from the driver
        :type variable: DriverVariable
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ChildParticle(bpy_struct):
    """Child particle interpolated from simulated or edited particles"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ClothCollisionSettings(bpy_struct):
    """Cloth simulation settings for self collision and collision with other objects"""

    collection: Collection
    """ Limit colliders to this Collection

    :type: Collection
    """

    collision_quality: int
    """ How many collision iterations should be done. (higher is better quality but slower)

    :type: int
    """

    damping: float
    """ Amount of velocity lost on collision

    :type: float
    """

    distance_min: float
    """ Minimum distance between collision objects before collision response takes effect

    :type: float
    """

    friction: float
    """ Friction force if a collision happened (higher = less movement)

    :type: float
    """

    impulse_clamp: float
    """ Clamp collision impulses to avoid instability (0.0 to disable clamping)

    :type: float
    """

    self_distance_min: float
    """ Minimum distance between cloth faces before collision response takes effect

    :type: float
    """

    self_friction: float
    """ Friction with self contact

    :type: float
    """

    self_impulse_clamp: float
    """ Clamp collision impulses to avoid instability (0.0 to disable clamping)

    :type: float
    """

    use_collision: bool
    """ Enable collisions with other objects

    :type: bool
    """

    use_self_collision: bool
    """ Enable self collisions

    :type: bool
    """

    vertex_group_object_collisions: str
    """ Triangles with all vertices in this group are not used during object collisions

    :type: str
    """

    vertex_group_self_collisions: str
    """ Triangles with all vertices in this group are not used during self collisions

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ClothSettings(bpy_struct):
    """Cloth simulation settings for an object"""

    air_damping: float
    """ Air has normally some thickness which slows falling things down

    :type: float
    """

    bending_damping: float
    """ Amount of damping in bending behavior

    :type: float
    """

    bending_model: str
    """ Physical model for simulating bending forces

    :type: str
    """

    bending_stiffness: float
    """ How much the material resists bending

    :type: float
    """

    bending_stiffness_max: float
    """ Maximum bending stiffness value

    :type: float
    """

    collider_friction: float
    """ 

    :type: float
    """

    compression_damping: float
    """ Amount of damping in compression behavior

    :type: float
    """

    compression_stiffness: float
    """ How much the material resists compression

    :type: float
    """

    compression_stiffness_max: float
    """ Maximum compression stiffness value

    :type: float
    """

    density_strength: float
    """ Influence of target density on the simulation

    :type: float
    """

    density_target: float
    """ Maximum density of hair

    :type: float
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    fluid_density: float
    """ Density (kg/l) of the fluid contained inside the object, used to create a hydrostatic pressure gradient simulating the weight of the internal fluid, or buoyancy from the surrounding fluid if negative

    :type: float
    """

    goal_default: float
    """ Default Goal (vertex target position) value, when no Vertex Group used

    :type: float
    """

    goal_friction: float
    """ Goal (vertex target position) friction

    :type: float
    """

    goal_max: float
    """ Goal maximum, vertex group weights are scaled to match this range

    :type: float
    """

    goal_min: float
    """ Goal minimum, vertex group weights are scaled to match this range

    :type: float
    """

    goal_spring: float
    """ Goal (vertex target position) spring stiffness

    :type: float
    """

    gravity: mathutils.Vector
    """ Gravity or external force vector

    :type: mathutils.Vector
    """

    internal_compression_stiffness: float
    """ How much the material resists compression

    :type: float
    """

    internal_compression_stiffness_max: float
    """ Maximum compression stiffness value

    :type: float
    """

    internal_friction: float
    """ 

    :type: float
    """

    internal_spring_max_diversion: float
    """ How much the rays used to connect the internal points can diverge from the vertex normal

    :type: float
    """

    internal_spring_max_length: float
    """ The maximum length an internal spring can have during creation. If the distance between internal points is greater than this, no internal spring will be created between these points. A length of zero means that there is no length limit

    :type: float
    """

    internal_spring_normal_check: bool
    """ Require the points the internal springs connect to have opposite normal directions

    :type: bool
    """

    internal_tension_stiffness: float
    """ How much the material resists stretching

    :type: float
    """

    internal_tension_stiffness_max: float
    """ Maximum tension stiffness value

    :type: float
    """

    mass: float
    """ The mass of each vertex on the cloth material

    :type: float
    """

    pin_stiffness: float
    """ Pin (vertex target position) spring stiffness

    :type: float
    """

    pressure_factor: float
    """ Ambient pressure (kPa) that balances out between the inside and outside of the object when it has the target volume

    :type: float
    """

    quality: int
    """ Quality of the simulation in steps per frame (higher is better quality but slower)

    :type: int
    """

    rest_shape_key: ShapeKey
    """ Shape key to use the rest spring lengths from

    :type: ShapeKey
    """

    sewing_force_max: float
    """ Maximum sewing force

    :type: float
    """

    shear_damping: float
    """ Amount of damping in shearing behavior

    :type: float
    """

    shear_stiffness: float
    """ How much the material resists shearing

    :type: float
    """

    shear_stiffness_max: float
    """ Maximum shear scaling value

    :type: float
    """

    shrink_max: float
    """ Max amount to shrink cloth by

    :type: float
    """

    shrink_min: float
    """ Factor by which to shrink cloth

    :type: float
    """

    target_volume: float
    """ The mesh volume where the inner/outer pressure will be the same. If set to zero the change in volume will not affect pressure

    :type: float
    """

    tension_damping: float
    """ Amount of damping in stretching behavior

    :type: float
    """

    tension_stiffness: float
    """ How much the material resists stretching

    :type: float
    """

    tension_stiffness_max: float
    """ Maximum tension stiffness value

    :type: float
    """

    time_scale: float
    """ Cloth speed is multiplied by this value

    :type: float
    """

    uniform_pressure_force: float
    """ The uniform pressure that is constantly applied to the mesh, in units of Pressure Scale. Can be negative

    :type: float
    """

    use_dynamic_mesh: bool
    """ Make simulation respect deformations in the base mesh

    :type: bool
    """

    use_internal_springs: bool
    """ Simulate an internal volume structure by creating springs connecting the opposite sides of the mesh

    :type: bool
    """

    use_pressure: bool
    """ Simulate pressure inside a closed cloth mesh

    :type: bool
    """

    use_pressure_volume: bool
    """ Use the Target Volume parameter as the initial volume, instead of calculating it from the mesh itself

    :type: bool
    """

    use_sewing_springs: bool
    """ Pulls loose edges together

    :type: bool
    """

    vertex_group_bending: str
    """ Vertex group for fine control over bending stiffness

    :type: str
    """

    vertex_group_intern: str
    """ Vertex group for fine control over the internal spring stiffness

    :type: str
    """

    vertex_group_mass: str
    """ Vertex Group for pinning of vertices

    :type: str
    """

    vertex_group_pressure: str
    """ Vertex Group for where to apply pressure. Zero weight means no pressure while a weight of one means full pressure. Faces with a vertex that has zero weight will be excluded from the volume calculation

    :type: str
    """

    vertex_group_shear_stiffness: str
    """ Vertex group for fine control over shear stiffness

    :type: str
    """

    vertex_group_shrink: str
    """ Vertex Group for shrinking cloth

    :type: str
    """

    vertex_group_structural_stiffness: str
    """ Vertex group for fine control over structural stiffness

    :type: str
    """

    voxel_cell_size: float
    """ Size of the voxel grid cells for interaction effects

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ClothSolverResult(bpy_struct):
    """Result of cloth solver iteration"""

    avg_error: float
    """ Average error during substeps

    :type: float
    """

    avg_iterations: float
    """ Average iterations during substeps

    :type: float
    """

    max_error: float
    """ Maximum error during substeps

    :type: float
    """

    max_iterations: int
    """ Maximum iterations during substeps

    :type: int
    """

    min_error: float
    """ Minimum error during substeps

    :type: float
    """

    min_iterations: int
    """ Minimum iterations during substeps

    :type: int
    """

    status: set[str]
    """ Status of the solver iteration

    :type: set[str]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollectionChild(bpy_struct):
    """Child collection with its collection related settings"""

    light_linking: CollectionLightLinking
    """ Light linking settings of the collection object

    :type: CollectionLightLinking
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollectionChildren(bpy_prop_collection[Collection], bpy_struct):
    """Collection of child collections"""

    def link(self, child: Collection):
        """Add this collection as child of this collection

        :param child: Collection to add
        :type child: Collection
        """
        ...

    def unlink(self, child: Collection | None):
        """Remove this child collection from a collection

        :param child: Collection to remove
        :type child: Collection | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollectionLightLinking(bpy_struct):
    """Light linking settings of objects and children collections of a collection"""

    link_state: str
    """ Light or shadow receiving state of the object or collection

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollectionObject(bpy_struct):
    """Object of a collection with its collection related settings"""

    light_linking: CollectionLightLinking
    """ Light linking settings of the collection

    :type: CollectionLightLinking
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollectionObjects(bpy_prop_collection[Object], bpy_struct):
    """Collection of collection objects"""

    def link(self, object: Object):
        """Add this object to a collection

        :param object: Object to add
        :type object: Object
        """
        ...

    def unlink(self, object: Object | None):
        """Remove this object from a collection

        :param object: Object to remove
        :type object: Object | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollisionSettings(bpy_struct):
    """Collision settings for object in physics simulation"""

    absorption: float
    """ How much of effector force gets lost during collision with this object (in percent)

    :type: float
    """

    cloth_friction: float
    """ Friction for cloth collisions

    :type: float
    """

    damping: float
    """ Amount of damping during collision

    :type: float
    """

    damping_factor: float
    """ Amount of damping during particle collision

    :type: float
    """

    damping_random: float
    """ Random variation of damping

    :type: float
    """

    friction_factor: float
    """ Amount of friction during particle collision

    :type: float
    """

    friction_random: float
    """ Random variation of friction

    :type: float
    """

    permeability: float
    """ Chance that the particle will pass through the mesh

    :type: float
    """

    stickiness: float
    """ Amount of stickiness to surface collision

    :type: float
    """

    thickness_inner: float
    """ Inner face thickness (only used by softbodies)

    :type: float
    """

    thickness_outer: float
    """ Outer face thickness

    :type: float
    """

    use: bool
    """ Enable this object as a collider for physics systems

    :type: bool
    """

    use_culling: bool
    """ Cloth collision acts with respect to the collider normals (improves penetration recovery)

    :type: bool
    """

    use_normal: bool
    """ Cloth collision impulses act in the direction of the collider normals (more reliable in some cases)

    :type: bool
    """

    use_particle_kill: bool
    """ Kill collided particles

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorManagedDisplaySettings(bpy_struct):
    """Color management specific to display device"""

    display_device: str
    """ Display device name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorManagedInputColorspaceSettings(bpy_struct):
    """Input color space settings"""

    is_data: bool
    """ Treat image as non-color data without color management, like normal or displacement maps

    :type: bool
    """

    name: str
    """ Color space in the image file, to convert to and from when saving and loading the image

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorManagedSequencerColorspaceSettings(bpy_struct):
    """Input color space settings"""

    name: str
    """ Color space that the sequencer operates in

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorManagedViewSettings(bpy_struct):
    """Color management settings used for displaying images on the display"""

    curve_mapping: CurveMapping
    """ Color curve mapping applied before display transform

    :type: CurveMapping
    """

    exposure: float
    """ Exposure (stops) applied before display transform

    :type: float
    """

    gamma: float
    """ Amount of gamma modification applied after display transform

    :type: float
    """

    look: str
    """ Additional transform applied before view transform for artistic needs

    :type: str
    """

    use_curve_mapping: bool
    """ Use RGB curved for pre-display transformation

    :type: bool
    """

    use_hdr_view: bool
    """ Enable high dynamic range display in rendered viewport, uncapping display brightness. This requires a monitor with HDR support and a view transform designed for HDR. 'Filmic' and 'AgX' do not generate HDR colors

    :type: bool
    """

    view_transform: str
    """ View used when converting image to a display space

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorMapping(bpy_struct):
    """Color mapping settings"""

    blend_color: mathutils.Color
    """ Blend color to mix with texture output color

    :type: mathutils.Color
    """

    blend_factor: float
    """ 

    :type: float
    """

    blend_type: str
    """ Mode used to mix with texture output color

    :type: str
    """

    brightness: float
    """ Adjust the brightness of the texture

    :type: float
    """

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    contrast: float
    """ Adjust the contrast of the texture

    :type: float
    """

    saturation: float
    """ Adjust the saturation of colors in the texture

    :type: float
    """

    use_color_ramp: bool
    """ Toggle color ramp operations

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorRamp(bpy_struct):
    """Color ramp mapping a scalar value to a color"""

    color_mode: str
    """ Set color mode to use for interpolation

    :type: str
    """

    elements: ColorRampElements
    """ 

    :type: ColorRampElements
    """

    hue_interpolation: str
    """ Set color interpolation

    :type: str
    """

    interpolation: str
    """ Set interpolation between color stops

    :type: str
    """

    def evaluate(self, position: float | None) -> bpy_prop_array[float]:
        """Evaluate Color Ramp

        :param position: Position, Evaluate Color Ramp at position
        :type position: float | None
        :return: Color, Color at given position
        :rtype: bpy_prop_array[float]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorRampElement(bpy_struct):
    """Element defining a color at a position in the color ramp"""

    alpha: float
    """ Set alpha of selected color stop

    :type: float
    """

    color: bpy_prop_array[float]
    """ Set color of selected color stop

    :type: bpy_prop_array[float]
    """

    position: float
    """ Set position of selected color stop

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorRampElements(bpy_prop_collection[ColorRampElement], bpy_struct):
    """Collection of Color Ramp Elements"""

    def new(self, position: float | None) -> ColorRampElement:
        """Add element to Color Ramp

        :param position: Position, Position to add element
        :type position: float | None
        :return: New element
        :rtype: ColorRampElement
        """
        ...

    def remove(self, element: ColorRampElement):
        """Delete element from Color Ramp

        :param element: Element to remove
        :type element: ColorRampElement
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeOutputFileFileSlots(
    bpy_prop_collection[NodeOutputFileSlotFile], bpy_struct
):
    """Collection of File Output node slots"""

    def new(self, name: str | typing.Any) -> NodeSocket:
        """Add a file slot to this node

        :param name: Name
        :type name: str | typing.Any
        :return: New socket
        :rtype: NodeSocket
        """
        ...

    def remove(self, socket: NodeSocket | None):
        """Remove a file slot from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """
        ...

    def clear(self):
        """Remove all file slots from this node"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a file slot to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeOutputFileLayerSlots(
    bpy_prop_collection[NodeOutputFileSlotLayer], bpy_struct
):
    """Collection of File Output node slots"""

    def new(self, name: str | typing.Any) -> NodeSocket:
        """Add a file slot to this node

        :param name: Name
        :type name: str | typing.Any
        :return: New socket
        :rtype: NodeSocket
        """
        ...

    def remove(self, socket: NodeSocket | None):
        """Remove a file slot from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """
        ...

    def clear(self):
        """Remove all file slots from this node"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a file slot to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ConsoleLine(bpy_struct):
    """Input line for the interactive console"""

    body: str
    """ Text in the line

    :type: str
    """

    current_character: int
    """ 

    :type: int
    """

    type: str
    """ Console line type when used in scrollback

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Constraint(bpy_struct):
    """Constraint modifying the transformation of objects and bones"""

    active: bool | None
    """ Constraint is the one being edited

    :type: bool | None
    """

    enabled: bool
    """ Use the results of this constraint

    :type: bool
    """

    error_location: float
    """ Amount of residual error in Blender space unit for constraints that work on position

    :type: float
    """

    error_rotation: float
    """ Amount of residual error in radians for constraints that work on orientation

    :type: float
    """

    influence: float
    """ Amount of influence constraint will have on the final solution

    :type: float
    """

    is_override_data: bool
    """ In a local override object, whether this constraint comes from the linked reference object, or is local to the override

    :type: bool
    """

    is_valid: bool
    """ Constraint has valid settings and can be evaluated

    :type: bool
    """

    mute: bool
    """ Enable/Disable Constraint

    :type: bool
    """

    name: str
    """ Constraint name

    :type: str
    """

    owner_space: str
    """ Space that owner is evaluated in

    :type: str
    """

    show_expanded: bool
    """ Constraint's panel is expanded in UI

    :type: bool
    """

    space_object: Object
    """ Object for Custom Space

    :type: Object
    """

    space_subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target_space: str
    """ Space that target is evaluated in

    :type: str
    """

    type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ConstraintTarget(bpy_struct):
    """Target object for multi-target constraints"""

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ConstraintTargetBone(bpy_struct):
    """Target bone for multi-target constraints"""

    subtarget: str
    """ Target armature bone

    :type: str
    """

    target: Object
    """ Target armature

    :type: Object
    """

    weight: float
    """ Blending weight of this bone

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Context(bpy_struct):
    """Current windowmanager and data context"""

    area: Area
    """ 

    :type: Area
    """

    asset: AssetRepresentation
    """ 

    :type: AssetRepresentation
    """

    blend_data: BlendData
    """ 

    :type: BlendData
    """

    collection: Collection
    """ 

    :type: Collection
    """

    engine: str
    """ 

    :type: str
    """

    gizmo_group: GizmoGroup
    """ 

    :type: GizmoGroup
    """

    layer_collection: LayerCollection
    """ 

    :type: LayerCollection
    """

    mode: str
    """ 

    :type: str
    """

    preferences: Preferences
    """ 

    :type: Preferences
    """

    region: Region
    """ 

    :type: Region
    """

    region_data: RegionView3D
    """ 

    :type: RegionView3D
    """

    scene: Scene
    """ 

    :type: Scene
    """

    screen: Screen
    """ 

    :type: Screen
    """

    space_data: Space
    """ The current space, may be None in background-mode, when the cursor is outside the window or when using menu-search

    :type: Space
    """

    tool_settings: ToolSettings
    """ 

    :type: ToolSettings
    """

    view_layer: ViewLayer
    """ 

    :type: ViewLayer
    """

    window: Window
    """ 

    :type: Window
    """

    window_manager: WindowManager
    """ 

    :type: WindowManager
    """

    workspace: WorkSpace
    """ 

    :type: WorkSpace
    """

    area: Area
    """ 

    :type: Area
    """

    asset: AssetRepresentation
    """ 

    :type: AssetRepresentation
    """

    blend_data: BlendData
    """ 

    :type: BlendData
    """

    collection: Collection
    """ 

    :type: Collection
    """

    engine: str
    """ 

    :type: str
    """

    gizmo_group: GizmoGroup
    """ 

    :type: GizmoGroup
    """

    layer_collection: LayerCollection
    """ 

    :type: LayerCollection
    """

    mode: str
    """ 

    :type: str
    """

    preferences: Preferences
    """ 

    :type: Preferences
    """

    region: Region
    """ 

    :type: Region
    """

    region_data: RegionView3D
    """ 

    :type: RegionView3D
    """

    scene: Scene
    """ 

    :type: Scene
    """

    screen: Screen
    """ 

    :type: Screen
    """

    space_data: Space
    """ The current space, may be None in background-mode, when the cursor is outside the window or when using menu-search

    :type: Space
    """

    tool_settings: ToolSettings
    """ 

    :type: ToolSettings
    """

    view_layer: ViewLayer
    """ 

    :type: ViewLayer
    """

    window: Window
    """ 

    :type: Window
    """

    window_manager: WindowManager
    """ 

    :type: WindowManager
    """

    workspace: WorkSpace
    """ 

    :type: WorkSpace
    """

    texture_slot: TextureSlot
    """ 

    :type: TextureSlot
    """

    scene: Scene
    """ 

    :type: Scene
    """

    world: World
    """ 

    :type: World
    """

    object: Object
    """ 

    :type: Object
    """

    mesh: Mesh
    """ 

    :type: Mesh
    """

    armature: Armature
    """ 

    :type: Armature
    """

    lattice: Lattice
    """ 

    :type: Lattice
    """

    curve: Curve
    """ 

    :type: Curve
    """

    meta_ball: MetaBall
    """ 

    :type: MetaBall
    """

    light: Light
    """ 

    :type: Light
    """

    speaker: Speaker
    """ 

    :type: Speaker
    """

    lightprobe: LightProbe
    """ 

    :type: LightProbe
    """

    camera: Camera
    """ 

    :type: Camera
    """

    material: Material
    """ 

    :type: Material
    """

    material_slot: MaterialSlot
    """ 

    :type: MaterialSlot
    """

    texture: Texture
    """ 

    :type: Texture
    """

    texture_user: ID
    """ 

    :type: ID
    """

    texture_user_property: Property
    """ 

    :type: Property
    """

    texture_node: Node
    """ 

    :type: Node
    """

    bone: Bone
    """ 

    :type: Bone
    """

    edit_bone: EditBone
    """ 

    :type: EditBone
    """

    pose_bone: PoseBone
    """ 

    :type: PoseBone
    """

    particle_system: ParticleSystem
    """ 

    :type: ParticleSystem
    """

    particle_system_editable: ParticleSystem
    """ 

    :type: ParticleSystem
    """

    particle_settings: ParticleSettings
    """ 

    :type: ParticleSettings
    """

    cloth: ClothModifier
    """ 

    :type: ClothModifier
    """

    soft_body: SoftBodyModifier
    """ 

    :type: SoftBodyModifier
    """

    fluid: typing.Any
    collision: CollisionModifier
    """ 

    :type: CollisionModifier
    """

    brush: Brush
    """ 

    :type: Brush
    """

    dynamic_paint: DynamicPaintModifier
    """ 

    :type: DynamicPaintModifier
    """

    line_style: FreestyleLineStyle
    """ 

    :type: FreestyleLineStyle
    """

    collection: LayerCollection
    """ 

    :type: LayerCollection
    """

    gpencil: GreasePencil
    """ 

    :type: GreasePencil
    """

    curves: typing.Any
    volume: Volume
    """ 

    :type: Volume
    """

    edit_movieclip: MovieClip
    """ 

    :type: MovieClip
    """

    edit_mask: Mask
    """ 

    :type: Mask
    """

    active_file: FileSelectEntry | None
    """ 

    :type: FileSelectEntry | None
    """

    selected_files: list[FileSelectEntry]
    """ 

    :type: list[FileSelectEntry]
    """

    asset_library_reference: AssetLibraryReference
    """ 

    :type: AssetLibraryReference
    """

    selected_assets: list[AssetRepresentation]
    """ 

    :type: list[AssetRepresentation]
    """

    id: ID
    """ 

    :type: ID
    """

    selected_ids: list[ID]
    """ 

    :type: list[ID]
    """

    edit_image: Image
    """ 

    :type: Image
    """

    edit_mask: Mask
    """ 

    :type: Mask
    """

    selected_nodes: list[Node]
    """ 

    :type: list[Node]
    """

    active_node: Node | None
    """ 

    :type: Node | None
    """

    light: Light
    """ 

    :type: Light
    """

    material: Material
    """ 

    :type: Material
    """

    world: World
    """ 

    :type: World
    """

    scene: Scene
    """ 

    :type: Scene
    """

    view_layer: ViewLayer
    """ 

    :type: ViewLayer
    """

    visible_objects: list[Object]
    """ 

    :type: list[Object]
    """

    selectable_objects: list[Object]
    """ 

    :type: list[Object]
    """

    selected_objects: list[Object]
    """ 

    :type: list[Object]
    """

    editable_objects: list[Object]
    """ 

    :type: list[Object]
    """

    selected_editable_objects: list[Object]
    """ 

    :type: list[Object]
    """

    objects_in_mode: list[Object]
    """ 

    :type: list[Object]
    """

    objects_in_mode_unique_data: list[Object]
    """ 

    :type: list[Object]
    """

    visible_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    editable_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    selected_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    selected_editable_bones: list[EditBone]
    """ 

    :type: list[EditBone]
    """

    visible_pose_bones: list[PoseBone]
    """ 

    :type: list[PoseBone]
    """

    selected_pose_bones: list[PoseBone]
    """ 

    :type: list[PoseBone]
    """

    selected_pose_bones_from_active_object: list[PoseBone]
    """ 

    :type: list[PoseBone]
    """

    active_bone: EditBone | None
    """ 

    :type: EditBone | None
    """

    active_pose_bone: PoseBone | None
    """ 

    :type: PoseBone | None
    """

    active_object: Object | None
    """ 

    :type: Object | None
    """

    object: Object
    """ 

    :type: Object
    """

    edit_object: Object
    """ 

    :type: Object
    """

    sculpt_object: Object
    """ 

    :type: Object
    """

    vertex_paint_object: Object
    """ 

    :type: Object
    """

    weight_paint_object: Object
    """ 

    :type: Object
    """

    image_paint_object: Object
    """ 

    :type: Object
    """

    particle_edit_object: Object
    """ 

    :type: Object
    """

    pose_object: Object
    """ 

    :type: Object
    """

    active_sequence_strip: Sequence | None
    """ 

    :type: Sequence | None
    """

    sequences: list[Sequence]
    """ 

    :type: list[Sequence]
    """

    selected_sequences: list[Sequence]
    """ 

    :type: list[Sequence]
    """

    selected_editable_sequences: list[Sequence]
    """ 

    :type: list[Sequence]
    """

    active_nla_track: NlaTrack | None
    """ 

    :type: NlaTrack | None
    """

    active_nla_strip: NlaStrip | None
    """ 

    :type: NlaStrip | None
    """

    selected_nla_strips: list[NlaStrip]
    """ 

    :type: list[NlaStrip]
    """

    selected_movieclip_tracks: list[MovieTrackingTrack]
    """ 

    :type: list[MovieTrackingTrack]
    """

    gpencil_data: GreasePencil
    """ 

    :type: GreasePencil
    """

    gpencil_data_owner: ID
    """ 

    :type: ID
    """

    annotation_data: GreasePencil
    """ 

    :type: GreasePencil
    """

    annotation_data_owner: ID
    """ 

    :type: ID
    """

    visible_gpencil_layers: list[GPencilLayer]
    """ 

    :type: list[GPencilLayer]
    """

    editable_gpencil_layers: list[GPencilLayer]
    """ 

    :type: list[GPencilLayer]
    """

    editable_gpencil_strokes: list[GPencilStroke]
    """ 

    :type: list[GPencilStroke]
    """

    active_gpencil_layer: list[GPencilLayer] | None
    """ 

    :type: list[GPencilLayer] | None
    """

    active_gpencil_frame: typing.Any
    active_annotation_layer: GPencilLayer | None
    """ 

    :type: GPencilLayer | None
    """

    active_operator: Operator | None
    """ 

    :type: Operator | None
    """

    active_action: Action | None
    """ 

    :type: Action | None
    """

    selected_visible_actions: list[Action]
    """ 

    :type: list[Action]
    """

    selected_editable_actions: list[Action]
    """ 

    :type: list[Action]
    """

    visible_fcurves: list[FCurve]
    """ 

    :type: list[FCurve]
    """

    editable_fcurves: list[FCurve]
    """ 

    :type: list[FCurve]
    """

    selected_visible_fcurves: list[FCurve]
    """ 

    :type: list[FCurve]
    """

    selected_editable_fcurves: list[FCurve]
    """ 

    :type: list[FCurve]
    """

    active_editable_fcurve: FCurve | None
    """ 

    :type: FCurve | None
    """

    selected_editable_keyframes: list[Keyframe]
    """ 

    :type: list[Keyframe]
    """

    ui_list: UIList
    """ 

    :type: UIList
    """

    property: tuple[AnyType]
    """ Get the property associated with a hovered button.
Returns a tuple of the data-block, data path to the property, and array index.

    :type: tuple[AnyType]
    """

    asset_library_reference: AssetLibraryReference
    """ 

    :type: AssetLibraryReference
    """

    edit_mask: Mask
    """ 

    :type: Mask
    """

    edit_text: Text
    """ 

    :type: Text
    """

    active_object: Object | None
    """ 

    :type: Object | None
    """

    selected_ids: list[ID]
    """ 

    :type: list[ID]
    """

    def evaluated_depsgraph_get(self) -> Depsgraph:
        """Get the dependency graph for the current scene and view layer, to access to data-blocks with animation and modifiers applied. If any data-blocks have been edited, the dependency graph will be updated. This invalidates all references to evaluated data-blocks from the dependency graph.

        :return: Evaluated dependency graph
        :rtype: Depsgraph
        """
        ...

    def copy(self): ...
    def path_resolve(self, path: str | None, coerce: bool | None = True):
        """Returns the property from the path, raise an exception when not found.

        :param path: patch which this property resolves.
        :type path: str | None
        :param coerce: optional argument, when True, the property will be converted into its Python representation.
        :type coerce: bool | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    def temp_override(
        self,
        window: Window | None,
        area: Area | None,
        region: Region | None,
        **keywords,
    ):
        """Context manager to temporarily override members in the context.Overriding the context can be used to temporarily activate another window / area & region,
        as well as other members such as the active_object or bone.Notes:Overriding the context can be useful to set the context after loading files
        (which would otherwise by None). For example:This example shows how it's possible to add an object to the scene in another window.

                :param window: Window override or None.
                :type window: Window | None
                :param area: Area override or None.
                :type area: Area | None
                :param region: Region override or None.
                :type region: Region | None
                :param keywords: Additional keywords override context members.
                :return: The context manager .
        """
        ...

class CryptomatteEntry(bpy_struct):
    encoded_hash: float
    """ 

    :type: float
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveMap(bpy_struct):
    """Curve in a curve mapping"""

    points: CurveMapPoints
    """ 

    :type: CurveMapPoints
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveMapPoint(bpy_struct):
    """Point of a curve used for a curve mapping"""

    handle_type: str
    """ Curve interpolation at this point: Bézier or vector

    :type: str
    """

    location: mathutils.Vector
    """ X/Y coordinates of the curve point

    :type: mathutils.Vector
    """

    select: bool
    """ Selection state of the curve point

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveMapPoints(bpy_prop_collection[CurveMapPoint], bpy_struct):
    """Collection of Curve Map Points"""

    def new(self, position: float | None, value: float | None) -> CurveMapPoint:
        """Add point to CurveMap

        :param position: Position, Position to add point
        :type position: float | None
        :param value: Value, Value of point
        :type value: float | None
        :return: New point
        :rtype: CurveMapPoint
        """
        ...

    def remove(self, point: CurveMapPoint):
        """Delete point from CurveMap

        :param point: PointElement to remove
        :type point: CurveMapPoint
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveMapping(bpy_struct):
    """Curve mapping to map color, vector and scalar values to other values using a user defined curve"""

    black_level: mathutils.Color
    """ For RGB curves, the color that black is mapped to

    :type: mathutils.Color
    """

    clip_max_x: float
    """ 

    :type: float
    """

    clip_max_y: float
    """ 

    :type: float
    """

    clip_min_x: float
    """ 

    :type: float
    """

    clip_min_y: float
    """ 

    :type: float
    """

    curves: bpy_prop_collection[CurveMap]
    """ 

    :type: bpy_prop_collection[CurveMap]
    """

    extend: str
    """ Extrapolate the curve or extend it horizontally

    :type: str
    """

    tone: str
    """ Tone of the curve

    :type: str
    """

    use_clip: bool
    """ Force the curve view to fit a defined boundary

    :type: bool
    """

    white_level: mathutils.Color
    """ For RGB curves, the color that white is mapped to

    :type: mathutils.Color
    """

    def update(self):
        """Update curve mapping after making changes"""
        ...

    def reset_view(self):
        """Reset the curve mapping grid to its clipping size"""
        ...

    def initialize(self):
        """Initialize curve"""
        ...

    def evaluate(self, curve: CurveMap, position: float | None) -> float:
        """Evaluate curve at given location

        :param curve: curve, Curve to evaluate
        :type curve: CurveMap
        :param position: Position, Position to evaluate curve at
        :type position: float | None
        :return: Value, Value of curve at given location
        :rtype: float
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurvePaintSettings(bpy_struct):
    corner_angle: float
    """ Angles above this are considered corners

    :type: float
    """

    curve_type: str
    """ Type of curve to use for new strokes

    :type: str
    """

    depth_mode: str
    """ Method of projecting depth

    :type: str
    """

    error_threshold: int
    """ Allow deviation for a smoother, less precise line

    :type: int
    """

    fit_method: str
    """ Curve fitting method

    :type: str
    """

    radius_max: float
    """ Radius to use when the maximum pressure is applied (or when a tablet isn't used)

    :type: float
    """

    radius_min: float
    """ Minimum radius when the minimum pressure is applied (also the minimum when tapering)

    :type: float
    """

    radius_taper_end: float
    """ Taper factor for the radius of each point along the curve

    :type: float
    """

    radius_taper_start: float
    """ Taper factor for the radius of each point along the curve

    :type: float
    """

    surface_offset: float
    """ Offset the stroke from the surface

    :type: float
    """

    surface_plane: str
    """ Plane for projected stroke

    :type: str
    """

    use_corners_detect: bool
    """ Detect corners and use non-aligned handles

    :type: bool
    """

    use_offset_absolute: bool
    """ Apply a fixed offset (don't scale by the radius)

    :type: bool
    """

    use_pressure_radius: bool
    """ Map tablet pressure to curve radius

    :type: bool
    """

    use_stroke_endpoints: bool
    """ Use the start of the stroke for the depth

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurvePoint(bpy_struct):
    """Curve control point"""

    index: int
    """ Index of this point

    :type: int
    """

    position: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    radius: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveProfile(bpy_struct):
    """Profile Path editor used to build a profile path"""

    points: CurveProfilePoints
    """ Profile control points

    :type: CurveProfilePoints
    """

    preset: str
    """ 

    :type: str
    """

    segments: bpy_prop_collection[CurveProfilePoint]
    """ Segments sampled from control points

    :type: bpy_prop_collection[CurveProfilePoint]
    """

    use_clip: bool
    """ Force the path view to fit a defined boundary

    :type: bool
    """

    use_sample_even_lengths: bool
    """ Sample edges with even lengths

    :type: bool
    """

    use_sample_straight_edges: bool
    """ Sample edges with vector handles

    :type: bool
    """

    def update(self):
        """Refresh internal data, remove doubles and clip points"""
        ...

    def reset_view(self):
        """Reset the curve profile grid to its clipping size"""
        ...

    def initialize(self, totsegments: typing.Any):
        """Set the number of display segments and fill tables

        :param totsegments: The number of segment values to initialize the segments table with
        :type totsegments: typing.Any
        """
        ...

    def evaluate(self, length_portion: float | None) -> mathutils.Vector:
        """Evaluate the at the given portion of the path length

        :param length_portion: Length Portion, Portion of the path length to travel before evaluation
        :type length_portion: float | None
        :return: Location, The location at the given portion of the profile
        :rtype: mathutils.Vector
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveProfilePoint(bpy_struct):
    """Point of a path used to define a profile"""

    handle_type_1: str
    """ Path interpolation at this point

    :type: str
    """

    handle_type_2: str
    """ Path interpolation at this point

    :type: str
    """

    location: mathutils.Vector
    """ X/Y coordinates of the path point

    :type: mathutils.Vector
    """

    select: bool
    """ Selection state of the path point

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveProfilePoints(bpy_prop_collection[CurveProfilePoint], bpy_struct):
    """Collection of Profile Points"""

    def add(self, x: float | None, y: float | None) -> CurveProfilePoint:
        """Add point to the profile

        :param x: X Position, X Position for new point
        :type x: float | None
        :param y: Y Position, Y Position for new point
        :type y: float | None
        :return: New point
        :rtype: CurveProfilePoint
        """
        ...

    def remove(self, point: CurveProfilePoint):
        """Delete point from the profile

        :param point: Point to remove
        :type point: CurveProfilePoint
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveSlice(bpy_struct):
    """A single curve from a curves data-block"""

    first_point_index: int
    """ The index of this curve's first control point

    :type: int
    """

    index: int
    """ Index of this curve

    :type: int
    """

    points: bpy_prop_collection[CurvePoint]
    """ Control points of the curve

    :type: bpy_prop_collection[CurvePoint]
    """

    points_length: int
    """ Number of control points in the curve

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveSplines(bpy_prop_collection[Spline], bpy_struct):
    """Collection of curve splines"""

    active: Spline | None
    """ Active curve spline

    :type: Spline | None
    """

    def new(self, type: str | None) -> Spline:
        """Add a new spline to the curve

        :param type: type for the new spline
        :type type: str | None
        :return: The newly created spline
        :rtype: Spline
        """
        ...

    def remove(self, spline: Spline):
        """Remove a spline from a curve

        :param spline: The spline to remove
        :type spline: Spline
        """
        ...

    def clear(self):
        """Remove all splines from a curve"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DashGpencilModifierSegment(bpy_struct):
    """Configuration for a single dash segment"""

    dash: int
    """ The number of consecutive points from the original stroke to include in this segment

    :type: int
    """

    gap: int
    """ The number of points skipped after this segment

    :type: int
    """

    material_index: int
    """ Use this index on generated segment. -1 means using the existing material

    :type: int
    """

    name: str
    """ Name of the dash segment

    :type: str
    """

    opacity: float
    """ The factor to apply to the original point's opacity for the new points

    :type: float
    """

    radius: float
    """ The factor to apply to the original point's radius for the new points

    :type: float
    """

    use_cyclic: bool
    """ Enable cyclic on individual stroke dashes

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Depsgraph(bpy_struct):
    ids: bpy_prop_collection[ID]
    """ All evaluated data-blocks

    :type: bpy_prop_collection[ID]
    """

    mode: str
    """ Evaluation mode

    :type: str
    """

    object_instances: bpy_prop_collection[DepsgraphObjectInstance]
    """ All object instances to display or render (Warning: Only use this as an iterator, never as a sequence, and do not keep any references to its items)

    :type: bpy_prop_collection[DepsgraphObjectInstance]
    """

    objects: bpy_prop_collection[Object]
    """ Evaluated objects in the dependency graph

    :type: bpy_prop_collection[Object]
    """

    scene: Scene
    """ Original scene dependency graph is built for

    :type: Scene
    """

    scene_eval: Scene
    """ Scene at its evaluated state

    :type: Scene
    """

    updates: bpy_prop_collection[DepsgraphUpdate]
    """ Updates to data-blocks

    :type: bpy_prop_collection[DepsgraphUpdate]
    """

    view_layer: ViewLayer
    """ Original view layer dependency graph is built for

    :type: ViewLayer
    """

    view_layer_eval: ViewLayer
    """ View layer at its evaluated state

    :type: ViewLayer
    """

    def debug_relations_graphviz(self, filepath: str | typing.Any):
        """debug_relations_graphviz

        :param filepath: File Name, Output path for the graphviz debug file
        :type filepath: str | typing.Any
        """
        ...

    def debug_stats_gnuplot(
        self, filepath: str | typing.Any, output_filepath: str | typing.Any
    ):
        """debug_stats_gnuplot

        :param filepath: File Name, Output path for the gnuplot debug file
        :type filepath: str | typing.Any
        :param output_filepath: Output File Name, File name where gnuplot script will save the result
        :type output_filepath: str | typing.Any
        """
        ...

    def debug_tag_update(self):
        """debug_tag_update"""
        ...

    def debug_stats(self) -> str | typing.Any:
        """Report the number of elements in the Dependency Graph

        :return: result
        :rtype: str | typing.Any
        """
        ...

    def update(self):
        """Re-evaluate any modified data-blocks, for example for animation or modifiers. This invalidates all references to evaluated data-blocks from this dependency graph."""
        ...

    def id_eval_get(self, id: ID | None) -> ID:
        """id_eval_get

        :param id: Original ID to get evaluated complementary part for
        :type id: ID | None
        :return: Evaluated ID for the given original one
        :rtype: ID
        """
        ...

    def id_type_updated(self, id_type: str | None) -> bool:
        """id_type_updated

        :param id_type: ID Type
        :type id_type: str | None
        :return: Updated, True if any datablock with this type was added, updated or removed
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DepsgraphObjectInstance(bpy_struct):
    """Extended information about dependency graph object iterator (Warning: All data here is 'evaluated' one, not original .blend IDs)"""

    instance_object: Object
    """ Evaluated object which is being instanced by this iterator

    :type: Object
    """

    is_instance: bool
    """ Denotes if the object is generated by another object

    :type: bool
    """

    matrix_world: mathutils.Matrix
    """ Generated transform matrix in world space

    :type: mathutils.Matrix
    """

    object: Object
    """ Evaluated object the iterator points to

    :type: Object
    """

    orco: mathutils.Vector
    """ Generated coordinates in parent object space

    :type: mathutils.Vector
    """

    parent: Object
    """ If the object is an instance, the parent object that generated it

    :type: Object
    """

    particle_system: ParticleSystem
    """ Evaluated particle system that this object was instanced from

    :type: ParticleSystem
    """

    persistent_id: bpy_prop_array[int]
    """ Persistent identifier for inter-frame matching of objects with motion blur

    :type: bpy_prop_array[int]
    """

    random_id: int
    """ Random id for this instance, typically for randomized shading

    :type: int
    """

    show_particles: bool
    """ Particles part of the object should be visible in the render

    :type: bool
    """

    show_self: bool
    """ The object geometry itself should be visible in the render

    :type: bool
    """

    uv: bpy_prop_array[float]
    """ UV coordinates in parent object space

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DepsgraphUpdate(bpy_struct):
    """Information about ID that was updated"""

    id: ID
    """ Updated data-block

    :type: ID
    """

    is_updated_geometry: bool
    """ Object geometry is updated

    :type: bool
    """

    is_updated_shading: bool
    """ Object shading is updated

    :type: bool
    """

    is_updated_transform: bool
    """ Object transformation is updated

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DisplaySafeAreas(bpy_struct):
    """Safe areas used in 3D view and the sequencer"""

    action: mathutils.Vector
    """ Safe area for general elements

    :type: mathutils.Vector
    """

    action_center: mathutils.Vector
    """ Safe area for general elements in a different aspect ratio

    :type: mathutils.Vector
    """

    title: mathutils.Vector
    """ Safe area for text and graphics

    :type: mathutils.Vector
    """

    title_center: mathutils.Vector
    """ Safe area for text and graphics in a different aspect ratio

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DopeSheet(bpy_struct):
    """Settings for filtering the channels shown in animation editors"""

    filter_collection: Collection
    """ Collection that included object should be a member of

    :type: Collection
    """

    filter_fcurve_name: str
    """ F-Curve live filtering string

    :type: str
    """

    filter_text: str
    """ Live filtering string

    :type: str
    """

    show_armatures: bool
    """ Include visualization of armature related animation data

    :type: bool
    """

    show_cache_files: bool
    """ Include visualization of cache file related animation data

    :type: bool
    """

    show_cameras: bool
    """ Include visualization of camera related animation data

    :type: bool
    """

    show_curves: bool
    """ Include visualization of curve related animation data

    :type: bool
    """

    show_datablock_filters: bool
    """ Show options for whether channels related to certain types of data are included

    :type: bool
    """

    show_driver_fallback_as_error: bool
    """ Include drivers that relied on any fallback values for their evaluation in the Only Show Errors filter, even if the driver evaluation succeeded

    :type: bool
    """

    show_expanded_summary: bool
    """ Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)

    :type: bool
    """

    show_gpencil: bool
    """ Include visualization of Grease Pencil related animation data and frames

    :type: bool
    """

    show_hair_curves: bool
    """ Include visualization of hair related animation data

    :type: bool
    """

    show_hidden: bool
    """ Include channels from objects/bone that are not visible

    :type: bool
    """

    show_lattices: bool
    """ Include visualization of lattice related animation data

    :type: bool
    """

    show_lights: bool
    """ Include visualization of light related animation data

    :type: bool
    """

    show_linestyles: bool
    """ Include visualization of Line Style related Animation data

    :type: bool
    """

    show_materials: bool
    """ Include visualization of material related animation data

    :type: bool
    """

    show_meshes: bool
    """ Include visualization of mesh related animation data

    :type: bool
    """

    show_metaballs: bool
    """ Include visualization of metaball related animation data

    :type: bool
    """

    show_missing_nla: bool
    """ Include animation data-blocks with no NLA data (NLA editor only)

    :type: bool
    """

    show_modifiers: bool
    """ Include visualization of animation data related to data-blocks linked to modifiers

    :type: bool
    """

    show_movieclips: bool
    """ Include visualization of movie clip related animation data

    :type: bool
    """

    show_nodes: bool
    """ Include visualization of node related animation data

    :type: bool
    """

    show_only_errors: bool
    """ Only include F-Curves and drivers that are disabled or have errors

    :type: bool
    """

    show_only_selected: bool
    """ Only include channels relating to selected objects and data

    :type: bool
    """

    show_particles: bool
    """ Include visualization of particle related animation data

    :type: bool
    """

    show_pointclouds: bool
    """ Include visualization of point cloud related animation data

    :type: bool
    """

    show_scenes: bool
    """ Include visualization of scene related animation data

    :type: bool
    """

    show_shapekeys: bool
    """ Include visualization of shape key related animation data

    :type: bool
    """

    show_speakers: bool
    """ Include visualization of speaker related animation data

    :type: bool
    """

    show_summary: bool
    """ Display an additional 'summary' line (Dope Sheet editors only)

    :type: bool
    """

    show_textures: bool
    """ Include visualization of texture related animation data

    :type: bool
    """

    show_transforms: bool
    """ Include visualization of object-level animation data (mostly transforms)

    :type: bool
    """

    show_volumes: bool
    """ Include visualization of volume related animation data

    :type: bool
    """

    show_worlds: bool
    """ Include visualization of world related animation data

    :type: bool
    """

    source: ID
    """ ID-Block representing source data, usually ID_SCE (i.e. Scene)

    :type: ID
    """

    use_datablock_sort: bool
    """ Alphabetically sorts data-blocks - mainly objects in the scene (disable to increase viewport speed)

    :type: bool
    """

    use_filter_invert: bool
    """ Invert filter search

    :type: bool
    """

    use_multi_word_filter: bool
    """ Perform fuzzy/multi-word matching.
Warning: May be slow

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Driver(bpy_struct):
    """Driver for the value of a setting based on an external value"""

    expression: str
    """ Expression to use for Scripted Expression

    :type: str
    """

    is_simple_expression: bool
    """ The scripted expression can be evaluated without using the full Python interpreter

    :type: bool
    """

    is_valid: bool
    """ Driver could not be evaluated in past, so should be skipped

    :type: bool
    """

    type: str
    """ Driver type

    :type: str
    """

    use_self: bool
    """ Include a 'self' variable in the name-space, so drivers can easily reference the data being modified (object, bone, etc...)

    :type: bool
    """

    variables: ChannelDriverVariables
    """ Properties acting as inputs for this driver

    :type: ChannelDriverVariables
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DriverTarget(bpy_struct):
    """Source of input values for driver variables"""

    bone_target: str
    """ Name of PoseBone to use as target

    :type: str
    """

    context_property: str
    """ Type of a context-dependent data-block to access property from

    :type: str
    """

    data_path: str
    """ RNA Path (from ID-block) to property used

    :type: str
    """

    fallback_value: float
    """ The value to use if the data path can't be resolved

    :type: float
    """

    id: ID
    """ ID-block that the specific property used can be found from (id_type property must be set first)

    :type: ID
    """

    id_type: str
    """ Type of ID-block that can be used

    :type: str
    """

    is_fallback_used: bool
    """ Indicates that the most recent variable evaluation used the fallback value

    :type: bool
    """

    rotation_mode: str
    """ Mode for calculating rotation channel values

    :type: str
    """

    transform_space: str
    """ Space in which transforms are used

    :type: str
    """

    transform_type: str
    """ Driver variable type

    :type: str
    """

    use_fallback_value: bool
    """ Use the fallback value if the data path can't be resolved, instead of failing to evaluate the driver

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DriverVariable(bpy_struct):
    """Variable from some source/target for driver relationship"""

    is_name_valid: bool
    """ Is this a valid name for a driver variable

    :type: bool
    """

    name: str
    """ Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)

    :type: str
    """

    targets: bpy_prop_collection[DriverTarget]
    """ Sources of input data for evaluating this variable

    :type: bpy_prop_collection[DriverTarget]
    """

    type: str
    """ Driver variable type

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DynamicPaintBrushSettings(bpy_struct):
    """Brush settings"""

    invert_proximity: bool
    """ Proximity falloff is applied inside the volume

    :type: bool
    """

    paint_alpha: float
    """ Paint alpha

    :type: float
    """

    paint_color: mathutils.Color
    """ Color of the paint

    :type: mathutils.Color
    """

    paint_distance: float
    """ Maximum distance from brush to mesh surface to affect paint

    :type: float
    """

    paint_ramp: ColorRamp
    """ Color ramp used to define proximity falloff

    :type: ColorRamp
    """

    paint_source: str
    """ 

    :type: str
    """

    paint_wetness: float
    """ Paint wetness, visible in wetmap (some effects only affect wet paint)

    :type: float
    """

    particle_system: ParticleSystem
    """ The particle system to paint with

    :type: ParticleSystem
    """

    proximity_falloff: str
    """ Proximity falloff type

    :type: str
    """

    ray_direction: str
    """ Ray direction to use for projection (if brush object is located in that direction it's painted)

    :type: str
    """

    smooth_radius: float
    """ Smooth falloff added after solid radius

    :type: float
    """

    smudge_strength: float
    """ Smudge effect strength

    :type: float
    """

    solid_radius: float
    """ Radius that will be painted solid

    :type: float
    """

    use_absolute_alpha: bool
    """ Only increase alpha value if paint alpha is higher than existing

    :type: bool
    """

    use_negative_volume: bool
    """ Negate influence inside the volume

    :type: bool
    """

    use_paint_erase: bool
    """ Erase / remove paint instead of adding it

    :type: bool
    """

    use_particle_radius: bool
    """ Use radius from particle settings

    :type: bool
    """

    use_proximity_project: bool
    """ Brush is projected to canvas from defined direction within brush proximity

    :type: bool
    """

    use_proximity_ramp_alpha: bool
    """ Only read color ramp alpha

    :type: bool
    """

    use_smudge: bool
    """ Make this brush to smudge existing paint as it moves

    :type: bool
    """

    use_velocity_alpha: bool
    """ Multiply brush influence by velocity color ramp alpha

    :type: bool
    """

    use_velocity_color: bool
    """ Replace brush color by velocity color ramp

    :type: bool
    """

    use_velocity_depth: bool
    """ Multiply brush intersection depth (displace, waves) by velocity ramp alpha

    :type: bool
    """

    velocity_max: float
    """ Velocity considered as maximum influence (Blender units per frame)

    :type: float
    """

    velocity_ramp: ColorRamp
    """ Color ramp used to define brush velocity effect

    :type: ColorRamp
    """

    wave_clamp: float
    """ Maximum level of surface intersection used to influence waves (use 0.0 to disable)

    :type: float
    """

    wave_factor: float
    """ Multiplier for wave influence of this brush

    :type: float
    """

    wave_type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DynamicPaintCanvasSettings(bpy_struct):
    """Dynamic Paint canvas settings"""

    canvas_surfaces: DynamicPaintSurfaces
    """ Paint surface list

    :type: DynamicPaintSurfaces
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DynamicPaintSurface(bpy_struct):
    """A canvas surface layer"""

    brush_collection: Collection
    """ Only use brush objects from this collection

    :type: Collection
    """

    brush_influence_scale: float
    """ Adjust influence brush objects have on this surface

    :type: float
    """

    brush_radius_scale: float
    """ Adjust radius of proximity brushes or particles for this surface

    :type: float
    """

    color_dry_threshold: float
    """ The wetness level when colors start to shift to the background

    :type: float
    """

    color_spread_speed: float
    """ How fast colors get mixed within wet paint

    :type: float
    """

    depth_clamp: float
    """ Maximum level of depth intersection in object space (use 0.0 to disable)

    :type: float
    """

    displace_factor: float
    """ Strength of displace when applied to the mesh

    :type: float
    """

    displace_type: str
    """ 

    :type: str
    """

    dissolve_speed: int
    """ Approximately in how many frames should dissolve happen

    :type: int
    """

    drip_acceleration: float
    """ How much surface acceleration affects dripping

    :type: float
    """

    drip_velocity: float
    """ How much surface velocity affects dripping

    :type: float
    """

    dry_speed: int
    """ Approximately in how many frames should drying happen

    :type: int
    """

    effect_ui: str
    """ 

    :type: str
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    frame_end: int
    """ Simulation end frame

    :type: int
    """

    frame_start: int
    """ Simulation start frame

    :type: int
    """

    frame_substeps: int
    """ Do extra frames between scene frames to ensure smooth motion

    :type: int
    """

    image_fileformat: str
    """ 

    :type: str
    """

    image_output_path: str
    """ Directory to save the textures

    :type: str
    """

    image_resolution: int
    """ Output image resolution

    :type: int
    """

    init_color: bpy_prop_array[float]
    """ Initial color of the surface

    :type: bpy_prop_array[float]
    """

    init_color_type: str
    """ 

    :type: str
    """

    init_layername: str
    """ 

    :type: str
    """

    init_texture: Texture
    """ 

    :type: Texture
    """

    is_active: bool
    """ Toggle whether surface is processed or ignored

    :type: bool
    """

    is_cache_user: bool
    """ 

    :type: bool
    """

    name: str
    """ Surface name

    :type: str
    """

    output_name_a: str
    """ Name used to save output from this surface

    :type: str
    """

    output_name_b: str
    """ Name used to save output from this surface

    :type: str
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    shrink_speed: float
    """ How fast shrink effect moves on the canvas surface

    :type: float
    """

    spread_speed: float
    """ How fast spread effect moves on the canvas surface

    :type: float
    """

    surface_format: str
    """ Surface Format

    :type: str
    """

    surface_type: str
    """ Surface Type

    :type: str
    """

    use_antialiasing: bool
    """ Use 5× multisampling to smooth paint edges

    :type: bool
    """

    use_dissolve: bool
    """ Enable to make surface changes disappear over time

    :type: bool
    """

    use_dissolve_log: bool
    """ Use logarithmic dissolve (makes high values to fade faster than low values)

    :type: bool
    """

    use_drip: bool
    """ Process drip effect (drip wet paint to gravity direction)

    :type: bool
    """

    use_dry_log: bool
    """ Use logarithmic drying (makes high values to dry faster than low values)

    :type: bool
    """

    use_drying: bool
    """ Enable to make surface wetness dry over time

    :type: bool
    """

    use_incremental_displace: bool
    """ New displace is added cumulatively on top of existing

    :type: bool
    """

    use_output_a: bool
    """ Save this output layer

    :type: bool
    """

    use_output_b: bool
    """ Save this output layer

    :type: bool
    """

    use_premultiply: bool
    """ Multiply color by alpha (recommended for Blender input)

    :type: bool
    """

    use_shrink: bool
    """ Process shrink effect (shrink paint areas)

    :type: bool
    """

    use_spread: bool
    """ Process spread effect (spread wet paint around surface)

    :type: bool
    """

    use_wave_open_border: bool
    """ Pass waves through mesh edges

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    wave_damping: float
    """ Wave damping factor

    :type: float
    """

    wave_smoothness: float
    """ Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)

    :type: float
    """

    wave_speed: float
    """ Wave propagation speed

    :type: float
    """

    wave_spring: float
    """ Spring force that pulls water level back to zero

    :type: float
    """

    wave_timescale: float
    """ Wave time scaling factor

    :type: float
    """

    def output_exists(self, object: Object, index: int | None) -> bool:
        """Checks if surface output layer of given name exists

        :param object:
        :type object: Object
        :param index: Index
        :type index: int | None
        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DynamicPaintSurfaces(bpy_prop_collection[DynamicPaintSurface], bpy_struct):
    """Collection of Dynamic Paint Canvas surfaces"""

    active: DynamicPaintSurface
    """ Active Dynamic Paint surface being displayed

    :type: DynamicPaintSurface
    """

    active_index: int | None
    """ 

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EQCurveMappingData(bpy_struct):
    """EQCurveMappingData"""

    curve_mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EditBone(bpy_struct):
    """Edit mode bone in an armature data-block"""

    bbone_curveinx: float
    """ X-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveinz: float
    """ Z-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutx: float
    """ X-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutz: float
    """ Z-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_custom_handle_end: EditBone
    """ Bone that serves as the end handle for the B-Bone curve

    :type: EditBone
    """

    bbone_custom_handle_start: EditBone
    """ Bone that serves as the start handle for the B-Bone curve

    :type: EditBone
    """

    bbone_easein: float
    """ Length of first Bézier Handle (for B-Bones only)

    :type: float
    """

    bbone_easeout: float
    """ Length of second Bézier Handle (for B-Bones only)

    :type: float
    """

    bbone_handle_type_end: str
    """ Selects how the end handle of the B-Bone is computed

    :type: str
    """

    bbone_handle_type_start: str
    """ Selects how the start handle of the B-Bone is computed

    :type: str
    """

    bbone_handle_use_ease_end: bool
    """ Multiply the B-Bone Ease Out channel by the local Y scale value of the end handle. This is done after the Scale Easing option and isn't affected by it

    :type: bool
    """

    bbone_handle_use_ease_start: bool
    """ Multiply the B-Bone Ease In channel by the local Y scale value of the start handle. This is done after the Scale Easing option and isn't affected by it

    :type: bool
    """

    bbone_handle_use_scale_end: list[bool]
    """ Multiply B-Bone Scale Out channels by the local scale values of the end handle. This is done after the Scale Easing option and isn't affected by it

    :type: list[bool]
    """

    bbone_handle_use_scale_start: list[bool]
    """ Multiply B-Bone Scale In channels by the local scale values of the start handle. This is done after the Scale Easing option and isn't affected by it

    :type: list[bool]
    """

    bbone_mapping_mode: str
    """ Selects how the vertices are mapped to B-Bone segments based on their position

    :type: str
    """

    bbone_rollin: float
    """ Roll offset for the start of the B-Bone, adjusts twist

    :type: float
    """

    bbone_rollout: float
    """ Roll offset for the end of the B-Bone, adjusts twist

    :type: float
    """

    bbone_scalein: mathutils.Vector
    """ Scale factors for the start of the B-Bone, adjusts thickness (for tapering effects)

    :type: mathutils.Vector
    """

    bbone_scaleout: mathutils.Vector
    """ Scale factors for the end of the B-Bone, adjusts thickness (for tapering effects)

    :type: mathutils.Vector
    """

    bbone_segments: int
    """ Number of subdivisions of bone (for B-Bones only)

    :type: int
    """

    bbone_x: float
    """ B-Bone X size

    :type: float
    """

    bbone_z: float
    """ B-Bone Z size

    :type: float
    """

    collections: bpy_prop_collection[BoneCollection]
    """ Bone Collections that contain this bone

    :type: bpy_prop_collection[BoneCollection]
    """

    color: BoneColor
    """ 

    :type: BoneColor
    """

    envelope_distance: float
    """ Bone deformation distance (for Envelope deform only)

    :type: float
    """

    envelope_weight: float
    """ Bone deformation weight (for Envelope deform only)

    :type: float
    """

    head: mathutils.Vector
    """ Location of head end of the bone

    :type: mathutils.Vector
    """

    head_radius: float
    """ Radius of head of bone (for Envelope deform only)

    :type: float
    """

    hide: bool
    """ Bone is not visible when in Edit Mode

    :type: bool
    """

    hide_select: bool
    """ Bone is able to be selected

    :type: bool
    """

    inherit_scale: str
    """ Specifies how the bone inherits scaling from the parent bone

    :type: str
    """

    length: float
    """ Length of the bone. Changing moves the tail end

    :type: float
    """

    lock: bool
    """ Bone is not able to be transformed when in Edit Mode

    :type: bool
    """

    matrix: mathutils.Matrix
    """ Matrix combining location and rotation of the bone (head position, direction and roll), in armature space (does not include/support bone's length/size)

    :type: mathutils.Matrix
    """

    name: str
    """ 

    :type: str
    """

    parent: EditBone
    """ Parent edit bone (in same Armature)

    :type: EditBone
    """

    roll: float
    """ Bone rotation around head-tail axis

    :type: float
    """

    select: bool
    """ 

    :type: bool
    """

    select_head: bool
    """ 

    :type: bool
    """

    select_tail: bool
    """ 

    :type: bool
    """

    show_wire: bool
    """ Bone is always displayed in wireframe regardless of viewport shading mode (useful for non-obstructive custom bone shapes)

    :type: bool
    """

    tail: mathutils.Vector
    """ Location of tail end of the bone

    :type: mathutils.Vector
    """

    tail_radius: float
    """ Radius of tail of bone (for Envelope deform only)

    :type: float
    """

    use_connect: bool
    """ When bone has a parent, bone's head is stuck to the parent's tail

    :type: bool
    """

    use_cyclic_offset: bool
    """ When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)

    :type: bool
    """

    use_deform: bool
    """ Enable Bone to deform geometry

    :type: bool
    """

    use_endroll_as_inroll: bool
    """ Add Roll Out of the Start Handle bone to the Roll In value

    :type: bool
    """

    use_envelope_multiply: bool
    """ When deforming bone, multiply effects of Vertex Group weights with Envelope influence

    :type: bool
    """

    use_inherit_rotation: bool
    """ Bone inherits rotation or scale from parent bone

    :type: bool
    """

    use_local_location: bool
    """ Bone location is set in local space

    :type: bool
    """

    use_relative_parent: bool
    """ Object children will use relative transform, like deform

    :type: bool
    """

    use_scale_easing: bool
    """ Multiply the final easing values by the Scale In/Out Y factors

    :type: bool
    """

    basename: typing.Any
    """ The name of this bone before any '.' character(readonly)"""

    center: typing.Any
    """ The midpoint between the head and the tail.(readonly)"""

    children: typing.Any
    """ A list of all the bones children.(readonly)"""

    children_recursive: typing.Any
    """ A list of all children from this bone.(readonly)"""

    children_recursive_basename: typing.Any
    """ Returns a chain of children with the same base name as this bone.
Only direct chains are supported, forks caused by multiple children
with matching base names will terminate the function
and not be returned.(readonly)"""

    parent_recursive: typing.Any
    """ A list of parents, starting with the immediate parent(readonly)"""

    vector: typing.Any
    """ The direction this bone is pointing.
Utility function for (tail - head)(readonly)"""

    x_axis: typing.Any
    """ Vector pointing down the x-axis of the bone.(readonly)"""

    y_axis: typing.Any
    """ Vector pointing down the y-axis of the bone.(readonly)"""

    z_axis: typing.Any
    """ Vector pointing down the z-axis of the bone.(readonly)"""

    def align_roll(
        self, vector: collections.abc.Sequence[float] | mathutils.Vector | None
    ):
        """Align the bone to a local-space roll so the Z axis points in the direction of the vector given

        :param vector: Vector
        :type vector: collections.abc.Sequence[float] | mathutils.Vector | None
        """
        ...

    def align_orientation(self, other):
        """Align this bone to another by moving its tail and settings its roll
        the length of the other bone is not used.

                :param other:
        """
        ...

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
        but saved generating a list.

                :param parent_test:
        """
        ...

    def transform(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        *,
        scale: bool | None = True,
        roll: bool | None = True,
    ):
        """Transform the the bones head, tail, roll and envelope
        (when the matrix has a scale component).

                :param matrix: 3x3 or 4x4 transformation matrix.
                :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
                :param scale: Scale the bone envelope by the matrix.
                :type scale: bool | None
                :param roll: Correct the roll to point in the same relative
        direction to the head and tail.
                :type roll: bool | None
        """
        ...

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone

        :param vec:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EffectorWeights(bpy_struct):
    """Effector weights for physics simulation"""

    all: float
    """ All effector's weight

    :type: float
    """

    apply_to_hair_growing: bool
    """ Use force fields when growing hair

    :type: bool
    """

    boid: float
    """ Boid effector weight

    :type: float
    """

    charge: float
    """ Charge effector weight

    :type: float
    """

    collection: Collection
    """ Limit effectors to this collection

    :type: Collection
    """

    curve_guide: float
    """ Curve guide effector weight

    :type: float
    """

    drag: float
    """ Drag effector weight

    :type: float
    """

    force: float
    """ Force effector weight

    :type: float
    """

    gravity: float
    """ Global gravity weight

    :type: float
    """

    harmonic: float
    """ Harmonic effector weight

    :type: float
    """

    lennardjones: float
    """ Lennard-Jones effector weight

    :type: float
    """

    magnetic: float
    """ Magnetic effector weight

    :type: float
    """

    smokeflow: float
    """ Fluid Flow effector weight

    :type: float
    """

    texture: float
    """ Texture effector weight

    :type: float
    """

    turbulence: float
    """ Turbulence effector weight

    :type: float
    """

    vortex: float
    """ Vortex effector weight

    :type: float
    """

    wind: float
    """ Wind effector weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EnumPropertyItem(bpy_struct):
    """Definition of a choice in an RNA enum property"""

    description: str
    """ Description of the item's purpose

    :type: str
    """

    icon: str
    """ Icon of the item

    :type: str
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    name: str
    """ Human readable name

    :type: str
    """

    value: int
    """ Value of the item

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Event(bpy_struct):
    """Window Manager Event"""

    alt: bool
    """ True when the Alt/Option key is held

    :type: bool
    """

    ascii: str
    """ Single ASCII character for this event

    :type: str
    """

    ctrl: bool
    """ True when the Ctrl key is held

    :type: bool
    """

    direction: str
    """ The direction (only applies to drag events)

    :type: str
    """

    is_consecutive: bool
    """ Part of a trackpad or NDOF motion, interrupted by cursor motion, button or key press events

    :type: bool
    """

    is_mouse_absolute: bool
    """ The last motion event was an absolute input

    :type: bool
    """

    is_repeat: bool
    """ The event is generated by holding a key down

    :type: bool
    """

    is_tablet: bool
    """ The event has tablet data

    :type: bool
    """

    mouse_prev_press_x: int
    """ The window relative horizontal location of the last press event

    :type: int
    """

    mouse_prev_press_y: int
    """ The window relative vertical location of the last press event

    :type: int
    """

    mouse_prev_x: int
    """ The window relative horizontal location of the mouse

    :type: int
    """

    mouse_prev_y: int
    """ The window relative vertical location of the mouse

    :type: int
    """

    mouse_region_x: int
    """ The region relative horizontal location of the mouse

    :type: int
    """

    mouse_region_y: int
    """ The region relative vertical location of the mouse

    :type: int
    """

    mouse_x: int
    """ The window relative horizontal location of the mouse

    :type: int
    """

    mouse_y: int
    """ The window relative vertical location of the mouse

    :type: int
    """

    oskey: bool
    """ True when the Cmd key is held

    :type: bool
    """

    pressure: float
    """ The pressure of the tablet or 1.0 if no tablet present

    :type: float
    """

    shift: bool
    """ True when the Shift key is held

    :type: bool
    """

    tilt: mathutils.Vector
    """ The pressure of the tablet or zeroes if no tablet present

    :type: mathutils.Vector
    """

    type: str
    """ 

    :type: str
    """

    type_prev: str
    """ 

    :type: str
    """

    unicode: str
    """ Single unicode character for this event

    :type: str
    """

    value: str
    """ The type of event, only applies to some

    :type: str
    """

    value_prev: str
    """ The type of event, only applies to some

    :type: str
    """

    xr: XrEventData
    """ XR event data

    :type: XrEventData
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FCurve(bpy_struct):
    """F-Curve defining values of a period of time"""

    array_index: int
    """ Index to the specific property affected by F-Curve if applicable

    :type: int
    """

    auto_smoothing: str
    """ Algorithm used to compute automatic handles

    :type: str
    """

    color: mathutils.Color
    """ Color of the F-Curve in the Graph Editor

    :type: mathutils.Color
    """

    color_mode: str
    """ Method used to determine color of F-Curve in Graph Editor

    :type: str
    """

    data_path: str
    """ RNA Path to property affected by F-Curve

    :type: str
    """

    driver: Driver
    """ Channel Driver (only set for Driver F-Curves)

    :type: Driver
    """

    extrapolation: str
    """ Method used for evaluating value of F-Curve outside first and last keyframes

    :type: str
    """

    group: ActionGroup
    """ Action Group that this F-Curve belongs to

    :type: ActionGroup
    """

    hide: bool
    """ F-Curve and its keyframes are hidden in the Graph Editor graphs

    :type: bool
    """

    is_empty: bool
    """ True if the curve contributes no animation due to lack of keyframes or useful modifiers, and should be deleted

    :type: bool
    """

    is_valid: bool
    """ False when F-Curve could not be evaluated in past, so should be skipped when evaluating

    :type: bool
    """

    keyframe_points: FCurveKeyframePoints
    """ User-editable keyframes

    :type: FCurveKeyframePoints
    """

    lock: bool
    """ F-Curve's settings cannot be edited

    :type: bool
    """

    modifiers: FCurveModifiers
    """ Modifiers affecting the shape of the F-Curve

    :type: FCurveModifiers
    """

    mute: bool
    """ Disable F-Curve evaluation

    :type: bool
    """

    sampled_points: bpy_prop_collection[FCurveSample]
    """ Sampled animation data

    :type: bpy_prop_collection[FCurveSample]
    """

    select: bool
    """ F-Curve is selected for editing

    :type: bool
    """

    def evaluate(self, frame: float | None) -> float:
        """Evaluate F-Curve

        :param frame: Frame, Evaluate F-Curve at given frame
        :type frame: float | None
        :return: Value, Value of F-Curve specific frame
        :rtype: float
        """
        ...

    def update(self):
        """Ensure keyframes are sorted in chronological order and handles are set correctly"""
        ...

    def range(self) -> mathutils.Vector:
        """Get the time extents for F-Curve

        :return: Range, Min/Max values
        :rtype: mathutils.Vector
        """
        ...

    def update_autoflags(self, data: typing.Any):
        """Update FCurve flags set automatically from affected property (currently, integer/discrete flags set when the property is not a float)

        :param data: Data, Data containing the property controlled by given FCurve
        :type data: typing.Any
        """
        ...

    def convert_to_samples(self, start: int | None, end: int | None):
        """Convert current FCurve from keyframes to sample points, if necessary

        :param start: Start Frame
        :type start: int | None
        :param end: End Frame
        :type end: int | None
        """
        ...

    def convert_to_keyframes(self, start: int | None, end: int | None):
        """Convert current FCurve from sample points to keyframes (linear interpolation), if necessary

        :param start: Start Frame
        :type start: int | None
        :param end: End Frame
        :type end: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FCurveKeyframePoints(bpy_prop_collection[Keyframe], bpy_struct):
    """Collection of keyframe points"""

    def insert(
        self,
        frame: float | None,
        value: float | None,
        options: set[str] | None = {},
        keyframe_type: str | None = "KEYFRAME",
    ) -> Keyframe:
        """Add a keyframe point to a F-Curve

                :param frame: X Value of this keyframe point
                :type frame: float | None
                :param value: Y Value of this keyframe point
                :type value: float | None
                :param options: Keyframe options

        REPLACE
        Replace -- Don't add any new keyframes, but just replace existing ones.

        NEEDED
        Needed -- Only adds keyframes that are needed.

        FAST
        Fast -- Fast keyframe insertion to avoid recalculating the curve each time.
                :type options: set[str] | None
                :param keyframe_type: Type of keyframe to insert
                :type keyframe_type: str | None
                :return: Newly created keyframe
                :rtype: Keyframe
        """
        ...

    def add(self, count: int | None):
        """Add a keyframe point to a F-Curve

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """
        ...

    def remove(self, keyframe: Keyframe, fast: bool | typing.Any | None = False):
        """Remove keyframe from an F-Curve

        :param keyframe: Keyframe to remove
        :type keyframe: Keyframe
        :param fast: Fast, Fast keyframe removal to avoid recalculating the curve each time
        :type fast: bool | typing.Any | None
        """
        ...

    def clear(self):
        """Remove all keyframes from an F-Curve"""
        ...

    def sort(self):
        """Ensure all keyframe points are chronologically sorted"""
        ...

    def deduplicate(self):
        """Ensure there are no duplicate keys. Assumes that the points have already been sorted"""
        ...

    def handles_recalc(self):
        """Update handles after modifications to the keyframe points, to update things like auto-clamping"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FCurveModifiers(bpy_prop_collection[FModifier], bpy_struct):
    """Collection of F-Curve Modifiers"""

    active: FModifier | None
    """ Active F-Curve Modifier

    :type: FModifier | None
    """

    def new(self, type: str | None) -> FModifier:
        """Add a constraint to this object

        :param type: Constraint type to add
        :type type: str | None
        :return: New fmodifier
        :rtype: FModifier
        """
        ...

    def remove(self, modifier: FModifier):
        """Remove a modifier from this F-Curve

        :param modifier: Removed modifier
        :type modifier: FModifier
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FCurveSample(bpy_struct):
    """Sample point for F-Curve"""

    co: mathutils.Vector
    """ Point coordinates

    :type: mathutils.Vector
    """

    select: bool
    """ Selection status

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FFmpegSettings(bpy_struct):
    """FFmpeg related settings for the scene"""

    audio_bitrate: int
    """ Audio bitrate (kb/s)

    :type: int
    """

    audio_channels: str
    """ Audio channel count

    :type: str
    """

    audio_codec: str
    """ FFmpeg audio codec to use

    :type: str
    """

    audio_mixrate: int
    """ Audio sample rate (samples/s)

    :type: int
    """

    audio_volume: float
    """ Audio volume

    :type: float
    """

    buffersize: int
    """ Rate control: buffer size (kb)

    :type: int
    """

    codec: str
    """ FFmpeg codec to use for video output

    :type: str
    """

    constant_rate_factor: str
    """ Constant Rate Factor (CRF); tradeoff between video quality and file size

    :type: str
    """

    ffmpeg_preset: str
    """ Tradeoff between encoding speed and compression ratio

    :type: str
    """

    format: str
    """ Output file container

    :type: str
    """

    gopsize: int
    """ Distance between key frames, also known as GOP size; influences file size and seekability

    :type: int
    """

    max_b_frames: int
    """ Maximum number of B-frames between non-B-frames; influences file size and seekability

    :type: int
    """

    maxrate: int
    """ Rate control: max rate (kbit/s)

    :type: int
    """

    minrate: int
    """ Rate control: min rate (kbit/s)

    :type: int
    """

    muxrate: int
    """ Mux rate (bits/second)

    :type: int
    """

    packetsize: int
    """ Mux packet size (byte)

    :type: int
    """

    use_autosplit: bool
    """ Autosplit output at 2GB boundary

    :type: bool
    """

    use_lossless_output: bool
    """ Use lossless output for video streams

    :type: bool
    """

    use_max_b_frames: bool
    """ Set a maximum number of B-frames

    :type: bool
    """

    video_bitrate: int
    """ Video bitrate (kbit/s)

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifier(bpy_struct):
    """Modifier for values of F-Curve"""

    active: bool | None
    """ F-Curve modifier will show settings in the editor

    :type: bool | None
    """

    blend_in: float
    """ Number of frames from start frame for influence to take effect

    :type: float
    """

    blend_out: float
    """ Number of frames from end frame for influence to fade out

    :type: float
    """

    frame_end: float
    """ Frame that modifier's influence ends (if Restrict Frame Range is in use)

    :type: float
    """

    frame_start: float
    """ Frame that modifier's influence starts (if Restrict Frame Range is in use)

    :type: float
    """

    influence: float
    """ Amount of influence F-Curve Modifier will have when not fading in/out

    :type: float
    """

    is_valid: bool
    """ F-Curve Modifier has invalid settings and will not be evaluated

    :type: bool
    """

    mute: bool
    """ Enable F-Curve modifier evaluation

    :type: bool
    """

    name: str
    """ F-Curve Modifier name

    :type: str
    """

    show_expanded: bool
    """ F-Curve Modifier's panel is expanded in UI

    :type: bool
    """

    type: str
    """ F-Curve Modifier Type

    :type: str
    """

    use_influence: bool
    """ F-Curve Modifier's effects will be tempered by a default factor

    :type: bool
    """

    use_restricted_range: bool
    """ F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierEnvelopeControlPoint(bpy_struct):
    """Control point for envelope F-Modifier"""

    frame: float
    """ Frame this control-point occurs on

    :type: float
    """

    max: float
    """ Upper bound of envelope at this control-point

    :type: float
    """

    min: float
    """ Lower bound of envelope at this control-point

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierEnvelopeControlPoints(
    bpy_prop_collection[FModifierEnvelopeControlPoint], bpy_struct
):
    """Control points defining the shape of the envelope"""

    def add(self, frame: float | None) -> FModifierEnvelopeControlPoint:
        """Add a control point to a FModifierEnvelope

        :param frame: Frame to add this control-point
        :type frame: float | None
        :return: Newly created control-point
        :rtype: FModifierEnvelopeControlPoint
        """
        ...

    def remove(self, point: FModifierEnvelopeControlPoint):
        """Remove a control-point from an FModifierEnvelope

        :param point: Control-point to remove
        :type point: FModifierEnvelopeControlPoint
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FieldSettings(bpy_struct):
    """Field settings for an object in physics simulation"""

    apply_to_location: bool
    """ Affect particle's location

    :type: bool
    """

    apply_to_rotation: bool
    """ Affect particle's dynamic rotation

    :type: bool
    """

    distance_max: float
    """ Maximum distance for the field to work

    :type: float
    """

    distance_min: float
    """ Minimum distance for the field's falloff

    :type: float
    """

    falloff_power: float
    """ How quickly strength falls off with distance from the force field

    :type: float
    """

    falloff_type: str
    """ 

    :type: str
    """

    flow: float
    """ Convert effector force into air flow velocity

    :type: float
    """

    guide_clump_amount: float
    """ Amount of clumping

    :type: float
    """

    guide_clump_shape: float
    """ Shape of clumping

    :type: float
    """

    guide_free: float
    """ Guide-free time from particle life's end

    :type: float
    """

    guide_kink_amplitude: float
    """ The amplitude of the offset

    :type: float
    """

    guide_kink_axis: str
    """ Which axis to use for offset

    :type: str
    """

    guide_kink_frequency: float
    """ The frequency of the offset (1/total length)

    :type: float
    """

    guide_kink_shape: float
    """ Adjust the offset to the beginning/end

    :type: float
    """

    guide_kink_type: str
    """ Type of periodic offset on the curve

    :type: str
    """

    guide_minimum: float
    """ The distance from which particles are affected fully

    :type: float
    """

    harmonic_damping: float
    """ Damping of the harmonic force

    :type: float
    """

    inflow: float
    """ Inwards component of the vortex force

    :type: float
    """

    linear_drag: float
    """ Drag component proportional to velocity

    :type: float
    """

    noise: float
    """ Amount of noise for the force strength

    :type: float
    """

    quadratic_drag: float
    """ Drag component proportional to the square of velocity

    :type: float
    """

    radial_falloff: float
    """ Radial falloff power (real gravitational falloff = 2)

    :type: float
    """

    radial_max: float
    """ Maximum radial distance for the field to work

    :type: float
    """

    radial_min: float
    """ Minimum radial distance for the field's falloff

    :type: float
    """

    rest_length: float
    """ Rest length of the harmonic force

    :type: float
    """

    seed: int
    """ Seed of the noise

    :type: int
    """

    shape: str
    """ Which direction is used to calculate the effector force

    :type: str
    """

    size: float
    """ Size of the turbulence

    :type: float
    """

    source_object: Object
    """ Select domain object of the smoke simulation

    :type: Object
    """

    strength: float
    """ Strength of force field

    :type: float
    """

    texture: Texture
    """ Texture to use as force

    :type: Texture
    """

    texture_mode: str
    """ How the texture effect is calculated (RGB and Curl need a RGB texture, else Gradient will be used instead)

    :type: str
    """

    texture_nabla: float
    """ Defines size of derivative offset used for calculating gradient and curl

    :type: float
    """

    type: str
    """ Type of field

    :type: str
    """

    use_2d_force: bool
    """ Apply force only in 2D

    :type: bool
    """

    use_absorption: bool
    """ Force gets absorbed by collision objects

    :type: bool
    """

    use_global_coords: bool
    """ Use effector/global coordinates for turbulence

    :type: bool
    """

    use_gravity_falloff: bool
    """ Multiply force by 1/distance²

    :type: bool
    """

    use_guide_path_add: bool
    """ Based on distance/falloff it adds a portion of the entire path

    :type: bool
    """

    use_guide_path_weight: bool
    """ Use curve weights to influence the particle influence along the curve

    :type: bool
    """

    use_max_distance: bool
    """ Use a maximum distance for the field to work

    :type: bool
    """

    use_min_distance: bool
    """ Use a minimum distance for the field's falloff

    :type: bool
    """

    use_multiple_springs: bool
    """ Every point is affected by multiple springs

    :type: bool
    """

    use_object_coords: bool
    """ Use object/global coordinates for texture

    :type: bool
    """

    use_radial_max: bool
    """ Use a maximum radial distance for the field to work

    :type: bool
    """

    use_radial_min: bool
    """ Use a minimum radial distance for the field's falloff

    :type: bool
    """

    use_root_coords: bool
    """ Texture coordinates from root particle locations

    :type: bool
    """

    use_smoke_density: bool
    """ Adjust force strength based on smoke density

    :type: bool
    """

    wind_factor: float
    """ How much the force is reduced when acting parallel to a surface, e.g. cloth

    :type: float
    """

    z_direction: str
    """ Effect in full or only positive/negative Z direction

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FileAssetSelectIDFilter(bpy_struct):
    """Which asset types to show/hide, when browsing an asset library"""

    experimental_filter_armature: bool
    """ Show Armature data-blocks

    :type: bool
    """

    experimental_filter_brush: bool
    """ Show Brushes data-blocks

    :type: bool
    """

    experimental_filter_cachefile: bool
    """ Show Cache File data-blocks

    :type: bool
    """

    experimental_filter_camera: bool
    """ Show Camera data-blocks

    :type: bool
    """

    experimental_filter_curve: bool
    """ Show Curve data-blocks

    :type: bool
    """

    experimental_filter_curves: bool
    """ Show/hide Curves data-blocks

    :type: bool
    """

    experimental_filter_font: bool
    """ Show Font data-blocks

    :type: bool
    """

    experimental_filter_grease_pencil: bool
    """ Show Grease pencil data-blocks

    :type: bool
    """

    experimental_filter_image: bool
    """ Show Image data-blocks

    :type: bool
    """

    experimental_filter_lattice: bool
    """ Show Lattice data-blocks

    :type: bool
    """

    experimental_filter_light: bool
    """ Show Light data-blocks

    :type: bool
    """

    experimental_filter_light_probe: bool
    """ Show Light Probe data-blocks

    :type: bool
    """

    experimental_filter_linestyle: bool
    """ Show Freestyle's Line Style data-blocks

    :type: bool
    """

    experimental_filter_mask: bool
    """ Show Mask data-blocks

    :type: bool
    """

    experimental_filter_mesh: bool
    """ Show Mesh data-blocks

    :type: bool
    """

    experimental_filter_metaball: bool
    """ Show Metaball data-blocks

    :type: bool
    """

    experimental_filter_movie_clip: bool
    """ Show Movie Clip data-blocks

    :type: bool
    """

    experimental_filter_paint_curve: bool
    """ Show Paint Curve data-blocks

    :type: bool
    """

    experimental_filter_palette: bool
    """ Show Palette data-blocks

    :type: bool
    """

    experimental_filter_particle_settings: bool
    """ Show Particle Settings data-blocks

    :type: bool
    """

    experimental_filter_pointcloud: bool
    """ Show/hide Point Cloud data-blocks

    :type: bool
    """

    experimental_filter_scene: bool
    """ Show Scene data-blocks

    :type: bool
    """

    experimental_filter_sound: bool
    """ Show Sound data-blocks

    :type: bool
    """

    experimental_filter_speaker: bool
    """ Show Speaker data-blocks

    :type: bool
    """

    experimental_filter_text: bool
    """ Show Text data-blocks

    :type: bool
    """

    experimental_filter_texture: bool
    """ Show Texture data-blocks

    :type: bool
    """

    experimental_filter_volume: bool
    """ Show/hide Volume data-blocks

    :type: bool
    """

    experimental_filter_work_space: bool
    """ Show workspace data-blocks

    :type: bool
    """

    filter_action: bool
    """ Show Action data-blocks

    :type: bool
    """

    filter_group: bool
    """ Show Collection data-blocks

    :type: bool
    """

    filter_material: bool
    """ Show Material data-blocks

    :type: bool
    """

    filter_node_tree: bool
    """ Show Node Tree data-blocks

    :type: bool
    """

    filter_object: bool
    """ Show Object data-blocks

    :type: bool
    """

    filter_world: bool
    """ Show World data-blocks

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FileBrowserFSMenuEntry(bpy_struct):
    """File Select Parameters"""

    icon: int
    """ 

    :type: int
    """

    is_valid: bool
    """ Whether this path is currently reachable

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    path: str
    """ 

    :type: str
    """

    use_save: bool
    """ Whether this path is saved in bookmarks, or generated from OS

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FileHandler(bpy_struct):
    """Extends functionality to operators that manages files, such as adding drag and drop support"""

    bl_file_extensions: str
    """ Formatted string of file extensions supported by the file handler, each extension should start with a "." and be separated by ";".
For Example: ".blend;.ble"

    :type: str
    """

    bl_idname: str
    """ If this is set, the file handler gets a custom ID, otherwise it takes the name of the class used to define the file handler (for example, if the class name is "OBJECT_FH_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_FH_hello")

    :type: str
    """

    bl_import_operator: str
    """ Operator that can handle import files with the extensions given in bl_file_extensions

    :type: str
    """

    bl_label: str
    """ The file handler label

    :type: str
    """

    @classmethod
    def poll_drop(cls, context: Context | None) -> bool:
        """If this method returns True, can be used to handle the drop of a drag-and-drop action

        :param context:
        :type context: Context | None
        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FileSelectEntry(bpy_struct):
    """A file viewable in the File Browser"""

    asset_data: AssetMetaData
    """ Asset data, valid if the file represents an asset

    :type: AssetMetaData
    """

    name: str
    """ 

    :type: str
    """

    preview_icon_id: int
    """ Unique integer identifying the preview of this file as an icon (zero means invalid)

    :type: int
    """

    relative_path: str
    """ Path relative to the directory currently displayed in the File Browser (includes the file name)

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FileSelectIDFilter(bpy_struct):
    """Which ID types to show/hide, when browsing a library"""

    category_animation: bool
    """ Show animation data

    :type: bool
    """

    category_environment: bool
    """ Show worlds, lights, cameras and speakers

    :type: bool
    """

    category_geometry: bool
    """ Show meshes, curves, lattice, armatures and metaballs data

    :type: bool
    """

    category_image: bool
    """ Show images, movie clips, sounds and masks

    :type: bool
    """

    category_misc: bool
    """ Show other data types

    :type: bool
    """

    category_object: bool
    """ Show objects and collections

    :type: bool
    """

    category_scene: bool
    """ Show scenes

    :type: bool
    """

    category_shading: bool
    """ Show materials, node-trees, textures and Freestyle's line-styles

    :type: bool
    """

    filter_action: bool
    """ Show Action data-blocks

    :type: bool
    """

    filter_armature: bool
    """ Show Armature data-blocks

    :type: bool
    """

    filter_brush: bool
    """ Show Brushes data-blocks

    :type: bool
    """

    filter_cachefile: bool
    """ Show Cache File data-blocks

    :type: bool
    """

    filter_camera: bool
    """ Show Camera data-blocks

    :type: bool
    """

    filter_curve: bool
    """ Show Curve data-blocks

    :type: bool
    """

    filter_curves: bool
    """ Show/hide Curves data-blocks

    :type: bool
    """

    filter_font: bool
    """ Show Font data-blocks

    :type: bool
    """

    filter_grease_pencil: bool
    """ Show Grease pencil data-blocks

    :type: bool
    """

    filter_group: bool
    """ Show Collection data-blocks

    :type: bool
    """

    filter_image: bool
    """ Show Image data-blocks

    :type: bool
    """

    filter_lattice: bool
    """ Show Lattice data-blocks

    :type: bool
    """

    filter_light: bool
    """ Show Light data-blocks

    :type: bool
    """

    filter_light_probe: bool
    """ Show Light Probe data-blocks

    :type: bool
    """

    filter_linestyle: bool
    """ Show Freestyle's Line Style data-blocks

    :type: bool
    """

    filter_mask: bool
    """ Show Mask data-blocks

    :type: bool
    """

    filter_material: bool
    """ Show Material data-blocks

    :type: bool
    """

    filter_mesh: bool
    """ Show Mesh data-blocks

    :type: bool
    """

    filter_metaball: bool
    """ Show Metaball data-blocks

    :type: bool
    """

    filter_movie_clip: bool
    """ Show Movie Clip data-blocks

    :type: bool
    """

    filter_node_tree: bool
    """ Show Node Tree data-blocks

    :type: bool
    """

    filter_object: bool
    """ Show Object data-blocks

    :type: bool
    """

    filter_paint_curve: bool
    """ Show Paint Curve data-blocks

    :type: bool
    """

    filter_palette: bool
    """ Show Palette data-blocks

    :type: bool
    """

    filter_particle_settings: bool
    """ Show Particle Settings data-blocks

    :type: bool
    """

    filter_pointcloud: bool
    """ Show/hide Point Cloud data-blocks

    :type: bool
    """

    filter_scene: bool
    """ Show Scene data-blocks

    :type: bool
    """

    filter_sound: bool
    """ Show Sound data-blocks

    :type: bool
    """

    filter_speaker: bool
    """ Show Speaker data-blocks

    :type: bool
    """

    filter_text: bool
    """ Show Text data-blocks

    :type: bool
    """

    filter_texture: bool
    """ Show Texture data-blocks

    :type: bool
    """

    filter_volume: bool
    """ Show/hide Volume data-blocks

    :type: bool
    """

    filter_work_space: bool
    """ Show workspace data-blocks

    :type: bool
    """

    filter_world: bool
    """ Show World data-blocks

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FileSelectParams(bpy_struct):
    """File Select Parameters"""

    directory: str
    """ Directory displayed in the file browser

    :type: str
    """

    display_size: int
    """ Change the size of thumbnails

    :type: int
    """

    display_size_discrete: str
    """ Change the size of thumbnails in discrete steps

    :type: str
    """

    display_type: str
    """ Display mode for the file list

    :type: str
    """

    filename: str
    """ Active file in the file browser

    :type: str
    """

    filter_glob: str
    """ UNIX shell-like filename patterns matching, supports wildcards ('*') and list of patterns separated by ';'

    :type: str
    """

    filter_id: FileSelectIDFilter
    """ Which ID types to show/hide, when browsing a library

    :type: FileSelectIDFilter
    """

    filter_search: str
    """ Filter by name or tag, supports '*' wildcard

    :type: str
    """

    recursion_level: str
    """ Numbers of dirtree levels to show simultaneously

    :type: str
    """

    show_details_datetime: bool
    """ Show a column listing the date and time of modification for each file

    :type: bool
    """

    show_details_size: bool
    """ Show a column listing the size of each file

    :type: bool
    """

    show_hidden: bool
    """ Show hidden dot files

    :type: bool
    """

    sort_method: str
    """ 

    :type: str
    """

    title: str
    """ Title for the file browser

    :type: str
    """

    use_filter: bool
    """ Enable filtering of files

    :type: bool
    """

    use_filter_asset_only: bool
    """ Hide .blend files items that are not data-blocks with asset metadata

    :type: bool
    """

    use_filter_backup: bool
    """ Show .blend1, .blend2, etc. files

    :type: bool
    """

    use_filter_blender: bool
    """ Show .blend files

    :type: bool
    """

    use_filter_blendid: bool
    """ Show .blend files items (objects, materials, etc.)

    :type: bool
    """

    use_filter_folder: bool
    """ Show folders

    :type: bool
    """

    use_filter_font: bool
    """ Show font files

    :type: bool
    """

    use_filter_image: bool
    """ Show image files

    :type: bool
    """

    use_filter_movie: bool
    """ Show movie files

    :type: bool
    """

    use_filter_script: bool
    """ Show script files

    :type: bool
    """

    use_filter_sound: bool
    """ Show sound files

    :type: bool
    """

    use_filter_text: bool
    """ Show text files

    :type: bool
    """

    use_filter_volume: bool
    """ Show 3D volume files

    :type: bool
    """

    use_library_browsing: bool
    """ Whether we may browse Blender files' content or not

    :type: bool
    """

    use_sort_invert: bool
    """ Sort items descending, from highest value to lowest

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Float2AttributeValue(bpy_struct):
    """2D Vector value in geometry attribute"""

    vector: mathutils.Vector
    """ 2D vector

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatAttributeValue(bpy_struct):
    """Floating-point value in geometry attribute"""

    value: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatColorAttributeValue(bpy_struct):
    """Color value in geometry attribute"""

    color: bpy_prop_array[float]
    """ RGBA color in scene linear color space

    :type: bpy_prop_array[float]
    """

    color_srgb: bpy_prop_array[float]
    """ RGBA color in sRGB color space

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatVectorAttributeValue(bpy_struct):
    """Vector value in geometry attribute"""

    vector: mathutils.Vector
    """ 3D vector

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatVectorValueReadOnly(bpy_struct):
    vector: mathutils.Vector
    """ 3D vector

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FluidDomainSettings(bpy_struct):
    """Fluid domain settings"""

    adapt_margin: int
    """ Margin added around fluid to minimize boundary interference

    :type: int
    """

    adapt_threshold: float
    """ Minimum amount of fluid a cell can contain before it is considered empty

    :type: float
    """

    additional_res: int
    """ Maximum number of additional cells

    :type: int
    """

    alpha: float
    """ Buoyant force based on smoke density (higher value results in faster rising smoke)

    :type: float
    """

    beta: float
    """ Buoyant force based on smoke heat (higher value results in faster rising smoke)

    :type: float
    """

    burning_rate: float
    """ Speed of the burning reaction (higher value results in smaller flames)

    :type: float
    """

    cache_data_format: str
    """ Select the file format to be used for caching volumetric data

    :type: str
    """

    cache_directory: str
    """ Directory that contains fluid cache files

    :type: str
    """

    cache_frame_end: int
    """ Frame on which the simulation stops. This is the last frame that will be baked

    :type: int
    """

    cache_frame_offset: int
    """ Frame offset that is used when loading the simulation from the cache. It is not considered when baking the simulation, only when loading it

    :type: int
    """

    cache_frame_pause_data: int
    """ 

    :type: int
    """

    cache_frame_pause_guide: int
    """ 

    :type: int
    """

    cache_frame_pause_mesh: int
    """ 

    :type: int
    """

    cache_frame_pause_noise: int
    """ 

    :type: int
    """

    cache_frame_pause_particles: int
    """ 

    :type: int
    """

    cache_frame_start: int
    """ Frame on which the simulation starts. This is the first frame that will be baked

    :type: int
    """

    cache_mesh_format: str
    """ Select the file format to be used for caching surface data

    :type: str
    """

    cache_noise_format: str
    """ Select the file format to be used for caching noise data

    :type: str
    """

    cache_particle_format: str
    """ Select the file format to be used for caching particle data

    :type: str
    """

    cache_resumable: bool
    """ Additional data will be saved so that the bake jobs can be resumed after pausing. Because more data will be written to disk it is recommended to avoid enabling this option when baking at high resolutions

    :type: bool
    """

    cache_type: str
    """ Change the cache type of the simulation

    :type: str
    """

    cell_size: mathutils.Vector
    """ Cell Size

    :type: mathutils.Vector
    """

    cfl_condition: float
    """ Maximal velocity per cell (greater CFL numbers will minimize the number of simulation steps and the computation time.)

    :type: float
    """

    clipping: float
    """ Value under which voxels are considered empty space to optimize rendering

    :type: float
    """

    color_grid: bpy_prop_array[float]
    """ Smoke color grid

    :type: bpy_prop_array[float]
    """

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    color_ramp_field: str
    """ Simulation field to color map

    :type: str
    """

    color_ramp_field_scale: float
    """ Multiplier for scaling the selected field to color map

    :type: float
    """

    delete_in_obstacle: bool
    """ Delete fluid inside obstacles

    :type: bool
    """

    density_grid: bpy_prop_array[float]
    """ Smoke density grid

    :type: bpy_prop_array[float]
    """

    display_interpolation: str
    """ Interpolation method to use for smoke/fire volumes in solid mode

    :type: str
    """

    display_thickness: float
    """ Thickness of smoke display in the viewport

    :type: float
    """

    dissolve_speed: int
    """ Determine how quickly the smoke dissolves (lower value makes smoke disappear faster)

    :type: int
    """

    domain_resolution: bpy_prop_array[int]
    """ Smoke Grid Resolution

    :type: bpy_prop_array[int]
    """

    domain_type: str
    """ Change domain type of the simulation

    :type: str
    """

    effector_group: Collection
    """ Limit effectors to this collection

    :type: Collection
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    export_manta_script: bool
    """ Generate and export Mantaflow script from current domain settings during bake. This is only needed if you plan to analyze the cache (e.g. view grids, velocity vectors, particles) in Mantaflow directly (outside of Blender) after baking the simulation

    :type: bool
    """

    flame_grid: bpy_prop_array[float]
    """ Smoke flame grid

    :type: bpy_prop_array[float]
    """

    flame_ignition: float
    """ Minimum temperature of the flames (higher value results in faster rising flames)

    :type: float
    """

    flame_max_temp: float
    """ Maximum temperature of the flames (higher value results in faster rising flames)

    :type: float
    """

    flame_smoke: float
    """ Amount of smoke created by burning fuel

    :type: float
    """

    flame_smoke_color: mathutils.Color
    """ Color of smoke emitted from burning fuel

    :type: mathutils.Color
    """

    flame_vorticity: float
    """ Additional vorticity for the flames

    :type: float
    """

    flip_ratio: float
    """ PIC/FLIP Ratio. A value of 1.0 will result in a completely FLIP based simulation. Use a lower value for simulations which should produce smaller splashes

    :type: float
    """

    fluid_group: Collection
    """ Limit fluid objects to this collection

    :type: Collection
    """

    force_collection: Collection
    """ Limit forces to this collection

    :type: Collection
    """

    fractions_distance: float
    """ Determines how far apart fluid and obstacle are (higher values will result in fluid being further away from obstacles, smaller values will let fluid move towards the inside of obstacles)

    :type: float
    """

    fractions_threshold: float
    """ Determines how much fluid is allowed in an obstacle cell (higher values will tag a boundary cell as an obstacle easier and reduce the boundary smoothening effect)

    :type: float
    """

    gravity: mathutils.Vector
    """ Gravity in X, Y and Z direction

    :type: mathutils.Vector
    """

    gridlines_cell_filter: str
    """ Cell type to be highlighted

    :type: str
    """

    gridlines_color_field: str
    """ Simulation field to color map onto gridlines

    :type: str
    """

    gridlines_lower_bound: float
    """ Lower bound of the highlighting range

    :type: float
    """

    gridlines_range_color: bpy_prop_array[float]
    """ Color used to highlight the range

    :type: bpy_prop_array[float]
    """

    gridlines_upper_bound: float
    """ Upper bound of the highlighting range

    :type: float
    """

    guide_alpha: float
    """ Guiding weight (higher value results in greater lag)

    :type: float
    """

    guide_beta: int
    """ Guiding size (higher value results in larger vortices)

    :type: int
    """

    guide_parent: Object
    """ Use velocities from this object for the guiding effect (object needs to have fluid modifier and be of type domain))

    :type: Object
    """

    guide_source: str
    """ Choose where to get guiding velocities from

    :type: str
    """

    guide_vel_factor: float
    """ Guiding velocity factor (higher value results in greater guiding velocities)

    :type: float
    """

    has_cache_baked_any: bool
    """ 

    :type: bool
    """

    has_cache_baked_data: bool
    """ 

    :type: bool
    """

    has_cache_baked_guide: bool
    """ 

    :type: bool
    """

    has_cache_baked_mesh: bool
    """ 

    :type: bool
    """

    has_cache_baked_noise: bool
    """ 

    :type: bool
    """

    has_cache_baked_particles: bool
    """ 

    :type: bool
    """

    heat_grid: bpy_prop_array[float]
    """ Smoke heat grid

    :type: bpy_prop_array[float]
    """

    highres_sampling: str
    """ Method for sampling the high resolution flow

    :type: str
    """

    is_cache_baking_any: bool
    """ 

    :type: bool
    """

    is_cache_baking_data: bool
    """ 

    :type: bool
    """

    is_cache_baking_guide: bool
    """ 

    :type: bool
    """

    is_cache_baking_mesh: bool
    """ 

    :type: bool
    """

    is_cache_baking_noise: bool
    """ 

    :type: bool
    """

    is_cache_baking_particles: bool
    """ 

    :type: bool
    """

    mesh_concave_lower: float
    """ Lower mesh concavity bound (high values tend to smoothen and fill out concave regions)

    :type: float
    """

    mesh_concave_upper: float
    """ Upper mesh concavity bound (high values tend to smoothen and fill out concave regions)

    :type: float
    """

    mesh_generator: str
    """ Which particle level set generator to use

    :type: str
    """

    mesh_particle_radius: float
    """ Particle radius factor (higher value results in larger (meshed) particles). Needs to be adjusted after changing the mesh scale

    :type: float
    """

    mesh_scale: int
    """ The mesh simulation is scaled up by this factor (compared to the base resolution of the domain). For best meshing, it is recommended to adjust the mesh particle radius alongside this value

    :type: int
    """

    mesh_smoothen_neg: int
    """ Negative mesh smoothening

    :type: int
    """

    mesh_smoothen_pos: int
    """ Positive mesh smoothening

    :type: int
    """

    noise_pos_scale: float
    """ Scale of noise (higher value results in larger vortices)

    :type: float
    """

    noise_scale: int
    """ The noise simulation is scaled up by this factor (compared to the base resolution of the domain)

    :type: int
    """

    noise_strength: float
    """ Strength of noise

    :type: float
    """

    noise_time_anim: float
    """ Animation time of noise

    :type: float
    """

    openvdb_cache_compress_type: str
    """ Compression method to be used

    :type: str
    """

    openvdb_data_depth: str
    """ Bit depth for fluid particles and grids (lower bit values reduce file size)

    :type: str
    """

    particle_band_width: float
    """ Particle (narrow) band width (higher value results in thicker band and more particles)

    :type: float
    """

    particle_max: int
    """ Maximum number of particles per cell (ensures that each cell has at most this amount of particles)

    :type: int
    """

    particle_min: int
    """ Minimum number of particles per cell (ensures that each cell has at least this amount of particles)

    :type: int
    """

    particle_number: int
    """ Particle number factor (higher value results in more particles)

    :type: int
    """

    particle_radius: float
    """ Particle radius factor. Increase this value if the simulation appears to leak volume, decrease it if the simulation seems to gain volume

    :type: float
    """

    particle_randomness: float
    """ Randomness factor for particle sampling

    :type: float
    """

    particle_scale: int
    """ The particle simulation is scaled up by this factor (compared to the base resolution of the domain)

    :type: int
    """

    resolution_max: int
    """ Resolution used for the fluid domain. Value corresponds to the longest domain side (resolution for other domain sides is calculated automatically)

    :type: int
    """

    show_gridlines: bool
    """ Show gridlines

    :type: bool
    """

    show_velocity: bool
    """ Visualize vector fields

    :type: bool
    """

    simulation_method: str
    """ Change the underlying simulation method

    :type: str
    """

    slice_axis: str
    """ 

    :type: str
    """

    slice_depth: float
    """ Position of the slice

    :type: float
    """

    slice_per_voxel: float
    """ How many slices per voxel should be generated

    :type: float
    """

    sndparticle_boundary: str
    """ How particles that left the domain are treated

    :type: str
    """

    sndparticle_bubble_buoyancy: float
    """ Amount of buoyancy force that rises bubbles (high value results in bubble movement mainly upwards)

    :type: float
    """

    sndparticle_bubble_drag: float
    """ Amount of drag force that moves bubbles along with the fluid (high value results in bubble movement mainly along with the fluid)

    :type: float
    """

    sndparticle_combined_export: str
    """ Determines which particle systems are created from secondary particles

    :type: str
    """

    sndparticle_life_max: float
    """ Highest possible particle lifetime

    :type: float
    """

    sndparticle_life_min: float
    """ Lowest possible particle lifetime

    :type: float
    """

    sndparticle_potential_max_energy: float
    """ Upper clamping threshold that indicates the fluid speed where cells no longer emit more particles (higher value results in generally less particles)

    :type: float
    """

    sndparticle_potential_max_trappedair: float
    """ Upper clamping threshold for marking fluid cells where air is trapped (higher value results in less marked cells)

    :type: float
    """

    sndparticle_potential_max_wavecrest: float
    """ Upper clamping threshold for marking fluid cells as wave crests (higher value results in less marked cells)

    :type: float
    """

    sndparticle_potential_min_energy: float
    """ Lower clamping threshold that indicates the fluid speed where cells start to emit particles (lower values result in generally more particles)

    :type: float
    """

    sndparticle_potential_min_trappedair: float
    """ Lower clamping threshold for marking fluid cells where air is trapped (lower value results in more marked cells)

    :type: float
    """

    sndparticle_potential_min_wavecrest: float
    """ Lower clamping threshold for marking fluid cells as wave crests (lower value results in more marked cells)

    :type: float
    """

    sndparticle_potential_radius: int
    """ Radius to compute potential for each cell (higher values are slower but create smoother potential grids)

    :type: int
    """

    sndparticle_sampling_trappedair: int
    """ Maximum number of particles generated per trapped air cell per frame

    :type: int
    """

    sndparticle_sampling_wavecrest: int
    """ Maximum number of particles generated per wave crest cell per frame

    :type: int
    """

    sndparticle_update_radius: int
    """ Radius to compute position update for each particle (higher values are slower but particles move less chaotic)

    :type: int
    """

    start_point: mathutils.Vector
    """ Start point

    :type: mathutils.Vector
    """

    surface_tension: float
    """ Surface tension of liquid (higher value results in greater hydrophobic behavior)

    :type: float
    """

    sys_particle_maximum: int
    """ Maximum number of fluid particles that are allowed in this simulation

    :type: int
    """

    temperature_grid: bpy_prop_array[float]
    """ Smoke temperature grid, range 0 to 1 represents 0 to 1000K

    :type: bpy_prop_array[float]
    """

    time_scale: float
    """ Adjust simulation speed

    :type: float
    """

    timesteps_max: int
    """ Maximum number of simulation steps to perform for one frame

    :type: int
    """

    timesteps_min: int
    """ Minimum number of simulation steps to perform for one frame

    :type: int
    """

    use_adaptive_domain: bool
    """ Adapt simulation resolution and size to fluid

    :type: bool
    """

    use_adaptive_timesteps: bool
    """ 

    :type: bool
    """

    use_bubble_particles: bool
    """ Create bubble particle system

    :type: bool
    """

    use_collision_border_back: bool
    """ Enable collisions with back domain border

    :type: bool
    """

    use_collision_border_bottom: bool
    """ Enable collisions with bottom domain border

    :type: bool
    """

    use_collision_border_front: bool
    """ Enable collisions with front domain border

    :type: bool
    """

    use_collision_border_left: bool
    """ Enable collisions with left domain border

    :type: bool
    """

    use_collision_border_right: bool
    """ Enable collisions with right domain border

    :type: bool
    """

    use_collision_border_top: bool
    """ Enable collisions with top domain border

    :type: bool
    """

    use_color_ramp: bool
    """ Render a simulation field while mapping its voxels values to the colors of a ramp or using a predefined color code

    :type: bool
    """

    use_diffusion: bool
    """ Enable fluid diffusion settings (e.g. viscosity, surface tension)

    :type: bool
    """

    use_dissolve_smoke: bool
    """ Let smoke disappear over time

    :type: bool
    """

    use_dissolve_smoke_log: bool
    """ Dissolve smoke in a logarithmic fashion. Dissolves quickly at first, but lingers longer

    :type: bool
    """

    use_flip_particles: bool
    """ Create liquid particle system

    :type: bool
    """

    use_foam_particles: bool
    """ Create foam particle system

    :type: bool
    """

    use_fractions: bool
    """ Fractional obstacles improve and smoothen the fluid-obstacle boundary

    :type: bool
    """

    use_guide: bool
    """ Enable fluid guiding

    :type: bool
    """

    use_mesh: bool
    """ Enable fluid mesh (using amplification)

    :type: bool
    """

    use_noise: bool
    """ Enable fluid noise (using amplification)

    :type: bool
    """

    use_slice: bool
    """ Perform a single slice of the domain object

    :type: bool
    """

    use_speed_vectors: bool
    """ Caches velocities of mesh vertices. These will be used (automatically) when rendering with motion blur enabled

    :type: bool
    """

    use_spray_particles: bool
    """ Create spray particle system

    :type: bool
    """

    use_tracer_particles: bool
    """ Create tracer particle system

    :type: bool
    """

    use_viscosity: bool
    """ Simulate fluids with high viscosity using a special solver

    :type: bool
    """

    vector_display_type: str
    """ 

    :type: str
    """

    vector_field: str
    """ Vector field to be represented by the display vectors

    :type: str
    """

    vector_scale: float
    """ Multiplier for scaling the vectors

    :type: float
    """

    vector_scale_with_magnitude: bool
    """ Scale vectors with their magnitudes

    :type: bool
    """

    vector_show_mac_x: bool
    """ Show X-component of MAC Grid

    :type: bool
    """

    vector_show_mac_y: bool
    """ Show Y-component of MAC Grid

    :type: bool
    """

    vector_show_mac_z: bool
    """ Show Z-component of MAC Grid

    :type: bool
    """

    velocity_grid: bpy_prop_array[float]
    """ Smoke velocity grid

    :type: bpy_prop_array[float]
    """

    velocity_scale: float
    """ Factor to control the amount of motion blur

    :type: float
    """

    viscosity_base: float
    """ Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)

    :type: float
    """

    viscosity_exponent: int
    """ Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)

    :type: int
    """

    viscosity_value: float
    """ Viscosity of liquid (higher values result in more viscous fluids, a value of 0 will still apply some viscosity)

    :type: float
    """

    vorticity: float
    """ Amount of turbulence and rotation in smoke

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FluidEffectorSettings(bpy_struct):
    """Smoke collision settings"""

    effector_type: str
    """ Change type of effector in the simulation

    :type: str
    """

    guide_mode: str
    """ How to create guiding velocities

    :type: str
    """

    subframes: int
    """ Number of additional samples to take between frames to improve quality of fast moving effector objects

    :type: int
    """

    surface_distance: float
    """ Additional distance around mesh surface to consider as effector

    :type: float
    """

    use_effector: bool
    """ Control when to apply the effector

    :type: bool
    """

    use_plane_init: bool
    """ Treat this object as a planar, unclosed mesh

    :type: bool
    """

    velocity_factor: float
    """ Multiplier of obstacle velocity

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FluidFlowSettings(bpy_struct):
    """Fluid flow settings"""

    density: float
    """ 

    :type: float
    """

    density_vertex_group: str
    """ Name of vertex group which determines surface emission rate

    :type: str
    """

    flow_behavior: str
    """ Change flow behavior in the simulation

    :type: str
    """

    flow_source: str
    """ Change how fluid is emitted

    :type: str
    """

    flow_type: str
    """ Change type of fluid in the simulation

    :type: str
    """

    fuel_amount: float
    """ 

    :type: float
    """

    noise_texture: Texture
    """ Texture that controls emission strength

    :type: Texture
    """

    particle_size: float
    """ Particle size in simulation cells

    :type: float
    """

    particle_system: ParticleSystem
    """ Particle systems emitted from the object

    :type: ParticleSystem
    """

    smoke_color: mathutils.Color
    """ Color of smoke

    :type: mathutils.Color
    """

    subframes: int
    """ Number of additional samples to take between frames to improve quality of fast moving flows

    :type: int
    """

    surface_distance: float
    """ Controls fluid emission from the mesh surface (higher value results in emission further away from the mesh surface

    :type: float
    """

    temperature: float
    """ Temperature difference to ambient temperature

    :type: float
    """

    texture_map_type: str
    """ Texture mapping type

    :type: str
    """

    texture_offset: float
    """ Z-offset of texture mapping

    :type: float
    """

    texture_size: float
    """ Size of texture mapping

    :type: float
    """

    use_absolute: bool
    """ Only allow given density value in emitter area and will not add up

    :type: bool
    """

    use_inflow: bool
    """ Control when to apply fluid flow

    :type: bool
    """

    use_initial_velocity: bool
    """ Fluid has some initial velocity when it is emitted

    :type: bool
    """

    use_particle_size: bool
    """ Set particle size in simulation cells or use nearest cell

    :type: bool
    """

    use_plane_init: bool
    """ Treat this object as a planar and unclosed mesh. Fluid will only be emitted from the mesh surface and based on the surface emission value

    :type: bool
    """

    use_texture: bool
    """ Use a texture to control emission strength

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    velocity_coord: mathutils.Vector
    """ Additional initial velocity in X, Y and Z direction (added to source velocity)

    :type: mathutils.Vector
    """

    velocity_factor: float
    """ Multiplier of source velocity passed to fluid (source velocity is non-zero only if object is moving)

    :type: float
    """

    velocity_normal: float
    """ Amount of normal directional velocity

    :type: float
    """

    velocity_random: float
    """ Amount of random velocity

    :type: float
    """

    volume_density: float
    """ Controls fluid emission from within the mesh (higher value results in greater emissions from inside the mesh)

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FreestyleLineSet(bpy_struct):
    """Line set for associating lines and style parameters"""

    collection: Collection
    """ A collection of objects based on which feature edges are selected

    :type: Collection
    """

    collection_negation: str
    """ Specify either inclusion or exclusion of feature edges belonging to a collection of objects

    :type: str
    """

    edge_type_combination: str
    """ Specify a logical combination of selection conditions on feature edge types

    :type: str
    """

    edge_type_negation: str
    """ Specify either inclusion or exclusion of feature edges selected by edge types

    :type: str
    """

    exclude_border: bool
    """ Exclude border edges

    :type: bool
    """

    exclude_contour: bool
    """ Exclude contours

    :type: bool
    """

    exclude_crease: bool
    """ Exclude crease edges

    :type: bool
    """

    exclude_edge_mark: bool
    """ Exclude edge marks

    :type: bool
    """

    exclude_external_contour: bool
    """ Exclude external contours

    :type: bool
    """

    exclude_material_boundary: bool
    """ Exclude edges at material boundaries

    :type: bool
    """

    exclude_ridge_valley: bool
    """ Exclude ridges and valleys

    :type: bool
    """

    exclude_silhouette: bool
    """ Exclude silhouette edges

    :type: bool
    """

    exclude_suggestive_contour: bool
    """ Exclude suggestive contours

    :type: bool
    """

    face_mark_condition: str
    """ Specify a feature edge selection condition based on face marks

    :type: str
    """

    face_mark_negation: str
    """ Specify either inclusion or exclusion of feature edges selected by face marks

    :type: str
    """

    linestyle: FreestyleLineStyle
    """ Line style settings

    :type: FreestyleLineStyle
    """

    name: str
    """ Line set name

    :type: str
    """

    qi_end: int
    """ Last QI value of the QI range

    :type: int
    """

    qi_start: int
    """ First QI value of the QI range

    :type: int
    """

    select_border: bool
    """ Select border edges (open mesh edges)

    :type: bool
    """

    select_by_collection: bool
    """ Select feature edges based on a collection of objects

    :type: bool
    """

    select_by_edge_types: bool
    """ Select feature edges based on edge types

    :type: bool
    """

    select_by_face_marks: bool
    """ Select feature edges by face marks

    :type: bool
    """

    select_by_image_border: bool
    """ Select feature edges by image border (less memory consumption)

    :type: bool
    """

    select_by_visibility: bool
    """ Select feature edges based on visibility

    :type: bool
    """

    select_contour: bool
    """ Select contours (outer silhouettes of each object)

    :type: bool
    """

    select_crease: bool
    """ Select crease edges (those between two faces making an angle smaller than the Crease Angle)

    :type: bool
    """

    select_edge_mark: bool
    """ Select edge marks (edges annotated by Freestyle edge marks)

    :type: bool
    """

    select_external_contour: bool
    """ Select external contours (outer silhouettes of occluding and occluded objects)

    :type: bool
    """

    select_material_boundary: bool
    """ Select edges at material boundaries

    :type: bool
    """

    select_ridge_valley: bool
    """ Select ridges and valleys (boundary lines between convex and concave areas of surface)

    :type: bool
    """

    select_silhouette: bool
    """ Select silhouettes (edges at the boundary of visible and hidden faces)

    :type: bool
    """

    select_suggestive_contour: bool
    """ Select suggestive contours (almost silhouette/contour edges)

    :type: bool
    """

    show_render: bool
    """ Enable or disable this line set during stroke rendering

    :type: bool
    """

    visibility: str
    """ Determine how to use visibility for feature edge selection

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FreestyleModuleSettings(bpy_struct):
    """Style module configuration for specifying a style module"""

    script: Text
    """ Python script to define a style module

    :type: Text
    """

    use: bool
    """ Enable or disable this style module during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FreestyleModules(bpy_prop_collection[FreestyleModuleSettings], bpy_struct):
    """A list of style modules (to be applied from top to bottom)"""

    def new(self) -> FreestyleModuleSettings:
        """Add a style module to scene render layer Freestyle settings

        :return: Newly created style module
        :rtype: FreestyleModuleSettings
        """
        ...

    def remove(self, module: FreestyleModuleSettings):
        """Remove a style module from scene render layer Freestyle settings

        :param module: Style module to remove
        :type module: FreestyleModuleSettings
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FreestyleSettings(bpy_struct):
    """Freestyle settings for a ViewLayer data-block"""

    as_render_pass: bool
    """ Renders Freestyle output to a separate pass instead of overlaying it on the Combined pass

    :type: bool
    """

    crease_angle: float
    """ Angular threshold for detecting crease edges

    :type: float
    """

    kr_derivative_epsilon: float
    """ Kr derivative epsilon for computing suggestive contours

    :type: float
    """

    linesets: Linesets
    """ 

    :type: Linesets
    """

    mode: str
    """ Select the Freestyle control mode

    :type: str
    """

    modules: FreestyleModules
    """ A list of style modules (to be applied from top to bottom)

    :type: FreestyleModules
    """

    sphere_radius: float
    """ Sphere radius for computing curvatures

    :type: float
    """

    use_culling: bool
    """ If enabled, out-of-view edges are ignored

    :type: bool
    """

    use_material_boundaries: bool
    """ Enable material boundaries

    :type: bool
    """

    use_ridges_and_valleys: bool
    """ Enable ridges and valleys

    :type: bool
    """

    use_smoothness: bool
    """ Take face smoothness into account in view map calculation

    :type: bool
    """

    use_suggestive_contours: bool
    """ Enable suggestive contours

    :type: bool
    """

    use_view_map_cache: bool
    """ Keep the computed view map and avoid recalculating it if mesh geometry is unchanged

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Function(bpy_struct):
    """RNA function definition"""

    description: str
    """ Description of the Function's purpose

    :type: str
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    is_registered: bool
    """ Function is registered as callback as part of type registration

    :type: bool
    """

    is_registered_optional: bool
    """ Function is optionally registered as callback part of type registration

    :type: bool
    """

    parameters: bpy_prop_collection[Property]
    """ Parameters for the function

    :type: bpy_prop_collection[Property]
    """

    use_self: bool
    """ Function does not pass itself as an argument (becomes a static method in Python)

    :type: bool
    """

    use_self_type: bool
    """ Function passes itself type as an argument (becomes a class method in Python if use_self is false)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilEditCurve(bpy_struct):
    """Edition Curve"""

    curve_points: bpy_prop_collection[GPencilEditCurvePoint]
    """ Curve data points

    :type: bpy_prop_collection[GPencilEditCurvePoint]
    """

    select: bool
    """ Curve is selected for viewport editing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilEditCurvePoint(bpy_struct):
    """Bézier curve point with two handles"""

    co: mathutils.Vector
    """ Coordinates of the control point

    :type: mathutils.Vector
    """

    handle_left: mathutils.Vector
    """ Coordinates of the first handle

    :type: mathutils.Vector
    """

    handle_right: mathutils.Vector
    """ Coordinates of the second handle

    :type: mathutils.Vector
    """

    hide: bool
    """ Visibility status

    :type: bool
    """

    point_index: int
    """ Index of the corresponding grease pencil stroke point

    :type: int
    """

    pressure: float
    """ Pressure of the grease pencil stroke point

    :type: float
    """

    select_control_point: bool
    """ Control point selection status

    :type: bool
    """

    select_left_handle: bool
    """ Handle 1 selection status

    :type: bool
    """

    select_right_handle: bool
    """ Handle 2 selection status

    :type: bool
    """

    strength: float
    """ Color intensity (alpha factor) of the grease pencil stroke point

    :type: float
    """

    uv_factor: float
    """ Internal UV factor

    :type: float
    """

    uv_rotation: float
    """ Internal UV factor for dot mode

    :type: float
    """

    vertex_color: bpy_prop_array[float]
    """ Vertex color of the grease pencil stroke point

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilFrame(bpy_struct):
    """Collection of related sketches on a particular frame"""

    frame_number: int
    """ The frame on which this sketch appears

    :type: int
    """

    is_edited: bool
    """ Frame is being edited (painted on)

    :type: bool
    """

    keyframe_type: str
    """ Type of keyframe

    :type: str
    """

    select: bool
    """ Frame is selected for editing in the Dope Sheet

    :type: bool
    """

    strokes: GPencilStrokes
    """ Freehand curves defining the sketch on this frame

    :type: GPencilStrokes
    """

    def clear(self):
        """Remove all the grease pencil frame data"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilFrames(bpy_prop_collection[GPencilFrame], bpy_struct):
    """Collection of grease pencil frames"""

    def new(
        self, frame_number: int | None, active: bool | typing.Any | None = False
    ) -> GPencilFrame:
        """Add a new grease pencil frame

        :param frame_number: Frame Number, The frame on which this sketch appears
        :type frame_number: int | None
        :param active: Active
        :type active: bool | typing.Any | None
        :return: The newly created frame
        :rtype: GPencilFrame
        """
        ...

    def remove(self, frame: GPencilFrame):
        """Remove a grease pencil frame

        :param frame: Frame, The frame to remove
        :type frame: GPencilFrame
        """
        ...

    def copy(self, source: GPencilFrame) -> GPencilFrame:
        """Copy a grease pencil frame

        :param source: Source, The source frame
        :type source: GPencilFrame
        :return: The newly copied frame
        :rtype: GPencilFrame
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilInterpolateSettings(bpy_struct):
    """Settings for Grease Pencil interpolation tools"""

    interpolation_curve: CurveMapping
    """ Custom curve to control 'sequence' interpolation between Grease Pencil frames

    :type: CurveMapping
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilLayer(bpy_struct):
    """Collection of related sketches"""

    active_frame: GPencilFrame
    """ Frame currently being displayed for this layer

    :type: GPencilFrame
    """

    annotation_hide: bool
    """ Set annotation Visibility

    :type: bool
    """

    annotation_onion_after_color: mathutils.Color
    """ Base color for ghosts after the active frame

    :type: mathutils.Color
    """

    annotation_onion_after_range: int
    """ Maximum number of frames to show after current frame

    :type: int
    """

    annotation_onion_before_color: mathutils.Color
    """ Base color for ghosts before the active frame

    :type: mathutils.Color
    """

    annotation_onion_before_range: int
    """ Maximum number of frames to show before current frame

    :type: int
    """

    annotation_opacity: float
    """ Annotation Layer Opacity

    :type: float
    """

    blend_mode: str
    """ Blend mode

    :type: str
    """

    channel_color: mathutils.Color
    """ Custom color for animation channel in Dopesheet

    :type: mathutils.Color
    """

    color: mathutils.Color
    """ Color for all strokes in this layer

    :type: mathutils.Color
    """

    frames: GPencilFrames
    """ Sketches for this layer on different frames

    :type: GPencilFrames
    """

    hide: bool
    """ Set layer Visibility

    :type: bool
    """

    info: str
    """ Layer name

    :type: str
    """

    is_parented: bool
    """ True when the layer parent object is set

    :type: bool
    """

    is_ruler: bool
    """ This is a special ruler layer

    :type: bool
    """

    line_change: int
    """ Thickness change to apply to current strokes (in pixels)

    :type: int
    """

    location: mathutils.Vector
    """ Values for change location

    :type: mathutils.Vector
    """

    lock: bool
    """ Protect layer from further editing and/or frame changes

    :type: bool
    """

    lock_frame: bool
    """ Lock current frame displayed by layer

    :type: bool
    """

    lock_material: bool
    """ Avoids editing locked materials in the layer

    :type: bool
    """

    mask_layers: GreasePencilMaskLayers
    """ List of Masking Layers

    :type: GreasePencilMaskLayers
    """

    matrix_inverse: mathutils.Matrix
    """ Parent inverse transformation matrix

    :type: mathutils.Matrix
    """

    matrix_inverse_layer: mathutils.Matrix
    """ Local Layer transformation inverse matrix

    :type: mathutils.Matrix
    """

    matrix_layer: mathutils.Matrix
    """ Local Layer transformation matrix

    :type: mathutils.Matrix
    """

    opacity: float
    """ Layer Opacity

    :type: float
    """

    parent: Object
    """ Parent object

    :type: Object
    """

    parent_bone: str
    """ Name of parent bone in case of a bone parenting relation

    :type: str
    """

    parent_type: str
    """ Type of parent relation

    :type: str
    """

    pass_index: int
    """ Index number for the "Layer Index" pass

    :type: int
    """

    rotation: mathutils.Euler
    """ Values for changes in rotation

    :type: mathutils.Euler
    """

    scale: mathutils.Vector
    """ Values for changes in scale

    :type: mathutils.Vector
    """

    select: bool
    """ Layer is selected for editing in the Dope Sheet

    :type: bool
    """

    show_in_front: bool
    """ Make the layer display in front of objects

    :type: bool
    """

    show_points: bool
    """ Show the points which make up the strokes (for debugging purposes)

    :type: bool
    """

    thickness: int
    """ Thickness of annotation strokes

    :type: int
    """

    tint_color: mathutils.Color
    """ Color for tinting stroke colors

    :type: mathutils.Color
    """

    tint_factor: float
    """ Factor of tinting color

    :type: float
    """

    use_annotation_onion_skinning: bool
    """ Display annotation onion skins before and after the current frame

    :type: bool
    """

    use_lights: bool
    """ Enable the use of lights on stroke and fill materials

    :type: bool
    """

    use_mask_layer: bool
    """ The visibility of drawings on this layer is affected by the layers in its masks list

    :type: bool
    """

    use_onion_skinning: bool
    """ Display onion skins before and after the current frame

    :type: bool
    """

    use_solo_mode: bool
    """ In Draw Mode only display layers with keyframe in current frame

    :type: bool
    """

    use_viewlayer_masks: bool
    """ Include the mask layers when rendering the view-layer

    :type: bool
    """

    vertex_paint_opacity: float
    """ Vertex Paint mix factor

    :type: float
    """

    viewlayer_render: str
    """ Only include Layer in this View Layer render output (leave blank to include always)

    :type: str
    """

    def clear(self):
        """Remove all the grease pencil layer data"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilLayerMask(bpy_struct):
    """List of Mask Layers"""

    hide: bool
    """ Set mask Visibility

    :type: bool
    """

    invert: bool
    """ Invert mask

    :type: bool
    """

    name: str
    """ Mask layer name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilSculptGuide(bpy_struct):
    """Guides for drawing"""

    angle: float
    """ Direction of lines

    :type: float
    """

    angle_snap: float
    """ Angle snapping

    :type: float
    """

    location: bpy_prop_array[float]
    """ Custom reference point for guides

    :type: bpy_prop_array[float]
    """

    reference_object: Object
    """ Object used for reference point

    :type: Object
    """

    reference_point: str
    """ Type of speed guide

    :type: str
    """

    spacing: float
    """ Guide spacing

    :type: float
    """

    type: str
    """ Type of speed guide

    :type: str
    """

    use_guide: bool
    """ Enable speed guides

    :type: bool
    """

    use_snapping: bool
    """ Enable snapping to guides angle or spacing options

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilSculptSettings(bpy_struct):
    """General properties for Grease Pencil stroke sculpting tools"""

    guide: GPencilSculptGuide
    """ 

    :type: GPencilSculptGuide
    """

    intersection_threshold: float
    """ Threshold for stroke intersections

    :type: float
    """

    lock_axis: str
    """ 

    :type: str
    """

    multiframe_falloff_curve: CurveMapping
    """ Custom curve to control falloff of brush effect by Grease Pencil frames

    :type: CurveMapping
    """

    thickness_primitive_curve: CurveMapping
    """ Custom curve to control primitive thickness

    :type: CurveMapping
    """

    use_automasking_layer_active: bool
    """ Affect only the Active Layer

    :type: bool
    """

    use_automasking_layer_stroke: bool
    """ Affect only strokes below the cursor

    :type: bool
    """

    use_automasking_material_active: bool
    """ Affect only the Active Material

    :type: bool
    """

    use_automasking_material_stroke: bool
    """ Affect only strokes below the cursor

    :type: bool
    """

    use_automasking_stroke: bool
    """ Affect only strokes below the cursor

    :type: bool
    """

    use_multiframe_falloff: bool
    """ Use falloff effect when edit in multiframe mode to compute brush effect by frame

    :type: bool
    """

    use_scale_thickness: bool
    """ Scale the stroke thickness when transforming strokes

    :type: bool
    """

    use_thickness_curve: bool
    """ Use curve to define primitive stroke thickness

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilStroke(bpy_struct):
    """Freehand curve defining part of a sketch"""

    aspect: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    bound_box_max: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    bound_box_min: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    display_mode: str
    """ Coordinate space that stroke is in

    :type: str
    """

    edit_curve: GPencilEditCurve
    """ Temporary data for Edit Curve

    :type: GPencilEditCurve
    """

    end_cap_mode: str
    """ Stroke end extreme cap style

    :type: str
    """

    hardness: float
    """ Amount of gradient along section of stroke

    :type: float
    """

    has_edit_curve: bool
    """ Stroke has Curve data to edit shape

    :type: bool
    """

    is_nofill_stroke: bool
    """ Special stroke to use as boundary for filling areas

    :type: bool
    """

    line_width: int
    """ Thickness of stroke (in pixels)

    :type: int
    """

    material_index: int
    """ Material slot index of this stroke

    :type: int
    """

    points: GPencilStrokePoints
    """ Stroke data points

    :type: GPencilStrokePoints
    """

    select: bool
    """ Stroke is selected for viewport editing

    :type: bool
    """

    select_index: int
    """ Index of selection used for interpolation

    :type: int
    """

    start_cap_mode: str
    """ Stroke start extreme cap style

    :type: str
    """

    time_start: float
    """ Initial time of the stroke

    :type: float
    """

    triangles: bpy_prop_collection[GPencilTriangle]
    """ Triangulation data for HQ fill

    :type: bpy_prop_collection[GPencilTriangle]
    """

    use_cyclic: bool
    """ Enable cyclic drawing, closing the stroke

    :type: bool
    """

    uv_rotation: float
    """ Rotation of the UV

    :type: float
    """

    uv_scale: float
    """ Scale of the UV

    :type: float
    """

    uv_translation: mathutils.Vector
    """ Translation of default UV position

    :type: mathutils.Vector
    """

    vertex_color_fill: bpy_prop_array[float]
    """ Color used to mix with fill color to get final color

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilStrokePoint(bpy_struct):
    """Data point for freehand stroke curve"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    pressure: float
    """ Pressure of tablet at point when drawing it

    :type: float
    """

    select: bool
    """ Point is selected for viewport editing

    :type: bool
    """

    strength: float
    """ Color intensity (alpha factor)

    :type: float
    """

    time: float
    """ Time relative to stroke start

    :type: float
    """

    uv_factor: float
    """ Internal UV factor

    :type: float
    """

    uv_fill: mathutils.Vector
    """ Internal UV factor for filling

    :type: mathutils.Vector
    """

    uv_rotation: float
    """ Internal UV factor for dot mode

    :type: float
    """

    vertex_color: bpy_prop_array[float]
    """ Color used to mix with point color to get final color

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilStrokePoints(bpy_prop_collection[GPencilStrokePoint], bpy_struct):
    """Collection of grease pencil stroke points"""

    def add(
        self,
        count: int | None,
        pressure: typing.Any | None = 1.0,
        strength: typing.Any | None = 1.0,
    ):
        """Add a new grease pencil stroke point

        :param count: Number, Number of points to add to the stroke
        :type count: int | None
        :param pressure: Pressure, Pressure for newly created points
        :type pressure: typing.Any | None
        :param strength: Strength, Color intensity (alpha factor) for newly created points
        :type strength: typing.Any | None
        """
        ...

    def pop(self, index: typing.Any | None = -1):
        """Remove a grease pencil stroke point

        :param index: Index, point index
        :type index: typing.Any | None
        """
        ...

    def update(self):
        """Recalculate internal triangulation data"""
        ...

    def weight_get(
        self,
        vertex_group_index: typing.Any | None = 0,
        point_index: typing.Any | None = 0,
    ) -> float:
        """Get vertex group point weight

        :param vertex_group_index: Vertex Group Index, Index of Vertex Group in the array of groups
        :type vertex_group_index: typing.Any | None
        :param point_index: Point Index, Index of the Point in the array
        :type point_index: typing.Any | None
        :return: Weight, Point Weight
        :rtype: float
        """
        ...

    def weight_set(
        self,
        vertex_group_index: typing.Any | None = 0,
        point_index: typing.Any | None = 0,
        weight: typing.Any | None = 0.0,
    ):
        """Set vertex group point weight

        :param vertex_group_index: Vertex Group Index, Index of Vertex Group in the array of groups
        :type vertex_group_index: typing.Any | None
        :param point_index: Point Index, Index of the Point in the array
        :type point_index: typing.Any | None
        :param weight: Weight, Point Weight
        :type weight: typing.Any | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilStrokes(bpy_prop_collection[GPencilStroke], bpy_struct):
    """Collection of grease pencil stroke"""

    def new(self) -> GPencilStroke:
        """Add a new grease pencil stroke

        :return: The newly created stroke
        :rtype: GPencilStroke
        """
        ...

    def remove(self, stroke: GPencilStroke):
        """Remove a grease pencil stroke

        :param stroke: Stroke, The stroke to remove
        :type stroke: GPencilStroke
        """
        ...

    def close(self, stroke: GPencilStroke):
        """Close a grease pencil stroke adding geometry

        :param stroke: Stroke, The stroke to close
        :type stroke: GPencilStroke
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPencilTriangle(bpy_struct):
    """Triangulation data for Grease Pencil fills"""

    v1: int
    """ First triangle vertex index

    :type: int
    """

    v2: int
    """ Second triangle vertex index

    :type: int
    """

    v3: int
    """ Third triangle vertex index

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Gizmo(bpy_struct):
    """Collection of gizmos"""

    alpha: float
    """ 

    :type: float
    """

    alpha_highlight: float
    """ 

    :type: float
    """

    bl_idname: str
    """ 

    :type: str
    """

    color: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    color_highlight: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    group: GizmoGroup
    """ Gizmo group this gizmo is a member of

    :type: GizmoGroup
    """

    hide: bool
    """ 

    :type: bool
    """

    hide_keymap: bool
    """ Ignore the key-map for this gizmo

    :type: bool
    """

    hide_select: bool
    """ 

    :type: bool
    """

    is_highlight: bool
    """ 

    :type: bool
    """

    is_modal: bool
    """ 

    :type: bool
    """

    line_width: float
    """ 

    :type: float
    """

    matrix_basis: mathutils.Matrix
    """ 

    :type: mathutils.Matrix
    """

    matrix_offset: mathutils.Matrix
    """ 

    :type: mathutils.Matrix
    """

    matrix_space: mathutils.Matrix
    """ 

    :type: mathutils.Matrix
    """

    matrix_world: mathutils.Matrix
    """ 

    :type: mathutils.Matrix
    """

    properties: GizmoProperties
    """ 

    :type: GizmoProperties
    """

    scale_basis: float
    """ 

    :type: float
    """

    select: bool
    """ 

    :type: bool
    """

    select_bias: float
    """ Depth bias used for selection

    :type: float
    """

    use_draw_hover: bool
    """ 

    :type: bool
    """

    use_draw_modal: bool
    """ Show while dragging

    :type: bool
    """

    use_draw_offset_scale: bool
    """ Scale the offset matrix (use to apply screen-space offset)

    :type: bool
    """

    use_draw_scale: bool
    """ Use scale when calculating the matrix

    :type: bool
    """

    use_draw_value: bool
    """ Show an indicator for the current value while dragging

    :type: bool
    """

    use_event_handle_all: bool
    """ When highlighted, do not pass events through to be handled by other keymaps

    :type: bool
    """

    use_grab_cursor: bool
    """ 

    :type: bool
    """

    use_operator_tool_properties: bool
    """ Merge active tool properties on activation (does not overwrite existing)

    :type: bool
    """

    use_select_background: bool
    """ Don't write into the depth buffer

    :type: bool
    """

    use_tooltip: bool
    """ Use tooltips when hovering over this gizmo

    :type: bool
    """

    def draw(self, context: Context):
        """

        :param context:
        :type context: Context
        """
        ...

    def draw_select(self, context: Context, select_id: typing.Any | None = 0):
        """

        :param context:
        :type context: Context
        :param select_id:
        :type select_id: typing.Any | None
        """
        ...

    def test_select(self, context: Context, location: typing.Any) -> int:
        """

        :param context:
        :type context: Context
        :param location: Location, Region coordinates
        :type location: typing.Any
        :return: Use -1 to skip this gizmo
        :rtype: int
        """
        ...

    def modal(self, context: Context, event: Event, tweak: set[str] | None):
        """

        :param context:
        :type context: Context
        :param event:
        :type event: Event
        :param tweak: Tweak
        :type tweak: set[str] | None
        :return: result
        """
        ...

    def setup(self): ...
    def invoke(self, context: Context, event: Event):
        """

        :param context:
        :type context: Context
        :param event:
        :type event: Event
        :return: result
        """
        ...

    def exit(self, context: Context, cancel: bool | None):
        """

        :param context:
        :type context: Context
        :param cancel: Cancel, otherwise confirm
        :type cancel: bool | None
        """
        ...

    def select_refresh(self): ...
    def draw_preset_box(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        select_id: typing.Any | None = -1,
    ):
        """Draw a box

        :param matrix: The matrix to transform
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        :param select_id: ID to use when gizmo is selectable. Use -1 when not selecting
        :type select_id: typing.Any | None
        """
        ...

    def draw_preset_arrow(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        axis: str | None = "POS_Z",
        select_id: typing.Any | None = -1,
    ):
        """Draw a box

        :param matrix: The matrix to transform
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        :param axis: Arrow Orientation
        :type axis: str | None
        :param select_id: ID to use when gizmo is selectable. Use -1 when not selecting
        :type select_id: typing.Any | None
        """
        ...

    def draw_preset_circle(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        axis: str | None = "POS_Z",
        select_id: typing.Any | None = -1,
    ):
        """Draw a box

        :param matrix: The matrix to transform
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        :param axis: Arrow Orientation
        :type axis: str | None
        :param select_id: ID to use when gizmo is selectable. Use -1 when not selecting
        :type select_id: typing.Any | None
        """
        ...

    def target_set_prop(
        self,
        target: str | typing.Any,
        data: typing.Any,
        property: str | typing.Any,
        index: typing.Any | None = -1,
    ):
        """

        :param target: Target property
        :type target: str | typing.Any
        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param index:
        :type index: typing.Any | None
        """
        ...

    def target_set_operator(
        self, operator: str | typing.Any, index: typing.Any | None = 0
    ) -> OperatorProperties:
        """Operator to run when activating the gizmo (overrides property targets)

        :param operator: Target operator
        :type operator: str | typing.Any
        :param index: Part index
        :type index: typing.Any | None
        :return: Operator properties to fill in
        :rtype: OperatorProperties
        """
        ...

    def target_is_valid(self, property: str | typing.Any) -> bool:
        """

        :param property: Property identifier
        :type property: str | typing.Any
        :return:
        :rtype: bool
        """
        ...

    def draw_custom_shape(
        self,
        shape,
        *,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None = None,
        select_id=None,
    ):
        """Draw a shape created form `Gizmo.draw_custom_shape`.

                :param shape: The cached shape to draw.
                :param matrix: 4x4 matrix, when not given `Gizmo.matrix_world` is used.
                :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
                :param select_id: The selection id.
        Only use when drawing within `Gizmo.draw_select`.
        """
        ...

    @staticmethod
    def new_custom_shape(type: str | None, verts):
        """Create a new shape that can be passed to `Gizmo.draw_custom_shape`.

        :param type: The type of shape to create in (POINTS, LINES, TRIS, LINE_STRIP).
        :type type: str | None
        :param verts: Coordinates.
        :return: The newly created shape.
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    def target_get_range(self, target):
        """Get the range for this target property.

        :param target: Target property name.
        :return: The range of this property (min, max).
        """
        ...

    def target_get_value(self, target: str | None):
        """Get the value of this target property.

        :param target: Target property name.
        :type target: str | None
        :return: The value of the target property.
        """
        ...

    def target_set_handler(
        self,
        target: str | None,
        get: collections.abc.Callable | None,
        set: collections.abc.Callable | None,
        range: collections.abc.Callable | None = None,
    ):
        """Assigns callbacks to a gizmos property.

        :param target: Target property name.
        :type target: str | None
        :param get: Function that returns the value for this property (single value or sequence).
        :type get: collections.abc.Callable | None
        :param set: Function that takes a single value argument and applies it.
        :type set: collections.abc.Callable | None
        :param range: Function that returns a (min, max) tuple for gizmos that use a range.
        :type range: collections.abc.Callable | None
        """
        ...

    def target_set_value(self, target: str | None):
        """Set the value of this target property.

        :param target: Target property name.
        :type target: str | None
        """
        ...

class GizmoGroup(bpy_struct):
    """Storage of an operator being executed, or registered after execution"""

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_options: set[str]
    """ Options for this operator type

    :type: set[str]
    """

    bl_owner_id: str
    """ 

    :type: str
    """

    bl_region_type: str
    """ The region where the panel is going to be used in

    :type: str
    """

    bl_space_type: str
    """ The space where the panel is going to be used in

    :type: str
    """

    gizmos: Gizmos
    """ List of gizmos in the Gizmo Map

    :type: Gizmos
    """

    has_reports: bool
    """ GizmoGroup has a set of reports (warnings and errors) from last execution

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def poll(cls, context: Context) -> bool:
        """Test if the gizmo group can be called or not

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def setup_keymap(cls, keyconfig: KeyConfig) -> KeyMap:
        """Initialize keymaps for this gizmo group, use fallback keymap when not present

        :param keyconfig:
        :type keyconfig: KeyConfig
        :return:
        :rtype: KeyMap
        """
        ...

    def setup(self, context: Context):
        """Create gizmos function for the gizmo group

        :param context:
        :type context: Context
        """
        ...

    def refresh(self, context: Context):
        """Refresh data (called on common state changes such as selection)

        :param context:
        :type context: Context
        """
        ...

    def draw_prepare(self, context: Context):
        """Run before each redraw

        :param context:
        :type context: Context
        """
        ...

    def invoke_prepare(self, context: Context, gizmo: Gizmo):
        """Run before invoke

        :param context:
        :type context: Context
        :param gizmo:
        :type gizmo: Gizmo
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GizmoGroupProperties(bpy_struct):
    """Input properties of a Gizmo Group"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GizmoProperties(bpy_struct):
    """Input properties of a Gizmo"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Gizmos(bpy_prop_collection[Gizmo], bpy_struct):
    """Collection of gizmos"""

    def new(self, type: str | typing.Any) -> Gizmo:
        """Add gizmo

        :param type: Gizmo identifier
        :type type: str | typing.Any
        :return: New gizmo
        :rtype: Gizmo
        """
        ...

    def remove(self, gizmo: Gizmo):
        """Delete gizmo

        :param gizmo: New gizmo
        :type gizmo: Gizmo
        """
        ...

    def clear(self):
        """Delete all gizmos"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GpencilModifier(bpy_struct):
    """Modifier affecting the Grease Pencil object"""

    is_override_data: bool
    """ In a local override object, whether this modifier comes from the linked reference object, or is local to the override

    :type: bool
    """

    name: str
    """ Modifier name

    :type: str
    """

    show_expanded: bool
    """ Set modifier expanded in the user interface

    :type: bool
    """

    show_in_editmode: bool
    """ Display modifier in Edit mode

    :type: bool
    """

    show_render: bool
    """ Use modifier during render

    :type: bool
    """

    show_viewport: bool
    """ Display modifier in viewport

    :type: bool
    """

    type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GpencilVertexGroupElement(bpy_struct):
    """Weight value of a vertex in a vertex group"""

    group: int
    """ 

    :type: int
    """

    weight: float
    """ Vertex Weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilGrid(bpy_struct):
    """Settings for grid and canvas in 3D viewport"""

    color: mathutils.Color
    """ Color for grid lines

    :type: mathutils.Color
    """

    lines: int
    """ Number of subdivisions in each side of symmetry line

    :type: int
    """

    offset: mathutils.Vector
    """ Offset of the canvas

    :type: mathutils.Vector
    """

    scale: mathutils.Vector
    """ Grid scale

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilLayers(bpy_prop_collection[GPencilLayer], bpy_struct):
    """Collection of grease pencil layers"""

    active: GPencilLayer | None
    """ Active grease pencil layer

    :type: GPencilLayer | None
    """

    active_index: int | None
    """ Index of active grease pencil layer

    :type: int | None
    """

    active_note: str | None
    """ Note/Layer to add annotation strokes to

    :type: str | None
    """

    def new(
        self, name: str | typing.Any, set_active: bool | typing.Any | None = True
    ) -> GPencilLayer:
        """Add a new grease pencil layer

        :param name: Name, Name of the layer
        :type name: str | typing.Any
        :param set_active: Set Active, Set the newly created layer to the active layer
        :type set_active: bool | typing.Any | None
        :return: The newly created layer
        :rtype: GPencilLayer
        """
        ...

    def remove(self, layer: GPencilLayer):
        """Remove a grease pencil layer

        :param layer: The layer to remove
        :type layer: GPencilLayer
        """
        ...

    def move(self, layer: GPencilLayer, type: str | None):
        """Move a grease pencil layer in the layer stack

        :param layer: The layer to move
        :type layer: GPencilLayer
        :param type: Direction of movement
        :type type: str | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilMaskLayers(bpy_prop_collection[GPencilLayerMask], bpy_struct):
    """Collection of grease pencil masking layers"""

    active_mask_index: int | None
    """ Active index in layer mask array

    :type: int | None
    """

    def add(self, layer: GPencilLayer):
        """Add a layer to mask list

        :param layer: Layer to add as mask
        :type layer: GPencilLayer
        """
        ...

    def remove(self, mask: GPencilLayerMask):
        """Remove a layer from mask list

        :param mask: Mask to remove
        :type mask: GPencilLayerMask
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Header(bpy_struct):
    """Editor header containing UI elements"""

    bl_idname: str
    """ If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the header; for example, if the class name is "OBJECT_HT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_HT_hello"

    :type: str
    """

    bl_region_type: str
    """ The region where the header is going to be used in (defaults to header region)

    :type: str
    """

    bl_space_type: str
    """ The space where the header is going to be used in

    :type: str
    """

    layout: UILayout
    """ Structure of the header in the UI

    :type: UILayout
    """

    def draw(self, context: Context | None):
        """Draw UI elements into the header UI layout

        :param context:
        :type context: Context | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Histogram(bpy_struct):
    """Statistical view of the levels of color in an image"""

    mode: str
    """ Channels to display in the histogram

    :type: str
    """

    show_line: bool
    """ Display lines rather than filled shapes

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ID(bpy_struct):
    """Base type for data-blocks, defining a unique name, linking from other libraries and garbage collection"""

    asset_data: AssetMetaData
    """ Additional data for an asset data-block

    :type: AssetMetaData
    """

    id_type: str
    """ Type identifier of this data-block

    :type: str
    """

    is_embedded_data: bool
    """ This data-block is not an independent one, but is actually a sub-data of another ID (typical example: root node trees or master collections)

    :type: bool
    """

    is_evaluated: bool
    """ Whether this ID is runtime-only, evaluated data-block, or actual data from .blend file

    :type: bool
    """

    is_library_indirect: bool
    """ Is this ID block linked indirectly

    :type: bool
    """

    is_missing: bool
    """ This data-block is a place-holder for missing linked data (i.e. it is [an override of] a linked data that could not be found anymore)

    :type: bool
    """

    is_runtime_data: bool
    """ This data-block is runtime data, i.e. it won't be saved in .blend file. Note that e.g. evaluated IDs are always runtime, so this value is only editable for data-blocks in Main data-base

    :type: bool
    """

    library: Library
    """ Library file the data-block is linked from

    :type: Library
    """

    library_weak_reference: LibraryWeakReference
    """ Weak reference to a data-block in another library .blend file (used to re-use already appended data instead of appending new copies)

    :type: LibraryWeakReference
    """

    name: str
    """ Unique data-block ID name (within a same type and library)

    :type: str
    """

    name_full: str
    """ Unique data-block ID name, including library one is any

    :type: str
    """

    original: ID
    """ Actual data-block from .blend file (Main database) that generated that evaluated one

    :type: ID
    """

    override_library: IDOverrideLibrary
    """ Library override data

    :type: IDOverrideLibrary
    """

    preview: ImagePreview
    """ Preview image and icon of this data-block (always None if not supported for this type of data)

    :type: ImagePreview
    """

    session_uid: int
    """ A session-wide unique identifier for the data block that remains the same across renames and internal reallocations. It does change when reloading the file

    :type: int
    """

    tag: bool
    """ Tools can use this to tag data for their own purposes (initial state is undefined)

    :type: bool
    """

    use_extra_user: bool
    """ Indicates whether an extra user is set or not (mainly for internal/debug usages)

    :type: bool
    """

    use_fake_user: bool
    """ Save this data-block even if it has no users

    :type: bool
    """

    users: int
    """ Number of times this data-block is referenced

    :type: int
    """

    def evaluated_get(self, depsgraph: Depsgraph) -> ID:
        """Get corresponding evaluated ID from the given dependency graph. Note that this does not ensure the dependency graph is fully evaluated, it just returns the result of the last evaluation

        :param depsgraph: Dependency graph to perform lookup in
        :type depsgraph: Depsgraph
        :return: New copy of the ID
        :rtype: ID
        """
        ...

    def copy(self) -> ID:
        """Create a copy of this data-block (not supported for all data-blocks). The result is added to the Blend-File Data (Main database), with all references to other data-blocks ensured to be from within the same Blend-File Data

        :return: New copy of the ID
        :rtype: ID
        """
        ...

    def asset_mark(self):
        """Enable easier reuse of the data-block through the Asset Browser, with the help of customizable metadata (like previews, descriptions and tags)"""
        ...

    def asset_clear(self):
        """Delete all asset metadata and turn the asset data-block back into a normal data-block"""
        ...

    def asset_generate_preview(self):
        """Generate preview image (might be scheduled in a background thread)"""
        ...

    def override_create(
        self, remap_local_usages: bool | typing.Any | None = False
    ) -> ID:
        """Create an overridden local copy of this linked data-block (not supported for all data-blocks)

        :param remap_local_usages: Whether local usages of the linked ID should be remapped to the new library override of it
        :type remap_local_usages: bool | typing.Any | None
        :return: New overridden local copy of the ID
        :rtype: ID
        """
        ...

    def override_hierarchy_create(
        self,
        scene: Scene,
        view_layer: ViewLayer,
        reference: ID | None = None,
        do_fully_editable: bool | typing.Any | None = False,
    ) -> ID:
        """Create an overridden local copy of this linked data-block, and most of its dependencies when it is a Collection or and Object

        :param scene: In which scene the new overrides should be instantiated
        :type scene: Scene
        :param view_layer: In which view layer the new overrides should be instantiated
        :type view_layer: ViewLayer
        :param reference: Another ID (usually an Object or Collection) used as a hint to decide where to instantiate the new overrides
        :type reference: ID | None
        :param do_fully_editable: Make all library overrides generated by this call fully editable by the user (none will be 'system overrides')
        :type do_fully_editable: bool | typing.Any | None
        :return: New overridden local copy of the root ID
        :rtype: ID
        """
        ...

    def user_clear(self):
        """Clear the user count of a data-block so its not saved, on reload the data will be removedThis function is for advanced use only, misuse can crash blender since the user
        count is used to prevent data being removed when it is used.

        """
        ...

    def user_remap(self, new_id: ID):
        """Replace all usage in the .blend file of this ID by new given one

        :param new_id: New ID to use
        :type new_id: ID
        """
        ...

    def make_local(
        self,
        clear_proxy: bool | typing.Any | None = True,
        clear_liboverride: bool | typing.Any | None = False,
    ) -> ID:
        """Make this datablock local, return local one (may be a copy of the original, in case it is also indirectly used)

        :param clear_proxy: Deprecated, has no effect
        :type clear_proxy: bool | typing.Any | None
        :param clear_liboverride: Remove potential library override data from the newly made local data
        :type clear_liboverride: bool | typing.Any | None
        :return: This ID, or the new ID if it was copied
        :rtype: ID
        """
        ...

    def user_of_id(self, id: ID) -> int:
        """Count the number of times that ID uses/references given one

        :param id: ID to count usages
        :type id: ID
        :return: Number of usages/references of given id by current data-block
        :rtype: int
        """
        ...

    def animation_data_create(self) -> AnimData:
        """Create animation data to this ID, note that not all ID types support this

        :return: New animation data or nullptr
        :rtype: AnimData
        """
        ...

    def animation_data_clear(self):
        """Clear animation on this ID"""
        ...

    def update_tag(self, refresh: set[str] | None = {}):
        """Tag the ID to update its display data, e.g. when calling `bpy.types.Scene.update`

        :param refresh: Type of updates to perform
        :type refresh: set[str] | None
        """
        ...

    def preview_ensure(self) -> ImagePreview:
        """Ensure that this ID has preview data (if ID type supports it)

        :return: The existing or created preview
        :rtype: ImagePreview
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDMaterials(bpy_prop_collection[Material], bpy_struct):
    """Collection of materials"""

    def append(self, material: Material | None):
        """Add a new material to the data-block

        :param material: Material to add
        :type material: Material | None
        """
        ...

    def pop(self, index: typing.Any | None = -1) -> Material:
        """Remove a material from the data-block

        :param index: Index of material to remove
        :type index: typing.Any | None
        :return: Material to remove
        :rtype: Material
        """
        ...

    def clear(self):
        """Remove all materials from the data-block"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDOverrideLibrary(bpy_struct):
    """Struct gathering all data needed by overridden linked IDs"""

    hierarchy_root: ID
    """ Library override ID used as root of the override hierarchy this ID is a member of

    :type: ID
    """

    is_in_hierarchy: bool
    """ Whether this library override is defined as part of a library hierarchy, or as a single, isolated and autonomous override

    :type: bool
    """

    is_system_override: bool
    """ Whether this library override exists only for the override hierarchy, or if it is actually editable by the user

    :type: bool
    """

    properties: IDOverrideLibraryProperties
    """ List of overridden properties

    :type: IDOverrideLibraryProperties
    """

    reference: ID
    """ Linked ID used as reference by this override

    :type: ID
    """

    def operations_update(self):
        """Update the library override operations based on the differences between this override ID and its reference"""
        ...

    def reset(
        self,
        do_hierarchy: bool | typing.Any | None = True,
        set_system_override: bool | typing.Any | None = False,
    ):
        """Reset this override to match again its linked reference ID

        :param do_hierarchy: Also reset all the dependencies of this override to match their reference linked IDs
        :type do_hierarchy: bool | typing.Any | None
        :param set_system_override: Reset all user-editable overrides as (non-editable) system overrides
        :type set_system_override: bool | typing.Any | None
        """
        ...

    def destroy(self, do_hierarchy: bool | typing.Any | None = True):
        """Delete this override ID and remap its usages to its linked reference ID instead

        :param do_hierarchy: Also delete all the dependencies of this override and remap their usages to their reference linked IDs
        :type do_hierarchy: bool | typing.Any | None
        """
        ...

    def resync(
        self,
        scene: Scene,
        view_layer: ViewLayer | None = None,
        residual_storage: Collection | None = None,
        do_hierarchy_enforce: bool | typing.Any | None = False,
        do_whole_hierarchy: bool | typing.Any | None = False,
    ) -> bool:
        """Resync the data-block and its sub-hierarchy, or the whole hierarchy if requested

        :param scene: The scene to operate in (for contextual things like keeping active object active, ensuring all overridden objects remain instantiated, etc.)
        :type scene: Scene
        :param view_layer: The view layer to operate in (same usage as the scene data, in case it is not provided the scene's collection will be used instead)
        :type view_layer: ViewLayer | None
        :param residual_storage: Collection where to store objects that are instantiated in any other collection anymore (garbage collection, will be created if needed and none is provided)
        :type residual_storage: Collection | None
        :param do_hierarchy_enforce: Enforce restoring the dependency hierarchy between data-blocks to match the one from the reference linked hierarchy (WARNING: if some ID pointers have been purposedly overridden, these will be reset to their default value)
        :type do_hierarchy_enforce: bool | typing.Any | None
        :param do_whole_hierarchy: Resync the whole hierarchy this data-block belongs to, not only its own sub-hierarchy
        :type do_whole_hierarchy: bool | typing.Any | None
        :return: Success, Whether the resync process was successful or not
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDOverrideLibraryProperties(
    bpy_prop_collection[IDOverrideLibraryProperty], bpy_struct
):
    """Collection of override properties"""

    def add(self, rna_path: str | typing.Any) -> IDOverrideLibraryProperty:
        """Add a property to the override library when it doesn't exist yet

        :param rna_path: RNA Path, RNA-Path of the property to add
        :type rna_path: str | typing.Any
        :return: New Property, Newly created override property or existing one
        :rtype: IDOverrideLibraryProperty
        """
        ...

    def remove(self, property: IDOverrideLibraryProperty | None):
        """Remove and delete a property

        :param property: Property, Override property to be deleted
        :type property: IDOverrideLibraryProperty | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDOverrideLibraryProperty(bpy_struct):
    """Description of an overridden property"""

    operations: IDOverrideLibraryPropertyOperations
    """ List of overriding operations for a property

    :type: IDOverrideLibraryPropertyOperations
    """

    rna_path: str
    """ RNA path leading to that property, from owning ID

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDOverrideLibraryPropertyOperation(bpy_struct):
    """Description of an override operation over an overridden property"""

    flag: set[str]
    """ Status flags

    :type: set[str]
    """

    operation: str
    """ What override operation is performed

    :type: str
    """

    subitem_local_id: ID
    """ Collection of IDs only, used to disambiguate between potential IDs with same name from different libraries

    :type: ID
    """

    subitem_local_index: int
    """ Used to handle changes into collection

    :type: int
    """

    subitem_local_name: str
    """ Used to handle changes into collection

    :type: str
    """

    subitem_reference_id: ID
    """ Collection of IDs only, used to disambiguate between potential IDs with same name from different libraries

    :type: ID
    """

    subitem_reference_index: int
    """ Used to handle changes into collection

    :type: int
    """

    subitem_reference_name: str
    """ Used to handle changes into collection

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDOverrideLibraryPropertyOperations(
    bpy_prop_collection[IDOverrideLibraryPropertyOperation], bpy_struct
):
    """Collection of override operations"""

    def add(
        self,
        operation: str | None,
        use_id: bool | typing.Any | None = False,
        subitem_reference_name: str | typing.Any = "",
        subitem_local_name: str | typing.Any = "",
        subitem_reference_id: ID | None = None,
        subitem_local_id: ID | None = None,
        subitem_reference_index: typing.Any | None = -1,
        subitem_local_index: typing.Any | None = -1,
    ) -> IDOverrideLibraryPropertyOperation:
        """Add a new operation

                :param operation: Operation, What override operation is performed

        NOOP
        No-Op -- Does nothing, prevents adding actual overrides (NOT USED).

        REPLACE
        Replace -- Replace value of reference by overriding one.

        DIFF_ADD
        Differential -- Stores and apply difference between reference and local value (NOT USED).

        DIFF_SUB
        Differential -- Stores and apply difference between reference and local value (NOT USED).

        FACT_MULTIPLY
        Factor -- Stores and apply multiplication factor between reference and local value (NOT USED).

        INSERT_AFTER
        Insert After -- Insert a new item into collection after the one referenced in subitem_reference_name/_id or _index.

        INSERT_BEFORE
        Insert Before -- Insert a new item into collection before the one referenced in subitem_reference_name/_id or _index (NOT USED).
                :type operation: str | None
                :param use_id: Use ID Pointer Subitem, Whether the found or created liboverride operation should use ID pointers or not
                :type use_id: bool | typing.Any | None
                :param subitem_reference_name: Subitem Reference Name, Used to handle insertions or ID replacements into collection
                :type subitem_reference_name: str | typing.Any
                :param subitem_local_name: Subitem Local Name, Used to handle insertions or ID replacements into collection
                :type subitem_local_name: str | typing.Any
                :param subitem_reference_id: Subitem Reference ID, Used to handle ID replacements into collection
                :type subitem_reference_id: ID | None
                :param subitem_local_id: Subitem Local ID, Used to handle ID replacements into collection
                :type subitem_local_id: ID | None
                :param subitem_reference_index: Subitem Reference Index, Used to handle insertions or ID replacements into collection
                :type subitem_reference_index: typing.Any | None
                :param subitem_local_index: Subitem Local Index, Used to handle insertions or ID replacements into collection
                :type subitem_local_index: typing.Any | None
                :return: New Operation, Created operation
                :rtype: IDOverrideLibraryPropertyOperation
        """
        ...

    def remove(self, operation: IDOverrideLibraryPropertyOperation | None):
        """Remove and delete an operation

        :param operation: Operation, Override operation to be deleted
        :type operation: IDOverrideLibraryPropertyOperation | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDPropertyWrapPtr(bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IKParam(bpy_struct):
    """Base type for IK solver parameters"""

    ik_solver: str
    """ IK solver for which these parameters are defined

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ImageFormatSettings(bpy_struct):
    """Settings for image formats"""

    cineon_black: int
    """ Log conversion reference blackpoint

    :type: int
    """

    cineon_gamma: float
    """ Log conversion gamma

    :type: float
    """

    cineon_white: int
    """ Log conversion reference whitepoint

    :type: int
    """

    color_depth: str
    """ Bit depth per channel

    :type: str
    """

    color_management: str
    """ Which color management settings to use for file saving

    :type: str
    """

    color_mode: str
    """ Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels

    :type: str
    """

    compression: int
    """ Amount of time to determine best compression: 0 = no compression with fast file output, 100 = maximum lossless compression with slow file output

    :type: int
    """

    display_settings: ColorManagedDisplaySettings
    """ Settings of device saved image would be displayed on

    :type: ColorManagedDisplaySettings
    """

    exr_codec: str
    """ Codec settings for OpenEXR

    :type: str
    """

    file_format: str
    """ File format to save the rendered images as

    :type: str
    """

    has_linear_colorspace: bool
    """ File format expects linear color space

    :type: bool
    """

    jpeg2k_codec: str
    """ Codec settings for JPEG 2000

    :type: str
    """

    linear_colorspace_settings: ColorManagedInputColorspaceSettings
    """ Output color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    quality: int
    """ Quality for image formats that support lossy compression

    :type: int
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3D

    :type: Stereo3dFormat
    """

    tiff_codec: str
    """ Compression mode for TIFF

    :type: str
    """

    use_cineon_log: bool
    """ Convert to logarithmic color space

    :type: bool
    """

    use_jpeg2k_cinema_48: bool
    """ Use OpenJPEG Cinema Preset (48fps)

    :type: bool
    """

    use_jpeg2k_cinema_preset: bool
    """ Use OpenJPEG Cinema Preset

    :type: bool
    """

    use_jpeg2k_ycc: bool
    """ Save luminance-chrominance-chrominance channels instead of RGB colors

    :type: bool
    """

    use_preview: bool
    """ When rendering animations, save JPG preview images in same directory

    :type: bool
    """

    view_settings: ColorManagedViewSettings
    """ Color management settings applied on image before saving

    :type: ColorManagedViewSettings
    """

    views_format: str
    """ Format of multiview media

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ImagePackedFile(bpy_struct):
    filepath: str
    """ 

    :type: str
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    tile_number: int
    """ 

    :type: int
    """

    view: int
    """ 

    :type: int
    """

    def save(self):
        """Save the packed file to its filepath"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ImagePreview(bpy_struct):
    """Preview image and icon"""

    icon_id: int
    """ Unique integer identifying this preview as an icon (zero means invalid)

    :type: int
    """

    icon_pixels: int
    """ Icon pixels, as bytes (always 32-bit RGBA)

    :type: int
    """

    icon_pixels_float: float
    """ Icon pixels components, as floats (RGBA concatenated values)

    :type: float
    """

    icon_size: bpy_prop_array[int]
    """ Width and height in pixels

    :type: bpy_prop_array[int]
    """

    image_pixels: int
    """ Image pixels, as bytes (always 32-bit RGBA)

    :type: int
    """

    image_pixels_float: float
    """ Image pixels components, as floats (RGBA concatenated values)

    :type: float
    """

    image_size: bpy_prop_array[int]
    """ Width and height in pixels

    :type: bpy_prop_array[int]
    """

    is_icon_custom: bool
    """ True if this preview icon has been modified by py script, and is no more auto-generated by Blender

    :type: bool
    """

    is_image_custom: bool
    """ True if this preview image has been modified by py script, and is no more auto-generated by Blender

    :type: bool
    """

    def reload(self):
        """Reload the preview from its source path"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ImageUser(bpy_struct):
    """Parameters defining how an Image data-block is used by another data-block"""

    frame_current: int
    """ Current frame number in image sequence or movie

    :type: int
    """

    frame_duration: int
    """ Number of images of a movie to use

    :type: int
    """

    frame_offset: int
    """ Offset the number of the frame to use in the animation

    :type: int
    """

    frame_start: int
    """ Global starting frame of the movie/sequence, assuming first picture has a #1

    :type: int
    """

    multilayer_layer: int
    """ Layer in multilayer image

    :type: int
    """

    multilayer_pass: int
    """ Pass in multilayer image

    :type: int
    """

    multilayer_view: int
    """ View in multilayer image

    :type: int
    """

    tile: int
    """ Tile in tiled image

    :type: int
    """

    use_auto_refresh: bool
    """ Always refresh image on frame changes

    :type: bool
    """

    use_cyclic: bool
    """ Cycle the images in the movie

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IndexSwitchItem(bpy_struct):
    identifier: int
    """ Consistent identifier used for the item

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Int2AttributeValue(bpy_struct):
    """2D value in geometry attribute"""

    value: bpy_prop_array[int]
    """ 2D vector

    :type: bpy_prop_array[int]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IntAttributeValue(bpy_struct):
    """Integer value in geometry attribute"""

    value: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyConfig(bpy_struct):
    """Input configuration, including keymaps"""

    is_user_defined: bool
    """ Indicates that a keyconfig was defined by the user

    :type: bool
    """

    keymaps: KeyMaps
    """ Key maps configured as part of this configuration

    :type: KeyMaps
    """

    name: str
    """ Name of the key configuration

    :type: str
    """

    preferences: KeyConfigPreferences
    """ 

    :type: KeyConfigPreferences
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyConfigPreferences(bpy_struct):
    bl_idname: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyConfigurations(bpy_prop_collection[KeyConfig], bpy_struct):
    """Collection of KeyConfigs"""

    active: KeyConfig | None
    """ Active key configuration (preset)

    :type: KeyConfig | None
    """

    addon: KeyConfig
    """ Key configuration that can be extended by add-ons, and is added to the active configuration when handling events

    :type: KeyConfig
    """

    default: KeyConfig
    """ Default builtin key configuration

    :type: KeyConfig
    """

    user: KeyConfig
    """ Final key configuration that combines keymaps from the active and add-on configurations, and can be edited by the user

    :type: KeyConfig
    """

    def new(self, name: str | typing.Any) -> KeyConfig:
        """new

        :param name: Name
        :type name: str | typing.Any
        :return: Key Configuration, Added key configuration
        :rtype: KeyConfig
        """
        ...

    def remove(self, keyconfig: KeyConfig):
        """remove

        :param keyconfig: Key Configuration, Removed key configuration
        :type keyconfig: KeyConfig
        """
        ...

    def find_item_from_operator(
        self,
        idname: str | typing.Any,
        context: str | None = "INVOKE_DEFAULT",
        properties: OperatorProperties | None = None,
        include: typing.Any | None = {"ACTIONZONE", "KEYBOARD", "MOUSE", "NDOF"},
        exclude: typing.Any | None = {},
    ):
        """find_item_from_operator

                :param idname: Operator Identifier
                :type idname: str | typing.Any
                :param context: context
                :type context: str | None
                :param properties:
                :type properties: OperatorProperties | None
                :param include: Include
                :type include: typing.Any | None
                :param exclude: Exclude
                :type exclude: typing.Any | None
                :return: keymap, `KeyMap`

        item, `KeyMapItem`
        """
        ...

    def update(self, keep_properties: bool | typing.Any | None = False):
        """update

        :param keep_properties: Keep Properties, Operator properties are kept to allow the operators to be registered again in the future
        :type keep_properties: bool | typing.Any | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyMap(bpy_struct):
    """Input configuration, including keymaps"""

    bl_owner_id: str
    """ Internal owner

    :type: str
    """

    is_modal: bool
    """ Indicates that a keymap is used for translate modal events for an operator

    :type: bool
    """

    is_user_modified: bool
    """ Keymap is defined by the user

    :type: bool
    """

    keymap_items: KeyMapItems
    """ Items in the keymap, linking an operator to an input event

    :type: KeyMapItems
    """

    modal_event_values: bpy_prop_collection[EnumPropertyItem]
    """ Give access to the possible event values of this modal keymap's items (#KeyMapItem.propvalue), for API introspection

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    name: str
    """ Name of the key map

    :type: str
    """

    region_type: str
    """ Optional region type keymap is associated with

    :type: str
    """

    show_expanded_children: bool
    """ Children expanded in the user interface

    :type: bool
    """

    show_expanded_items: bool
    """ Expanded in the user interface

    :type: bool
    """

    space_type: str
    """ Optional space type keymap is associated with

    :type: str
    """

    def active(self) -> KeyMap:
        """active

        :return: Key Map, Active key map
        :rtype: KeyMap
        """
        ...

    def restore_to_default(self):
        """restore_to_default"""
        ...

    def restore_item_to_default(self, item: KeyMapItem):
        """restore_item_to_default

        :param item: Item
        :type item: KeyMapItem
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyMapItem(bpy_struct):
    """Item in a Key Map"""

    active: bool | None
    """ Activate or deactivate item

    :type: bool | None
    """

    alt: int
    """ Alt key pressed, -1 for any state

    :type: int
    """

    alt_ui: bool
    """ Alt key pressed

    :type: bool
    """

    any: bool
    """ Any modifier keys pressed

    :type: bool
    """

    ctrl: int
    """ Control key pressed, -1 for any state

    :type: int
    """

    ctrl_ui: bool
    """ Control key pressed

    :type: bool
    """

    direction: str
    """ The direction (only applies to drag events)

    :type: str
    """

    id: int
    """ ID of the item

    :type: int
    """

    idname: str
    """ Identifier of operator to call on input event

    :type: str
    """

    is_user_defined: bool
    """ Is this keymap item user defined (doesn't just replace a builtin item)

    :type: bool
    """

    is_user_modified: bool
    """ Is this keymap item modified by the user

    :type: bool
    """

    key_modifier: str
    """ Regular key pressed as a modifier

    :type: str
    """

    map_type: str
    """ Type of event mapping

    :type: str
    """

    name: str
    """ Name of operator (translated) to call on input event

    :type: str
    """

    oskey: int
    """ Operating system key pressed, -1 for any state

    :type: int
    """

    oskey_ui: bool
    """ Operating system key pressed

    :type: bool
    """

    properties: OperatorProperties
    """ Properties to set when the operator is called

    :type: OperatorProperties
    """

    propvalue: str
    """ The value this event translates to in a modal keymap

    :type: str
    """

    repeat: bool
    """ Active on key-repeat events (when a key is held)

    :type: bool
    """

    shift: int
    """ Shift key pressed, -1 for any state

    :type: int
    """

    shift_ui: bool
    """ Shift key pressed

    :type: bool
    """

    show_expanded: bool
    """ Show key map event and property details in the user interface

    :type: bool
    """

    type: str
    """ Type of event

    :type: str
    """

    value: str
    """ 

    :type: str
    """

    def compare(self, item: KeyMapItem | None) -> bool:
        """compare

        :param item: Item
        :type item: KeyMapItem | None
        :return: Comparison result
        :rtype: bool
        """
        ...

    def to_string(self, compact: bool | typing.Any | None = False) -> str | typing.Any:
        """to_string

        :param compact: Compact
        :type compact: bool | typing.Any | None
        :return: result
        :rtype: str | typing.Any
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyMapItems(bpy_prop_collection[KeyMapItem], bpy_struct):
    """Collection of keymap items"""

    def new(
        self,
        idname: str | typing.Any,
        type: str | None,
        value: str | None,
        any: bool | typing.Any | None = False,
        shift: typing.Any | None = 0,
        ctrl: typing.Any | None = 0,
        alt: typing.Any | None = 0,
        oskey: typing.Any | None = 0,
        key_modifier: str | None = "NONE",
        direction: str | None = "ANY",
        repeat: bool | typing.Any | None = False,
        head: bool | typing.Any | None = False,
    ) -> KeyMapItem:
        """new

        :param idname: Operator Identifier
        :type idname: str | typing.Any
        :param type: Type
        :type type: str | None
        :param value: Value
        :type value: str | None
        :param any: Any
        :type any: bool | typing.Any | None
        :param shift: Shift
        :type shift: typing.Any | None
        :param ctrl: Ctrl
        :type ctrl: typing.Any | None
        :param alt: Alt
        :type alt: typing.Any | None
        :param oskey: OS Key
        :type oskey: typing.Any | None
        :param key_modifier: Key Modifier
        :type key_modifier: str | None
        :param direction: Direction
        :type direction: str | None
        :param repeat: Repeat, When set, accept key-repeat events
        :type repeat: bool | typing.Any | None
        :param head: At Head, Force item to be added at start (not end) of key map so that it doesn't get blocked by an existing key map item
        :type head: bool | typing.Any | None
        :return: Item, Added key map item
        :rtype: KeyMapItem
        """
        ...

    def new_modal(
        self,
        propvalue: str | typing.Any,
        type: str | None,
        value: str | None,
        any: bool | typing.Any | None = False,
        shift: typing.Any | None = 0,
        ctrl: typing.Any | None = 0,
        alt: typing.Any | None = 0,
        oskey: typing.Any | None = 0,
        key_modifier: str | None = "NONE",
        direction: str | None = "ANY",
        repeat: bool | typing.Any | None = False,
    ) -> KeyMapItem:
        """new_modal

        :param propvalue: Property Value
        :type propvalue: str | typing.Any
        :param type: Type
        :type type: str | None
        :param value: Value
        :type value: str | None
        :param any: Any
        :type any: bool | typing.Any | None
        :param shift: Shift
        :type shift: typing.Any | None
        :param ctrl: Ctrl
        :type ctrl: typing.Any | None
        :param alt: Alt
        :type alt: typing.Any | None
        :param oskey: OS Key
        :type oskey: typing.Any | None
        :param key_modifier: Key Modifier
        :type key_modifier: str | None
        :param direction: Direction
        :type direction: str | None
        :param repeat: Repeat, When set, accept key-repeat events
        :type repeat: bool | typing.Any | None
        :return: Item, Added key map item
        :rtype: KeyMapItem
        """
        ...

    def new_from_item(
        self, item: KeyMapItem, head: bool | typing.Any | None = False
    ) -> KeyMapItem:
        """new_from_item

        :param item: Item, Item to use as a reference
        :type item: KeyMapItem
        :param head: At Head
        :type head: bool | typing.Any | None
        :return: Item, Added key map item
        :rtype: KeyMapItem
        """
        ...

    def remove(self, item: KeyMapItem):
        """remove

        :param item: Item
        :type item: KeyMapItem
        """
        ...

    def from_id(self, id: int | None) -> KeyMapItem:
        """from_id

        :param id: id, ID of the item
        :type id: int | None
        :return: Item
        :rtype: KeyMapItem
        """
        ...

    def find_from_operator(
        self,
        idname: str | typing.Any,
        properties: OperatorProperties | None = None,
        include: typing.Any | None = {"ACTIONZONE", "KEYBOARD", "MOUSE", "NDOF"},
        exclude: typing.Any | None = {},
    ) -> KeyMapItem:
        """find_from_operator

        :param idname: Operator Identifier
        :type idname: str | typing.Any
        :param properties:
        :type properties: OperatorProperties | None
        :param include: Include
        :type include: typing.Any | None
        :param exclude: Exclude
        :type exclude: typing.Any | None
        :return:
        :rtype: KeyMapItem
        """
        ...

    def match_event(self, event: Event | None) -> KeyMapItem:
        """match_event

        :param event:
        :type event: Event | None
        :return:
        :rtype: KeyMapItem
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyMaps(bpy_prop_collection[KeyMap], bpy_struct):
    """Collection of keymaps"""

    def new(
        self,
        name: str | typing.Any,
        space_type: str | None = "EMPTY",
        region_type: str | None = "WINDOW",
        modal: bool | typing.Any | None = False,
        tool: bool | typing.Any | None = False,
    ) -> KeyMap:
        """Ensure the keymap exists. This will return the one with the given name/space type/region type, or create a new one if it does not exist yet.

        :param name: Name
        :type name: str | typing.Any
        :param space_type: Space Type
        :type space_type: str | None
        :param region_type: Region Type
        :type region_type: str | None
        :param modal: Modal, Keymap for modal operators
        :type modal: bool | typing.Any | None
        :param tool: Tool, Keymap for active tools
        :type tool: bool | typing.Any | None
        :return: Key Map, Added key map
        :rtype: KeyMap
        """
        ...

    def remove(self, keymap: KeyMap):
        """remove

        :param keymap: Key Map, Removed key map
        :type keymap: KeyMap
        """
        ...

    def clear(self):
        """Remove all keymaps."""
        ...

    def find(
        self,
        name: str | typing.Any,
        space_type: str | None = "EMPTY",
        region_type: str | None = "WINDOW",
    ) -> KeyMap:
        """find

        :param name: Name
        :type name: str | typing.Any
        :param space_type: Space Type
        :type space_type: str | None
        :param region_type: Region Type
        :type region_type: str | None
        :return: Key Map, Corresponding key map
        :rtype: KeyMap
        """
        ...

    def find_modal(self, name: str | typing.Any) -> KeyMap:
        """find_modal

        :param name: Operator Name
        :type name: str | typing.Any
        :return: Key Map, Corresponding key map
        :rtype: KeyMap
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Keyframe(bpy_struct):
    """Bézier curve point with two handles defining a Keyframe on an F-Curve"""

    amplitude: float
    """ Amount to boost elastic bounces for 'elastic' easing

    :type: float
    """

    back: float
    """ Amount of overshoot for 'back' easing

    :type: float
    """

    co: mathutils.Vector
    """ Coordinates of the control point

    :type: mathutils.Vector
    """

    co_ui: mathutils.Vector
    """ Coordinates of the control point. Note: Changing this value also updates the handles similar to using the graph editor transform operator

    :type: mathutils.Vector
    """

    easing: str
    """ Which ends of the segment between this and the next keyframe easing interpolation is applied to

    :type: str
    """

    handle_left: mathutils.Vector
    """ Coordinates of the left handle (before the control point)

    :type: mathutils.Vector
    """

    handle_left_type: str
    """ Handle types

    :type: str
    """

    handle_right: mathutils.Vector
    """ Coordinates of the right handle (after the control point)

    :type: mathutils.Vector
    """

    handle_right_type: str
    """ Handle types

    :type: str
    """

    interpolation: str
    """ Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe

    :type: str
    """

    period: float
    """ Time between bounces for elastic easing

    :type: float
    """

    select_control_point: bool
    """ Control point selection status

    :type: bool
    """

    select_left_handle: bool
    """ Left handle selection status

    :type: bool
    """

    select_right_handle: bool
    """ Right handle selection status

    :type: bool
    """

    type: str
    """ Type of keyframe (for visual purposes only)

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyingSet(bpy_struct):
    """Settings that should be keyframed together"""

    bl_description: str
    """ A short description of the keying set

    :type: str
    """

    bl_idname: str
    """ If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    is_path_absolute: bool
    """ Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)

    :type: bool
    """

    paths: KeyingSetPaths
    """ Keying Set Paths to define settings that get keyframed together

    :type: KeyingSetPaths
    """

    type_info: KeyingSetInfo
    """ Callback function defines for built-in Keying Sets

    :type: KeyingSetInfo
    """

    use_insertkey_needed: bool
    """ Only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_needed: bool
    """ Override default setting to only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_visual: bool
    """ Override default setting to insert keyframes based on 'visual transforms'

    :type: bool
    """

    use_insertkey_visual: bool
    """ Insert keyframes based on 'visual transforms'

    :type: bool
    """

    def refresh(self):
        """Refresh Keying Set to ensure that it is valid for the current context (call before each use of one)"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyingSetInfo(bpy_struct):
    """Callback function defines for builtin Keying Sets"""

    bl_description: str
    """ A short description of the keying set

    :type: str
    """

    bl_idname: str
    """ If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_options: typing.Any
    """ Keying Set options to use when inserting keyframes"""

    def poll(self, context: Context | None) -> bool:
        """Test if Keying Set can be used or not

        :param context:
        :type context: Context | None
        :return:
        :rtype: bool
        """
        ...

    def iterator(self, context: Context | None, ks: KeyingSet | None):
        """Call generate() on the structs which have properties to be keyframed

        :param context:
        :type context: Context | None
        :param ks:
        :type ks: KeyingSet | None
        """
        ...

    def generate(self, context: Context | None, ks: KeyingSet | None, data: typing.Any):
        """Add Paths to the Keying Set to keyframe the properties of the given data

        :param context:
        :type context: Context | None
        :param ks:
        :type ks: KeyingSet | None
        :param data:
        :type data: typing.Any
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyingSetPath(bpy_struct):
    """Path to a setting for use in a Keying Set"""

    array_index: int
    """ Index to the specific setting if applicable

    :type: int
    """

    data_path: str
    """ Path to property setting

    :type: str
    """

    group: str
    """ Name of Action Group to assign setting(s) for this path to

    :type: str
    """

    group_method: str
    """ Method used to define which Group-name to use

    :type: str
    """

    id: ID
    """ ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)

    :type: ID
    """

    id_type: str
    """ Type of ID-block that can be used

    :type: str
    """

    use_entire_array: bool
    """ When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used

    :type: bool
    """

    use_insertkey_needed: bool
    """ Only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_needed: bool
    """ Override default setting to only insert keyframes where they're needed in the relevant F-Curves

    :type: bool
    """

    use_insertkey_override_visual: bool
    """ Override default setting to insert keyframes based on 'visual transforms'

    :type: bool
    """

    use_insertkey_visual: bool
    """ Insert keyframes based on 'visual transforms'

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyingSetPaths(bpy_prop_collection[KeyingSetPath], bpy_struct):
    """Collection of keying set paths"""

    active: KeyingSetPath | None
    """ Active Keying Set used to insert/delete keyframes

    :type: KeyingSetPath | None
    """

    active_index: int | None
    """ Current Keying Set index

    :type: int | None
    """

    def add(
        self,
        target_id: ID | None,
        data_path: str | typing.Any,
        index: typing.Any | None = -1,
        group_method: str | None = "KEYINGSET",
        group_name: str | typing.Any = "",
    ) -> KeyingSetPath:
        """Add a new path for the Keying Set

        :param target_id: Target ID, ID data-block for the destination
        :type target_id: ID | None
        :param data_path: Data-Path, RNA-Path to destination property
        :type data_path: str | typing.Any
        :param index: Index, The index of the destination property (i.e. axis of Location/Rotation/etc.), or -1 for the entire array
        :type index: typing.Any | None
        :param group_method: Grouping Method, Method used to define which Group-name to use
        :type group_method: str | None
        :param group_name: Group Name, Name of Action Group to assign destination to (only if grouping mode is to use this name)
        :type group_name: str | typing.Any
        :return: New Path, Path created and added to the Keying Set
        :rtype: KeyingSetPath
        """
        ...

    def remove(self, path: KeyingSetPath):
        """Remove the given path from the Keying Set

        :param path: Path
        :type path: KeyingSetPath
        """
        ...

    def clear(self):
        """Remove all the paths from the Keying Set"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyingSets(bpy_prop_collection[KeyingSet], bpy_struct):
    """Scene keying sets"""

    active: KeyingSet | None
    """ Active Keying Set used to insert/delete keyframes

    :type: KeyingSet | None
    """

    active_index: int | None
    """ Current Keying Set index (negative for 'builtin' and positive for 'absolute')

    :type: int | None
    """

    def new(
        self,
        idname: str | typing.Any = "KeyingSet",
        name: str | typing.Any = "KeyingSet",
    ) -> KeyingSet:
        """Add a new Keying Set to Scene

        :param idname: IDName, Internal identifier of Keying Set
        :type idname: str | typing.Any
        :param name: Name, User visible name of Keying Set
        :type name: str | typing.Any
        :return: Newly created Keying Set
        :rtype: KeyingSet
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KeyingSetsAll(bpy_prop_collection[KeyingSet], bpy_struct):
    """All available keying sets"""

    active: KeyingSet | None
    """ Active Keying Set used to insert/delete keyframes

    :type: KeyingSet | None
    """

    active_index: int | None
    """ Current Keying Set index (negative for 'builtin' and positive for 'absolute')

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LatticePoint(bpy_struct):
    """Point in the lattice grid"""

    co: mathutils.Vector
    """ Original undeformed location used to calculate the strength of the deform effect (edit/animate the Deformed Location instead)

    :type: mathutils.Vector
    """

    co_deform: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    groups: bpy_prop_collection[VertexGroupElement]
    """ Weights for the vertex groups this point is member of

    :type: bpy_prop_collection[VertexGroupElement]
    """

    select: bool
    """ Selection status

    :type: bool
    """

    weight_softbody: float
    """ Softbody goal weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LayerCollection(bpy_struct):
    """Layer collection"""

    children: bpy_prop_collection[LayerCollection]
    """ Layer collection children

    :type: bpy_prop_collection[LayerCollection]
    """

    collection: Collection
    """ Collection this layer collection is wrapping

    :type: Collection
    """

    exclude: bool
    """ Exclude from view layer

    :type: bool
    """

    hide_viewport: bool
    """ Temporarily hide in viewport

    :type: bool
    """

    holdout: bool
    """ Mask out objects in collection from view layer

    :type: bool
    """

    indirect_only: bool
    """ Objects in collection only contribute indirectly (through shadows and reflections) in the view layer

    :type: bool
    """

    is_visible: bool
    """ Whether this collection is visible for the view layer, take into account the collection parent

    :type: bool
    """

    name: str
    """ Name of this layer collection (same as its collection one)

    :type: str
    """

    def visible_get(self) -> bool:
        """Whether this collection is visible, take into account the collection parent and the viewport

        :return:
        :rtype: bool
        """
        ...

    def has_objects(self) -> bool:
        """

        :return:
        :rtype: bool
        """
        ...

    def has_selected_objects(self, view_layer: ViewLayer | None) -> bool:
        """

        :param view_layer: View layer the layer collection belongs to
        :type view_layer: ViewLayer | None
        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LayerObjects(bpy_prop_collection[Object], bpy_struct):
    """Collections of objects"""

    active: Object | None
    """ Active object for this layer

    :type: Object | None
    """

    selected: bpy_prop_collection[Object]
    """ All the selected objects of this layer

    :type: bpy_prop_collection[Object]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LayoutPanelState(bpy_struct):
    is_open: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LibraryWeakReference(bpy_struct):
    """Read-only external reference to a linked data-block and its library file"""

    filepath: str
    """ Path to the library .blend file

    :type: str
    """

    id_name: str
    """ Full ID name in the library .blend file (including the two leading 'id type' chars)

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Lightgroup(bpy_struct):
    name: str
    """ Name of the Lightgroup

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Lightgroups(bpy_prop_collection[Lightgroup], bpy_struct):
    """Collection of Lightgroups"""

    def add(self, name: str | typing.Any = "") -> Lightgroup:
        """add

        :param name: Name, Name of newly created lightgroup
        :type name: str | typing.Any
        :return: Newly created Lightgroup
        :rtype: Lightgroup
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifiers(bpy_prop_collection[LineStyleAlphaModifier], bpy_struct):
    """Alpha modifiers for changing line alphas"""

    def new(self, name: str | typing.Any, type: str | None) -> LineStyleAlphaModifier:
        """Add a alpha modifier to line style

        :param name: New name for the alpha modifier (not unique)
        :type name: str | typing.Any
        :param type: Alpha modifier type to add
        :type type: str | None
        :return: Newly added alpha modifier
        :rtype: LineStyleAlphaModifier
        """
        ...

    def remove(self, modifier: LineStyleAlphaModifier):
        """Remove a alpha modifier from line style

        :param modifier: Alpha modifier to remove
        :type modifier: LineStyleAlphaModifier
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifiers(bpy_prop_collection[LineStyleColorModifier], bpy_struct):
    """Color modifiers for changing line colors"""

    def new(self, name: str | typing.Any, type: str | None) -> LineStyleColorModifier:
        """Add a color modifier to line style

        :param name: New name for the color modifier (not unique)
        :type name: str | typing.Any
        :param type: Color modifier type to add
        :type type: str | None
        :return: Newly added color modifier
        :rtype: LineStyleColorModifier
        """
        ...

    def remove(self, modifier: LineStyleColorModifier):
        """Remove a color modifier from line style

        :param modifier: Color modifier to remove
        :type modifier: LineStyleColorModifier
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifiers(
    bpy_prop_collection[LineStyleGeometryModifier], bpy_struct
):
    """Geometry modifiers for changing line geometries"""

    def new(
        self, name: str | typing.Any, type: str | None
    ) -> LineStyleGeometryModifier:
        """Add a geometry modifier to line style

        :param name: New name for the geometry modifier (not unique)
        :type name: str | typing.Any
        :param type: Geometry modifier type to add
        :type type: str | None
        :return: Newly added geometry modifier
        :rtype: LineStyleGeometryModifier
        """
        ...

    def remove(self, modifier: LineStyleGeometryModifier):
        """Remove a geometry modifier from line style

        :param modifier: Geometry modifier to remove
        :type modifier: LineStyleGeometryModifier
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleModifier(bpy_struct):
    """Base type to define modifiers"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleTextureSlots(bpy_prop_collection[LineStyleTextureSlot], bpy_struct):
    """Collection of texture slots"""

    @classmethod
    def add(cls) -> LineStyleTextureSlot:
        """add

        :return: The newly initialized mtex
        :rtype: LineStyleTextureSlot
        """
        ...

    @classmethod
    def create(cls, index: int | None) -> LineStyleTextureSlot:
        """create

        :param index: Index, Slot index to initialize
        :type index: int | None
        :return: The newly initialized mtex
        :rtype: LineStyleTextureSlot
        """
        ...

    @classmethod
    def clear(cls, index: int | None):
        """clear

        :param index: Index, Slot index to clear
        :type index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifiers(
    bpy_prop_collection[LineStyleThicknessModifier], bpy_struct
):
    """Thickness modifiers for changing line thickness"""

    def new(
        self, name: str | typing.Any, type: str | None
    ) -> LineStyleThicknessModifier:
        """Add a thickness modifier to line style

        :param name: New name for the thickness modifier (not unique)
        :type name: str | typing.Any
        :param type: Thickness modifier type to add
        :type type: str | None
        :return: Newly added thickness modifier
        :rtype: LineStyleThicknessModifier
        """
        ...

    def remove(self, modifier: LineStyleThicknessModifier):
        """Remove a thickness modifier from line style

        :param modifier: Thickness modifier to remove
        :type modifier: LineStyleThicknessModifier
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Linesets(bpy_prop_collection[FreestyleLineSet], bpy_struct):
    """Line sets for associating lines and style parameters"""

    active: FreestyleLineSet
    """ Active line set being displayed

    :type: FreestyleLineSet
    """

    active_index: int | None
    """ Index of active line set slot

    :type: int | None
    """

    def new(self, name: str | typing.Any) -> FreestyleLineSet:
        """Add a line set to scene render layer Freestyle settings

        :param name: New name for the line set (not unique)
        :type name: str | typing.Any
        :return: Newly created line set
        :rtype: FreestyleLineSet
        """
        ...

    def remove(self, lineset: FreestyleLineSet):
        """Remove a line set from scene render layer Freestyle settings

        :param lineset: Line set to remove
        :type lineset: FreestyleLineSet
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LoopColors(bpy_prop_collection[MeshLoopColorLayer], bpy_struct):
    """Collection of vertex colors"""

    active: MeshLoopColorLayer | None
    """ Active vertex color layer

    :type: MeshLoopColorLayer | None
    """

    active_index: int | None
    """ Active vertex color index

    :type: int | None
    """

    def new(
        self, name: str | typing.Any = "Col", do_init: bool | typing.Any | None = True
    ) -> MeshLoopColorLayer:
        """Add a vertex color layer to Mesh

        :param name: Vertex color name
        :type name: str | typing.Any
        :param do_init: Whether new layer's data should be initialized by copying current active one
        :type do_init: bool | typing.Any | None
        :return: The newly created layer
        :rtype: MeshLoopColorLayer
        """
        ...

    def remove(self, layer: MeshLoopColorLayer):
        """Remove a vertex color layer

        :param layer: The layer to remove
        :type layer: MeshLoopColorLayer
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Macro(bpy_struct):
    """Storage of a macro operator being executed, or registered after execution"""

    bl_cursor_pending: str
    """ Cursor to use when waiting for the user to select a location to activate the operator (when bl_options has DEPENDS_ON_CURSOR set)

    :type: str
    """

    bl_description: str
    """ 

    :type: str
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_options: typing.Any
    """ Options for this operator type"""

    bl_translation_context: str
    """ 

    :type: str
    """

    bl_undo_group: str
    """ 

    :type: str
    """

    has_reports: bool
    """ Operator has a set of reports (warnings and errors) from last execution

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    properties: OperatorProperties
    """ 

    :type: OperatorProperties
    """

    def report(self, type, message: str | typing.Any):
        """report

        :param type: Type
        :param message: Report Message
        :type message: str | typing.Any
        """
        ...

    @classmethod
    def poll(cls, context: Context) -> bool:
        """Test if the operator can be called or not

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """
        ...

    def draw(self, context: Context):
        """Draw function for the operator

        :param context:
        :type context: Context
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskLayer(bpy_struct):
    """Single layer used for masking pixels"""

    alpha: float
    """ Render Opacity

    :type: float
    """

    blend: str
    """ Method of blending mask layers

    :type: str
    """

    falloff: str
    """ Falloff type the feather

    :type: str
    """

    hide: bool
    """ Restrict visibility in the viewport

    :type: bool
    """

    hide_render: bool
    """ Restrict renderability

    :type: bool
    """

    hide_select: bool
    """ Restrict selection in the viewport

    :type: bool
    """

    invert: bool
    """ Invert the mask black/white

    :type: bool
    """

    name: str
    """ Unique name of layer

    :type: str
    """

    select: bool
    """ Layer is selected for editing in the Dope Sheet

    :type: bool
    """

    splines: MaskSplines
    """ Collection of splines which defines this layer

    :type: MaskSplines
    """

    use_fill_holes: bool
    """ Calculate holes when filling overlapping curves

    :type: bool
    """

    use_fill_overlap: bool
    """ Calculate self intersections and overlap before filling

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskLayers(bpy_prop_collection[MaskLayer], bpy_struct):
    """Collection of layers used by mask"""

    active: MaskLayer | None
    """ Active layer in this mask

    :type: MaskLayer | None
    """

    def new(self, name: str | typing.Any = "") -> MaskLayer:
        """Add layer to this mask

        :param name: Name, Name of new layer
        :type name: str | typing.Any
        :return: New mask layer
        :rtype: MaskLayer
        """
        ...

    def remove(self, layer: MaskLayer):
        """Remove layer from this mask

        :param layer: Shape to be removed
        :type layer: MaskLayer
        """
        ...

    def clear(self):
        """Remove all mask layers"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskParent(bpy_struct):
    """Parenting settings for masking element"""

    id: ID
    """ ID-block to which masking element would be parented to or to its property

    :type: ID
    """

    id_type: str
    """ Type of ID-block that can be used

    :type: str
    """

    parent: str
    """ Name of parent object in specified data-block to which parenting happens

    :type: str
    """

    sub_parent: str
    """ Name of parent sub-object in specified data-block to which parenting happens

    :type: str
    """

    type: str
    """ Parent Type

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskSpline(bpy_struct):
    """Single spline used for defining mask shape"""

    offset_mode: str
    """ The method used for calculating the feather offset

    :type: str
    """

    points: MaskSplinePoints
    """ Collection of points

    :type: MaskSplinePoints
    """

    use_cyclic: bool
    """ Make this spline a closed loop

    :type: bool
    """

    use_fill: bool
    """ Make this spline filled

    :type: bool
    """

    use_self_intersection_check: bool
    """ Prevent feather from self-intersections

    :type: bool
    """

    weight_interpolation: str
    """ The type of weight interpolation for spline

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskSplinePoint(bpy_struct):
    """Single point in spline used for defining mask"""

    co: mathutils.Vector
    """ Coordinates of the control point

    :type: mathutils.Vector
    """

    feather_points: bpy_prop_collection[MaskSplinePointUW]
    """ Points defining feather

    :type: bpy_prop_collection[MaskSplinePointUW]
    """

    handle_left: mathutils.Vector
    """ Coordinates of the first handle

    :type: mathutils.Vector
    """

    handle_left_type: str
    """ Handle type

    :type: str
    """

    handle_right: mathutils.Vector
    """ Coordinates of the second handle

    :type: mathutils.Vector
    """

    handle_right_type: str
    """ Handle type

    :type: str
    """

    handle_type: str
    """ Handle type

    :type: str
    """

    parent: MaskParent
    """ 

    :type: MaskParent
    """

    select: bool
    """ Selection status

    :type: bool
    """

    weight: float
    """ Weight of the point

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskSplinePointUW(bpy_struct):
    """Single point in spline segment defining feather"""

    select: bool
    """ Selection status

    :type: bool
    """

    u: float
    """ U coordinate of point along spline segment

    :type: float
    """

    weight: float
    """ Weight of feather point

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskSplinePoints(bpy_prop_collection[MaskSplinePoint], bpy_struct):
    """Collection of masking spline points"""

    def add(self, count: int | None):
        """Add a number of point to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """
        ...

    def remove(self, point: MaskSplinePoint):
        """Remove a point from a spline

        :param point: The point to remove
        :type point: MaskSplinePoint
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskSplines(bpy_prop_collection[MaskSpline], bpy_struct):
    """Collection of masking splines"""

    active: MaskSpline | None
    """ Active spline of masking layer

    :type: MaskSpline | None
    """

    active_point: MaskSplinePoint | None
    """ Active point of masking layer

    :type: MaskSplinePoint | None
    """

    def new(self) -> MaskSpline:
        """Add a new spline to the layer

        :return: The newly created spline
        :rtype: MaskSpline
        """
        ...

    def remove(self, spline: MaskSpline):
        """Remove a spline from a layer

        :param spline: The spline to remove
        :type spline: MaskSpline
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaterialGPencilStyle(bpy_struct):
    alignment_mode: str
    """ Defines how align Dots and Boxes with drawing path and object rotation

    :type: str
    """

    alignment_rotation: float
    """ Additional rotation applied to dots and square texture of strokes. Only applies in texture shading mode

    :type: float
    """

    color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    fill_color: bpy_prop_array[float]
    """ Color for filling region bounded by each stroke

    :type: bpy_prop_array[float]
    """

    fill_image: Image
    """ 

    :type: Image
    """

    fill_style: str
    """ Select style used to fill strokes

    :type: str
    """

    flip: bool
    """ Flip filling colors

    :type: bool
    """

    ghost: bool
    """ Display strokes using this color when showing onion skins

    :type: bool
    """

    gradient_type: str
    """ Select type of gradient used to fill strokes

    :type: str
    """

    hide: bool
    """ Set color Visibility

    :type: bool
    """

    is_fill_visible: bool
    """ True when opacity of fill is set high enough to be visible

    :type: bool
    """

    is_stroke_visible: bool
    """ True when opacity of stroke is set high enough to be visible

    :type: bool
    """

    lock: bool
    """ Protect color from further editing and/or frame changes

    :type: bool
    """

    mix_color: bpy_prop_array[float]
    """ Color for mixing with primary filling color

    :type: bpy_prop_array[float]
    """

    mix_factor: float
    """ Mix Factor

    :type: float
    """

    mix_stroke_factor: float
    """ Mix Stroke Factor

    :type: float
    """

    mode: str
    """ Select line type for strokes

    :type: str
    """

    pass_index: int
    """ Index number for the "Color Index" pass

    :type: int
    """

    pixel_size: float
    """ Texture Pixel Size factor along the stroke

    :type: float
    """

    show_fill: bool
    """ Show stroke fills of this material

    :type: bool
    """

    show_stroke: bool
    """ Show stroke lines of this material

    :type: bool
    """

    stroke_image: Image
    """ 

    :type: Image
    """

    stroke_style: str
    """ Select style used to draw strokes

    :type: str
    """

    texture_angle: float
    """ Texture Orientation Angle

    :type: float
    """

    texture_clamp: bool
    """ Do not repeat texture and clamp to one instance only

    :type: bool
    """

    texture_offset: mathutils.Vector
    """ Shift Texture in 2d Space

    :type: mathutils.Vector
    """

    texture_scale: mathutils.Vector
    """ Scale Factor for Texture

    :type: mathutils.Vector
    """

    use_fill_holdout: bool
    """ Remove the color from underneath this stroke by using it as a mask

    :type: bool
    """

    use_overlap_strokes: bool
    """ Disable stencil and overlap self intersections with alpha materials

    :type: bool
    """

    use_stroke_holdout: bool
    """ Remove the color from underneath this stroke by using it as a mask

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaterialLineArt(bpy_struct):
    intersection_priority: int
    """ The intersection line will be included into the object with the higher intersection priority value

    :type: int
    """

    mat_occlusion: int
    """ Faces with this material will behave as if it has set number of layers in occlusion

    :type: int
    """

    use_intersection_priority_override: bool
    """ Override object and collection intersection priority value

    :type: bool
    """

    use_material_mask: bool
    """ Use material masks to filter out occluded strokes

    :type: bool
    """

    use_material_mask_bits: list[bool]
    """ 

    :type: list[bool]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaterialSlot(bpy_struct):
    """Material slot in an object"""

    link: str
    """ Link material to object or the object's data

    :type: str
    """

    material: Material
    """ Material data-block used by this material slot

    :type: Material
    """

    name: str
    """ Material slot name

    :type: str
    """

    slot_index: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Menu(bpy_struct):
    """Editor menu containing buttons"""

    bl_description: str
    """ 

    :type: str
    """

    bl_idname: str
    """ If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is "OBJECT_MT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_MT_hello")

    :type: str
    """

    bl_label: str
    """ The menu label

    :type: str
    """

    bl_options: set[str]
    """ Options for this menu type

    :type: set[str]
    """

    bl_owner_id: str
    """ 

    :type: str
    """

    bl_translation_context: str | typing.Any
    """ 

    :type: str | typing.Any
    """

    layout: UILayout
    """ Defines the structure of the menu in the UI

    :type: UILayout
    """

    @classmethod
    def poll(cls, context: Context | None) -> bool:
        """If this method returns a non-null output, then the menu can be drawn

        :param context:
        :type context: Context | None
        :return:
        :rtype: bool
        """
        ...

    def draw(self, context: Context | None):
        """Draw UI elements into the menu UI layout

        :param context:
        :type context: Context | None
        """
        ...

    def draw_preset(self, _context):
        """Define these on the subclass:
        - preset_operator (string)
        - preset_subdir (string)Optionally:
        - preset_add_operator (string)
        - preset_extensions (set of strings)
        - preset_operator_defaults (dict of keyword args)

                :param _context:
        """
        ...

    def path_menu(
        self,
        searchpaths: list[str] | None,
        operator: str | None,
        *,
        props_default: dict | None = None,
        prop_filepath: str | None = "filepath",
        filter_ext: collections.abc.Callable | None = None,
        filter_path=None,
        display_name: collections.abc.Callable | None = None,
        add_operator=None,
    ):
        """Populate a menu from a list of paths.

                :param searchpaths: Paths to scan.
                :type searchpaths: list[str] | None
                :param operator: The operator id to use with each file.
                :type operator: str | None
                :param props_default: Properties to assign to each operator.
                :type props_default: dict | None
                :param prop_filepath: Optional operator filepath property (defaults to "filepath").
                :type prop_filepath: str | None
                :param filter_ext: Optional callback that takes the file extensions.

        Returning false excludes the file from the list.
                :type filter_ext: collections.abc.Callable | None
                :param filter_path:
                :param display_name: Optional callback that takes the full path, returns the name to display.
                :type display_name: collections.abc.Callable | None
                :param add_operator:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def append(cls, draw_func):
        """

        :param draw_func:
        """
        ...

    @classmethod
    def prepend(cls, draw_func):
        """

        :param draw_func:
        """
        ...

    @classmethod
    def remove(cls, draw_func):
        """

        :param draw_func:
        """
        ...

class MeshEdge(bpy_struct):
    """Edge in a Mesh data-block"""

    hide: bool
    """ 

    :type: bool
    """

    index: int
    """ Index of this edge

    :type: int
    """

    is_loose: bool
    """ Edge is not connected to any faces

    :type: bool
    """

    select: bool
    """ 

    :type: bool
    """

    use_edge_sharp: bool
    """ Sharp edge for shading

    :type: bool
    """

    use_freestyle_mark: bool
    """ Edge mark for Freestyle line rendering

    :type: bool
    """

    use_seam: bool
    """ Seam edge for UV unwrapping

    :type: bool
    """

    vertices: bpy_prop_array[int]
    """ Vertex indices

    :type: bpy_prop_array[int]
    """

    key: typing.Any
    """ (readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshEdges(bpy_prop_collection[MeshEdge], bpy_struct):
    """Collection of mesh edges"""

    def add(self, count: int | None):
        """add

        :param count: Count, Number of edges to add
        :type count: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshLoop(bpy_struct):
    """Loop in a Mesh data-block"""

    bitangent: mathutils.Vector
    """ Bitangent vector of this vertex for this face (must be computed beforehand using calc_tangents, use it only if really needed, slower access than bitangent_sign)

    :type: mathutils.Vector
    """

    bitangent_sign: float
    """ Sign of the bitangent vector of this vertex for this face (must be computed beforehand using calc_tangents, bitangent = bitangent_sign * cross(normal, tangent))

    :type: float
    """

    edge_index: int
    """ Edge index

    :type: int
    """

    index: int
    """ Index of this loop

    :type: int
    """

    normal: mathutils.Vector
    """ The normal direction of the face corner, taking into account sharp faces, sharp edges, and custom normal data

    :type: mathutils.Vector
    """

    tangent: mathutils.Vector
    """ Local space unit length tangent vector of this vertex for this face (must be computed beforehand using calc_tangents)

    :type: mathutils.Vector
    """

    vertex_index: int
    """ Vertex index

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshLoopColor(bpy_struct):
    """Vertex loop colors in a Mesh"""

    color: bpy_prop_array[float]
    """ Color in sRGB color space

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshLoopColorLayer(bpy_struct):
    """Layer of vertex colors in a Mesh data-block"""

    active: bool | None
    """ Sets the layer as active for display and editing

    :type: bool | None
    """

    active_render: bool | None
    """ Sets the layer as active for rendering

    :type: bool | None
    """

    data: bpy_prop_collection[MeshLoopColor]
    """ 

    :type: bpy_prop_collection[MeshLoopColor]
    """

    name: str
    """ Name of Vertex color layer

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshLoopTriangle(bpy_struct):
    """Tessellated triangle in a Mesh data-block"""

    area: float
    """ Area of this triangle

    :type: float
    """

    index: int
    """ Index of this loop triangle

    :type: int
    """

    loops: bpy_prop_array[int]
    """ Indices of mesh loops that make up the triangle

    :type: bpy_prop_array[int]
    """

    material_index: int
    """ Material slot index of this triangle

    :type: int
    """

    normal: mathutils.Vector
    """ Local space unit length normal vector for this triangle

    :type: mathutils.Vector
    """

    polygon_index: int
    """ Index of mesh face that the triangle is a part of

    :type: int
    """

    split_normals: list[list[float]] | tuple[
        tuple[float, float, float],
        tuple[float, float, float],
        tuple[float, float, float],
    ]
    """ Local space unit length split normal vectors of the face corners of this triangle

    :type: list[list[float]] | tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]
    """

    use_smooth: bool
    """ 

    :type: bool
    """

    vertices: bpy_prop_array[int]
    """ Indices of triangle vertices

    :type: bpy_prop_array[int]
    """

    center: typing.Any
    """ The midpoint of the face.(readonly)"""

    edge_keys: typing.Any
    """ (readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshLoopTriangles(bpy_prop_collection[MeshLoopTriangle], bpy_struct):
    """Tessellation of mesh polygons into triangles"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshLoops(bpy_prop_collection[MeshLoop], bpy_struct):
    """Collection of mesh loops"""

    def add(self, count: int | None):
        """add

        :param count: Count, Number of loops to add
        :type count: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshNormalValue(bpy_struct):
    """Vector in a mesh normal array"""

    vector: mathutils.Vector
    """ 3D vector

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshPolygon(bpy_struct):
    """Polygon in a Mesh data-block"""

    area: float
    """ Read only area of this face

    :type: float
    """

    center: mathutils.Vector
    """ Center of this face

    :type: mathutils.Vector
    """

    hide: bool
    """ 

    :type: bool
    """

    index: int
    """ Index of this face

    :type: int
    """

    loop_start: int
    """ Index of the first loop of this face

    :type: int
    """

    loop_total: int
    """ Number of loops used by this face

    :type: int
    """

    material_index: int
    """ Material slot index of this face

    :type: int
    """

    normal: mathutils.Vector
    """ Local space unit length normal vector for this face

    :type: mathutils.Vector
    """

    select: bool
    """ 

    :type: bool
    """

    use_freestyle_mark: bool
    """ Face mark for Freestyle line rendering

    :type: bool
    """

    use_smooth: bool
    """ 

    :type: bool
    """

    vertices: bpy_prop_array[int]
    """ Vertex indices

    :type: bpy_prop_array[int]
    """

    edge_keys: typing.Any
    """ (readonly)"""

    loop_indices: typing.Any
    """ (readonly)"""

    def flip(self):
        """Invert winding of this face (flip its normal)"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshPolygons(bpy_prop_collection[MeshPolygon], bpy_struct):
    """Collection of mesh polygons"""

    active: int | None
    """ The active face for this mesh

    :type: int | None
    """

    def add(self, count: int | None):
        """add

        :param count: Count, Number of polygons to add
        :type count: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshSkinVertex(bpy_struct):
    """Per-vertex skin data for use with the Skin modifier"""

    radius: bpy_prop_array[float]
    """ Radius of the skin

    :type: bpy_prop_array[float]
    """

    use_loose: bool
    """ If vertex has multiple adjacent edges, it is hulled to them directly

    :type: bool
    """

    use_root: bool
    """ Vertex is a root for rotation calculations and armature generation, setting this flag does not clear other roots in the same mesh island

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshSkinVertexLayer(bpy_struct):
    """Per-vertex skin data for use with the Skin modifier"""

    data: bpy_prop_collection[MeshSkinVertex]
    """ 

    :type: bpy_prop_collection[MeshSkinVertex]
    """

    name: str
    """ Name of skin layer

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshStatVis(bpy_struct):
    distort_max: float
    """ Maximum angle to display

    :type: float
    """

    distort_min: float
    """ Minimum angle to display

    :type: float
    """

    overhang_axis: str
    """ 

    :type: str
    """

    overhang_max: float
    """ Maximum angle to display

    :type: float
    """

    overhang_min: float
    """ Minimum angle to display

    :type: float
    """

    sharp_max: float
    """ Maximum angle to display

    :type: float
    """

    sharp_min: float
    """ Minimum angle to display

    :type: float
    """

    thickness_max: float
    """ Maximum for measuring thickness

    :type: float
    """

    thickness_min: float
    """ Minimum for measuring thickness

    :type: float
    """

    thickness_samples: int
    """ Number of samples to test per face

    :type: int
    """

    type: str
    """ Type of data to visualize/check

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshUVLoop(bpy_struct):
    """(Deprecated) Layer of UV coordinates in a Mesh data-block"""

    pin_uv: bool
    """ 

    :type: bool
    """

    select: bool
    """ 

    :type: bool
    """

    select_edge: bool
    """ 

    :type: bool
    """

    uv: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshUVLoopLayer(bpy_struct):
    active: bool | None
    """ Set the map as active for display and editing

    :type: bool | None
    """

    active_clone: bool | None
    """ Set the map as active for cloning

    :type: bool | None
    """

    active_render: bool | None
    """ Set the UV map as active for rendering

    :type: bool | None
    """

    data: bpy_prop_collection[MeshUVLoop]
    """ Deprecated, use 'uv', 'vertex_select', 'edge_select' or 'pin' properties instead

    :type: bpy_prop_collection[MeshUVLoop]
    """

    edge_selection: bpy_prop_collection[BoolAttributeValue]
    """ Selection state of the edge in the UV editor

    :type: bpy_prop_collection[BoolAttributeValue]
    """

    name: str
    """ Name of UV map

    :type: str
    """

    pin: bpy_prop_collection[BoolAttributeValue]
    """ UV pinned state in the UV editor

    :type: bpy_prop_collection[BoolAttributeValue]
    """

    uv: bpy_prop_collection[Float2AttributeValue]
    """ UV coordinates on face corners

    :type: bpy_prop_collection[Float2AttributeValue]
    """

    vertex_selection: bpy_prop_collection[BoolAttributeValue]
    """ Selection state of the face corner the UV editor

    :type: bpy_prop_collection[BoolAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshVertex(bpy_struct):
    """Vertex in a Mesh data-block"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    groups: bpy_prop_collection[VertexGroupElement]
    """ Weights for the vertex groups this vertex is member of

    :type: bpy_prop_collection[VertexGroupElement]
    """

    hide: bool
    """ 

    :type: bool
    """

    index: int
    """ Index of this vertex

    :type: int
    """

    normal: mathutils.Vector
    """ Vertex Normal

    :type: mathutils.Vector
    """

    select: bool
    """ 

    :type: bool
    """

    undeformed_co: mathutils.Vector
    """ For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshVertices(bpy_prop_collection[MeshVertex], bpy_struct):
    """Collection of mesh vertices"""

    def add(self, count: int | None):
        """add

        :param count: Count, Number of vertices to add
        :type count: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MetaBallElements(bpy_prop_collection[MetaElement], bpy_struct):
    """Collection of metaball elements"""

    active: MetaElement
    """ Last selected element

    :type: MetaElement
    """

    def new(self, type: str | None = "BALL") -> MetaElement:
        """Add a new element to the metaball

        :param type: Type for the new metaball element
        :type type: str | None
        :return: The newly created metaball element
        :rtype: MetaElement
        """
        ...

    def remove(self, element: MetaElement):
        """Remove an element from the metaball

        :param element: The element to remove
        :type element: MetaElement
        """
        ...

    def clear(self):
        """Remove all elements from the metaball"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MetaElement(bpy_struct):
    """Blobby element in a metaball data-block"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    hide: bool
    """ Hide element

    :type: bool
    """

    radius: float
    """ 

    :type: float
    """

    rotation: mathutils.Quaternion
    """ Normalized quaternion rotation

    :type: mathutils.Quaternion
    """

    select: bool
    """ Select element

    :type: bool
    """

    size_x: float
    """ Size of element, use of components depends on element type

    :type: float
    """

    size_y: float
    """ Size of element, use of components depends on element type

    :type: float
    """

    size_z: float
    """ Size of element, use of components depends on element type

    :type: float
    """

    stiffness: float
    """ Stiffness defines how much of the element to fill

    :type: float
    """

    type: str
    """ Metaball type

    :type: str
    """

    use_negative: bool
    """ Set metaball as negative one

    :type: bool
    """

    use_scale_stiffness: bool
    """ Scale stiffness instead of radius

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Modifier(bpy_struct):
    """Modifier affecting the geometry data of an object"""

    execution_time: float
    """ Time in seconds that the modifier took to evaluate. This is only set on evaluated objects. If multiple modifiers run in parallel, execution time is not a reliable metric

    :type: float
    """

    is_active: bool
    """ The active modifier in the list

    :type: bool
    """

    is_override_data: bool
    """ In a local override object, whether this modifier comes from the linked reference object, or is local to the override

    :type: bool
    """

    name: str
    """ Modifier name

    :type: str
    """

    persistent_uid: int
    """ Uniquely identifies the modifier within the modifier stack that it is part of

    :type: int
    """

    show_expanded: bool
    """ Set modifier expanded in the user interface

    :type: bool
    """

    show_in_editmode: bool
    """ Display modifier in Edit mode

    :type: bool
    """

    show_on_cage: bool
    """ Adjust edit cage to modifier result

    :type: bool
    """

    show_render: bool
    """ Use modifier during render

    :type: bool
    """

    show_viewport: bool
    """ Display modifier in viewport

    :type: bool
    """

    type: str
    """ 

    :type: str
    """

    use_apply_on_spline: bool
    """ Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MotionPath(bpy_struct):
    """Cache of the world-space positions of an element over a frame range"""

    color: mathutils.Color
    """ Custom color for motion path

    :type: mathutils.Color
    """

    frame_end: int
    """ End frame of the stored range

    :type: int
    """

    frame_start: int
    """ Starting frame of the stored range

    :type: int
    """

    is_modified: bool
    """ Path is being edited

    :type: bool
    """

    length: int
    """ Number of frames cached

    :type: int
    """

    line_thickness: int
    """ Line thickness for motion path

    :type: int
    """

    lines: bool
    """ Use straight lines between keyframe points

    :type: bool
    """

    points: bpy_prop_collection[MotionPathVert]
    """ Cached positions per frame

    :type: bpy_prop_collection[MotionPathVert]
    """

    use_bone_head: bool
    """ For PoseBone paths, use the bone head location when calculating this path

    :type: bool
    """

    use_custom_color: bool
    """ Use custom color for this motion path

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MotionPathVert(bpy_struct):
    """Cached location on path"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    select: bool
    """ Path point is selected for editing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieClipProxy(bpy_struct):
    """Proxy parameters for a movie clip"""

    build_100: bool
    """ Build proxy resolution 100% of the original footage dimension

    :type: bool
    """

    build_25: bool
    """ Build proxy resolution 25% of the original footage dimension

    :type: bool
    """

    build_50: bool
    """ Build proxy resolution 50% of the original footage dimension

    :type: bool
    """

    build_75: bool
    """ Build proxy resolution 75% of the original footage dimension

    :type: bool
    """

    build_free_run: bool
    """ Build free run time code index

    :type: bool
    """

    build_free_run_rec_date: bool
    """ Build free run time code index using Record Date/Time

    :type: bool
    """

    build_record_run: bool
    """ Build record run time code index

    :type: bool
    """

    build_undistorted_100: bool
    """ Build proxy resolution 100% of the original undistorted footage dimension

    :type: bool
    """

    build_undistorted_25: bool
    """ Build proxy resolution 25% of the original undistorted footage dimension

    :type: bool
    """

    build_undistorted_50: bool
    """ Build proxy resolution 50% of the original undistorted footage dimension

    :type: bool
    """

    build_undistorted_75: bool
    """ Build proxy resolution 75% of the original undistorted footage dimension

    :type: bool
    """

    directory: str
    """ Location to store the proxy files

    :type: str
    """

    quality: int
    """ JPEG quality of proxy images

    :type: int
    """

    timecode: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieClipScopes(bpy_struct):
    """Scopes for statistical view of a movie clip"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieClipUser(bpy_struct):
    """Parameters defining how a MovieClip data-block is used by another data-block"""

    frame_current: int
    """ Current frame number in movie or image sequence

    :type: int
    """

    proxy_render_size: str
    """ Display preview using full resolution or different proxy resolutions

    :type: str
    """

    use_render_undistorted: bool
    """ Render preview using undistorted proxy

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieReconstructedCamera(bpy_struct):
    """Match-moving reconstructed camera data from tracker"""

    average_error: float
    """ Average error of reconstruction

    :type: float
    """

    frame: int
    """ Frame number marker is keyframed on

    :type: int
    """

    matrix: mathutils.Matrix
    """ Worldspace transformation matrix

    :type: mathutils.Matrix
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTracking(bpy_struct):
    """Match-moving data for tracking"""

    active_object_index: int | None
    """ Index of active object

    :type: int | None
    """

    camera: MovieTrackingCamera
    """ 

    :type: MovieTrackingCamera
    """

    dopesheet: MovieTrackingDopesheet
    """ 

    :type: MovieTrackingDopesheet
    """

    objects: MovieTrackingObjects
    """ Collection of objects in this tracking data object

    :type: MovieTrackingObjects
    """

    plane_tracks: MovieTrackingPlaneTracks
    """ Collection of plane tracks in this tracking data object. Deprecated, use objects[name].plane_tracks

    :type: MovieTrackingPlaneTracks
    """

    reconstruction: MovieTrackingReconstruction
    """ 

    :type: MovieTrackingReconstruction
    """

    settings: MovieTrackingSettings
    """ 

    :type: MovieTrackingSettings
    """

    stabilization: MovieTrackingStabilization
    """ 

    :type: MovieTrackingStabilization
    """

    tracks: MovieTrackingTracks
    """ Collection of tracks in this tracking data object. Deprecated, use objects[name].tracks

    :type: MovieTrackingTracks
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingCamera(bpy_struct):
    """Match-moving camera data for tracking"""

    brown_k1: float
    """ First coefficient of fourth order Brown-Conrady radial distortion

    :type: float
    """

    brown_k2: float
    """ Second coefficient of fourth order Brown-Conrady radial distortion

    :type: float
    """

    brown_k3: float
    """ Third coefficient of fourth order Brown-Conrady radial distortion

    :type: float
    """

    brown_k4: float
    """ Fourth coefficient of fourth order Brown-Conrady radial distortion

    :type: float
    """

    brown_p1: float
    """ First coefficient of second order Brown-Conrady tangential distortion

    :type: float
    """

    brown_p2: float
    """ Second coefficient of second order Brown-Conrady tangential distortion

    :type: float
    """

    distortion_model: str
    """ Distortion model used for camera lenses

    :type: str
    """

    division_k1: float
    """ First coefficient of second order division distortion

    :type: float
    """

    division_k2: float
    """ Second coefficient of second order division distortion

    :type: float
    """

    focal_length: float
    """ Camera's focal length

    :type: float
    """

    focal_length_pixels: float
    """ Camera's focal length

    :type: float
    """

    k1: float
    """ First coefficient of third order polynomial radial distortion

    :type: float
    """

    k2: float
    """ Second coefficient of third order polynomial radial distortion

    :type: float
    """

    k3: float
    """ Third coefficient of third order polynomial radial distortion

    :type: float
    """

    nuke_k1: float
    """ First coefficient of second order Nuke distortion

    :type: float
    """

    nuke_k2: float
    """ Second coefficient of second order Nuke distortion

    :type: float
    """

    pixel_aspect: float
    """ Pixel aspect ratio

    :type: float
    """

    principal_point: bpy_prop_array[float]
    """ Optical center of lens

    :type: bpy_prop_array[float]
    """

    principal_point_pixels: bpy_prop_array[float]
    """ Optical center of lens in pixels

    :type: bpy_prop_array[float]
    """

    sensor_width: float
    """ Width of CCD sensor in millimeters

    :type: float
    """

    units: str
    """ Units used for camera focal length

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingDopesheet(bpy_struct):
    """Match-moving dopesheet data"""

    show_hidden: bool
    """ Include channels from objects/bone that are not visible

    :type: bool
    """

    show_only_selected: bool
    """ Only include channels relating to selected objects and data

    :type: bool
    """

    sort_method: str
    """ Method to be used to sort channels in dopesheet view

    :type: str
    """

    use_invert_sort: bool
    """ Invert sort order of dopesheet channels

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingMarker(bpy_struct):
    """Match-moving marker data for tracking"""

    co: mathutils.Vector
    """ Marker position at frame in normalized coordinates

    :type: mathutils.Vector
    """

    frame: int
    """ Frame number marker is keyframed on

    :type: int
    """

    is_keyed: bool
    """ Whether the position of the marker is keyframed or tracked

    :type: bool
    """

    mute: bool
    """ Is marker muted for current frame

    :type: bool
    """

    pattern_bound_box: list[list[float]] | tuple[
        tuple[float, float], tuple[float, float]
    ]
    """ Pattern area bounding box in normalized coordinates

    :type: list[list[float]] | tuple[tuple[float, float], tuple[float, float]]
    """

    pattern_corners: list[list[float]] | tuple[
        tuple[float, float, float, float], tuple[float, float, float, float]
    ]
    """ Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    search_max: mathutils.Vector
    """ Right-bottom corner of search area in normalized coordinates relative to marker position

    :type: mathutils.Vector
    """

    search_min: mathutils.Vector
    """ Left-bottom corner of search area in normalized coordinates relative to marker position

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingMarkers(bpy_prop_collection[MovieTrackingMarker], bpy_struct):
    """Collection of markers for movie tracking track"""

    def find_frame(
        self, frame: int | None, exact: bool | typing.Any | None = True
    ) -> MovieTrackingMarker:
        """Get marker for specified frame

        :param frame: Frame, Frame number to find marker for
        :type frame: int | None
        :param exact: Exact, Get marker at exact frame number rather than get estimated marker
        :type exact: bool | typing.Any | None
        :return: Marker for specified frame
        :rtype: MovieTrackingMarker
        """
        ...

    def insert_frame(
        self, frame: int | None, co: typing.Any | None = (0.0, 0.0)
    ) -> MovieTrackingMarker:
        """Insert a new marker at the specified frame

        :param frame: Frame, Frame number to insert marker to
        :type frame: int | None
        :param co: Coordinate, Place new marker at the given frame using specified in normalized space coordinates
        :type co: typing.Any | None
        :return: Newly created marker
        :rtype: MovieTrackingMarker
        """
        ...

    def delete_frame(self, frame: int | None):
        """Delete marker at specified frame

        :param frame: Frame, Frame number to delete marker from
        :type frame: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingObject(bpy_struct):
    """Match-moving object tracking and reconstruction data"""

    is_camera: bool
    """ Object is used for camera tracking

    :type: bool
    """

    keyframe_a: int
    """ First keyframe used for reconstruction initialization

    :type: int
    """

    keyframe_b: int
    """ Second keyframe used for reconstruction initialization

    :type: int
    """

    name: str
    """ Unique name of object

    :type: str
    """

    plane_tracks: MovieTrackingObjectPlaneTracks
    """ Collection of plane tracks in this tracking data object

    :type: MovieTrackingObjectPlaneTracks
    """

    reconstruction: MovieTrackingReconstruction
    """ 

    :type: MovieTrackingReconstruction
    """

    scale: float
    """ Scale of object solution in camera space

    :type: float
    """

    tracks: MovieTrackingObjectTracks
    """ Collection of tracks in this tracking data object

    :type: MovieTrackingObjectTracks
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingObjectPlaneTracks(
    bpy_prop_collection[MovieTrackingPlaneTrack], bpy_struct
):
    """Collection of tracking plane tracks"""

    active: MovieTrackingTrack | None
    """ Active track in this tracking data object

    :type: MovieTrackingTrack | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingObjectTracks(bpy_prop_collection[MovieTrackingTrack], bpy_struct):
    """Collection of movie tracking tracks"""

    active: MovieTrackingTrack | None
    """ Active track in this tracking data object

    :type: MovieTrackingTrack | None
    """

    def new(
        self, name: str | typing.Any = "", frame: typing.Any | None = 1
    ) -> MovieTrackingTrack:
        """create new motion track in this movie clip

        :param name: Name of new track
        :type name: str | typing.Any
        :param frame: Frame, Frame number to add tracks on
        :type frame: typing.Any | None
        :return: Newly created track
        :rtype: MovieTrackingTrack
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingObjects(bpy_prop_collection[MovieTrackingObject], bpy_struct):
    """Collection of movie tracking objects"""

    active: MovieTrackingObject | None
    """ Active object in this tracking data object

    :type: MovieTrackingObject | None
    """

    def new(self, name: str | typing.Any) -> MovieTrackingObject:
        """Add tracking object to this movie clip

        :param name: Name of new object
        :type name: str | typing.Any
        :return: New motion tracking object
        :rtype: MovieTrackingObject
        """
        ...

    def remove(self, object: MovieTrackingObject):
        """Remove tracking object from this movie clip

        :param object: Motion tracking object to be removed
        :type object: MovieTrackingObject
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingPlaneMarker(bpy_struct):
    """Match-moving plane marker data for tracking"""

    corners: list[list[float]] | tuple[
        tuple[float, float, float, float], tuple[float, float, float, float]
    ]
    """ Array of coordinates which represents UI rectangle corners in frame normalized coordinates

    :type: list[list[float]] | tuple[tuple[float, float, float, float], tuple[float, float, float, float]]
    """

    frame: int
    """ Frame number marker is keyframed on

    :type: int
    """

    mute: bool
    """ Is marker muted for current frame

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingPlaneMarkers(
    bpy_prop_collection[MovieTrackingPlaneMarker], bpy_struct
):
    """Collection of markers for movie tracking plane track"""

    def find_frame(
        self, frame: int | None, exact: bool | typing.Any | None = True
    ) -> MovieTrackingPlaneMarker:
        """Get plane marker for specified frame

        :param frame: Frame, Frame number to find marker for
        :type frame: int | None
        :param exact: Exact, Get plane marker at exact frame number rather than get estimated marker
        :type exact: bool | typing.Any | None
        :return: Plane marker for specified frame
        :rtype: MovieTrackingPlaneMarker
        """
        ...

    def insert_frame(self, frame: int | None) -> MovieTrackingPlaneMarker:
        """Insert a new plane marker at the specified frame

        :param frame: Frame, Frame number to insert marker to
        :type frame: int | None
        :return: Newly created plane marker
        :rtype: MovieTrackingPlaneMarker
        """
        ...

    def delete_frame(self, frame: int | None):
        """Delete plane marker at specified frame

        :param frame: Frame, Frame number to delete plane marker from
        :type frame: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingPlaneTrack(bpy_struct):
    """Match-moving plane track data for tracking"""

    image: Image
    """ Image displayed in the track during editing in clip editor

    :type: Image
    """

    image_opacity: float
    """ Opacity of the image

    :type: float
    """

    markers: MovieTrackingPlaneMarkers
    """ Collection of markers in track

    :type: MovieTrackingPlaneMarkers
    """

    name: str
    """ Unique name of track

    :type: str
    """

    select: bool
    """ Plane track is selected

    :type: bool
    """

    use_auto_keying: bool
    """ Automatic keyframe insertion when moving plane corners

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingPlaneTracks(
    bpy_prop_collection[MovieTrackingPlaneTrack], bpy_struct
):
    """Collection of movie tracking plane tracks"""

    active: MovieTrackingPlaneTrack | None
    """ Active plane track in this tracking data object. Deprecated, use objects[name].plane_tracks.active

    :type: MovieTrackingPlaneTrack | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingReconstructedCameras(
    bpy_prop_collection[MovieReconstructedCamera], bpy_struct
):
    """Collection of solved cameras"""

    def find_frame(self, frame: typing.Any | None = 1) -> MovieReconstructedCamera:
        """Find a reconstructed camera for a give frame number

        :param frame: Frame, Frame number to find camera for
        :type frame: typing.Any | None
        :return: Camera for a given frame
        :rtype: MovieReconstructedCamera
        """
        ...

    def matrix_from_frame(self, frame: typing.Any | None = 1) -> mathutils.Matrix:
        """Return interpolated camera matrix for a given frame

        :param frame: Frame, Frame number to find camera for
        :type frame: typing.Any | None
        :return: Matrix, Interpolated camera matrix for a given frame
        :rtype: mathutils.Matrix
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingReconstruction(bpy_struct):
    """Match-moving reconstruction data from tracker"""

    average_error: float
    """ Average error of reconstruction

    :type: float
    """

    cameras: MovieTrackingReconstructedCameras
    """ Collection of solved cameras

    :type: MovieTrackingReconstructedCameras
    """

    is_valid: bool
    """ Is tracking data contains valid reconstruction information

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingSettings(bpy_struct):
    """Match moving settings"""

    clean_action: str
    """ Cleanup action to execute

    :type: str
    """

    clean_error: float
    """ Effect on tracks which have a larger re-projection error

    :type: float
    """

    clean_frames: int
    """ Effect on tracks which are tracked less than the specified amount of frames

    :type: int
    """

    default_correlation_min: float
    """ Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking

    :type: float
    """

    default_frames_limit: int
    """ Every tracking cycle, this number of frames are tracked

    :type: int
    """

    default_margin: int
    """ Default distance from image boundary at which marker stops tracking

    :type: int
    """

    default_motion_model: str
    """ Default motion model to use for tracking

    :type: str
    """

    default_pattern_match: str
    """ Track pattern from given frame when tracking marker to next frame

    :type: str
    """

    default_pattern_size: int
    """ Size of pattern area for newly created tracks

    :type: int
    """

    default_search_size: int
    """ Size of search area for newly created tracks

    :type: int
    """

    default_weight: float
    """ Influence of newly created track on a final solution

    :type: float
    """

    distance: float
    """ Distance between two bundles used for scene scaling

    :type: float
    """

    object_distance: float
    """ Distance between two bundles used for object scaling

    :type: float
    """

    refine_intrinsics_focal_length: bool
    """ Refine focal length during camera solving

    :type: bool
    """

    refine_intrinsics_principal_point: bool
    """ Refine principal point during camera solving

    :type: bool
    """

    refine_intrinsics_radial_distortion: bool
    """ Refine radial coefficients of distortion model during camera solving

    :type: bool
    """

    refine_intrinsics_tangential_distortion: bool
    """ Refine tangential coefficients of distortion model during camera solving

    :type: bool
    """

    speed: str
    """ Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)

    :type: str
    """

    use_default_blue_channel: bool
    """ Use blue channel from footage for tracking

    :type: bool
    """

    use_default_brute: bool
    """ Use a brute-force translation-only initialization when tracking

    :type: bool
    """

    use_default_green_channel: bool
    """ Use green channel from footage for tracking

    :type: bool
    """

    use_default_mask: bool
    """ Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking

    :type: bool
    """

    use_default_normalization: bool
    """ Normalize light intensities while tracking (slower)

    :type: bool
    """

    use_default_red_channel: bool
    """ Use red channel from footage for tracking

    :type: bool
    """

    use_keyframe_selection: bool
    """ Automatically select keyframes when solving camera/object motion

    :type: bool
    """

    use_tripod_solver: bool
    """ Use special solver to track a stable camera position, such as a tripod

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingStabilization(bpy_struct):
    """2D stabilization based on tracking markers"""

    active_rotation_track_index: int | None
    """ Index of active track in rotation stabilization tracks list

    :type: int | None
    """

    active_track_index: int | None
    """ Index of active track in translation stabilization tracks list

    :type: int | None
    """

    anchor_frame: int
    """ Reference point to anchor stabilization (other frames will be adjusted relative to this frame's position)

    :type: int
    """

    filter_type: str
    """ Interpolation to use for sub-pixel shifts and rotations due to stabilization

    :type: str
    """

    influence_location: float
    """ Influence of stabilization algorithm on footage location

    :type: float
    """

    influence_rotation: float
    """ Influence of stabilization algorithm on footage rotation

    :type: float
    """

    influence_scale: float
    """ Influence of stabilization algorithm on footage scale

    :type: float
    """

    rotation_tracks: bpy_prop_collection[MovieTrackingTrack]
    """ Collection of tracks used for 2D stabilization (translation)

    :type: bpy_prop_collection[MovieTrackingTrack]
    """

    scale_max: float
    """ Limit the amount of automatic scaling

    :type: float
    """

    show_tracks_expanded: bool
    """ Show UI list of tracks participating in stabilization

    :type: bool
    """

    target_position: mathutils.Vector
    """ Known relative offset of original shot, will be subtracted (e.g. for panning shot, can be animated)

    :type: mathutils.Vector
    """

    target_rotation: float
    """ Rotation present on original shot, will be compensated (e.g. for deliberate tilting)

    :type: float
    """

    target_scale: float
    """ Explicitly scale resulting frame to compensate zoom of original shot

    :type: float
    """

    tracks: bpy_prop_collection[MovieTrackingTrack]
    """ Collection of tracks used for 2D stabilization (translation)

    :type: bpy_prop_collection[MovieTrackingTrack]
    """

    use_2d_stabilization: bool
    """ Use 2D stabilization for footage

    :type: bool
    """

    use_autoscale: bool
    """ Automatically scale footage to cover unfilled areas when stabilizing

    :type: bool
    """

    use_stabilize_rotation: bool
    """ Stabilize detected rotation around center of frame

    :type: bool
    """

    use_stabilize_scale: bool
    """ Compensate any scale changes relative to center of rotation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingTrack(bpy_struct):
    """Match-moving track data for tracking"""

    average_error: float
    """ Average error of re-projection

    :type: float
    """

    bundle: mathutils.Vector
    """ Position of bundle reconstructed from this track

    :type: mathutils.Vector
    """

    color: mathutils.Color
    """ Color of the track in the Movie Clip Editor and the 3D viewport after a solve

    :type: mathutils.Color
    """

    correlation_min: float
    """ Minimal value of correlation between matched pattern and reference that is still treated as successful tracking

    :type: float
    """

    frames_limit: int
    """ Every tracking cycle, this number of frames are tracked

    :type: int
    """

    grease_pencil: GreasePencil
    """ Grease pencil data for this track

    :type: GreasePencil
    """

    has_bundle: bool
    """ True if track has a valid bundle

    :type: bool
    """

    hide: bool
    """ Track is hidden

    :type: bool
    """

    lock: bool
    """ Track is locked and all changes to it are disabled

    :type: bool
    """

    margin: int
    """ Distance from image boundary at which marker stops tracking

    :type: int
    """

    markers: MovieTrackingMarkers
    """ Collection of markers in track

    :type: MovieTrackingMarkers
    """

    motion_model: str
    """ Default motion model to use for tracking

    :type: str
    """

    name: str
    """ Unique name of track

    :type: str
    """

    offset: mathutils.Vector
    """ Offset of track from the parenting point

    :type: mathutils.Vector
    """

    pattern_match: str
    """ Track pattern from given frame when tracking marker to next frame

    :type: str
    """

    select: bool
    """ Track is selected

    :type: bool
    """

    select_anchor: bool
    """ Track's anchor point is selected

    :type: bool
    """

    select_pattern: bool
    """ Track's pattern area is selected

    :type: bool
    """

    select_search: bool
    """ Track's search area is selected

    :type: bool
    """

    use_alpha_preview: bool
    """ Apply track's mask on displaying preview

    :type: bool
    """

    use_blue_channel: bool
    """ Use blue channel from footage for tracking

    :type: bool
    """

    use_brute: bool
    """ Use a brute-force translation only pre-track before refinement

    :type: bool
    """

    use_custom_color: bool
    """ Use custom color instead of theme-defined

    :type: bool
    """

    use_grayscale_preview: bool
    """ Display what the tracking algorithm sees in the preview

    :type: bool
    """

    use_green_channel: bool
    """ Use green channel from footage for tracking

    :type: bool
    """

    use_mask: bool
    """ Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking

    :type: bool
    """

    use_normalization: bool
    """ Normalize light intensities while tracking. Slower

    :type: bool
    """

    use_red_channel: bool
    """ Use red channel from footage for tracking

    :type: bool
    """

    weight: float
    """ Influence of this track on a final solution

    :type: float
    """

    weight_stab: float
    """ Influence of this track on 2D stabilization

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieTrackingTracks(bpy_prop_collection[MovieTrackingTrack], bpy_struct):
    """Collection of movie tracking tracks"""

    active: MovieTrackingTrack | None
    """ Active track in this tracking data object. Deprecated, use objects[name].tracks.active

    :type: MovieTrackingTrack | None
    """

    def new(
        self, name: str | typing.Any = "", frame: typing.Any | None = 1
    ) -> MovieTrackingTrack:
        """Create new motion track in this movie clip

        :param name: Name of new track
        :type name: str | typing.Any
        :param frame: Frame, Frame number to add track on
        :type frame: typing.Any | None
        :return: Newly created track
        :rtype: MovieTrackingTrack
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NlaStrip(bpy_struct):
    """A container referencing an existing Action"""

    action: Action
    """ Action referenced by this strip

    :type: Action
    """

    action_frame_end: float
    """ Last frame from action to use

    :type: float
    """

    action_frame_start: float
    """ First frame from action to use

    :type: float
    """

    active: bool
    """ NLA Strip is active

    :type: bool
    """

    blend_in: float
    """ Number of frames at start of strip to fade in influence

    :type: float
    """

    blend_out: float
    """ 

    :type: float
    """

    blend_type: str
    """ Method used for combining strip's result with accumulated result

    :type: str
    """

    extrapolation: str
    """ Action to take for gaps past the strip extents

    :type: str
    """

    fcurves: NlaStripFCurves
    """ F-Curves for controlling the strip's influence and timing

    :type: NlaStripFCurves
    """

    frame_end: float
    """ 

    :type: float
    """

    frame_end_raw: float
    """ Same as frame_end, except that any value can be set, including ones that create an invalid state

    :type: float
    """

    frame_end_ui: float
    """ End frame of the NLA strip. Note: changing this value also updates the value of the strip's repeats or its action's end frame. If only the end frame should be changed, see the "frame_end" property instead

    :type: float
    """

    frame_start: float
    """ 

    :type: float
    """

    frame_start_raw: float
    """ Same as frame_start, except that any value can be set, including ones that create an invalid state

    :type: float
    """

    frame_start_ui: float
    """ Start frame of the NLA strip. Note: changing this value also updates the value of the strip's end frame. If only the start frame should be changed, see the "frame_start" property instead

    :type: float
    """

    influence: float
    """ Amount the strip contributes to the current result

    :type: float
    """

    modifiers: bpy_prop_collection[FModifier]
    """ Modifiers affecting all the F-Curves in the referenced Action

    :type: bpy_prop_collection[FModifier]
    """

    mute: bool
    """ Disable NLA Strip evaluation

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    repeat: float
    """ Number of times to repeat the action range

    :type: float
    """

    scale: float
    """ Scaling factor for action

    :type: float
    """

    select: bool
    """ NLA Strip is selected

    :type: bool
    """

    strip_time: float
    """ Frame of referenced Action to evaluate

    :type: float
    """

    strips: bpy_prop_collection[NlaStrip]
    """ NLA Strips that this strip acts as a container for (if it is of type Meta)

    :type: bpy_prop_collection[NlaStrip]
    """

    type: str
    """ Type of NLA Strip

    :type: str
    """

    use_animated_influence: bool
    """ Influence setting is controlled by an F-Curve rather than automatically determined

    :type: bool
    """

    use_animated_time: bool
    """ Strip time is controlled by an F-Curve rather than automatically determined

    :type: bool
    """

    use_animated_time_cyclic: bool
    """ Cycle the animated time within the action start and end

    :type: bool
    """

    use_auto_blend: bool
    """ Number of frames for Blending In/Out is automatically determined from overlapping strips

    :type: bool
    """

    use_reverse: bool
    """ NLA Strip is played back in reverse order (only when timing is automatically determined)

    :type: bool
    """

    use_sync_length: bool
    """ Update range of frames referenced from action after tweaking strip and its keyframes

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NlaStripFCurves(bpy_prop_collection[FCurve], bpy_struct):
    """Collection of NLA strip F-Curves"""

    def find(self, data_path: str | typing.Any, index: typing.Any | None = 0) -> FCurve:
        """Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the NLA strip.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str | typing.Any
        :param index: Index, Array index
        :type index: typing.Any | None
        :return: The found F-Curve, or None if it doesn't exist
        :rtype: FCurve
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NlaStrips(bpy_prop_collection[NlaStrip], bpy_struct):
    """Collection of NLA Strips"""

    def new(
        self, name: str | typing.Any, start: int | None, action: Action
    ) -> NlaStrip:
        """Add a new Action-Clip strip to the track

        :param name: Name for the NLA Strips
        :type name: str | typing.Any
        :param start: Start Frame, Start frame for this strip
        :type start: int | None
        :param action: Action to assign to this strip
        :type action: Action
        :return: New NLA Strip
        :rtype: NlaStrip
        """
        ...

    def remove(self, strip: NlaStrip):
        """Remove a NLA Strip

        :param strip: NLA Strip to remove
        :type strip: NlaStrip
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NlaTrack(bpy_struct):
    """An animation layer containing Actions referenced as NLA strips"""

    active: bool
    """ NLA Track is active

    :type: bool
    """

    is_override_data: bool
    """ In a local override data, whether this NLA track comes from the linked reference data, or is local to the override

    :type: bool
    """

    is_solo: bool
    """ NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)

    :type: bool
    """

    lock: bool
    """ NLA Track is locked

    :type: bool
    """

    mute: bool
    """ Disable NLA Track evaluation

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    select: bool
    """ NLA Track is selected

    :type: bool
    """

    strips: NlaStrips
    """ NLA Strips on this NLA-track

    :type: NlaStrips
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NlaTracks(bpy_prop_collection[NlaTrack], bpy_struct):
    """Collection of NLA Tracks"""

    active: NlaTrack | None
    """ Active NLA Track

    :type: NlaTrack | None
    """

    def new(self, prev: NlaTrack | None = None) -> NlaTrack:
        """Add a new NLA Track

        :param prev: NLA Track to add the new one after
        :type prev: NlaTrack | None
        :return: New NLA Track
        :rtype: NlaTrack
        """
        ...

    def remove(self, track: NlaTrack):
        """Remove a NLA Track

        :param track: NLA Track to remove
        :type track: NlaTrack
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Node(bpy_struct):
    """Node in a node tree"""

    bl_description: str
    """ 

    :type: str
    """

    bl_height_default: float
    """ 

    :type: float
    """

    bl_height_max: float
    """ 

    :type: float
    """

    bl_height_min: float
    """ 

    :type: float
    """

    bl_icon: str
    """ The node icon

    :type: str
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ The node label

    :type: str
    """

    bl_static_type: str
    """ Node type (deprecated, use with care)

    :type: str
    """

    bl_width_default: float
    """ 

    :type: float
    """

    bl_width_max: float
    """ 

    :type: float
    """

    bl_width_min: float
    """ 

    :type: float
    """

    color: mathutils.Color
    """ Custom color of the node body

    :type: mathutils.Color
    """

    dimensions: mathutils.Vector
    """ Absolute bounding box dimensions of the node

    :type: mathutils.Vector
    """

    height: float
    """ Height of the node

    :type: float
    """

    hide: bool
    """ 

    :type: bool
    """

    inputs: NodeInputs
    """ 

    :type: NodeInputs
    """

    internal_links: bpy_prop_collection[NodeLink]
    """ Internal input-to-output connections for muting

    :type: bpy_prop_collection[NodeLink]
    """

    label: str
    """ Optional custom node label

    :type: str
    """

    location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    mute: bool
    """ 

    :type: bool
    """

    name: str
    """ Unique node identifier

    :type: str
    """

    outputs: NodeOutputs
    """ 

    :type: NodeOutputs
    """

    parent: Node
    """ Parent this node is attached to

    :type: Node
    """

    select: bool
    """ Node selection state

    :type: bool
    """

    show_options: bool
    """ 

    :type: bool
    """

    show_preview: bool
    """ 

    :type: bool
    """

    show_texture: bool
    """ Display node in viewport textured shading mode

    :type: bool
    """

    type: str
    """ Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)

    :type: str
    """

    use_custom_color: bool
    """ Use custom color for the node

    :type: bool
    """

    width: float
    """ Width of the node

    :type: float
    """

    def socket_value_update(self, context: Context):
        """Update after property changes

        :param context:
        :type context: Context
        """
        ...

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def poll(cls, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node type can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """
        ...

    def poll_instance(self, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """
        ...

    def update(self):
        """Update on node graph topology changes (adding or removing nodes and links)"""
        ...

    def insert_link(self, link: NodeLink):
        """Handle creation of a link to or from the node

        :param link: Link, Node link that will be inserted
        :type link: NodeLink
        """
        ...

    def init(self, context: Context):
        """Initialize a new instance of this node

        :param context:
        :type context: Context
        """
        ...

    def copy(self, node: Node):
        """Initialize a new instance of this node from an existing node

        :param node: Node, Existing node to copy
        :type node: Node
        """
        ...

    def free(self):
        """Clean up node on removal"""
        ...

    def draw_buttons(self, context: Context, layout: UILayout):
        """Draw node buttons

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def draw_buttons_ext(self, context: Context, layout: UILayout):
        """Draw node buttons in the sidebar

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def draw_label(self) -> str | typing.Any:
        """Returns a dynamic label string

        :return: Label
        :rtype: str | typing.Any
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeEnumDefinition(bpy_struct):
    """Definition of an enumeration for nodes"""

    active_index: int | None
    """ Index of the active item

    :type: int | None
    """

    active_item: NodeEnumItem | None
    """ Active item

    :type: NodeEnumItem | None
    """

    enum_items: NodeEnumDefinitionItems
    """ 

    :type: NodeEnumDefinitionItems
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeEnumDefinitionItems(bpy_prop_collection[NodeEnumItem], bpy_struct):
    """Collection of items that make up an enum"""

    def new(self, name: str | typing.Any) -> NodeEnumItem:
        """Add an a new enum item

        :param name: Name
        :type name: str | typing.Any
        :return: Item, New item
        :rtype: NodeEnumItem
        """
        ...

    def remove(self, item: NodeEnumItem):
        """Remove an item from this enum

        :param item: Item, The item to remove
        :type item: NodeEnumItem
        """
        ...

    def clear(self):
        """Remove all items from this enum"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move an item to another position

        :param from_index: From Index, Index of the item to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the item
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeEnumItem(bpy_struct):
    description: str
    """ 

    :type: str
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeGeometryBakeItem(bpy_struct):
    attribute_domain: str
    """ Attribute domain where the attribute is stored in the baked data

    :type: str
    """

    color: bpy_prop_array[float]
    """ Color of the corresponding socket type in the node editor

    :type: bpy_prop_array[float]
    """

    is_attribute: bool
    """ Bake item is an attribute stored on a geometry

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    socket_type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeGeometryBakeItems(bpy_prop_collection[NodeGeometryBakeItem], bpy_struct):
    """Collection of bake items"""

    def new(
        self, socket_type: str | None, name: str | typing.Any
    ) -> NodeGeometryBakeItem:
        """Add an item at the end

        :param socket_type: Socket Type, Socket type of the item
        :type socket_type: str | None
        :param name: Name
        :type name: str | typing.Any
        :return: Item, New item
        :rtype: NodeGeometryBakeItem
        """
        ...

    def remove(self, item: NodeGeometryBakeItem):
        """Remove an item

        :param item: Item, The item to remove
        :type item: NodeGeometryBakeItem
        """
        ...

    def clear(self):
        """Remove all items"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move an item to another position

        :param from_index: From Index, Index of the item to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the item
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeGeometryRepeatOutputItems(bpy_prop_collection[RepeatItem], bpy_struct):
    """Collection of repeat items"""

    def new(self, socket_type: str | None, name: str | typing.Any) -> RepeatItem:
        """Add an item at the end

        :param socket_type: Socket Type, Socket type of the item
        :type socket_type: str | None
        :param name: Name
        :type name: str | typing.Any
        :return: Item, New item
        :rtype: RepeatItem
        """
        ...

    def remove(self, item: RepeatItem):
        """Remove an item

        :param item: Item, The item to remove
        :type item: RepeatItem
        """
        ...

    def clear(self):
        """Remove all items"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move an item to another position

        :param from_index: From Index, Index of the item to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the item
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeGeometrySimulationOutputItems(
    bpy_prop_collection[SimulationStateItem], bpy_struct
):
    """Collection of simulation items"""

    def new(
        self, socket_type: str | None, name: str | typing.Any
    ) -> SimulationStateItem:
        """Add an item at the end

        :param socket_type: Socket Type, Socket type of the item
        :type socket_type: str | None
        :param name: Name
        :type name: str | typing.Any
        :return: Item, New item
        :rtype: SimulationStateItem
        """
        ...

    def remove(self, item: SimulationStateItem):
        """Remove an item

        :param item: Item, The item to remove
        :type item: SimulationStateItem
        """
        ...

    def clear(self):
        """Remove all items"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move an item to another position

        :param from_index: From Index, Index of the item to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the item
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeIndexSwitchItems(bpy_prop_collection[IndexSwitchItem], bpy_struct):
    """Collection of index_switch items"""

    def new(self) -> IndexSwitchItem:
        """Add an item at the end

        :return: Item, New item
        :rtype: IndexSwitchItem
        """
        ...

    def remove(self, item: IndexSwitchItem):
        """Remove an item

        :param item: Item, The item to remove
        :type item: IndexSwitchItem
        """
        ...

    def clear(self):
        """Remove all items"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move an item to another position

        :param from_index: From Index, Index of the item to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the item
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeInputs(bpy_prop_collection[NodeSocket], bpy_struct):
    """Collection of Node Sockets"""

    def new(
        self,
        type: str | typing.Any,
        name: str | typing.Any,
        identifier: str | typing.Any = "",
    ) -> NodeSocket:
        """Add a socket to this node

        :param type: Type, Data type
        :type type: str | typing.Any
        :param name: Name
        :type name: str | typing.Any
        :param identifier: Identifier, Unique socket identifier
        :type identifier: str | typing.Any
        :return: New socket
        :rtype: NodeSocket
        """
        ...

    def remove(self, socket: NodeSocket | None):
        """Remove a socket from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """
        ...

    def clear(self):
        """Remove all sockets from this node"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeInstanceHash(bpy_struct):
    """Hash table containing node instance data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeInternalSocketTemplate(bpy_struct):
    """Type and default value of a node socket"""

    identifier: str
    """ Identifier of the socket

    :type: str
    """

    name: str
    """ Name of the socket

    :type: str
    """

    type: str
    """ Data type of the socket

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeLink(bpy_struct):
    """Link between nodes in a node tree"""

    from_node: Node
    """ 

    :type: Node
    """

    from_socket: NodeSocket
    """ 

    :type: NodeSocket
    """

    is_hidden: bool
    """ Link is hidden due to invisible sockets

    :type: bool
    """

    is_muted: bool
    """ Link is muted and can be ignored

    :type: bool
    """

    is_valid: bool
    """ Link is valid

    :type: bool
    """

    multi_input_sort_id: int
    """ Used to sort multiple links coming into the same input. The highest ID is at the top

    :type: int
    """

    to_node: Node
    """ 

    :type: Node
    """

    to_socket: NodeSocket
    """ 

    :type: NodeSocket
    """

    def swap_multi_input_sort_id(self, other: NodeLink):
        """Swap the order of two links connected to the same multi-input socket

        :param other: Other, The other link. Must link to the same multi input socket
        :type other: NodeLink
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeLinks(bpy_prop_collection[NodeLink], bpy_struct):
    """Collection of Node Links"""

    def new(
        self,
        input: NodeSocket,
        output: NodeSocket,
        verify_limits: bool | typing.Any | None = True,
    ) -> NodeLink:
        """Add a node link to this node tree

        :param input: The input socket
        :type input: NodeSocket
        :param output: The output socket
        :type output: NodeSocket
        :param verify_limits: Verify Limits, Remove existing links if connection limit is exceeded
        :type verify_limits: bool | typing.Any | None
        :return: New node link
        :rtype: NodeLink
        """
        ...

    def remove(self, link: NodeLink):
        """remove a node link from the node tree

        :param link: The node link to remove
        :type link: NodeLink
        """
        ...

    def clear(self):
        """remove all node links from the node tree"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeOutputFileSlotFile(bpy_struct):
    """Single layer file slot of the file output node"""

    format: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    path: str
    """ Subpath used for this slot

    :type: str
    """

    save_as_render: bool
    """ Apply render part of display transform when saving byte image

    :type: bool
    """

    use_node_format: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeOutputFileSlotLayer(bpy_struct):
    """Multilayer slot of the file output node"""

    name: str
    """ OpenEXR layer name used for this slot

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeOutputs(bpy_prop_collection[NodeSocket], bpy_struct):
    """Collection of Node Sockets"""

    def new(
        self,
        type: str | typing.Any,
        name: str | typing.Any,
        identifier: str | typing.Any = "",
    ) -> NodeSocket:
        """Add a socket to this node

        :param type: Type, Data type
        :type type: str | typing.Any
        :param name: Name
        :type name: str | typing.Any
        :param identifier: Identifier, Unique socket identifier
        :type identifier: str | typing.Any
        :return: New socket
        :rtype: NodeSocket
        """
        ...

    def remove(self, socket: NodeSocket | None):
        """Remove a socket from this node

        :param socket: The socket to remove
        :type socket: NodeSocket | None
        """
        ...

    def clear(self):
        """Remove all sockets from this node"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int | None
        :param to_index: To Index, Target index for the socket
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocket(bpy_struct):
    """Input or output socket of a node"""

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ Label to display for the socket type in the UI

    :type: str
    """

    bl_subtype_label: str
    """ Label to display for the socket subtype in the UI

    :type: str
    """

    description: str
    """ Socket tooltip

    :type: str
    """

    display_shape: str
    """ Socket shape

    :type: str
    """

    enabled: bool
    """ Enable the socket

    :type: bool
    """

    hide: bool
    """ Hide the socket

    :type: bool
    """

    hide_value: bool
    """ Hide the socket input value

    :type: bool
    """

    identifier: str
    """ Unique identifier for mapping sockets

    :type: str
    """

    is_linked: bool
    """ True if the socket is connected

    :type: bool
    """

    is_multi_input: bool
    """ True if the socket can accept multiple ordered input links

    :type: bool
    """

    is_output: bool
    """ True if the socket is an output, otherwise input

    :type: bool
    """

    is_unavailable: bool
    """ True if the socket is unavailable

    :type: bool
    """

    label: str
    """ Custom dynamic defined socket label

    :type: str
    """

    link_limit: int
    """ Max number of links allowed for this socket

    :type: int
    """

    name: str
    """ Socket name

    :type: str
    """

    node: Node
    """ Node owning this socket

    :type: Node
    """

    show_expanded: bool
    """ Socket links are expanded in the user interface

    :type: bool
    """

    type: str
    """ Data type

    :type: str
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    def draw(
        self, context: Context, layout: UILayout, node: Node, text: str | typing.Any
    ):
        """Draw socket

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        :param node: Node, Node the socket belongs to
        :type node: Node
        :param text: Text, Text label to draw alongside properties
        :type text: str | typing.Any
        """
        ...

    def draw_color(self, context: Context, node: Node) -> bpy_prop_array[float]:
        """Color of the socket icon

        :param context:
        :type context: Context
        :param node: Node, Node the socket belongs to
        :type node: Node
        :return: Color
        :rtype: bpy_prop_array[float]
        """
        ...

    @classmethod
    def draw_color_simple(cls) -> bpy_prop_array[float]:
        """Color of the socket icon. Used to draw sockets in places where the socket does not belong to a node, like the node interface panel. Also used to draw node sockets if draw_color is not defined

        :return: Color
        :rtype: bpy_prop_array[float]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterface(bpy_struct):
    """Declaration of sockets and ui panels of a node group"""

    active: NodeTreeInterfaceItem | None
    """ Active item

    :type: NodeTreeInterfaceItem | None
    """

    active_index: int | None
    """ Index of the active item

    :type: int | None
    """

    items_tree: bpy_prop_collection[NodeTreeInterfaceItem]
    """ Items in the node interface

    :type: bpy_prop_collection[NodeTreeInterfaceItem]
    """

    def new_socket(
        self,
        name: str | typing.Any,
        description: str | typing.Any = "",
        in_out: str | None = "INPUT",
        socket_type: str | None = "DEFAULT",
        parent: NodeTreeInterfacePanel | None = None,
    ) -> NodeTreeInterfaceSocket:
        """Add a new socket to the interface

                :param name: Name, Name of the socket
                :type name: str | typing.Any
                :param description: Description, Description of the socket
                :type description: str | typing.Any
                :param in_out: Input/Output Type, Create an input or output socket

        INPUT
        Input -- Generate a input node socket.

        OUTPUT
        Output -- Generate a output node socket.
                :type in_out: str | None
                :param socket_type: Socket Type, Type of socket generated on nodes
                :type socket_type: str | None
                :param parent: Parent, Panel to add the socket in
                :type parent: NodeTreeInterfacePanel | None
                :return: Socket, New socket
                :rtype: NodeTreeInterfaceSocket
        """
        ...

    def new_panel(
        self,
        name: str | typing.Any,
        description: str | typing.Any = "",
        default_closed: bool | typing.Any | None = False,
        parent: NodeTreeInterfacePanel | None = None,
    ) -> NodeTreeInterfacePanel:
        """Add a new panel to the interface

        :param name: Name, Name of the new panel
        :type name: str | typing.Any
        :param description: Description, Description of the panel
        :type description: str | typing.Any
        :param default_closed: Default Closed, Panel is closed by default on new nodes
        :type default_closed: bool | typing.Any | None
        :param parent: Parent, Add panel as a child of the parent panel
        :type parent: NodeTreeInterfacePanel | None
        :return: Panel, New panel
        :rtype: NodeTreeInterfacePanel
        """
        ...

    def copy(self, item: NodeTreeInterfaceItem) -> NodeTreeInterfaceItem:
        """Add a copy of an item to the interface

        :param item: Item, Item to copy
        :type item: NodeTreeInterfaceItem
        :return: Item Copy, Copy of the item
        :rtype: NodeTreeInterfaceItem
        """
        ...

    def remove(
        self,
        item: NodeTreeInterfaceItem,
        move_content_to_parent: bool | typing.Any | None = True,
    ):
        """Remove an item from the interface

        :param item: Item, The item to remove
        :type item: NodeTreeInterfaceItem
        :param move_content_to_parent: Move Content, If the item is a panel, move the contents to the parent instead of deleting it
        :type move_content_to_parent: bool | typing.Any | None
        """
        ...

    def clear(self):
        """Remove all items from the interface"""
        ...

    def move(self, item: NodeTreeInterfaceItem, to_position: int | None):
        """Move an item to another position

        :param item: Item, The item to move
        :type item: NodeTreeInterfaceItem
        :param to_position: To Position, Target position for the item in its current panel
        :type to_position: int | None
        """
        ...

    def move_to_parent(
        self,
        item: NodeTreeInterfaceItem,
        parent: NodeTreeInterfacePanel | None,
        to_position: int | None,
    ):
        """Move an item to a new panel and/or position.

        :param item: Item, The item to move
        :type item: NodeTreeInterfaceItem
        :param parent: Parent, New parent of the item
        :type parent: NodeTreeInterfacePanel | None
        :param to_position: To Position, Target position for the item in the new parent panel
        :type to_position: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceItem(bpy_struct):
    """Item in a node tree interface"""

    index: int
    """ Global index of the item among all items in the interface

    :type: int
    """

    item_type: str
    """ Type of interface item

    :type: str
    """

    parent: NodeTreeInterfacePanel
    """ Panel that contains the item

    :type: NodeTreeInterfacePanel
    """

    position: int
    """ Position of the item in its parent panel

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreePath(bpy_struct):
    """Element of the node space tree path"""

    node_tree: NodeTree
    """ Base node tree from context

    :type: NodeTree
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Nodes(bpy_prop_collection[Node], bpy_struct):
    """Collection of Nodes"""

    active: Node | None
    """ Active node in this tree

    :type: Node | None
    """

    def new(self, type: str | typing.Any) -> Node:
        """Add a node to this node tree

        :param type: Type, Type of node to add (Warning: should be same as node.bl_idname, not node.type!)
        :type type: str | typing.Any
        :return: New node
        :rtype: Node
        """
        ...

    def remove(self, node: Node):
        """Remove a node from this node tree

        :param node: The node to remove
        :type node: Node
        """
        ...

    def clear(self):
        """Remove all nodes from this node tree"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodesModifierBake(bpy_struct):
    bake_id: int
    """ Identifier for this bake which remains unchanged even when the bake node is renamed, grouped or ungrouped

    :type: int
    """

    bake_mode: str
    """ 

    :type: str
    """

    data_blocks: NodesModifierBakeDataBlocks
    """ 

    :type: NodesModifierBakeDataBlocks
    """

    directory: str
    """ Location on disk where the bake data is stored

    :type: str
    """

    frame_end: int
    """ Frame where the baking ends

    :type: int
    """

    frame_start: int
    """ Frame where the baking starts

    :type: int
    """

    node: Node
    """ Bake node or simulation output node that corresponds to this bake. This node may be deeply nested in the modifier node group. It can be none in some cases like missing linked data blocks

    :type: Node
    """

    use_custom_path: bool
    """ Specify a path where the baked data should be stored manually

    :type: bool
    """

    use_custom_simulation_frame_range: bool
    """ Override the simulation frame range from the scene

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodesModifierBakeDataBlocks(
    bpy_prop_collection[NodesModifierDataBlock], bpy_struct
):
    """Collection of data-blocks that can be referenced by baked data"""

    active_index: int | None
    """ 

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodesModifierBakes(bpy_prop_collection[NodesModifierBake], bpy_struct):
    """Bake data for every bake node"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodesModifierDataBlock(bpy_struct):
    id: ID
    """ 

    :type: ID
    """

    id_name: str
    """ Name that is mapped to the referenced data-block

    :type: str
    """

    id_type: str
    """ 

    :type: str
    """

    lib_name: str
    """ Used when the data block is not local to the current .blend file but is linked from some library

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodesModifierPanel(bpy_struct):
    is_open: bool
    """ Whether the panel is expanded or closed

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodesModifierPanels(bpy_prop_collection[NodesModifierPanel], bpy_struct):
    """State of all panels defined by the node group"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectBase(bpy_struct):
    """An object instance in a render layer"""

    hide_viewport: bool
    """ Temporarily hide in viewport

    :type: bool
    """

    object: Object
    """ Object this base links to

    :type: Object
    """

    select: bool
    """ Object base selection state

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectConstraints(bpy_prop_collection[Constraint], bpy_struct):
    """Collection of object constraints"""

    active: Constraint | None
    """ Active Object constraint

    :type: Constraint | None
    """

    def new(self, type: str | None) -> Constraint:
        """Add a new constraint to this object

        :param type: Constraint type to add
        :type type: str | None
        :return: New constraint
        :rtype: Constraint
        """
        ...

    def remove(self, constraint: Constraint):
        """Remove a constraint from this object

        :param constraint: Removed constraint
        :type constraint: Constraint
        """
        ...

    def clear(self):
        """Remove all constraint from this object"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a constraint to a different position

        :param from_index: From Index, Index to move
        :type from_index: int | None
        :param to_index: To Index, Target index
        :type to_index: int | None
        """
        ...

    def copy(self, constraint: Constraint) -> Constraint:
        """Add a new constraint that is a copy of the given one

        :param constraint: Constraint to copy - may belong to a different object
        :type constraint: Constraint
        :return: New constraint
        :rtype: Constraint
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectDisplay(bpy_struct):
    """Object display settings for 3D viewport"""

    show_shadows: bool
    """ Object cast shadows in the 3D viewport

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectGpencilModifiers(bpy_prop_collection[GpencilModifier], bpy_struct):
    """Collection of object grease pencil modifiers"""

    def new(self, name: str | typing.Any, type: str | None) -> GpencilModifier:
        """Add a new greasepencil_modifier

        :param name: New name for the greasepencil_modifier
        :type name: str | typing.Any
        :param type: Modifier type to add
        :type type: str | None
        :return: Newly created modifier
        :rtype: GpencilModifier
        """
        ...

    def remove(self, greasepencil_modifier: GpencilModifier):
        """Remove an existing greasepencil_modifier from the object

        :param greasepencil_modifier: Modifier to remove
        :type greasepencil_modifier: GpencilModifier
        """
        ...

    def clear(self):
        """Remove all grease pencil modifiers from the object"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectLightLinking(bpy_struct):
    blocker_collection: Collection
    """ Collection which defines objects which block light from this emitter

    :type: Collection
    """

    receiver_collection: Collection
    """ Collection which defines light linking relation of this emitter

    :type: Collection
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectLineArt(bpy_struct):
    """Object line art settings"""

    crease_threshold: float
    """ Angles smaller than this will be treated as creases

    :type: float
    """

    intersection_priority: int
    """ The intersection line will be included into the object with the higher intersection priority value

    :type: int
    """

    usage: str
    """ How to use this object in line art calculation

    :type: str
    """

    use_crease_override: bool
    """ Use this object's crease setting to overwrite scene global

    :type: bool
    """

    use_intersection_priority_override: bool
    """ Use this object's intersection priority to override collection setting

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectModifiers(bpy_prop_collection[Modifier], bpy_struct):
    """Collection of object modifiers"""

    active: Modifier | None
    """ The active modifier in the list

    :type: Modifier | None
    """

    def new(self, name: str | typing.Any, type: str | None) -> Modifier:
        """Add a new modifier

        :param name: New name for the modifier
        :type name: str | typing.Any
        :param type: Modifier type to add
        :type type: str | None
        :return: Newly created modifier
        :rtype: Modifier
        """
        ...

    def remove(self, modifier: Modifier):
        """Remove an existing modifier from the object

        :param modifier: Modifier to remove
        :type modifier: Modifier
        """
        ...

    def clear(self):
        """Remove all modifiers from the object"""
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a modifier to a different position

        :param from_index: From Index, Index to move
        :type from_index: int | None
        :param to_index: To Index, Target index
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectShaderFx(bpy_prop_collection[ShaderFx], bpy_struct):
    """Collection of object effects"""

    def new(self, name: str | typing.Any, type: str | None) -> ShaderFx:
        """Add a new shader fx

        :param name: New name for the effect
        :type name: str | typing.Any
        :param type: Effect type to add
        :type type: str | None
        :return: Newly created effect
        :rtype: ShaderFx
        """
        ...

    def remove(self, shader_fx: ShaderFx):
        """Remove an existing effect from the object

        :param shader_fx: Effect to remove
        :type shader_fx: ShaderFx
        """
        ...

    def clear(self):
        """Remove all effects from the object"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Operator(bpy_struct):
    """Storage of an operator being executed, or registered after execution"""

    bl_cursor_pending: str
    """ Cursor to use when waiting for the user to select a location to activate the operator (when bl_options has DEPENDS_ON_CURSOR set)

    :type: str
    """

    bl_description: str
    """ 

    :type: str
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_options: typing.Any
    """ Options for this operator type"""

    bl_translation_context: str
    """ 

    :type: str
    """

    bl_undo_group: str
    """ 

    :type: str
    """

    has_reports: bool
    """ Operator has a set of reports (warnings and errors) from last execution

    :type: bool
    """

    layout: UILayout
    """ 

    :type: UILayout
    """

    macros: bpy_prop_collection[Macro]
    """ 

    :type: bpy_prop_collection[Macro]
    """

    name: str
    """ 

    :type: str
    """

    options: OperatorOptions
    """ Runtime options

    :type: OperatorOptions
    """

    properties: OperatorProperties
    """ 

    :type: OperatorProperties
    """

    bl_property: typing.Any
    """ The name of a property to use as this operators primary property.
Currently this is only used to select the default property when
expanding an operator into a menu.
:type: string"""

    is_registered: bool
    """ 

    :type: bool
    """

    def report(self, type, message: str | typing.Any):
        """report

        :param type: Type
        :param message: Report Message
        :type message: str | typing.Any
        """
        ...

    def is_repeat(self) -> bool:
        """is_repeat

        :return: result
        :rtype: bool
        """
        ...

    @classmethod
    def poll(cls, context: Context) -> bool:
        """Test if the operator can be called or not

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """
        ...

    def execute(self, context: Context):
        """Execute the operator

        :param context:
        :type context: Context
        :return: result
        """
        ...

    def check(self, context: Context) -> bool:
        """Check the operator settings, return True to signal a change to redraw

        :param context:
        :type context: Context
        :return: result
        :rtype: bool
        """
        ...

    def invoke(self, context: Context, event: Event):
        """Invoke the operator

        :param context:
        :type context: Context
        :param event:
        :type event: Event
        :return: result
        """
        ...

    def modal(self, context: Context, event: Event):
        """Modal operator function

        :param context:
        :type context: Context
        :param event:
        :type event: Event
        :return: result
        """
        ...

    def draw(self, context: Context):
        """Draw function for the operator

        :param context:
        :type context: Context
        """
        ...

    def cancel(self, context: Context):
        """Called when the operator is canceled

        :param context:
        :type context: Context
        """
        ...

    @classmethod
    def description(cls, context: Context, properties: OperatorProperties) -> str:
        """Compute a description string that depends on parameters

        :param context:
        :type context: Context
        :param properties:
        :type properties: OperatorProperties
        :return: result
        :rtype: str
        """
        ...

    def as_keywords(self, *, ignore=()):
        """Return a copy of the properties as a dictionary

        :param ignore:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def poll_message_set(cls, message: str | None, *args):
        """Set the message to show in the tool-tip when poll fails.When message is callable, additional user defined positional arguments are passed to the message function.

        :param message: The message or a function that returns the message.
        :type message: str | None
        :param args:
        """
        ...

class OperatorMacro(bpy_struct):
    """Storage of a sub operator in a macro after it has been added"""

    properties: OperatorProperties
    """ 

    :type: OperatorProperties
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OperatorOptions(bpy_struct):
    """Runtime options"""

    is_grab_cursor: bool
    """ True when the cursor is grabbed

    :type: bool
    """

    is_invoke: bool
    """ True when invoked (even if only the execute callbacks available)

    :type: bool
    """

    is_repeat: bool
    """ True when run from the 'Adjust Last Operation' panel

    :type: bool
    """

    is_repeat_last: bool
    """ True when run from the operator 'Repeat Last'

    :type: bool
    """

    use_cursor_region: bool
    """ Enable to use the region under the cursor for modal execution

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OperatorProperties(bpy_struct):
    """Input properties of an operator"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PackedFile(bpy_struct):
    """External file packed into the .blend file"""

    data: str
    """ Raw data (bytes, exact content of the embedded file)

    :type: str
    """

    size: int
    """ Size of packed file in bytes

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Paint(bpy_struct):
    brush: Brush
    """ Active Brush

    :type: Brush
    """

    cavity_curve: CurveMapping
    """ Editable cavity curve

    :type: CurveMapping
    """

    palette: Palette
    """ Active Palette

    :type: Palette
    """

    show_brush: bool
    """ 

    :type: bool
    """

    show_brush_on_surface: bool
    """ 

    :type: bool
    """

    show_low_resolution: bool
    """ For multires, show low resolution while navigating the view

    :type: bool
    """

    tile_offset: mathutils.Vector
    """ Stride at which tiled strokes are copied

    :type: mathutils.Vector
    """

    tile_x: bool
    """ Tile along X axis

    :type: bool
    """

    tile_y: bool
    """ Tile along Y axis

    :type: bool
    """

    tile_z: bool
    """ Tile along Z axis

    :type: bool
    """

    tool_slots: bpy_prop_collection[PaintToolSlot]
    """ 

    :type: bpy_prop_collection[PaintToolSlot]
    """

    use_cavity: bool
    """ Mask painting according to mesh geometry cavity

    :type: bool
    """

    use_sculpt_delay_updates: bool
    """ Update the geometry when it enters the view, providing faster view navigation

    :type: bool
    """

    use_symmetry_feather: bool
    """ Reduce the strength of the brush where it overlaps symmetrical daubs

    :type: bool
    """

    use_symmetry_x: bool
    """ Mirror brush across the X axis

    :type: bool
    """

    use_symmetry_y: bool
    """ Mirror brush across the Y axis

    :type: bool
    """

    use_symmetry_z: bool
    """ Mirror brush across the Z axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PaintModeSettings(bpy_struct):
    """Properties of paint mode"""

    canvas_image: Image
    """ Image used as painting target

    :type: Image
    """

    canvas_source: str
    """ Source to select canvas from

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PaintToolSlot(bpy_struct):
    brush: Brush
    """ 

    :type: Brush
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PaletteColor(bpy_struct):
    color: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    strength: float
    """ 

    :type: float
    """

    weight: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PaletteColors(bpy_prop_collection[PaletteColor], bpy_struct):
    """Collection of palette colors"""

    active: PaletteColor | None
    """ 

    :type: PaletteColor | None
    """

    def new(self) -> PaletteColor:
        """Add a new color to the palette

        :return: The newly created color
        :rtype: PaletteColor
        """
        ...

    def remove(self, color: PaletteColor):
        """Remove a color from the palette

        :param color: The color to remove
        :type color: PaletteColor
        """
        ...

    def clear(self):
        """Remove all colors from the palette"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Panel(bpy_struct):
    """Panel containing UI elements"""

    bl_category: str
    """ The category (tab) in which the panel will be displayed, when applicable

    :type: str
    """

    bl_context: str
    """ The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)

    :type: str
    """

    bl_description: str
    """ The panel tooltip

    :type: str
    """

    bl_idname: str
    """ If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is "OBJECT_PT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_PT_hello"

    :type: str
    """

    bl_label: str
    """ The panel label, shows up in the panel header at the right of the triangle used to collapse the panel

    :type: str
    """

    bl_options: set[str]
    """ Options for this panel type

    :type: set[str]
    """

    bl_order: int
    """ Panels with lower numbers are default ordered before panels with higher numbers

    :type: int
    """

    bl_owner_id: str
    """ The ID owning the data displayed in the panel, if any

    :type: str
    """

    bl_parent_id: str
    """ If this is set, the panel becomes a sub-panel

    :type: str
    """

    bl_region_type: str
    """ The region where the panel is going to be used in

    :type: str
    """

    bl_space_type: str
    """ The space where the panel is going to be used in

    :type: str
    """

    bl_translation_context: str | typing.Any
    """ Specific translation context, only define when the label needs to be disambiguated from others using the exact same label

    :type: str | typing.Any
    """

    bl_ui_units_x: int
    """ When set, defines popup panel width

    :type: int
    """

    custom_data: Constraint
    """ Panel data

    :type: Constraint
    """

    is_popover: bool
    """ 

    :type: bool
    """

    layout: UILayout
    """ Defines the structure of the panel in the UI

    :type: UILayout
    """

    text: str
    """ XXX todo

    :type: str
    """

    use_pin: bool
    """ Show the panel on all tabs

    :type: bool
    """

    is_registered: bool
    """ 

    :type: bool
    """

    @classmethod
    def poll(cls, context: Context) -> bool:
        """If this method returns a non-null output, then the panel can be drawn

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """
        ...

    def draw(self, context: Context):
        """Draw UI elements into the panel UI layout

        :param context:
        :type context: Context
        """
        ...

    def draw_header(self, context: Context):
        """Draw UI elements into the panel's header UI layout

        :param context:
        :type context: Context
        """
        ...

    def draw_header_preset(self, context: Context):
        """Draw UI elements for presets in the panel's header

        :param context:
        :type context: Context
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Particle(bpy_struct):
    """Particle in a particle system"""

    alive_state: str
    """ 

    :type: str
    """

    angular_velocity: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    birth_time: float
    """ 

    :type: float
    """

    die_time: float
    """ 

    :type: float
    """

    hair_keys: bpy_prop_collection[ParticleHairKey]
    """ 

    :type: bpy_prop_collection[ParticleHairKey]
    """

    is_exist: bool
    """ 

    :type: bool
    """

    is_visible: bool
    """ 

    :type: bool
    """

    lifetime: float
    """ 

    :type: float
    """

    location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    particle_keys: bpy_prop_collection[ParticleKey]
    """ 

    :type: bpy_prop_collection[ParticleKey]
    """

    prev_angular_velocity: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    prev_location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    prev_rotation: mathutils.Quaternion
    """ 

    :type: mathutils.Quaternion
    """

    prev_velocity: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    rotation: mathutils.Quaternion
    """ 

    :type: mathutils.Quaternion
    """

    size: float
    """ 

    :type: float
    """

    velocity: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    def uv_on_emitter(self, modifier: ParticleSystemModifier) -> mathutils.Vector:
        """Obtain UV coordinates for a particle on an evaluated mesh.

        :param modifier: Particle modifier from an evaluated object
        :type modifier: ParticleSystemModifier
        :return: uv
        :rtype: mathutils.Vector
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleBrush(bpy_struct):
    """Particle editing brush"""

    count: int
    """ Particle count

    :type: int
    """

    curve: CurveMapping
    """ 

    :type: CurveMapping
    """

    length_mode: str
    """ 

    :type: str
    """

    puff_mode: str
    """ 

    :type: str
    """

    size: int
    """ Radius of the brush in pixels

    :type: int
    """

    steps: int
    """ Brush steps

    :type: int
    """

    strength: float
    """ Brush strength

    :type: float
    """

    use_puff_volume: bool
    """ Apply puff to unselected end-points (helps maintain hair volume when puffing root)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleDupliWeight(bpy_struct):
    """Weight of a particle instance object in a collection"""

    count: int
    """ The number of times this object is repeated with respect to other objects

    :type: int
    """

    name: str
    """ Particle instance object name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleEdit(bpy_struct):
    """Properties of particle editing mode"""

    brush: ParticleBrush
    """ 

    :type: ParticleBrush
    """

    default_key_count: int
    """ How many keys to make new particles with

    :type: int
    """

    display_step: int
    """ How many steps to display the path with

    :type: int
    """

    emitter_distance: float
    """ Distance to keep particles away from the emitter

    :type: float
    """

    fade_frames: int
    """ How many frames to fade

    :type: int
    """

    is_editable: bool
    """ A valid edit mode exists

    :type: bool
    """

    is_hair: bool
    """ Editing hair

    :type: bool
    """

    object: Object
    """ The edited object

    :type: Object
    """

    select_mode: str
    """ Particle select and display mode

    :type: str
    """

    shape_object: Object
    """ Outer shape to use for tools

    :type: Object
    """

    show_particles: bool
    """ Display actual particles

    :type: bool
    """

    tool: str
    """ 

    :type: str
    """

    type: str
    """ 

    :type: str
    """

    use_auto_velocity: bool
    """ Calculate point velocities automatically

    :type: bool
    """

    use_default_interpolate: bool
    """ Interpolate new particles from the existing ones

    :type: bool
    """

    use_emitter_deflect: bool
    """ Keep paths from intersecting the emitter

    :type: bool
    """

    use_fade_time: bool
    """ Fade paths and keys further away from current frame

    :type: bool
    """

    use_preserve_length: bool
    """ Keep path lengths constant

    :type: bool
    """

    use_preserve_root: bool
    """ Keep root keys unmodified

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleHairKey(bpy_struct):
    """Particle key for hair particle system"""

    co: mathutils.Vector
    """ Location of the hair key in object space

    :type: mathutils.Vector
    """

    co_local: mathutils.Vector
    """ Location of the hair key in its local coordinate system, relative to the emitting face

    :type: mathutils.Vector
    """

    time: float
    """ Relative time of key over hair length

    :type: float
    """

    weight: float
    """ Weight for cloth simulation

    :type: float
    """

    def co_object(
        self, object: Object, modifier: ParticleSystemModifier, particle: Particle
    ) -> mathutils.Vector:
        """Obtain hairkey location with particle and modifier data

        :param object: Object
        :type object: Object
        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: hair particle
        :type particle: Particle
        :return: Co, Exported hairkey location
        :rtype: mathutils.Vector
        """
        ...

    def co_object_set(
        self,
        object: Object,
        modifier: ParticleSystemModifier,
        particle: Particle,
        co: collections.abc.Sequence[float] | mathutils.Vector | None,
    ):
        """Set hairkey location with particle and modifier data

        :param object: Object
        :type object: Object
        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: hair particle
        :type particle: Particle
        :param co: Co, Specified hairkey location
        :type co: collections.abc.Sequence[float] | mathutils.Vector | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleKey(bpy_struct):
    """Key location for a particle over time"""

    angular_velocity: mathutils.Vector
    """ Key angular velocity

    :type: mathutils.Vector
    """

    location: mathutils.Vector
    """ Key location

    :type: mathutils.Vector
    """

    rotation: mathutils.Quaternion
    """ Key rotation quaternion

    :type: mathutils.Quaternion
    """

    time: float
    """ Time of key over the simulation

    :type: float
    """

    velocity: mathutils.Vector
    """ Key velocity

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleSettingsTextureSlots(
    bpy_prop_collection[ParticleSettingsTextureSlot], bpy_struct
):
    """Collection of texture slots"""

    @classmethod
    def add(cls) -> ParticleSettingsTextureSlot:
        """add

        :return: The newly initialized mtex
        :rtype: ParticleSettingsTextureSlot
        """
        ...

    @classmethod
    def create(cls, index: int | None) -> ParticleSettingsTextureSlot:
        """create

        :param index: Index, Slot index to initialize
        :type index: int | None
        :return: The newly initialized mtex
        :rtype: ParticleSettingsTextureSlot
        """
        ...

    @classmethod
    def clear(cls, index: int | None):
        """clear

        :param index: Index, Slot index to clear
        :type index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleSystem(bpy_struct):
    """Particle system in an object"""

    active_particle_target: ParticleTarget
    """ 

    :type: ParticleTarget
    """

    active_particle_target_index: int | None
    """ 

    :type: int | None
    """

    child_particles: bpy_prop_collection[ChildParticle]
    """ Child particles generated by the particle system

    :type: bpy_prop_collection[ChildParticle]
    """

    child_seed: int
    """ Offset in the random number table for child particles, to get a different randomized result

    :type: int
    """

    cloth: ClothModifier
    """ Cloth dynamics for hair

    :type: ClothModifier
    """

    dt_frac: float
    """ The current simulation time step size, as a fraction of a frame

    :type: float
    """

    has_multiple_caches: bool
    """ Particle system has multiple point caches

    :type: bool
    """

    invert_vertex_group_clump: bool
    """ Negate the effect of the clump vertex group

    :type: bool
    """

    invert_vertex_group_density: bool
    """ Negate the effect of the density vertex group

    :type: bool
    """

    invert_vertex_group_field: bool
    """ Negate the effect of the field vertex group

    :type: bool
    """

    invert_vertex_group_kink: bool
    """ Negate the effect of the kink vertex group

    :type: bool
    """

    invert_vertex_group_length: bool
    """ Negate the effect of the length vertex group

    :type: bool
    """

    invert_vertex_group_rotation: bool
    """ Negate the effect of the rotation vertex group

    :type: bool
    """

    invert_vertex_group_roughness_1: bool
    """ Negate the effect of the roughness 1 vertex group

    :type: bool
    """

    invert_vertex_group_roughness_2: bool
    """ Negate the effect of the roughness 2 vertex group

    :type: bool
    """

    invert_vertex_group_roughness_end: bool
    """ Negate the effect of the roughness end vertex group

    :type: bool
    """

    invert_vertex_group_size: bool
    """ Negate the effect of the size vertex group

    :type: bool
    """

    invert_vertex_group_tangent: bool
    """ Negate the effect of the tangent vertex group

    :type: bool
    """

    invert_vertex_group_twist: bool
    """ Negate the effect of the twist vertex group

    :type: bool
    """

    invert_vertex_group_velocity: bool
    """ Negate the effect of the velocity vertex group

    :type: bool
    """

    is_editable: bool
    """ Particle system can be edited in particle mode

    :type: bool
    """

    is_edited: bool
    """ Particle system has been edited in particle mode

    :type: bool
    """

    is_global_hair: bool
    """ Hair keys are in global coordinate space

    :type: bool
    """

    name: str
    """ Particle system name

    :type: str
    """

    parent: Object
    """ Use this object's coordinate system instead of global coordinate system

    :type: Object
    """

    particles: bpy_prop_collection[Particle]
    """ Particles generated by the particle system

    :type: bpy_prop_collection[Particle]
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    reactor_target_object: Object
    """ For reactor systems, the object that has the target particle system (empty if same object)

    :type: Object
    """

    reactor_target_particle_system: int
    """ For reactor systems, index of particle system on the target object

    :type: int
    """

    seed: int
    """ Offset in the random number table, to get a different randomized result

    :type: int
    """

    settings: ParticleSettings
    """ Particle system settings

    :type: ParticleSettings
    """

    targets: bpy_prop_collection[ParticleTarget]
    """ Target particle systems

    :type: bpy_prop_collection[ParticleTarget]
    """

    use_hair_dynamics: bool
    """ Enable hair dynamics using cloth simulation

    :type: bool
    """

    use_keyed_timing: bool
    """ Use key times

    :type: bool
    """

    vertex_group_clump: str
    """ Vertex group to control clump

    :type: str
    """

    vertex_group_density: str
    """ Vertex group to control density

    :type: str
    """

    vertex_group_field: str
    """ Vertex group to control field

    :type: str
    """

    vertex_group_kink: str
    """ Vertex group to control kink

    :type: str
    """

    vertex_group_length: str
    """ Vertex group to control length

    :type: str
    """

    vertex_group_rotation: str
    """ Vertex group to control rotation

    :type: str
    """

    vertex_group_roughness_1: str
    """ Vertex group to control roughness 1

    :type: str
    """

    vertex_group_roughness_2: str
    """ Vertex group to control roughness 2

    :type: str
    """

    vertex_group_roughness_end: str
    """ Vertex group to control roughness end

    :type: str
    """

    vertex_group_size: str
    """ Vertex group to control size

    :type: str
    """

    vertex_group_tangent: str
    """ Vertex group to control tangent

    :type: str
    """

    vertex_group_twist: str
    """ Vertex group to control twist

    :type: str
    """

    vertex_group_velocity: str
    """ Vertex group to control velocity

    :type: str
    """

    def co_hair(
        self,
        object: Object,
        particle_no: typing.Any | None = 0,
        step: typing.Any | None = 0,
    ) -> mathutils.Vector:
        """Obtain cache hair data

        :param object: Object
        :type object: Object
        :param particle_no: Particle no
        :type particle_no: typing.Any | None
        :param step: step no
        :type step: typing.Any | None
        :return: Co, Exported hairkey location
        :rtype: mathutils.Vector
        """
        ...

    def uv_on_emitter(
        self,
        modifier: ParticleSystemModifier,
        particle: Particle,
        particle_no: typing.Any | None = 0,
        uv_no: typing.Any | None = 0,
    ) -> mathutils.Vector:
        """Obtain uv for all particles

        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: Particle
        :type particle: Particle
        :param particle_no: Particle no
        :type particle_no: typing.Any | None
        :param uv_no: UV no
        :type uv_no: typing.Any | None
        :return: uv
        :rtype: mathutils.Vector
        """
        ...

    def mcol_on_emitter(
        self,
        modifier: ParticleSystemModifier,
        particle: Particle,
        particle_no: typing.Any | None = 0,
        vcol_no: typing.Any | None = 0,
    ) -> mathutils.Color:
        """Obtain mcol for all particles

        :param modifier: Particle modifier
        :type modifier: ParticleSystemModifier
        :param particle: Particle
        :type particle: Particle
        :param particle_no: Particle no
        :type particle_no: typing.Any | None
        :param vcol_no: vcol no
        :type vcol_no: typing.Any | None
        :return: mcol
        :rtype: mathutils.Color
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleSystems(bpy_prop_collection[ParticleSystem], bpy_struct):
    """Collection of particle systems"""

    active: ParticleSystem
    """ Active particle system being displayed

    :type: ParticleSystem
    """

    active_index: int | None
    """ Index of active particle system slot

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleTarget(bpy_struct):
    """Target particle system"""

    alliance: str
    """ 

    :type: str
    """

    duration: float
    """ 

    :type: float
    """

    is_valid: bool
    """ Keyed particles target is valid

    :type: bool
    """

    name: str
    """ Particle target name

    :type: str
    """

    object: Object
    """ The object that has the target particle system (empty if same object)

    :type: Object
    """

    system: int
    """ The index of particle system on the target object

    :type: int
    """

    time: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PathCompare(bpy_struct):
    """Match paths against this value"""

    path: str
    """ 

    :type: str
    """

    use_glob: bool
    """ Enable wildcard globbing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PathCompareCollection(bpy_prop_collection[PathCompare], bpy_struct):
    """Collection of paths"""

    @classmethod
    def new(cls) -> PathCompare:
        """Add a new path

        :return:
        :rtype: PathCompare
        """
        ...

    @classmethod
    def remove(cls, pathcmp: PathCompare):
        """Remove path

        :param pathcmp:
        :type pathcmp: PathCompare
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Point(bpy_struct):
    """Point in a point cloud"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    index: int
    """ Index of this point

    :type: int
    """

    radius: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PointCache(bpy_struct):
    """Active point cache for physics simulations"""

    compression: str
    """ Compression method to be used

    :type: str
    """

    filepath: str
    """ Cache file path

    :type: str
    """

    frame_end: int
    """ Frame on which the simulation stops

    :type: int
    """

    frame_start: int
    """ Frame on which the simulation starts

    :type: int
    """

    frame_step: int
    """ Number of frames between cached frames

    :type: int
    """

    index: int
    """ Index number of cache files

    :type: int
    """

    info: str
    """ Info on current cache status

    :type: str
    """

    is_baked: bool
    """ The cache is baked

    :type: bool
    """

    is_baking: bool
    """ The cache is being baked

    :type: bool
    """

    is_frame_skip: bool
    """ Some frames were skipped while baking/saving that cache

    :type: bool
    """

    is_outdated: bool
    """ 

    :type: bool
    """

    name: str
    """ Cache name

    :type: str
    """

    point_caches: PointCaches
    """ 

    :type: PointCaches
    """

    use_disk_cache: bool
    """ Save cache files to disk (.blend file must be saved first)

    :type: bool
    """

    use_external: bool
    """ Read cache from an external location

    :type: bool
    """

    use_library_path: bool
    """ Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PointCacheItem(bpy_struct):
    """Point cache for physics simulations"""

    compression: str
    """ Compression method to be used

    :type: str
    """

    filepath: str
    """ Cache file path

    :type: str
    """

    frame_end: int
    """ Frame on which the simulation stops

    :type: int
    """

    frame_start: int
    """ Frame on which the simulation starts

    :type: int
    """

    frame_step: int
    """ Number of frames between cached frames

    :type: int
    """

    index: int
    """ Index number of cache files

    :type: int
    """

    info: str
    """ Info on current cache status

    :type: str
    """

    is_baked: bool
    """ The cache is baked

    :type: bool
    """

    is_baking: bool
    """ The cache is being baked

    :type: bool
    """

    is_frame_skip: bool
    """ Some frames were skipped while baking/saving that cache

    :type: bool
    """

    is_outdated: bool
    """ 

    :type: bool
    """

    name: str
    """ Cache name

    :type: str
    """

    use_disk_cache: bool
    """ Save cache files to disk (.blend file must be saved first)

    :type: bool
    """

    use_external: bool
    """ Read cache from an external location

    :type: bool
    """

    use_library_path: bool
    """ Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PointCaches(bpy_prop_collection[PointCacheItem], bpy_struct):
    """Collection of point caches"""

    active_index: int | None
    """ 

    :type: int | None
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Pose(bpy_struct):
    """A collection of pose channels, including settings for animating bones"""

    animation_visualization: AnimViz
    """ Animation data for this data-block

    :type: AnimViz
    """

    bones: bpy_prop_collection[PoseBone]
    """ Individual pose bones for the armature

    :type: bpy_prop_collection[PoseBone]
    """

    ik_param: IKParam
    """ Parameters for IK solver

    :type: IKParam
    """

    ik_solver: str
    """ Selection of IK solver for IK chain

    :type: str
    """

    use_auto_ik: bool
    """ Add temporary IK constraints while grabbing bones in Pose Mode

    :type: bool
    """

    use_mirror_relative: bool
    """ Apply relative transformations in X-mirror mode (not supported with Auto IK)

    :type: bool
    """

    use_mirror_x: bool
    """ Apply changes to matching bone on opposite side of X-Axis

    :type: bool
    """

    @classmethod
    def apply_pose_from_action(
        cls, action: Action | None, evaluation_time: typing.Any | None = 0.0
    ):
        """Apply the given action to this pose by evaluating it at a specific time. Only updates the pose of selected bones, or all bones if none are selected.

        :param action: Action, The Action containing the pose
        :type action: Action | None
        :param evaluation_time: Evaluation Time, Time at which the given action is evaluated to obtain the pose
        :type evaluation_time: typing.Any | None
        """
        ...

    @classmethod
    def blend_pose_from_action(
        cls,
        action: Action | None,
        blend_factor: typing.Any | None = 1.0,
        evaluation_time: typing.Any | None = 0.0,
    ):
        """Blend the given action into this pose by evaluating it at a specific time. Only updates the pose of selected bones, or all bones if none are selected.

        :param action: Action, The Action containing the pose
        :type action: Action | None
        :param blend_factor: Blend Factor, How much the given Action affects the final pose
        :type blend_factor: typing.Any | None
        :param evaluation_time: Evaluation Time, Time at which the given action is evaluated to obtain the pose
        :type evaluation_time: typing.Any | None
        """
        ...

    @classmethod
    def backup_create(cls, action: Action | None):
        """Create a backup of the current pose. Only those bones that are animated in the Action are backed up. The object owns the backup, and each object can have only one backup at a time. When you no longer need it, it must be freed use backup_clear()

        :param action: Action, An Action with animation data for the bones. Only the animated bones will be included in the backup
        :type action: Action | None
        """
        ...

    @classmethod
    def backup_restore(cls) -> bool:
        """Restore the previously made pose backup. This can be called multiple times. See Pose.backup_create() for more info

        :return: True when the backup was restored, False if there was no backup to restore
        :rtype: bool
        """
        ...

    @classmethod
    def backup_clear(cls):
        """Free a previously made pose backup. See Pose.backup_create() for more info."""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PoseBone(bpy_struct):
    """Channel defining pose data for a bone in a Pose"""

    bbone_curveinx: float
    """ X-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveinz: float
    """ Z-axis handle offset for start of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutx: float
    """ X-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_curveoutz: float
    """ Z-axis handle offset for end of the B-Bone's curve, adjusts curvature

    :type: float
    """

    bbone_custom_handle_end: PoseBone
    """ Bone that serves as the end handle for the B-Bone curve

    :type: PoseBone
    """

    bbone_custom_handle_start: PoseBone
    """ Bone that serves as the start handle for the B-Bone curve

    :type: PoseBone
    """

    bbone_easein: float
    """ Length of first Bézier Handle (for B-Bones only)

    :type: float
    """

    bbone_easeout: float
    """ Length of second Bézier Handle (for B-Bones only)

    :type: float
    """

    bbone_rollin: float
    """ Roll offset for the start of the B-Bone, adjusts twist

    :type: float
    """

    bbone_rollout: float
    """ Roll offset for the end of the B-Bone, adjusts twist

    :type: float
    """

    bbone_scalein: mathutils.Vector
    """ Scale factors for the start of the B-Bone, adjusts thickness (for tapering effects)

    :type: mathutils.Vector
    """

    bbone_scaleout: mathutils.Vector
    """ Scale factors for the end of the B-Bone, adjusts thickness (for tapering effects)

    :type: mathutils.Vector
    """

    bone: Bone
    """ Bone associated with this PoseBone

    :type: Bone
    """

    child: PoseBone
    """ Child of this pose bone

    :type: PoseBone
    """

    color: BoneColor
    """ 

    :type: BoneColor
    """

    constraints: PoseBoneConstraints
    """ Constraints that act on this pose channel

    :type: PoseBoneConstraints
    """

    custom_shape: Object
    """ Object that defines custom display shape for this bone

    :type: Object
    """

    custom_shape_rotation_euler: mathutils.Euler
    """ Adjust the rotation of the custom shape

    :type: mathutils.Euler
    """

    custom_shape_scale_xyz: mathutils.Vector
    """ Adjust the size of the custom shape

    :type: mathutils.Vector
    """

    custom_shape_transform: PoseBone
    """ Bone that defines the display transform of this custom shape

    :type: PoseBone
    """

    custom_shape_translation: mathutils.Vector
    """ Adjust the location of the custom shape

    :type: mathutils.Vector
    """

    head: mathutils.Vector
    """ Location of head of the channel's bone

    :type: mathutils.Vector
    """

    ik_linear_weight: float
    """ Weight of scale constraint for IK

    :type: float
    """

    ik_max_x: float
    """ Maximum angles for IK Limit

    :type: float
    """

    ik_max_y: float
    """ Maximum angles for IK Limit

    :type: float
    """

    ik_max_z: float
    """ Maximum angles for IK Limit

    :type: float
    """

    ik_min_x: float
    """ Minimum angles for IK Limit

    :type: float
    """

    ik_min_y: float
    """ Minimum angles for IK Limit

    :type: float
    """

    ik_min_z: float
    """ Minimum angles for IK Limit

    :type: float
    """

    ik_rotation_weight: float
    """ Weight of rotation constraint for IK

    :type: float
    """

    ik_stiffness_x: float
    """ IK stiffness around the X axis

    :type: float
    """

    ik_stiffness_y: float
    """ IK stiffness around the Y axis

    :type: float
    """

    ik_stiffness_z: float
    """ IK stiffness around the Z axis

    :type: float
    """

    ik_stretch: float
    """ Allow scaling of the bone for IK

    :type: float
    """

    is_in_ik_chain: bool
    """ Is part of an IK chain

    :type: bool
    """

    length: float
    """ Length of the bone

    :type: float
    """

    location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    lock_ik_x: bool
    """ Disallow movement around the X axis

    :type: bool
    """

    lock_ik_y: bool
    """ Disallow movement around the Y axis

    :type: bool
    """

    lock_ik_z: bool
    """ Disallow movement around the Z axis

    :type: bool
    """

    lock_location: list[bool]
    """ Lock editing of location when transforming

    :type: list[bool]
    """

    lock_rotation: list[bool]
    """ Lock editing of rotation when transforming

    :type: list[bool]
    """

    lock_rotation_w: bool
    """ Lock editing of 'angle' component of four-component rotations when transforming

    :type: bool
    """

    lock_rotations_4d: bool
    """ Lock editing of four component rotations by components (instead of as Eulers)

    :type: bool
    """

    lock_scale: list[bool]
    """ Lock editing of scale when transforming

    :type: list[bool]
    """

    matrix: mathutils.Matrix
    """ Final 4×4 matrix after constraints and drivers are applied, in the armature object space

    :type: mathutils.Matrix
    """

    matrix_basis: mathutils.Matrix
    """ Alternative access to location/scale/rotation relative to the parent and own rest bone

    :type: mathutils.Matrix
    """

    matrix_channel: mathutils.Matrix
    """ 4×4 matrix of the bone's location/rotation/scale channels (including animation and drivers) and the effect of bone constraints

    :type: mathutils.Matrix
    """

    motion_path: MotionPath
    """ Motion Path for this element

    :type: MotionPath
    """

    name: str
    """ 

    :type: str
    """

    parent: PoseBone
    """ Parent of this pose bone

    :type: PoseBone
    """

    rotation_axis_angle: bpy_prop_array[float]
    """ Angle of Rotation for Axis-Angle rotation representation

    :type: bpy_prop_array[float]
    """

    rotation_euler: mathutils.Euler
    """ Rotation in Eulers

    :type: mathutils.Euler
    """

    rotation_mode: str
    """ 

    :type: str
    """

    rotation_quaternion: mathutils.Quaternion
    """ Rotation in Quaternions

    :type: mathutils.Quaternion
    """

    scale: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    tail: mathutils.Vector
    """ Location of tail of the channel's bone

    :type: mathutils.Vector
    """

    use_custom_shape_bone_size: bool
    """ Scale the custom object by the bone length

    :type: bool
    """

    use_ik_limit_x: bool
    """ Limit movement around the X axis

    :type: bool
    """

    use_ik_limit_y: bool
    """ Limit movement around the Y axis

    :type: bool
    """

    use_ik_limit_z: bool
    """ Limit movement around the Z axis

    :type: bool
    """

    use_ik_linear_control: bool
    """ Apply channel size as IK constraint if stretching is enabled

    :type: bool
    """

    use_ik_rotation_control: bool
    """ Apply channel rotation as IK constraint

    :type: bool
    """

    basename: typing.Any
    """ The name of this bone before any '.' character(readonly)"""

    center: typing.Any
    """ The midpoint between the head and the tail.(readonly)"""

    children: typing.Any
    """ (readonly)"""

    children_recursive: typing.Any
    """ A list of all children from this bone.(readonly)"""

    children_recursive_basename: typing.Any
    """ Returns a chain of children with the same base name as this bone.
Only direct chains are supported, forks caused by multiple children
with matching base names will terminate the function
and not be returned.(readonly)"""

    parent_recursive: typing.Any
    """ A list of parents, starting with the immediate parent(readonly)"""

    vector: typing.Any
    """ The direction this bone is pointing.
Utility function for (tail - head)(readonly)"""

    x_axis: typing.Any
    """ Vector pointing down the x-axis of the bone.(readonly)"""

    y_axis: typing.Any
    """ Vector pointing down the y-axis of the bone.(readonly)"""

    z_axis: typing.Any
    """ Vector pointing down the z-axis of the bone.(readonly)"""

    def evaluate_envelope(
        self, point: collections.abc.Sequence[float] | mathutils.Vector | None
    ) -> float:
        """Calculate bone envelope at given point

        :param point: Point, Position in 3d space to evaluate
        :type point: collections.abc.Sequence[float] | mathutils.Vector | None
        :return: Factor, Envelope factor
        :rtype: float
        """
        ...

    def bbone_segment_index(
        self, point: collections.abc.Sequence[float] | mathutils.Vector | None
    ):
        """Retrieve the index and blend factor of the B-Bone segments based on vertex position

                :param point: Point, Vertex position in armature pose space
                :type point: collections.abc.Sequence[float] | mathutils.Vector | None
                :return: index, The index of the first segment joint affecting the point, int in [-inf, inf]

        blend_next, The blend factor between the given and the following joint, float in [-inf, inf]
        """
        ...

    def bbone_segment_matrix(
        self, index: int | None, rest: bool | typing.Any | None = False
    ) -> mathutils.Matrix:
        """Retrieve the matrix of the joint between B-Bone segments if availableThis example shows how to use B-Bone segment matrices to emulate deformation
        produced by the Armature modifier or constraint when assigned to the given bone
        (without Preserve Volume). The coordinates are processed in armature Pose space:

                :param index: Index of the segment endpoint
                :type index: int | None
                :param rest: Return the rest pose matrix
                :type rest: bool | typing.Any | None
                :return: The resulting matrix in bone local space
                :rtype: mathutils.Matrix
        """
        ...

    def compute_bbone_handles(
        self,
        rest: bool | typing.Any | None = False,
        ease: bool | typing.Any | None = False,
        offsets: bool | typing.Any | None = False,
    ):
        """Retrieve the vectors and rolls coming from B-Bone custom handles

                :param rest: Return the rest pose state
                :type rest: bool | typing.Any | None
                :param ease: Apply scale from ease values
                :type ease: bool | typing.Any | None
                :param offsets: Apply roll and curve offsets from bone properties
                :type offsets: bool | typing.Any | None
                :return: handle1, The direction vector of the start handle in bone local space, `mathutils.Vector` of 3 items in [-inf, inf]

        roll1, Roll of the start handle, float in [-inf, inf]

        handle2, The direction vector of the end handle in bone local space, `mathutils.Vector` of 3 items in [-inf, inf]

        roll2, Roll of the end handle, float in [-inf, inf]
        """
        ...

    def parent_index(self, parent_test):
        """The same as 'bone in other_bone.parent_recursive'
        but saved generating a list.

                :param parent_test:
        """
        ...

    def translate(self, vec):
        """Utility function to add vec to the head and tail of this bone

        :param vec:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PoseBoneConstraints(bpy_prop_collection[Constraint], bpy_struct):
    """Collection of pose bone constraints"""

    active: Constraint | None
    """ Active PoseChannel constraint

    :type: Constraint | None
    """

    def new(self, type: str | None) -> Constraint:
        """Add a constraint to this object

        :param type: Constraint type to add
        :type type: str | None
        :return: New constraint
        :rtype: Constraint
        """
        ...

    def remove(self, constraint: Constraint):
        """Remove a constraint from this object

        :param constraint: Removed constraint
        :type constraint: Constraint
        """
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a constraint to a different position

        :param from_index: From Index, Index to move
        :type from_index: int | None
        :param to_index: To Index, Target index
        :type to_index: int | None
        """
        ...

    def copy(self, constraint: Constraint) -> Constraint:
        """Add a new constraint that is a copy of the given one

        :param constraint: Constraint to copy - may belong to a different object
        :type constraint: Constraint
        :return: New constraint
        :rtype: Constraint
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Preferences(bpy_struct):
    """Global preferences"""

    active_section: str | None
    """ Active section of the preferences shown in the user interface

    :type: str | None
    """

    addons: Addons
    """ 

    :type: Addons
    """

    app_template: str
    """ 

    :type: str
    """

    apps: PreferencesApps
    """ Preferences that work only for apps

    :type: PreferencesApps
    """

    autoexec_paths: PathCompareCollection
    """ 

    :type: PathCompareCollection
    """

    edit: PreferencesEdit
    """ Settings for interacting with Blender data

    :type: PreferencesEdit
    """

    experimental: PreferencesExperimental
    """ Settings for features that are still early in their development stage

    :type: PreferencesExperimental
    """

    filepaths: PreferencesFilePaths
    """ Default paths for external files

    :type: PreferencesFilePaths
    """

    inputs: PreferencesInput
    """ Settings for input devices

    :type: PreferencesInput
    """

    is_dirty: bool
    """ Preferences have changed

    :type: bool
    """

    keymap: PreferencesKeymap
    """ Shortcut setup for keyboards and other input devices

    :type: PreferencesKeymap
    """

    studio_lights: StudioLights
    """ 

    :type: StudioLights
    """

    system: PreferencesSystem
    """ Graphics driver and operating system settings

    :type: PreferencesSystem
    """

    themes: bpy_prop_collection[Theme]
    """ 

    :type: bpy_prop_collection[Theme]
    """

    ui_styles: bpy_prop_collection[ThemeStyle]
    """ 

    :type: bpy_prop_collection[ThemeStyle]
    """

    use_preferences_save: bool
    """ Save preferences on exit when modified (unless factory settings have been loaded)

    :type: bool
    """

    use_recent_searches: bool
    """ Sort the recently searched items at the top

    :type: bool
    """

    version: bpy_prop_array[int]
    """ Version of Blender the userpref.blend was saved with

    :type: bpy_prop_array[int]
    """

    view: PreferencesView
    """ Preferences related to viewing data

    :type: PreferencesView
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesApps(bpy_struct):
    """Preferences that work only for apps"""

    show_corner_split: bool
    """ Split and join editors by dragging from corners

    :type: bool
    """

    show_edge_resize: bool
    """ Resize editors by dragging from the edges

    :type: bool
    """

    show_regions_visibility_toggle: bool
    """ Header and side bars visibility toggles

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesEdit(bpy_struct):
    """Settings for interacting with Blender data"""

    auto_keying_mode: str
    """ Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)

    :type: str
    """

    collection_instance_empty_size: float
    """ Display size of the empty when new collection instances are created

    :type: float
    """

    fcurve_new_auto_smoothing: str
    """ Auto Handle Smoothing mode used for newly added F-Curves

    :type: str
    """

    fcurve_unselected_alpha: float
    """ The opacity of unselected F-Curves against the background of the Graph Editor

    :type: float
    """

    grease_pencil_default_color: bpy_prop_array[float]
    """ Color of new annotation layers

    :type: bpy_prop_array[float]
    """

    grease_pencil_eraser_radius: int
    """ Radius of eraser 'brush'

    :type: int
    """

    grease_pencil_euclidean_distance: int
    """ Distance moved by mouse when drawing stroke to include

    :type: int
    """

    grease_pencil_manhattan_distance: int
    """ Pixels moved by mouse per axis when drawing stroke

    :type: int
    """

    key_insert_channels: set[str]
    """ Which channels to insert keys at when no keying set is active

    :type: set[str]
    """

    keyframe_new_handle_type: str
    """ Handle type for handles of new keyframes

    :type: str
    """

    keyframe_new_interpolation_type: str
    """ Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)

    :type: str
    """

    material_link: str
    """ Toggle whether the material is linked to object data or the object block

    :type: str
    """

    node_margin: int
    """ Minimum distance between nodes for Auto-offsetting nodes

    :type: int
    """

    node_preview_resolution: int
    """ Resolution used for Shader node previews (should be changed for performance convenience)

    :type: int
    """

    node_use_insert_offset: bool
    """ Automatically offset the following or previous nodes in a chain when inserting a new node

    :type: bool
    """

    object_align: str
    """ The default alignment for objects added from a 3D viewport menu

    :type: str
    """

    sculpt_paint_overlay_color: mathutils.Color
    """ Color of texture overlay

    :type: mathutils.Color
    """

    show_only_selected_curve_keyframes: bool
    """ Only keyframes of selected F-Curves are visible and editable

    :type: bool
    """

    undo_memory_limit: int
    """ Maximum memory usage in megabytes (0 means unlimited)

    :type: int
    """

    undo_steps: int
    """ Number of undo steps available (smaller values conserve memory)

    :type: int
    """

    use_anim_channel_group_colors: bool
    """ Use animation channel group colors; generally this is used to show bone group colors

    :type: bool
    """

    use_auto_keyframe_insert_needed: bool
    """ Auto-Keying will skip inserting keys that don't affect the animation

    :type: bool
    """

    use_auto_keying: bool
    """ Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)

    :type: bool
    """

    use_auto_keying_warning: bool
    """ Show warning indicators when transforming objects and bones if auto keying is enabled

    :type: bool
    """

    use_cursor_lock_adjust: bool
    """ Place the cursor without 'jumping' to the new location (when lock-to-cursor is used)

    :type: bool
    """

    use_duplicate_action: bool
    """ Causes actions to be duplicated with the data-blocks

    :type: bool
    """

    use_duplicate_armature: bool
    """ Causes armature data to be duplicated with the object

    :type: bool
    """

    use_duplicate_camera: bool
    """ Causes camera data to be duplicated with the object

    :type: bool
    """

    use_duplicate_curve: bool
    """ Causes curve data to be duplicated with the object

    :type: bool
    """

    use_duplicate_curves: bool
    """ Causes curves data to be duplicated with the object

    :type: bool
    """

    use_duplicate_grease_pencil: bool
    """ Causes grease pencil data to be duplicated with the object

    :type: bool
    """

    use_duplicate_lattice: bool
    """ Causes lattice data to be duplicated with the object

    :type: bool
    """

    use_duplicate_light: bool
    """ Causes light data to be duplicated with the object

    :type: bool
    """

    use_duplicate_lightprobe: bool
    """ Causes light probe data to be duplicated with the object

    :type: bool
    """

    use_duplicate_material: bool
    """ Causes material data to be duplicated with the object

    :type: bool
    """

    use_duplicate_mesh: bool
    """ Causes mesh data to be duplicated with the object

    :type: bool
    """

    use_duplicate_metaball: bool
    """ Causes metaball data to be duplicated with the object

    :type: bool
    """

    use_duplicate_node_tree: bool
    """ Make copies of node groups when duplicating nodes in the node editor

    :type: bool
    """

    use_duplicate_particle: bool
    """ Causes particle systems to be duplicated with the object

    :type: bool
    """

    use_duplicate_pointcloud: bool
    """ Causes point cloud data to be duplicated with the object

    :type: bool
    """

    use_duplicate_speaker: bool
    """ Causes speaker data to be duplicated with the object

    :type: bool
    """

    use_duplicate_surface: bool
    """ Causes surface data to be duplicated with the object

    :type: bool
    """

    use_duplicate_text: bool
    """ Causes text data to be duplicated with the object

    :type: bool
    """

    use_duplicate_volume: bool
    """ Causes volume data to be duplicated with the object

    :type: bool
    """

    use_enter_edit_mode: bool
    """ Enter edit mode automatically after adding a new object

    :type: bool
    """

    use_fcurve_high_quality_drawing: bool
    """ Draw F-Curves using Anti-Aliasing (disable for better performance)

    :type: bool
    """

    use_global_undo: bool
    """ Global undo works by keeping a full copy of the file itself in memory, so takes extra memory

    :type: bool
    """

    use_insertkey_xyz_to_rgb: bool
    """ Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis

    :type: bool
    """

    use_keyframe_insert_available: bool
    """ Insert Keyframes only for properties that are already animated

    :type: bool
    """

    use_keyframe_insert_needed: bool
    """ When keying manually, skip inserting keys that don't affect the animation

    :type: bool
    """

    use_mouse_depth_cursor: bool
    """ Use the surface depth for cursor placement

    :type: bool
    """

    use_negative_frames: bool
    """ Current frame number can be manually set to a negative value

    :type: bool
    """

    use_text_edit_auto_close: bool
    """ Automatically close relevant character pairs when typing in the text editor

    :type: bool
    """

    use_visual_keying: bool
    """ Use Visual keying automatically for constrained objects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesExperimental(bpy_struct):
    """Experimental features"""

    enable_overlay_next: bool
    """ Enable the new Overlay codebase, requires restart

    :type: bool
    """

    override_auto_resync: bool
    """ Disable library overrides automatic resync detection and process on file load (can be useful to help fixing broken files)

    :type: bool
    """

    show_asset_debug_info: bool
    """ Enable some extra fields in the Asset Browser to aid in debugging

    :type: bool
    """

    use_all_linked_data_direct: bool
    """ Forces all linked data to be considered as directly linked. Workaround for current issues/limitations in BAT (Blender studio pipeline tool)

    :type: bool
    """

    use_asset_indexing: bool
    """ Disable the asset indexer, to force every asset library refresh to completely reread assets from disk

    :type: bool
    """

    use_cycles_debug: bool
    """ Enable Cycles debugging options for developers

    :type: bool
    """

    use_eevee_debug: bool
    """ Enable EEVEE debugging options for developers

    :type: bool
    """

    use_experimental_compositors: bool
    """ Enable compositor full frame and realtime GPU execution mode options (no tiling, reduces execution time and memory usage)

    :type: bool
    """

    use_extended_asset_browser: bool
    """ Enable Asset Browser editor and operators to manage regular data-blocks as assets, not just poses

    :type: bool
    """

    use_extension_repos: bool
    """ Enables extension repositories, accessible from the "Extension Repositories" panel in the "File Paths" section of the preferences. These paths are exposed as add-ons, package management is not yet integrated

    :type: bool
    """

    use_grease_pencil_version3: bool
    """ Enable the new grease pencil 3.0 codebase

    :type: bool
    """

    use_new_curves_tools: bool
    """ Enable additional features for the new curves data block

    :type: bool
    """

    use_new_point_cloud_type: bool
    """ Enable the new point cloud type in the ui

    :type: bool
    """

    use_new_volume_nodes: bool
    """ Enables visibility of the new Volume nodes in the UI

    :type: bool
    """

    use_sculpt_texture_paint: bool
    """ Use texture painting in Sculpt Mode

    :type: bool
    """

    use_sculpt_tools_tilt: bool
    """ Support for pen tablet tilt events in Sculpt Mode

    :type: bool
    """

    use_shader_node_previews: bool
    """ Enables previews in the shader node editor

    :type: bool
    """

    use_undo_legacy: bool
    """ Use legacy undo (slower than the new default one, but may be more stable in some cases)

    :type: bool
    """

    use_viewport_debug: bool
    """ Enable viewport debugging options for developers in the overlays pop-over

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesFilePaths(bpy_struct):
    """Default paths for external files"""

    active_asset_library: int | None
    """ Index of the asset library being edited in the Preferences UI

    :type: int | None
    """

    active_extension_repo: int | None
    """ Index of the extensions repository being edited in the Preferences UI

    :type: int | None
    """

    animation_player: str
    """ Path to a custom animation/frame sequence player

    :type: str
    """

    animation_player_preset: str
    """ Preset configs for external animation players

    :type: str
    """

    asset_libraries: AssetLibraryCollection
    """ 

    :type: AssetLibraryCollection
    """

    auto_save_time: int
    """ The time (in minutes) to wait between automatic temporary saves

    :type: int
    """

    extension_repos: UserExtensionRepoCollection
    """ 

    :type: UserExtensionRepoCollection
    """

    file_preview_type: str
    """ What type of blend preview to create

    :type: str
    """

    font_directory: str
    """ The default directory to search for loading fonts

    :type: str
    """

    i18n_branches_directory: str
    """ The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI

    :type: str
    """

    image_editor: str
    """ Path to an image editor

    :type: str
    """

    recent_files: int
    """ Maximum number of recently opened files to remember

    :type: int
    """

    render_cache_directory: str
    """ Where to cache raw render results

    :type: str
    """

    render_output_directory: str
    """ The default directory for rendering output, for new scenes

    :type: str
    """

    save_version: int
    """ The number of old versions to maintain in the current directory, when manually saving

    :type: int
    """

    script_directories: ScriptDirectoryCollection
    """ 

    :type: ScriptDirectoryCollection
    """

    show_hidden_files_datablocks: bool
    """ Show files and data-blocks that are normally hidden

    :type: bool
    """

    show_recent_locations: bool
    """ Show Recent locations list in the File Browser

    :type: bool
    """

    show_system_bookmarks: bool
    """ Show System locations list in the File Browser

    :type: bool
    """

    sound_directory: str
    """ The default directory to search for sounds

    :type: str
    """

    temporary_directory: str
    """ The directory for storing temporary save files. The path must reference an existing directory or it will be ignored

    :type: str
    """

    text_editor: str
    """ Command to launch the text editor, either a full path or a command in $PATH.
Use the internal editor when left blank

    :type: str
    """

    text_editor_args: str
    """ Defines the specific format of the arguments with which the text editor opens files. The supported expansions are as follows:$filepath The absolute path of the file.
$line The line to open at (Optional).
$column The column to open from the beginning of the line (Optional).
$line0 & column0 start at zero.
Example: -f $filepath -l $line -c $column

    :type: str
    """

    texture_directory: str
    """ The default directory to search for textures

    :type: str
    """

    use_auto_save_temporary_files: bool
    """ Automatic saving of temporary files in temp directory, uses process ID.
Warning: Sculpt and edit mode data won't be saved

    :type: bool
    """

    use_file_compression: bool
    """ Enable file compression when saving .blend files

    :type: bool
    """

    use_filter_files: bool
    """ Enable filtering of files in the File Browser

    :type: bool
    """

    use_load_ui: bool
    """ Load user interface setup when loading .blend files

    :type: bool
    """

    use_relative_paths: bool
    """ Default relative path option for the file selector, when no path is defined yet

    :type: bool
    """

    use_scripts_auto_execute: bool
    """ Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)

    :type: bool
    """

    use_tabs_as_spaces: bool
    """ Automatically convert all new tabs into spaces for new and loaded text files

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesInput(bpy_struct):
    """Settings for input devices"""

    drag_threshold: int
    """ Number of pixels to drag before a drag event is triggered for keyboard and other non mouse/tablet input (otherwise click events are detected)

    :type: int
    """

    drag_threshold_mouse: int
    """ Number of pixels to drag before a drag event is triggered for mouse/trackpad input (otherwise click events are detected)

    :type: int
    """

    drag_threshold_tablet: int
    """ Number of pixels to drag before a drag event is triggered for tablet input (otherwise click events are detected)

    :type: int
    """

    invert_mouse_zoom: bool
    """ Invert the axis of mouse movement for zooming

    :type: bool
    """

    invert_zoom_wheel: bool
    """ Swap the Mouse Wheel zoom direction

    :type: bool
    """

    mouse_double_click_time: int
    """ Time/delay (in ms) for a double click

    :type: int
    """

    mouse_emulate_3_button_modifier: str
    """ Hold this modifier to emulate the middle mouse button

    :type: str
    """

    move_threshold: int
    """ Number of pixels to before the cursor is considered to have moved (used for cycling selected items on successive clicks)

    :type: int
    """

    navigation_mode: str
    """ Which method to use for viewport navigation

    :type: str
    """

    ndof_deadzone: float
    """ Threshold of initial movement needed from the device's rest position

    :type: float
    """

    ndof_fly_helicopter: bool
    """ Device up/down directly controls the Z position of the 3D viewport

    :type: bool
    """

    ndof_lock_camera_pan_zoom: bool
    """ Pan/zoom the camera view instead of leaving the camera view when orbiting

    :type: bool
    """

    ndof_lock_horizon: bool
    """ Keep horizon level while flying with 3D Mouse

    :type: bool
    """

    ndof_orbit_sensitivity: float
    """ Overall sensitivity of the 3D Mouse for orbiting

    :type: float
    """

    ndof_pan_yz_swap_axis: bool
    """ Pan using up/down on the device (otherwise forward/backward)

    :type: bool
    """

    ndof_panx_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_pany_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_panz_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_rotx_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_roty_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_rotz_invert_axis: bool
    """ 

    :type: bool
    """

    ndof_sensitivity: float
    """ Overall sensitivity of the 3D Mouse for panning

    :type: float
    """

    ndof_show_guide: bool
    """ Display the center and axis during rotation

    :type: bool
    """

    ndof_view_navigate_method: str
    """ Navigation style in the viewport

    :type: str
    """

    ndof_view_rotate_method: str
    """ Rotation style in the viewport

    :type: str
    """

    ndof_zoom_invert: bool
    """ Zoom using opposite direction

    :type: bool
    """

    pressure_softness: float
    """ Adjusts softness of the low pressure response onset using a gamma curve

    :type: float
    """

    pressure_threshold_max: float
    """ Raw input pressure value that is interpreted as 100% by Blender

    :type: float
    """

    tablet_api: str
    """ Select the tablet API to use for pressure sensitivity (may require restarting Blender for changes to take effect)

    :type: str
    """

    use_auto_perspective: bool
    """ Automatically switch between orthographic and perspective when changing from top/front/side views

    :type: bool
    """

    use_drag_immediately: bool
    """ Moving things with a mouse drag confirms when releasing the button

    :type: bool
    """

    use_emulate_numpad: bool
    """ Main 1 to 0 keys act as the numpad ones (useful for laptops)

    :type: bool
    """

    use_mouse_continuous: bool
    """ Let the mouse wrap around the view boundaries so mouse movements are not limited by the screen size (used by transform, dragging of UI controls, etc.)

    :type: bool
    """

    use_mouse_depth_navigate: bool
    """ Use the depth under the mouse to improve view pan/rotate/zoom functionality

    :type: bool
    """

    use_mouse_emulate_3_button: bool
    """ Emulate Middle Mouse with Alt+Left Mouse

    :type: bool
    """

    use_multitouch_gestures: bool
    """ Use multi-touch gestures for navigation with touchpad, instead of scroll wheel emulation

    :type: bool
    """

    use_ndof: bool
    """ 

    :type: bool
    """

    use_numeric_input_advanced: bool
    """ When entering numbers while transforming, default to advanced mode for full math expression evaluation

    :type: bool
    """

    use_rotate_around_active: bool
    """ Use selection as the pivot point

    :type: bool
    """

    use_zoom_to_mouse: bool
    """ Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center

    :type: bool
    """

    view_rotate_method: str
    """ Orbit method in the viewport

    :type: str
    """

    view_rotate_sensitivity_trackball: float
    """ Scale trackball orbit sensitivity

    :type: float
    """

    view_rotate_sensitivity_turntable: float
    """ Rotation amount per pixel to control how fast the viewport orbits

    :type: float
    """

    view_zoom_axis: str
    """ Axis of mouse movement to zoom in or out on

    :type: str
    """

    view_zoom_method: str
    """ Which style to use for viewport scaling

    :type: str
    """

    walk_navigation: WalkNavigation
    """ Settings for walk navigation mode

    :type: WalkNavigation
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesKeymap(bpy_struct):
    """Shortcut setup for keyboards and other input devices"""

    active_keyconfig: str
    """ The name of the active key configuration

    :type: str
    """

    show_ui_keyconfig: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesSystem(bpy_struct):
    """Graphics driver and operating system settings"""

    anisotropic_filter: str
    """ Quality of anisotropic filtering

    :type: str
    """

    audio_channels: str
    """ Audio channel count

    :type: str
    """

    audio_device: str
    """ Audio output device

    :type: str
    """

    audio_mixing_buffer: str
    """ Number of samples used by the audio mixing buffer

    :type: str
    """

    audio_sample_format: str
    """ Audio sample format

    :type: str
    """

    audio_sample_rate: str
    """ Audio sample rate

    :type: str
    """

    dpi: int
    """ 

    :type: int
    """

    gl_clip_alpha: float
    """ Clip alpha below this threshold in the 3D textured view

    :type: float
    """

    gl_texture_limit: str
    """ Limit the texture size to save graphics memory

    :type: str
    """

    gpu_backend: str
    """ GPU backend to use (requires restarting Blender for changes to take effect)

    :type: str
    """

    image_draw_method: str
    """ Method used for displaying images on the screen

    :type: str
    """

    is_microsoft_store_install: bool
    """ Whether this blender installation is a sandboxed Microsoft Store version

    :type: bool
    """

    legacy_compute_device_type: int
    """ For backwards compatibility only

    :type: int
    """

    light_ambient: mathutils.Color
    """ Color of the ambient light that uniformly lit the scene

    :type: mathutils.Color
    """

    memory_cache_limit: int
    """ Memory cache limit (in megabytes)

    :type: int
    """

    pixel_size: float
    """ 

    :type: float
    """

    register_all_users: bool
    """ Make this Blender version open blend files for all users. Requires elevated privileges

    :type: bool
    """

    scrollback: int
    """ Maximum number of lines to store for the console buffer

    :type: int
    """

    sequencer_disk_cache_compression: str
    """ Smaller compression will result in larger files, but less decoding overhead

    :type: str
    """

    sequencer_disk_cache_dir: str
    """ Override default directory

    :type: str
    """

    sequencer_disk_cache_size_limit: int
    """ Disk cache limit (in gigabytes)

    :type: int
    """

    sequencer_proxy_setup: str
    """ When and how proxies are created

    :type: str
    """

    solid_lights: bpy_prop_collection[UserSolidLight]
    """ Lights used to display objects in solid shading mode

    :type: bpy_prop_collection[UserSolidLight]
    """

    texture_collection_rate: int
    """ Number of seconds between each run of the GL texture garbage collector

    :type: int
    """

    texture_time_out: int
    """ Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)

    :type: int
    """

    ui_line_width: float
    """ Suggested line thickness and point size in pixels, for add-ons displaying custom user interface elements, based on operating system settings and Blender UI scale

    :type: float
    """

    ui_scale: float
    """ Size multiplier to use when displaying custom user interface elements, so that they are scaled correctly on screens with different DPI. This value is based on operating system DPI settings and Blender display scale

    :type: float
    """

    use_edit_mode_smooth_wire: bool
    """ Enable edit mode edge smoothing, reducing aliasing (requires restart)

    :type: bool
    """

    use_gpu_subdivision: bool
    """ Enable GPU acceleration for evaluating the last subdivision surface modifiers in the stack

    :type: bool
    """

    use_overlay_smooth_wire: bool
    """ Enable overlay smooth wires, reducing aliasing

    :type: bool
    """

    use_region_overlap: bool
    """ Display tool/property regions over the main region

    :type: bool
    """

    use_select_pick_depth: bool
    """ When making a selection in 3D View, use the GPU depth buffer to ensure the frontmost object is selected first

    :type: bool
    """

    use_sequencer_disk_cache: bool
    """ Store cached images to disk

    :type: bool
    """

    use_studio_light_edit: bool
    """ View the result of the studio light editor in the viewport

    :type: bool
    """

    vbo_collection_rate: int
    """ Number of seconds between each run of the GL vertex buffer object garbage collector

    :type: int
    """

    vbo_time_out: int
    """ Time since last access of a GL vertex buffer object in seconds after which it is freed (set to 0 to keep VBO allocated)

    :type: int
    """

    viewport_aa: str
    """ Method of anti-aliasing in 3d viewport

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PreferencesView(bpy_struct):
    """Preferences related to viewing data"""

    color_picker_type: str
    """ Different styles of displaying the color picker widget

    :type: str
    """

    factor_display_type: str
    """ How factor values are displayed

    :type: str
    """

    filebrowser_display_type: str
    """ Default location where the File Editor will be displayed in

    :type: str
    """

    font_path_ui: str
    """ Path to interface font

    :type: str
    """

    font_path_ui_mono: str
    """ Path to interface monospaced Font

    :type: str
    """

    gizmo_size: int
    """ Diameter of the gizmo

    :type: int
    """

    gizmo_size_navigate_v3d: int
    """ The Navigate Gizmo size

    :type: int
    """

    header_align: str
    """ Default header position for new space-types

    :type: str
    """

    language: str
    """ Language used for translation

    :type: str
    """

    lookdev_sphere_size: int
    """ Diameter of the HDRI preview spheres

    :type: int
    """

    mini_axis_brightness: int
    """ Brightness of the icon

    :type: int
    """

    mini_axis_size: int
    """ The axes icon's size

    :type: int
    """

    mini_axis_type: str
    """ Show small rotating 3D axes in the top right corner of the 3D viewport

    :type: str
    """

    open_sublevel_delay: int
    """ Time delay in 1/10 seconds before automatically opening sub level menus

    :type: int
    """

    open_toplevel_delay: int
    """ Time delay in 1/10 seconds before automatically opening top level menus

    :type: int
    """

    pie_animation_timeout: int
    """ Time needed to fully animate the pie to unfolded state (in 1/100ths of sec)

    :type: int
    """

    pie_initial_timeout: int
    """ Pie menus will use the initial mouse position as center for this amount of time (in 1/100ths of sec)

    :type: int
    """

    pie_menu_confirm: int
    """ Distance threshold after which selection is made (zero to disable)

    :type: int
    """

    pie_menu_radius: int
    """ Pie menu size in pixels

    :type: int
    """

    pie_menu_threshold: int
    """ Distance from center needed before a selection can be made

    :type: int
    """

    pie_tap_timeout: int
    """ Pie menu button held longer than this will dismiss menu on release (in 1/100ths of sec)

    :type: int
    """

    playback_fps_samples: int
    """ The number of frames to use for calculating FPS average. Zero to calculate this automatically, where the number of samples matches the target FPS

    :type: int
    """

    render_display_type: str
    """ Default location where rendered images will be displayed in

    :type: str
    """

    rotation_angle: float
    """ Rotation step for numerical pad keys (2 4 6 8)

    :type: float
    """

    show_addons_enabled_only: bool
    """ Only show enabled add-ons. Un-check to see all installed add-ons

    :type: bool
    """

    show_column_layout: bool
    """ Use a column layout for toolbox

    :type: bool
    """

    show_developer_ui: bool
    """ Show options for developers (edit source in context menu, geometry indices)

    :type: bool
    """

    show_gizmo: bool
    """ Use transform gizmos by default

    :type: bool
    """

    show_navigate_ui: bool
    """ Show navigation controls in 2D and 3D views which do not have scroll bars

    :type: bool
    """

    show_object_info: bool
    """ Include the name of the active object and the current frame number in the text info overlay

    :type: bool
    """

    show_playback_fps: bool
    """ Include the number of frames displayed per second in the text info overlay while animation is played back

    :type: bool
    """

    show_splash: bool
    """ Display splash screen on startup

    :type: bool
    """

    show_statusbar_memory: bool
    """ Show Blender memory usage

    :type: bool
    """

    show_statusbar_scene_duration: bool
    """ Show scene duration

    :type: bool
    """

    show_statusbar_stats: bool
    """ Show scene statistics

    :type: bool
    """

    show_statusbar_version: bool
    """ Show Blender version string

    :type: bool
    """

    show_statusbar_vram: bool
    """ Show GPU video memory usage

    :type: bool
    """

    show_tooltips: bool
    """ Display tooltips (when disabled, hold Alt to force display)

    :type: bool
    """

    show_tooltips_python: bool
    """ Show Python references in tooltips

    :type: bool
    """

    show_view_name: bool
    """ Include the name of the view orientation in the text info overlay

    :type: bool
    """

    smooth_view: int
    """ Time to animate the view in milliseconds, zero to disable

    :type: int
    """

    text_hinting: str
    """ Method for making user interface text render sharp

    :type: str
    """

    timecode_style: str
    """ Format of timecode displayed when not displaying timing in terms of frames

    :type: str
    """

    ui_line_width: str
    """ Changes the thickness of widget outlines, lines and dots in the interface

    :type: str
    """

    ui_scale: float
    """ Changes the size of the fonts and widgets in the interface

    :type: float
    """

    use_fresnel_edit: bool
    """ Enable a fresnel effect on edit mesh overlays.
It improves shape readability of very dense meshes, but increases eye fatigue when modeling lower poly

    :type: bool
    """

    use_mouse_over_open: bool
    """ Open menu buttons and pulldowns automatically when the mouse is hovering

    :type: bool
    """

    use_save_prompt: bool
    """ Ask for confirmation when quitting with unsaved changes

    :type: bool
    """

    use_text_antialiasing: bool
    """ Smooth jagged edges of user interface text

    :type: bool
    """

    use_text_render_subpixelaa: bool
    """ Render text for optimal horizontal placement

    :type: bool
    """

    use_translate_interface: bool
    """ Translate all labels in menus, buttons and panels (note that this might make it hard to follow tutorials or the manual)

    :type: bool
    """

    use_translate_new_dataname: bool
    """ Translate the names of new data-blocks (objects, materials...)

    :type: bool
    """

    use_translate_reports: bool
    """ Translate additional information, such as error messages

    :type: bool
    """

    use_translate_tooltips: bool
    """ Translate the descriptions when hovering UI elements (recommended)

    :type: bool
    """

    use_weight_color_range: bool
    """ Enable color range used for weight visualization in weight painting mode

    :type: bool
    """

    view2d_grid_spacing_min: int
    """ Minimum number of pixels between each gridline in 2D Viewports

    :type: int
    """

    view_frame_keyframes: int
    """ Keyframes around cursor that we zoom around

    :type: int
    """

    view_frame_seconds: float
    """ Seconds around cursor that we zoom around

    :type: float
    """

    view_frame_type: str
    """ How zooming to frame focuses around current frame

    :type: str
    """

    weight_color_range: ColorRamp
    """ Color range used for weight visualization in weight painting mode

    :type: ColorRamp
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PrimitiveBoolean(bpy_struct):
    """RNA wrapped boolean"""

    value: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PrimitiveFloat(bpy_struct):
    """RNA wrapped float"""

    value: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PrimitiveInt(bpy_struct):
    """RNA wrapped int"""

    value: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PrimitiveString(bpy_struct):
    """RNA wrapped string"""

    value: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Property(bpy_struct):
    """RNA property definition"""

    description: str
    """ Description of the property for tooltips

    :type: str
    """

    icon: str
    """ Icon of the item

    :type: str
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    is_animatable: bool
    """ Property is animatable through RNA

    :type: bool
    """

    is_argument_optional: bool
    """ True when the property is optional in a Python function implementing an RNA function

    :type: bool
    """

    is_enum_flag: bool
    """ True when multiple enums

    :type: bool
    """

    is_hidden: bool
    """ True when the property is hidden

    :type: bool
    """

    is_library_editable: bool
    """ Property is editable from linked instances (changes not saved)

    :type: bool
    """

    is_never_none: bool
    """ True when this value can't be set to None

    :type: bool
    """

    is_output: bool
    """ True when this property is an output value from an RNA function

    :type: bool
    """

    is_overridable: bool
    """ Property is overridable through RNA

    :type: bool
    """

    is_path_output: bool
    """ Property is a filename, filepath or directory output

    :type: bool
    """

    is_readonly: bool
    """ Property is editable through RNA

    :type: bool
    """

    is_registered: bool
    """ Property is registered as part of type registration

    :type: bool
    """

    is_registered_optional: bool
    """ Property is optionally registered as part of type registration

    :type: bool
    """

    is_required: bool
    """ False when this property is an optional argument in an RNA function

    :type: bool
    """

    is_runtime: bool
    """ Property has been dynamically created at runtime

    :type: bool
    """

    is_skip_preset: bool
    """ True when the property is not saved in presets

    :type: bool
    """

    is_skip_save: bool
    """ True when the property uses ghost values

    :type: bool
    """

    name: str
    """ Human readable name

    :type: str
    """

    srna: Struct
    """ Struct definition used for properties assigned to this item

    :type: Struct
    """

    subtype: str
    """ Semantic interpretation of the property

    :type: str
    """

    tags: set[str]
    """ Subset of tags (defined in parent struct) that are set for this property

    :type: set[str]
    """

    translation_context: str
    """ Translation context of the property's name

    :type: str
    """

    type: str
    """ Data type of the property

    :type: str
    """

    unit: str
    """ Type of units for this property

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PropertyGroup(bpy_struct):
    """Group of ID properties"""

    name: str
    """ Unique name used in the code and scripting

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PropertyGroupItem(bpy_struct):
    """Property that stores arbitrary, user defined properties"""

    bool: bool
    """ 

    :type: bool
    """

    bool_array: list[bool]
    """ 

    :type: list[bool]
    """

    collection: bpy_prop_collection[PropertyGroup]
    """ 

    :type: bpy_prop_collection[PropertyGroup]
    """

    double: float
    """ 

    :type: float
    """

    double_array: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    enum: str
    """ 

    :type: str
    """

    float: float
    """ 

    :type: float
    """

    float_array: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    group: PropertyGroup
    """ 

    :type: PropertyGroup
    """

    id: ID
    """ 

    :type: ID
    """

    idp_array: bpy_prop_collection[PropertyGroup]
    """ 

    :type: bpy_prop_collection[PropertyGroup]
    """

    int: int
    """ 

    :type: int
    """

    int_array: bpy_prop_array[int]
    """ 

    :type: bpy_prop_array[int]
    """

    string: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class QuaternionAttributeValue(bpy_struct):
    """Rotation value in geometry attribute"""

    value: bpy_prop_array[float]
    """ Quaternion

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RaytraceEEVEE(bpy_struct):
    denoise_bilateral: bool
    """ Blur the resolved radiance using a bilateral filter

    :type: bool
    """

    denoise_spatial: bool
    """ Reuse neighbor pixels' rays

    :type: bool
    """

    denoise_temporal: bool
    """ Accumulate samples by reprojecting last tracing results

    :type: bool
    """

    resolution_scale: str
    """ Number of rays per pixel

    :type: str
    """

    sample_clamp: float
    """ Clamp ray intensity to reduce noise (0 to disable)

    :type: float
    """

    screen_trace_max_roughness: float
    """ Maximum roughness to use the tracing pipeline for. Higher roughness surfaces will use horizon scan. A value of 1 will disable horizon scan

    :type: float
    """

    screen_trace_quality: float
    """ Precision of the screen space ray-tracing

    :type: float
    """

    screen_trace_thickness: float
    """ Surface thickness used to detect intersection when using screen-tracing

    :type: float
    """

    use_denoise: bool
    """ Enable noise reduction techniques for raytraced effects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ReadOnlyInteger(bpy_struct):
    value: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Region(bpy_struct):
    """Region in a subdivided screen area"""

    active_panel_category: str | None
    """ The current active panel category, may be Null if the region does not support this feature (NOTE: these categories are generated at runtime, so list may be empty at initialization, before any drawing took place)

    :type: str | None
    """

    alignment: str
    """ Alignment of the region within the area

    :type: str
    """

    data: typing.Any
    """ Region specific data (the type depends on the region type)

    :type: typing.Any
    """

    height: int
    """ Region height

    :type: int
    """

    type: str
    """ Type of this region

    :type: str
    """

    view2d: View2D
    """ 2D view of the region

    :type: View2D
    """

    width: int
    """ Region width

    :type: int
    """

    x: int
    """ The window relative vertical location of the region

    :type: int
    """

    y: int
    """ The window relative horizontal location of the region

    :type: int
    """

    def tag_redraw(self):
        """tag_redraw"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RegionView3D(bpy_struct):
    """3D View region data"""

    clip_planes: list[list[float]] | tuple[
        tuple[float, float, float, float, float, float],
        tuple[float, float, float, float, float, float],
        tuple[float, float, float, float, float, float],
        tuple[float, float, float, float, float, float],
    ]
    """ 

    :type: list[list[float]] | tuple[tuple[float, float, float, float, float, float], tuple[float, float, float, float, float, float], tuple[float, float, float, float, float, float], tuple[float, float, float, float, float, float]]
    """

    is_orthographic_side_view: bool
    """ Whether the current view is aligned to an axis (does not check whether the view is orthographic, use "is_perspective" for that). Setting this will rotate the view to the closest axis

    :type: bool
    """

    is_perspective: bool
    """ 

    :type: bool
    """

    lock_rotation: bool
    """ Lock view rotation of side views to Top/Front/Right

    :type: bool
    """

    perspective_matrix: mathutils.Matrix
    """ Current perspective matrix (window_matrix * view_matrix)

    :type: mathutils.Matrix
    """

    show_sync_view: bool
    """ Sync view position between side views

    :type: bool
    """

    use_box_clip: bool
    """ Clip view contents based on what is visible in other side views

    :type: bool
    """

    use_clip_planes: bool
    """ 

    :type: bool
    """

    view_camera_offset: bpy_prop_array[float]
    """ View shift in camera view

    :type: bpy_prop_array[float]
    """

    view_camera_zoom: float
    """ Zoom factor in camera view

    :type: float
    """

    view_distance: float
    """ Distance to the view location

    :type: float
    """

    view_location: mathutils.Vector
    """ View pivot location

    :type: mathutils.Vector
    """

    view_matrix: mathutils.Matrix
    """ Current view matrix

    :type: mathutils.Matrix
    """

    view_perspective: str
    """ View Perspective

    :type: str
    """

    view_rotation: mathutils.Quaternion
    """ Rotation in quaternions (keep normalized)

    :type: mathutils.Quaternion
    """

    window_matrix: mathutils.Matrix
    """ Current window matrix

    :type: mathutils.Matrix
    """

    def update(self):
        """Recalculate the view matrices"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderEngine(bpy_struct):
    """Render engine"""

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    bl_use_alembic_procedural: bool
    """ Support loading Alembic data at render time

    :type: bool
    """

    bl_use_custom_freestyle: bool
    """ Handles freestyle rendering on its own, instead of delegating it to EEVEE

    :type: bool
    """

    bl_use_eevee_viewport: bool
    """ Uses EEVEE for viewport shading in Material Preview shading mode

    :type: bool
    """

    bl_use_gpu_context: bool
    """ Enable OpenGL context for the render method, for engines that render using OpenGL

    :type: bool
    """

    bl_use_image_save: bool
    """ Save images/movie to disk while rendering an animation. Disabling image saving is only supported when bl_use_postprocess is also disabled

    :type: bool
    """

    bl_use_materialx: bool
    """ Use MaterialX for exporting materials to Hydra

    :type: bool
    """

    bl_use_postprocess: bool
    """ Apply compositing on render results

    :type: bool
    """

    bl_use_preview: bool
    """ Render engine supports being used for rendering previews of materials, lights and worlds

    :type: bool
    """

    bl_use_shading_nodes_custom: bool
    """ Don't expose Cycles and EEVEE shading nodes in the node editor user interface, so own nodes can be used instead

    :type: bool
    """

    bl_use_spherical_stereo: bool
    """ Support spherical stereo camera models

    :type: bool
    """

    bl_use_stereo_viewport: bool
    """ Support rendering stereo 3D viewport

    :type: bool
    """

    camera_override: Object
    """ 

    :type: Object
    """

    is_animation: bool
    """ 

    :type: bool
    """

    is_preview: bool
    """ 

    :type: bool
    """

    layer_override: list[bool]
    """ 

    :type: list[bool]
    """

    render: RenderSettings
    """ 

    :type: RenderSettings
    """

    resolution_x: int
    """ 

    :type: int
    """

    resolution_y: int
    """ 

    :type: int
    """

    temporary_directory: str
    """ 

    :type: str
    """

    use_highlight_tiles: bool
    """ 

    :type: bool
    """

    def update(self, data: BlendData | None = None, depsgraph: Depsgraph | None = None):
        """Export scene data for render

        :param data:
        :type data: BlendData | None
        :param depsgraph:
        :type depsgraph: Depsgraph | None
        """
        ...

    def render(self, depsgraph: Depsgraph | None):
        """Render scene into an image

        :param depsgraph:
        :type depsgraph: Depsgraph | None
        """
        ...

    def render_frame_finish(self):
        """Perform finishing operations after all view layers in a frame were rendered"""
        ...

    def draw(self, context: Context | None, depsgraph: Depsgraph | None):
        """Draw render image

        :param context:
        :type context: Context | None
        :param depsgraph:
        :type depsgraph: Depsgraph | None
        """
        ...

    def bake(
        self,
        depsgraph: Depsgraph | None,
        object: Object | None,
        pass_type: str | None,
        pass_filter: int | None,
        width: int | None,
        height: int | None,
    ):
        """Bake passes

        :param depsgraph:
        :type depsgraph: Depsgraph | None
        :param object:
        :type object: Object | None
        :param pass_type: Pass, Pass to bake
        :type pass_type: str | None
        :param pass_filter: Pass Filter, Filter to combined, diffuse, glossy and transmission passes
        :type pass_filter: int | None
        :param width: Width, Image width
        :type width: int | None
        :param height: Height, Image height
        :type height: int | None
        """
        ...

    def view_update(self, context: Context | None, depsgraph: Depsgraph | None):
        """Update on data changes for viewport render

        :param context:
        :type context: Context | None
        :param depsgraph:
        :type depsgraph: Depsgraph | None
        """
        ...

    def view_draw(self, context: Context | None, depsgraph: Depsgraph | None):
        """Draw viewport render

        :param context:
        :type context: Context | None
        :param depsgraph:
        :type depsgraph: Depsgraph | None
        """
        ...

    def update_script_node(self, node: Node | None = None):
        """Compile shader script node

        :param node:
        :type node: Node | None
        """
        ...

    def update_render_passes(
        self, scene: Scene | None = None, renderlayer: ViewLayer | None = None
    ):
        """Update the render passes that will be generated

        :param scene:
        :type scene: Scene | None
        :param renderlayer:
        :type renderlayer: ViewLayer | None
        """
        ...

    def tag_redraw(self):
        """Request redraw for viewport rendering"""
        ...

    def tag_update(self):
        """Request update call for viewport rendering"""
        ...

    def begin_result(
        self,
        x: int | None,
        y: int | None,
        w: int | None,
        h: int | None,
        layer: str | typing.Any = "",
        view: str | typing.Any = "",
    ) -> RenderResult:
        """Create render result to write linear floating-point render layers and passes

        :param x: X
        :type x: int | None
        :param y: Y
        :type y: int | None
        :param w: Width
        :type w: int | None
        :param h: Height
        :type h: int | None
        :param layer: Layer, Single layer to get render result for
        :type layer: str | typing.Any
        :param view: View, Single view to get render result for
        :type view: str | typing.Any
        :return: Result
        :rtype: RenderResult
        """
        ...

    def update_result(self, result: RenderResult | None):
        """Signal that pixels have been updated and can be redrawn in the user interface

        :param result: Result
        :type result: RenderResult | None
        """
        ...

    def end_result(
        self,
        result: RenderResult | None,
        cancel: bool | typing.Any | None = False,
        highlight: bool | typing.Any | None = False,
        do_merge_results: bool | typing.Any | None = False,
    ):
        """All pixels in the render result have been set and are final

        :param result: Result
        :type result: RenderResult | None
        :param cancel: Cancel, Don't mark tile as done, don't merge results unless forced
        :type cancel: bool | typing.Any | None
        :param highlight: Highlight, Don't mark tile as done yet
        :type highlight: bool | typing.Any | None
        :param do_merge_results: Merge Results, Merge results even if cancel=true
        :type do_merge_results: bool | typing.Any | None
        """
        ...

    def add_pass(
        self,
        name: str | typing.Any,
        channels: int | None,
        chan_id: str | typing.Any,
        layer: str | typing.Any = "",
    ):
        """Add a pass to the render layer

        :param name: Name, Name of the Pass, without view or channel tag
        :type name: str | typing.Any
        :param channels: Channels
        :type channels: int | None
        :param chan_id: Channel IDs, Channel names, one character per channel
        :type chan_id: str | typing.Any
        :param layer: Layer, Single layer to add render pass to
        :type layer: str | typing.Any
        """
        ...

    def get_result(self) -> RenderResult:
        """Get final result for non-pixel operations

        :return: Result
        :rtype: RenderResult
        """
        ...

    def test_break(self) -> bool:
        """Test if the render operation should been canceled, this is a fast call that should be used regularly for responsiveness

        :return: Break
        :rtype: bool
        """
        ...

    def pass_by_index_get(
        self, layer: str | typing.Any, index: int | None
    ) -> RenderPass:
        """pass_by_index_get

        :param layer: Layer, Name of render layer to get pass for
        :type layer: str | typing.Any
        :param index: Index, Index of pass to get
        :type index: int | None
        :return: Index, Index of pass to get
        :rtype: RenderPass
        """
        ...

    def active_view_get(self) -> str | typing.Any:
        """active_view_get

        :return: View, Single view active
        :rtype: str | typing.Any
        """
        ...

    def active_view_set(self, view: str | typing.Any):
        """active_view_set

        :param view: View, Single view to set as active
        :type view: str | typing.Any
        """
        ...

    def camera_shift_x(
        self,
        camera: Object | None,
        use_spherical_stereo: bool | typing.Any | None = False,
    ) -> float:
        """camera_shift_x

        :param camera:
        :type camera: Object | None
        :param use_spherical_stereo: Spherical Stereo
        :type use_spherical_stereo: bool | typing.Any | None
        :return: Shift X
        :rtype: float
        """
        ...

    def camera_model_matrix(
        self,
        camera: Object | None,
        use_spherical_stereo: bool | typing.Any | None = False,
    ) -> mathutils.Matrix:
        """camera_model_matrix

        :param camera:
        :type camera: Object | None
        :param use_spherical_stereo: Spherical Stereo
        :type use_spherical_stereo: bool | typing.Any | None
        :return: Model Matrix, Normalized camera model matrix
        :rtype: mathutils.Matrix
        """
        ...

    def use_spherical_stereo(self, camera: Object | None) -> bool:
        """use_spherical_stereo

        :param camera:
        :type camera: Object | None
        :return: Spherical Stereo
        :rtype: bool
        """
        ...

    def update_stats(self, stats: str | typing.Any, info: str | typing.Any):
        """Update and signal to redraw render status text

        :param stats: Stats
        :type stats: str | typing.Any
        :param info: Info
        :type info: str | typing.Any
        """
        ...

    def frame_set(self, frame: int | None, subframe: float | None):
        """Evaluate scene at a different frame (for motion blur)

        :param frame: Frame
        :type frame: int | None
        :param subframe: Subframe
        :type subframe: float | None
        """
        ...

    def update_progress(self, progress: float | None):
        """Update progress percentage of render

        :param progress: Percentage of render that's done
        :type progress: float | None
        """
        ...

    def update_memory_stats(
        self, memory_used: typing.Any | None = 0.0, memory_peak: typing.Any | None = 0.0
    ):
        """Update memory usage statistics

        :param memory_used: Current memory usage in megabytes
        :type memory_used: typing.Any | None
        :param memory_peak: Peak memory usage in megabytes
        :type memory_peak: typing.Any | None
        """
        ...

    def report(self, type, message: str | typing.Any):
        """Report info, warning or error messages

        :param type: Type
        :param message: Report Message
        :type message: str | typing.Any
        """
        ...

    def error_set(self, message: str | typing.Any):
        """Set error message displaying after the render is finished

        :param message: Report Message
        :type message: str | typing.Any
        """
        ...

    def bind_display_space_shader(self, scene: Scene | None):
        """Bind GLSL fragment shader that converts linear colors to display space colors using scene color management settings

        :param scene:
        :type scene: Scene | None
        """
        ...

    def unbind_display_space_shader(self):
        """Unbind GLSL display space shader, must always be called after binding the shader"""
        ...

    def support_display_space_shader(self, scene: Scene | None) -> bool:
        """Test if GLSL display space shader is supported for the combination of graphics card and scene settings

        :param scene:
        :type scene: Scene | None
        :return: Supported
        :rtype: bool
        """
        ...

    def get_preview_pixel_size(self, scene: Scene | None) -> int:
        """Get the pixel size that should be used for preview rendering

        :param scene:
        :type scene: Scene | None
        :return: Pixel Size
        :rtype: int
        """
        ...

    def free_blender_memory(self):
        """Free Blender side memory of render engine"""
        ...

    def tile_highlight_set(
        self,
        x: int | None,
        y: int | None,
        width: int | None,
        height: int | None,
        highlight: bool | None,
    ):
        """Set highlighted state of the given tile

        :param x: X
        :type x: int | None
        :param y: Y
        :type y: int | None
        :param width: Width
        :type width: int | None
        :param height: Height
        :type height: int | None
        :param highlight: Highlight
        :type highlight: bool | None
        """
        ...

    def tile_highlight_clear_all(self):
        """The temp directory used by Blender"""
        ...

    def register_pass(
        self,
        scene: Scene | None,
        view_layer: ViewLayer | None,
        name: str | typing.Any,
        channels: int | None,
        chanid: str | typing.Any,
        type: str | None,
    ):
        """Register a render pass that will be part of the render with the current settings

        :param scene:
        :type scene: Scene | None
        :param view_layer:
        :type view_layer: ViewLayer | None
        :param name: Name
        :type name: str | typing.Any
        :param channels: Channels
        :type channels: int | None
        :param chanid: Channel IDs
        :type chanid: str | typing.Any
        :param type: Type
        :type type: str | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderLayer(bpy_struct):
    name: str
    """ View layer name

    :type: str
    """

    passes: RenderPasses
    """ 

    :type: RenderPasses
    """

    use_ao: bool
    """ Render Ambient Occlusion in this Layer

    :type: bool
    """

    use_motion_blur: bool
    """ Render motion blur in this Layer, if enabled in the scene

    :type: bool
    """

    use_pass_ambient_occlusion: bool
    """ Deliver Ambient Occlusion pass

    :type: bool
    """

    use_pass_combined: bool
    """ Deliver full combined RGBA buffer

    :type: bool
    """

    use_pass_diffuse_color: bool
    """ Deliver diffuse color pass

    :type: bool
    """

    use_pass_diffuse_direct: bool
    """ Deliver diffuse direct pass

    :type: bool
    """

    use_pass_diffuse_indirect: bool
    """ Deliver diffuse indirect pass

    :type: bool
    """

    use_pass_emit: bool
    """ Deliver emission pass

    :type: bool
    """

    use_pass_environment: bool
    """ Deliver environment lighting pass

    :type: bool
    """

    use_pass_glossy_color: bool
    """ Deliver glossy color pass

    :type: bool
    """

    use_pass_glossy_direct: bool
    """ Deliver glossy direct pass

    :type: bool
    """

    use_pass_glossy_indirect: bool
    """ Deliver glossy indirect pass

    :type: bool
    """

    use_pass_material_index: bool
    """ Deliver material index pass

    :type: bool
    """

    use_pass_mist: bool
    """ Deliver mist factor pass (0.0 to 1.0)

    :type: bool
    """

    use_pass_normal: bool
    """ Deliver normal pass

    :type: bool
    """

    use_pass_object_index: bool
    """ Deliver object index pass

    :type: bool
    """

    use_pass_position: bool
    """ Deliver position pass

    :type: bool
    """

    use_pass_shadow: bool
    """ Deliver shadow pass

    :type: bool
    """

    use_pass_subsurface_color: bool
    """ Deliver subsurface color pass

    :type: bool
    """

    use_pass_subsurface_direct: bool
    """ Deliver subsurface direct pass

    :type: bool
    """

    use_pass_subsurface_indirect: bool
    """ Deliver subsurface indirect pass

    :type: bool
    """

    use_pass_transmission_color: bool
    """ Deliver transmission color pass

    :type: bool
    """

    use_pass_transmission_direct: bool
    """ Deliver transmission direct pass

    :type: bool
    """

    use_pass_transmission_indirect: bool
    """ Deliver transmission indirect pass

    :type: bool
    """

    use_pass_uv: bool
    """ Deliver texture UV pass

    :type: bool
    """

    use_pass_vector: bool
    """ Deliver speed vector pass

    :type: bool
    """

    use_pass_z: bool
    """ Deliver Z values pass

    :type: bool
    """

    use_sky: bool
    """ Render Sky in this Layer

    :type: bool
    """

    use_solid: bool
    """ Render Solid faces in this Layer

    :type: bool
    """

    use_strand: bool
    """ Render Strands in this Layer

    :type: bool
    """

    use_volumes: bool
    """ Render volumes in this Layer

    :type: bool
    """

    def load_from_file(
        self,
        filepath: str | typing.Any,
        x: typing.Any | None = 0,
        y: typing.Any | None = 0,
    ):
        """Copies the pixels of this renderlayer from an image file

        :param filepath: File Path, File path to load into this render tile, must be no smaller than the renderlayer
        :type filepath: str | typing.Any
        :param x: Offset X, Offset the position to copy from if the image is larger than the render layer
        :type x: typing.Any | None
        :param y: Offset Y, Offset the position to copy from if the image is larger than the render layer
        :type y: typing.Any | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderPass(bpy_struct):
    channel_id: str
    """ 

    :type: str
    """

    channels: int
    """ 

    :type: int
    """

    fullname: str
    """ 

    :type: str
    """

    name: str
    """ 

    :type: str
    """

    rect: float
    """ 

    :type: float
    """

    view_id: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderPasses(bpy_prop_collection[RenderPass], bpy_struct):
    """Collection of render passes"""

    def find_by_type(self, pass_type: str | None, view: str | typing.Any) -> RenderPass:
        """Get the render pass for a given type and view

        :param pass_type: Pass
        :type pass_type: str | None
        :param view: View, Render view to get pass from
        :type view: str | typing.Any
        :return: The matching render pass
        :rtype: RenderPass
        """
        ...

    def find_by_name(
        self, name: str | typing.Any, view: str | typing.Any
    ) -> RenderPass:
        """Get the render pass for a given name and view

        :param name: Pass
        :type name: str | typing.Any
        :param view: View, Render view to get pass from
        :type view: str | typing.Any
        :return: The matching render pass
        :rtype: RenderPass
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderResult(bpy_struct):
    """Result of rendering, including all layers and passes"""

    layers: bpy_prop_collection[RenderLayer]
    """ 

    :type: bpy_prop_collection[RenderLayer]
    """

    resolution_x: int
    """ 

    :type: int
    """

    resolution_y: int
    """ 

    :type: int
    """

    views: bpy_prop_collection[RenderView]
    """ 

    :type: bpy_prop_collection[RenderView]
    """

    def load_from_file(self, filepath: str | typing.Any):
        """Copies the pixels of this render result from an image file

        :param filepath: File Name, Filename to load into this render tile, must be no smaller than the render result
        :type filepath: str | typing.Any
        """
        ...

    def stamp_data_add_field(self, field: str | typing.Any, value: str | typing.Any):
        """Add engine-specific stamp data to the result

        :param field: Field, Name of the stamp field to add
        :type field: str | typing.Any
        :param value: Value, Value of the stamp data
        :type value: str | typing.Any
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderSettings(bpy_struct):
    """Rendering settings for a Scene data-block"""

    bake: BakeSettings
    """ 

    :type: BakeSettings
    """

    bake_bias: float
    """ Bias towards faces further away from the object (in Blender units)

    :type: float
    """

    bake_margin: int
    """ Extends the baked result as a post process filter

    :type: int
    """

    bake_margin_type: str
    """ Algorithm to generate the margin

    :type: str
    """

    bake_samples: int
    """ Number of samples used for ambient occlusion baking from multires

    :type: int
    """

    bake_type: str
    """ Choose shading information to bake into the image

    :type: str
    """

    bake_user_scale: float
    """ Instead of automatically normalizing to the range 0 to 1, apply a user scale to the derivative map

    :type: float
    """

    border_max_x: float
    """ Maximum X value for the render region

    :type: float
    """

    border_max_y: float
    """ Maximum Y value for the render region

    :type: float
    """

    border_min_x: float
    """ Minimum X value for the render region

    :type: float
    """

    border_min_y: float
    """ Minimum Y value for the render region

    :type: float
    """

    dither_intensity: float
    """ Amount of dithering noise added to the rendered image to break up banding

    :type: float
    """

    engine: str
    """ Engine to use for rendering

    :type: str
    """

    ffmpeg: FFmpegSettings
    """ FFmpeg related settings for the scene

    :type: FFmpegSettings
    """

    file_extension: str
    """ The file extension used for saving renders

    :type: str
    """

    filepath: str
    """ Directory/name to save animations, # characters define the position and padding of frame numbers

    :type: str
    """

    film_transparent: bool
    """ World background is transparent, for compositing the render over another background

    :type: bool
    """

    filter_size: float
    """ Width over which the reconstruction filter combines samples

    :type: float
    """

    fps: int
    """ Framerate, expressed in frames per second

    :type: int
    """

    fps_base: float
    """ Framerate base

    :type: float
    """

    frame_map_new: int
    """ How many frames the Map Old will last

    :type: int
    """

    frame_map_old: int
    """ Old mapping value in frames

    :type: int
    """

    hair_subdiv: int
    """ Additional subdivision along the curves

    :type: int
    """

    hair_type: str
    """ Curves shape type

    :type: str
    """

    has_multiple_engines: bool
    """ More than one rendering engine is available

    :type: bool
    """

    image_settings: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    is_movie_format: bool
    """ When true the format is a movie

    :type: bool
    """

    line_thickness: float
    """ Line thickness in pixels

    :type: float
    """

    line_thickness_mode: str
    """ Line thickness mode for Freestyle line drawing

    :type: str
    """

    metadata_input: str
    """ Where to take the metadata from

    :type: str
    """

    motion_blur_shutter: float
    """ Time taken in frames between shutter open and close

    :type: float
    """

    motion_blur_shutter_curve: CurveMapping
    """ Curve defining the shutter's openness over time

    :type: CurveMapping
    """

    pixel_aspect_x: float
    """ Horizontal aspect ratio - for anamorphic or non-square pixel output

    :type: float
    """

    pixel_aspect_y: float
    """ Vertical aspect ratio - for anamorphic or non-square pixel output

    :type: float
    """

    preview_pixel_size: str
    """ Pixel size for viewport rendering

    :type: str
    """

    resolution_percentage: int
    """ Percentage scale for render resolution

    :type: int
    """

    resolution_x: int
    """ Number of horizontal pixels in the rendered image

    :type: int
    """

    resolution_y: int
    """ Number of vertical pixels in the rendered image

    :type: int
    """

    sequencer_gl_preview: str
    """ Display method used in the sequencer view

    :type: str
    """

    simplify_child_particles: float
    """ Global child particles percentage

    :type: float
    """

    simplify_child_particles_render: float
    """ Global child particles percentage during rendering

    :type: float
    """

    simplify_gpencil: bool
    """ Simplify Grease Pencil drawing

    :type: bool
    """

    simplify_gpencil_antialiasing: bool
    """ Use Antialiasing to smooth stroke edges

    :type: bool
    """

    simplify_gpencil_modifier: bool
    """ Display modifiers

    :type: bool
    """

    simplify_gpencil_onplay: bool
    """ Simplify Grease Pencil only during animation playback

    :type: bool
    """

    simplify_gpencil_shader_fx: bool
    """ Display Shader Effects

    :type: bool
    """

    simplify_gpencil_tint: bool
    """ Display layer tint

    :type: bool
    """

    simplify_gpencil_view_fill: bool
    """ Display fill strokes in the viewport

    :type: bool
    """

    simplify_shadows: float
    """ Resolution percentage of shadows in viewport

    :type: float
    """

    simplify_shadows_render: float
    """ Resolution percentage of shadows in viewport

    :type: float
    """

    simplify_subdivision: int
    """ Global maximum subdivision level

    :type: int
    """

    simplify_subdivision_render: int
    """ Global maximum subdivision level during rendering

    :type: int
    """

    simplify_volumes: float
    """ Resolution percentage of volume objects in viewport

    :type: float
    """

    stamp_background: bpy_prop_array[float]
    """ Color to use behind stamp text

    :type: bpy_prop_array[float]
    """

    stamp_font_size: int
    """ Size of the font used when rendering stamp text

    :type: int
    """

    stamp_foreground: bpy_prop_array[float]
    """ Color to use for stamp text

    :type: bpy_prop_array[float]
    """

    stamp_note_text: str
    """ Custom text to appear in the stamp note

    :type: str
    """

    stereo_views: bpy_prop_collection[SceneRenderView]
    """ 

    :type: bpy_prop_collection[SceneRenderView]
    """

    threads: int
    """ Maximum number of CPU cores to use simultaneously while rendering (for multi-core/CPU systems)

    :type: int
    """

    threads_mode: str
    """ Determine the amount of render threads used

    :type: str
    """

    use_bake_clear: bool
    """ Clear Images before baking

    :type: bool
    """

    use_bake_lores_mesh: bool
    """ Calculate heights against unsubdivided low resolution mesh

    :type: bool
    """

    use_bake_multires: bool
    """ Bake directly from multires object

    :type: bool
    """

    use_bake_selected_to_active: bool
    """ Bake shading on the surface of selected objects to the active object

    :type: bool
    """

    use_bake_user_scale: bool
    """ Use a user scale for the derivative map

    :type: bool
    """

    use_border: bool
    """ Render a user-defined render region, within the frame size

    :type: bool
    """

    use_compositing: bool
    """ Process the render result through the compositing pipeline, if compositing nodes are enabled

    :type: bool
    """

    use_crop_to_border: bool
    """ Crop the rendered frame to the defined render region size

    :type: bool
    """

    use_file_extension: bool
    """ Add the file format extensions to the rendered file name (eg: filename + .jpg)

    :type: bool
    """

    use_freestyle: bool
    """ Draw stylized strokes using Freestyle

    :type: bool
    """

    use_high_quality_normals: bool
    """ Use high quality tangent space at the cost of lower performance

    :type: bool
    """

    use_lock_interface: bool
    """ Lock interface during rendering in favor of giving more memory to the renderer

    :type: bool
    """

    use_motion_blur: bool
    """ Use multi-sampled 3D scene motion blur

    :type: bool
    """

    use_multiview: bool
    """ Use multiple views in the scene

    :type: bool
    """

    use_overwrite: bool
    """ Overwrite existing files while rendering

    :type: bool
    """

    use_persistent_data: bool
    """ Keep render data around for faster re-renders and animation renders, at the cost of increased memory usage

    :type: bool
    """

    use_placeholder: bool
    """ Create empty placeholder files while rendering frames (similar to Unix 'touch')

    :type: bool
    """

    use_render_cache: bool
    """ Save render cache to EXR files (useful for heavy compositing, Note: affects indirectly rendered scenes)

    :type: bool
    """

    use_sequencer: bool
    """ Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist

    :type: bool
    """

    use_sequencer_override_scene_strip: bool
    """ Use workbench render settings from the sequencer scene, instead of each individual scene used in the strip

    :type: bool
    """

    use_simplify: bool
    """ Enable simplification of scene for quicker preview renders

    :type: bool
    """

    use_simplify_normals: bool
    """ Skip computing custom normals and face corner normals for displaying meshes in the viewport

    :type: bool
    """

    use_single_layer: bool
    """ Only render the active layer. Only affects rendering from the interface, ignored for rendering from command line

    :type: bool
    """

    use_spherical_stereo: bool
    """ Active render engine supports spherical stereo rendering

    :type: bool
    """

    use_stamp: bool
    """ Render the stamp info text in the rendered image

    :type: bool
    """

    use_stamp_camera: bool
    """ Include the name of the active camera in image metadata

    :type: bool
    """

    use_stamp_date: bool
    """ Include the current date in image/video metadata

    :type: bool
    """

    use_stamp_filename: bool
    """ Include the .blend filename in image/video metadata

    :type: bool
    """

    use_stamp_frame: bool
    """ Include the frame number in image metadata

    :type: bool
    """

    use_stamp_frame_range: bool
    """ Include the rendered frame range in image/video metadata

    :type: bool
    """

    use_stamp_hostname: bool
    """ Include the hostname of the machine that rendered the frame

    :type: bool
    """

    use_stamp_labels: bool
    """ Display stamp labels ("Camera" in front of camera name, etc.)

    :type: bool
    """

    use_stamp_lens: bool
    """ Include the active camera's lens in image metadata

    :type: bool
    """

    use_stamp_marker: bool
    """ Include the name of the last marker in image metadata

    :type: bool
    """

    use_stamp_memory: bool
    """ Include the peak memory usage in image metadata

    :type: bool
    """

    use_stamp_note: bool
    """ Include a custom note in image/video metadata

    :type: bool
    """

    use_stamp_render_time: bool
    """ Include the render time in image metadata

    :type: bool
    """

    use_stamp_scene: bool
    """ Include the name of the active scene in image/video metadata

    :type: bool
    """

    use_stamp_sequencer_strip: bool
    """ Include the name of the foreground sequence strip in image metadata

    :type: bool
    """

    use_stamp_time: bool
    """ Include the rendered frame timecode as HH:MM:SS.FF in image metadata

    :type: bool
    """

    views: RenderViews
    """ 

    :type: RenderViews
    """

    views_format: str
    """ 

    :type: str
    """

    def frame_path(
        self,
        frame: typing.Any | None = -2147483648,
        preview: bool | typing.Any | None = False,
        view: str | typing.Any = "",
    ) -> str | typing.Any:
        """Return the absolute path to the filename to be written for a given frame

        :param frame: Frame number to use, if unset the current frame will be used
        :type frame: typing.Any | None
        :param preview: Preview, Use preview range
        :type preview: bool | typing.Any | None
        :param view: View, The name of the view to use to replace the "%" chars
        :type view: str | typing.Any
        :return: File Path, The resulting filepath from the scenes render settings
        :rtype: str | typing.Any
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderSlot(bpy_struct):
    """Parameters defining the render slot"""

    name: str
    """ Render slot name

    :type: str
    """

    def clear(self, iuser: ImageUser | None):
        """Clear the render slot

        :param iuser: ImageUser
        :type iuser: ImageUser | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderSlots(bpy_prop_collection[RenderSlot], bpy_struct):
    """Collection of render layers"""

    active: RenderSlot | None
    """ Active render slot of the image

    :type: RenderSlot | None
    """

    active_index: int | None
    """ Active render slot of the image

    :type: int | None
    """

    def new(self, name: str | typing.Any = "") -> RenderSlot:
        """Add a render slot to the image

        :param name: Name, New name for the render slot
        :type name: str | typing.Any
        :return: Newly created render layer
        :rtype: RenderSlot
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderView(bpy_struct):
    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RenderViews(bpy_prop_collection[SceneRenderView], bpy_struct):
    """Collection of render views"""

    active: SceneRenderView
    """ Active Render View

    :type: SceneRenderView
    """

    active_index: int | None
    """ Active index in render view array

    :type: int | None
    """

    def new(self, name: str | typing.Any) -> SceneRenderView:
        """Add a render view to scene

        :param name: New name for the marker (not unique)
        :type name: str | typing.Any
        :return: Newly created render view
        :rtype: SceneRenderView
        """
        ...

    def remove(self, view: SceneRenderView):
        """Remove a render view

        :param view: Render view to remove
        :type view: SceneRenderView
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RepeatItem(bpy_struct):
    color: bpy_prop_array[float]
    """ Color of the corresponding socket type in the node editor

    :type: bpy_prop_array[float]
    """

    name: str
    """ 

    :type: str
    """

    socket_type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RetimingKey(bpy_struct):
    """Key mapped to particular frame that can be moved to change playback speed"""

    timeline_frame: int
    """ Position of retiming key in timeline

    :type: int
    """

    def remove(self):
        """Remove retiming key"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RetimingKeys(bpy_prop_collection[RetimingKey], bpy_struct):
    """Collection of RetimingKey"""

    def add(self, timeline_frame: typing.Any | None = 0) -> RetimingKey:
        """Add retiming key

        :param timeline_frame: Timeline Frame
        :type timeline_frame: typing.Any | None
        :return: New RetimingKey
        :rtype: RetimingKey
        """
        ...

    def reset(self):
        """Remove all retiming keys"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RigidBodyConstraint(bpy_struct):
    """Constraint influencing Objects inside Rigid Body Simulation"""

    breaking_threshold: float
    """ Impulse threshold that must be reached for the constraint to break

    :type: float
    """

    disable_collisions: bool
    """ Disable collisions between constrained rigid bodies

    :type: bool
    """

    enabled: bool
    """ Enable this constraint

    :type: bool
    """

    limit_ang_x_lower: float
    """ Lower limit of X axis rotation

    :type: float
    """

    limit_ang_x_upper: float
    """ Upper limit of X axis rotation

    :type: float
    """

    limit_ang_y_lower: float
    """ Lower limit of Y axis rotation

    :type: float
    """

    limit_ang_y_upper: float
    """ Upper limit of Y axis rotation

    :type: float
    """

    limit_ang_z_lower: float
    """ Lower limit of Z axis rotation

    :type: float
    """

    limit_ang_z_upper: float
    """ Upper limit of Z axis rotation

    :type: float
    """

    limit_lin_x_lower: float
    """ Lower limit of X axis translation

    :type: float
    """

    limit_lin_x_upper: float
    """ Upper limit of X axis translation

    :type: float
    """

    limit_lin_y_lower: float
    """ Lower limit of Y axis translation

    :type: float
    """

    limit_lin_y_upper: float
    """ Upper limit of Y axis translation

    :type: float
    """

    limit_lin_z_lower: float
    """ Lower limit of Z axis translation

    :type: float
    """

    limit_lin_z_upper: float
    """ Upper limit of Z axis translation

    :type: float
    """

    motor_ang_max_impulse: float
    """ Maximum angular motor impulse

    :type: float
    """

    motor_ang_target_velocity: float
    """ Target angular motor velocity

    :type: float
    """

    motor_lin_max_impulse: float
    """ Maximum linear motor impulse

    :type: float
    """

    motor_lin_target_velocity: float
    """ Target linear motor velocity

    :type: float
    """

    object1: Object
    """ First Rigid Body Object to be constrained

    :type: Object
    """

    object2: Object
    """ Second Rigid Body Object to be constrained

    :type: Object
    """

    solver_iterations: int
    """ Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)

    :type: int
    """

    spring_damping_ang_x: float
    """ Damping on the X rotational axis

    :type: float
    """

    spring_damping_ang_y: float
    """ Damping on the Y rotational axis

    :type: float
    """

    spring_damping_ang_z: float
    """ Damping on the Z rotational axis

    :type: float
    """

    spring_damping_x: float
    """ Damping on the X axis

    :type: float
    """

    spring_damping_y: float
    """ Damping on the Y axis

    :type: float
    """

    spring_damping_z: float
    """ Damping on the Z axis

    :type: float
    """

    spring_stiffness_ang_x: float
    """ Stiffness on the X rotational axis

    :type: float
    """

    spring_stiffness_ang_y: float
    """ Stiffness on the Y rotational axis

    :type: float
    """

    spring_stiffness_ang_z: float
    """ Stiffness on the Z rotational axis

    :type: float
    """

    spring_stiffness_x: float
    """ Stiffness on the X axis

    :type: float
    """

    spring_stiffness_y: float
    """ Stiffness on the Y axis

    :type: float
    """

    spring_stiffness_z: float
    """ Stiffness on the Z axis

    :type: float
    """

    spring_type: str
    """ Which implementation of spring to use

    :type: str
    """

    type: str
    """ Type of Rigid Body Constraint

    :type: str
    """

    use_breaking: bool
    """ Constraint can be broken if it receives an impulse above the threshold

    :type: bool
    """

    use_limit_ang_x: bool
    """ Limit rotation around X axis

    :type: bool
    """

    use_limit_ang_y: bool
    """ Limit rotation around Y axis

    :type: bool
    """

    use_limit_ang_z: bool
    """ Limit rotation around Z axis

    :type: bool
    """

    use_limit_lin_x: bool
    """ Limit translation on X axis

    :type: bool
    """

    use_limit_lin_y: bool
    """ Limit translation on Y axis

    :type: bool
    """

    use_limit_lin_z: bool
    """ Limit translation on Z axis

    :type: bool
    """

    use_motor_ang: bool
    """ Enable angular motor

    :type: bool
    """

    use_motor_lin: bool
    """ Enable linear motor

    :type: bool
    """

    use_override_solver_iterations: bool
    """ Override the number of solver iterations for this constraint

    :type: bool
    """

    use_spring_ang_x: bool
    """ Enable spring on X rotational axis

    :type: bool
    """

    use_spring_ang_y: bool
    """ Enable spring on Y rotational axis

    :type: bool
    """

    use_spring_ang_z: bool
    """ Enable spring on Z rotational axis

    :type: bool
    """

    use_spring_x: bool
    """ Enable spring on X axis

    :type: bool
    """

    use_spring_y: bool
    """ Enable spring on Y axis

    :type: bool
    """

    use_spring_z: bool
    """ Enable spring on Z axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RigidBodyObject(bpy_struct):
    """Settings for object participating in Rigid Body Simulation"""

    angular_damping: float
    """ Amount of angular velocity that is lost over time

    :type: float
    """

    collision_collections: list[bool]
    """ Collision collections rigid body belongs to

    :type: list[bool]
    """

    collision_margin: float
    """ Threshold of distance near surface where collisions are still considered (best results when non-zero)

    :type: float
    """

    collision_shape: str
    """ Collision Shape of object in Rigid Body Simulations

    :type: str
    """

    deactivate_angular_velocity: float
    """ Angular Velocity below which simulation stops simulating object

    :type: float
    """

    deactivate_linear_velocity: float
    """ Linear Velocity below which simulation stops simulating object

    :type: float
    """

    enabled: bool
    """ Rigid Body actively participates to the simulation

    :type: bool
    """

    friction: float
    """ Resistance of object to movement

    :type: float
    """

    kinematic: bool
    """ Allow rigid body to be controlled by the animation system

    :type: bool
    """

    linear_damping: float
    """ Amount of linear velocity that is lost over time

    :type: float
    """

    mass: float
    """ How much the object 'weighs' irrespective of gravity

    :type: float
    """

    mesh_source: str
    """ Source of the mesh used to create collision shape

    :type: str
    """

    restitution: float
    """ Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)

    :type: float
    """

    type: str
    """ Role of object in Rigid Body Simulations

    :type: str
    """

    use_deactivation: bool
    """ Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)

    :type: bool
    """

    use_deform: bool
    """ Rigid body deforms during simulation

    :type: bool
    """

    use_margin: bool
    """ Use custom collision margin (some shapes will have a visible gap around them)

    :type: bool
    """

    use_start_deactivated: bool
    """ Deactivate rigid body at the start of the simulation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RigidBodyWorld(bpy_struct):
    """Self-contained rigid body simulation environment and settings"""

    collection: Collection
    """ Collection containing objects participating in this simulation

    :type: Collection
    """

    constraints: Collection
    """ Collection containing rigid body constraint objects

    :type: Collection
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    enabled: bool
    """ Simulation will be evaluated

    :type: bool
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    solver_iterations: int
    """ Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)

    :type: int
    """

    substeps_per_frame: int
    """ Number of simulation steps taken per frame (higher values are more accurate but slower)

    :type: int
    """

    time_scale: float
    """ Change the speed of the simulation

    :type: float
    """

    use_split_impulse: bool
    """ Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)

    :type: bool
    """

    def convex_sweep_test(
        self,
        object: Object,
        start: collections.abc.Sequence[float] | mathutils.Vector | None,
        end: collections.abc.Sequence[float] | mathutils.Vector | None,
    ):
        """Sweep test convex rigidbody against the current rigidbody world

                :param object: Rigidbody object with a convex collision shape
                :type object: Object
                :param start:
                :type start: collections.abc.Sequence[float] | mathutils.Vector | None
                :param end:
                :type end: collections.abc.Sequence[float] | mathutils.Vector | None
                :return: object_location, The hit location of this sweep test, `mathutils.Vector` of 3 items in [-inf, inf]

        hitpoint, The hit location of this sweep test, `mathutils.Vector` of 3 items in [-inf, inf]

        normal, The face normal at the sweep test hit location, `mathutils.Vector` of 3 items in [-inf, inf]

        has_hit, If the function has found collision point, value is 1, otherwise 0, int in [-inf, inf]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SPHFluidSettings(bpy_struct):
    """Settings for particle fluids physics"""

    buoyancy: float
    """ Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid

    :type: float
    """

    fluid_radius: float
    """ Fluid interaction radius

    :type: float
    """

    linear_viscosity: float
    """ Linear viscosity

    :type: float
    """

    plasticity: float
    """ How much the spring rest length can change after the elastic limit is crossed

    :type: float
    """

    repulsion: float
    """ How strongly the fluid tries to keep from clustering (factor of stiffness)

    :type: float
    """

    rest_density: float
    """ Fluid rest density

    :type: float
    """

    rest_length: float
    """ Spring rest length (factor of particle radius)

    :type: float
    """

    solver: str
    """ The code used to calculate internal forces on particles

    :type: str
    """

    spring_force: float
    """ Spring force

    :type: float
    """

    spring_frames: int
    """ Create springs for this number of frames since particles birth (0 is always)

    :type: int
    """

    stiff_viscosity: float
    """ Creates viscosity for expanding fluid

    :type: float
    """

    stiffness: float
    """ How incompressible the fluid is (speed of sound)

    :type: float
    """

    use_factor_density: bool
    """ Density is calculated as a factor of default density (depends on particle size)

    :type: bool
    """

    use_factor_radius: bool
    """ Interaction radius is a factor of 4 * particle size

    :type: bool
    """

    use_factor_repulsion: bool
    """ Repulsion is a factor of stiffness

    :type: bool
    """

    use_factor_rest_length: bool
    """ Spring rest length is a factor of 2 * particle size

    :type: bool
    """

    use_factor_stiff_viscosity: bool
    """ Stiff viscosity is a factor of normal viscosity

    :type: bool
    """

    use_initial_rest_length: bool
    """ Use the initial length as spring rest length instead of 2 * particle size

    :type: bool
    """

    use_viscoelastic_springs: bool
    """ Use viscoelastic springs instead of Hooke's springs

    :type: bool
    """

    yield_ratio: float
    """ How much the spring has to be stretched/compressed in order to change its rest length

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SceneDisplay(bpy_struct):
    """Scene display settings for 3D viewport"""

    light_direction: mathutils.Vector
    """ Direction of the light for shadows and highlights

    :type: mathutils.Vector
    """

    matcap_ssao_attenuation: float
    """ Attenuation constant

    :type: float
    """

    matcap_ssao_distance: float
    """ Distance of object that contribute to the Cavity/Edge effect

    :type: float
    """

    matcap_ssao_samples: int
    """ Number of samples

    :type: int
    """

    render_aa: str
    """ Method of anti-aliasing when rendering final image

    :type: str
    """

    shading: View3DShading
    """ Shading settings for OpenGL render engine

    :type: View3DShading
    """

    shadow_focus: float
    """ Shadow factor hardness

    :type: float
    """

    shadow_shift: float
    """ Shadow termination angle

    :type: float
    """

    viewport_aa: str
    """ Method of anti-aliasing when rendering 3d viewport

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SceneEEVEE(bpy_struct):
    """Scene display settings for 3D viewport"""

    bloom_clamp: float
    """ Maximum intensity a bloom pixel can have (0 to disable)

    :type: float
    """

    bloom_color: mathutils.Color
    """ Color applied to the bloom effect

    :type: mathutils.Color
    """

    bloom_intensity: float
    """ Blend factor

    :type: float
    """

    bloom_knee: float
    """ Makes transition between under/over-threshold gradual

    :type: float
    """

    bloom_radius: float
    """ Bloom spread distance

    :type: float
    """

    bloom_threshold: float
    """ Filters out pixels under this level of brightness

    :type: float
    """

    bokeh_denoise_fac: float
    """ Amount of flicker removal applied to bokeh highlights

    :type: float
    """

    bokeh_max_size: float
    """ Max size of the bokeh shape for the depth of field (lower is faster)

    :type: float
    """

    bokeh_neighbor_max: float
    """ Maximum brightness to consider when rejecting bokeh sprites based on neighborhood (lower is faster)

    :type: float
    """

    bokeh_overblur: float
    """ Apply blur to each jittered sample to reduce under-sampling artifacts

    :type: float
    """

    bokeh_threshold: float
    """ Brightness threshold for using sprite base depth of field

    :type: float
    """

    gi_auto_bake: bool
    """ Auto bake indirect lighting when editing probes

    :type: bool
    """

    gi_cache_info: str
    """ Info on current cache status

    :type: str
    """

    gi_cubemap_display_size: float
    """ Size of the cubemap spheres to debug captured light

    :type: float
    """

    gi_cubemap_resolution: str
    """ Size of every cubemaps

    :type: str
    """

    gi_diffuse_bounces: int
    """ Number of times the light is reinjected inside light grids, 0 disable indirect diffuse light

    :type: int
    """

    gi_filter_quality: float
    """ Take more samples during cubemap filtering to remove artifacts

    :type: float
    """

    gi_glossy_clamp: float
    """ Clamp pixel intensity to reduce noise inside glossy reflections from reflection cubemaps (0 to disable)

    :type: float
    """

    gi_irradiance_display_size: float
    """ Size of the irradiance sample spheres to debug captured light

    :type: float
    """

    gi_irradiance_pool_size: str
    """ Size of the irradiance pool, a bigger pool size allows for more irradiance grid in the scene but might not fit into GPU memory and decrease performance

    :type: str
    """

    gi_irradiance_smoothing: float
    """ Smoother irradiance interpolation but introduce light bleeding

    :type: float
    """

    gi_show_cubemaps: bool
    """ Display captured cubemaps in the viewport

    :type: bool
    """

    gi_show_irradiance: bool
    """ Display irradiance samples in the viewport

    :type: bool
    """

    gi_visibility_resolution: str
    """ Size of the shadow map applied to each irradiance sample

    :type: str
    """

    gtao_distance: float
    """ Distance of object that contribute to the ambient occlusion effect

    :type: float
    """

    gtao_factor: float
    """ Factor for ambient occlusion blending

    :type: float
    """

    gtao_quality: float
    """ Precision of the horizon search

    :type: float
    """

    horizon_bias: float
    """ Bias the horizon angles to reduce self intersection artifacts

    :type: float
    """

    horizon_quality: float
    """ Precision of the horizon scan

    :type: float
    """

    horizon_thickness: float
    """ Constant thickness of the surfaces considered when doing horizon scan and by extension ambient occlusion

    :type: float
    """

    light_threshold: float
    """ Minimum light intensity for a light to contribute to the lighting

    :type: float
    """

    motion_blur_depth_scale: float
    """ Lower values will reduce background bleeding onto foreground elements

    :type: float
    """

    motion_blur_max: int
    """ Maximum blur distance a pixel can spread over

    :type: int
    """

    motion_blur_position: str
    """ Offset for the shutter's time interval, allows to change the motion blur trails

    :type: str
    """

    motion_blur_shutter: float
    """ Time taken in frames between shutter open and close

    :type: float
    """

    motion_blur_steps: int
    """ Controls accuracy of motion blur, more steps means longer render time

    :type: int
    """

    overscan_size: float
    """ Percentage of render size to add as overscan to the internal render buffers

    :type: float
    """

    ray_tracing_method: str
    """ Select the tracing method used to find scene-ray intersections

    :type: str
    """

    ray_tracing_options: RaytraceEEVEE
    """ EEVEE settings for tracing reflections

    :type: RaytraceEEVEE
    """

    shadow_cascade_size: str
    """ Size of sun light shadow maps

    :type: str
    """

    shadow_cube_size: str
    """ Size of point and area light shadow maps

    :type: str
    """

    shadow_normal_bias: float
    """ Move shadows along their normal

    :type: float
    """

    shadow_pool_size: str
    """ Size of the shadow pool, a bigger pool size allows for more shadows in the scene but might not fit into GPU memory

    :type: str
    """

    shadow_ray_count: int
    """ Amount of shadow ray to trace for each light

    :type: int
    """

    shadow_step_count: int
    """ Amount of shadow map sample per shadow ray

    :type: int
    """

    ssr_border_fade: float
    """ Screen percentage used to fade the SSR

    :type: float
    """

    ssr_firefly_fac: float
    """ Clamp pixel intensity to remove noise (0 to disable)

    :type: float
    """

    ssr_max_roughness: float
    """ Do not raytrace reflections for roughness above this value

    :type: float
    """

    ssr_quality: float
    """ Precision of the screen space ray-tracing

    :type: float
    """

    ssr_thickness: float
    """ Pixel thickness used to detect intersection

    :type: float
    """

    sss_jitter_threshold: float
    """ Rotate samples that are below this threshold

    :type: float
    """

    sss_samples: int
    """ Number of samples to compute the scattering effect

    :type: int
    """

    taa_render_samples: int
    """ Number of samples per pixel for rendering

    :type: int
    """

    taa_samples: int
    """ Number of samples, unlimited if 0

    :type: int
    """

    use_bloom: bool
    """ High brightness pixels generate a glowing effect

    :type: bool
    """

    use_bokeh_high_quality_slight_defocus: bool
    """ Sample all pixels in almost in-focus regions to eliminate noise

    :type: bool
    """

    use_bokeh_jittered: bool
    """ Jitter camera position to create accurate blurring using render samples

    :type: bool
    """

    use_gtao: bool
    """ Enable ambient occlusion to simulate medium scale indirect shadowing

    :type: bool
    """

    use_gtao_bent_normals: bool
    """ Compute main non occluded direction to sample the environment

    :type: bool
    """

    use_gtao_bounce: bool
    """ An approximation to simulate light bounces giving less occlusion on brighter objects

    :type: bool
    """

    use_motion_blur: bool
    """ Enable motion blur effect (only in camera view)

    :type: bool
    """

    use_overscan: bool
    """ Internally render past the image border to avoid screen-space effects disappearing

    :type: bool
    """

    use_raytracing: bool
    """ Enable the ray-tracing module

    :type: bool
    """

    use_shadow_high_bitdepth: bool
    """ Use 32-bit shadows

    :type: bool
    """

    use_shadows: bool
    """ Enable shadow casting from lights

    :type: bool
    """

    use_soft_shadows: bool
    """ Randomize shadowmaps origin to create soft shadows

    :type: bool
    """

    use_ssr: bool
    """ Enable screen space reflection

    :type: bool
    """

    use_ssr_halfres: bool
    """ Raytrace at a lower resolution

    :type: bool
    """

    use_ssr_refraction: bool
    """ Enable screen space Refractions

    :type: bool
    """

    use_taa_reprojection: bool
    """ Denoise image using temporal reprojection (can leave some ghosting)

    :type: bool
    """

    use_volumetric_lights: bool
    """ Enable scene light interactions with volumetrics

    :type: bool
    """

    use_volumetric_shadows: bool
    """ Generate shadows from volumetric material (Very expensive)

    :type: bool
    """

    volumetric_end: float
    """ End distance of the volumetric effect

    :type: float
    """

    volumetric_light_clamp: float
    """ Maximum light contribution, reducing noise

    :type: float
    """

    volumetric_ray_depth: int
    """ Maximum surface intersection count used by the accurate volume intersection method. Will create artifact if it is exceeded

    :type: int
    """

    volumetric_sample_distribution: float
    """ Distribute more samples closer to the camera

    :type: float
    """

    volumetric_samples: int
    """ Number of samples to compute volumetric effects

    :type: int
    """

    volumetric_shadow_samples: int
    """ Number of samples to compute volumetric shadowing

    :type: int
    """

    volumetric_start: float
    """ Start distance of the volumetric effect

    :type: float
    """

    volumetric_tile_size: str
    """ Control the quality of the volumetric effects (lower size increase vram usage and quality)

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SceneGpencil(bpy_struct):
    """Render settings"""

    antialias_threshold: float
    """ Threshold for edge detection algorithm (higher values might over-blur some part of the image)

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SceneHydra(bpy_struct):
    """Scene Hydra render engine settings"""

    export_method: str
    """ How to export the Blender scene to the Hydra render engine

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SceneObjects(bpy_prop_collection[Object], bpy_struct):
    """All of the scene objects"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SceneRenderView(bpy_struct):
    """Render viewpoint for 3D stereo and multiview rendering"""

    camera_suffix: str
    """ Suffix to identify the cameras to use, and added to the render images for this view

    :type: str
    """

    file_suffix: str
    """ Suffix added to the render images for this view

    :type: str
    """

    name: str
    """ Render view name

    :type: str
    """

    use: bool
    """ Disable or enable the render view

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Scopes(bpy_struct):
    """Scopes for statistical view of an image"""

    accuracy: float
    """ Proportion of original image source pixel lines to sample

    :type: float
    """

    histogram: Histogram
    """ Histogram for viewing image statistics

    :type: Histogram
    """

    use_full_resolution: bool
    """ Sample every pixel of the image

    :type: bool
    """

    vectorscope_alpha: float
    """ Opacity of the points

    :type: float
    """

    vectorscope_mode: str
    """ 

    :type: str
    """

    waveform_alpha: float
    """ Opacity of the points

    :type: float
    """

    waveform_mode: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ScriptDirectory(bpy_struct):
    directory: str
    """ Alternate script path, matching the default layout with sub-directories: startup, add-ons, modules, and presets (requires restart)

    :type: str
    """

    name: str
    """ Identifier for the Python scripts directory

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ScriptDirectoryCollection(bpy_prop_collection[ScriptDirectory], bpy_struct):
    @classmethod
    def new(cls) -> ScriptDirectory:
        """Add a new Python script directory

        :return:
        :rtype: ScriptDirectory
        """
        ...

    @classmethod
    def remove(cls, script_directory: ScriptDirectory):
        """Remove a Python script directory

        :param script_directory:
        :type script_directory: ScriptDirectory
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Sequence(bpy_struct):
    """Sequence strip in the sequence editor"""

    blend_alpha: float
    """ Percentage of how much the strip's colors affect other strips

    :type: float
    """

    blend_type: str
    """ Method for controlling how the strip combines with other strips

    :type: str
    """

    channel: int
    """ Y position of the sequence strip

    :type: int
    """

    color_tag: str
    """ Color tag for a strip

    :type: str
    """

    effect_fader: float
    """ Custom fade value

    :type: float
    """

    frame_duration: int
    """ The length of the contents of this strip before the handles are applied

    :type: int
    """

    frame_final_duration: int
    """ The length of the contents of this strip after the handles are applied

    :type: int
    """

    frame_final_end: int
    """ End frame displayed in the sequence editor after offsets are applied

    :type: int
    """

    frame_final_start: int
    """ Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame

    :type: int
    """

    frame_offset_end: float
    """ 

    :type: float
    """

    frame_offset_start: float
    """ 

    :type: float
    """

    frame_start: float
    """ X position where the strip begins

    :type: float
    """

    lock: bool
    """ Lock strip so that it cannot be transformed

    :type: bool
    """

    modifiers: SequenceModifiers
    """ Modifiers affecting this strip

    :type: SequenceModifiers
    """

    mute: bool
    """ Disable strip so that it cannot be viewed in the output

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    override_cache_settings: bool
    """ Override global cache settings

    :type: bool
    """

    select: bool
    """ 

    :type: bool
    """

    select_left_handle: bool
    """ 

    :type: bool
    """

    select_right_handle: bool
    """ 

    :type: bool
    """

    show_retiming_keys: bool
    """ Show retiming keys, so they can be moved

    :type: bool
    """

    type: str
    """ 

    :type: str
    """

    use_cache_composite: bool
    """ Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage

    :type: bool
    """

    use_cache_preprocessed: bool
    """ Cache preprocessed images, for faster tweaking of effects at the cost of memory usage

    :type: bool
    """

    use_cache_raw: bool
    """ Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage

    :type: bool
    """

    use_default_fade: bool
    """ Fade effect using the built-in default (usually make transition as long as effect strip)

    :type: bool
    """

    use_linear_modifiers: bool
    """ Calculate modifiers in linear space instead of sequencer's space

    :type: bool
    """

    def strip_elem_from_frame(self, frame: int | None) -> SequenceElement:
        """Return the strip element from a given frame or None

        :param frame: Frame, The frame to get the strip element from
        :type frame: int | None
        :return: strip element of the current frame
        :rtype: SequenceElement
        """
        ...

    def swap(self, other: Sequence):
        """swap

        :param other: Other
        :type other: Sequence
        """
        ...

    def move_to_meta(self, meta_sequence: Sequence):
        """move_to_meta

        :param meta_sequence: Destination Meta Sequence, Meta to move the strip into
        :type meta_sequence: Sequence
        """
        ...

    def parent_meta(self) -> Sequence:
        """Parent meta

        :return: Parent Meta
        :rtype: Sequence
        """
        ...

    def invalidate_cache(self, type: str):
        """Invalidate cached images for strip and all dependent strips

        :param type: Type, Cache Type
        :type type: str
        """
        ...

    def split(self, frame: int | None, split_method: str) -> Sequence:
        """Split Sequence

        :param frame: Frame where to split the strip
        :type frame: int | None
        :param split_method:
        :type split_method: str
        :return: Right side Sequence
        :rtype: Sequence
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceColorBalanceData(bpy_struct):
    """Color balance parameters for a sequence strip and its modifiers"""

    correction_method: str
    """ 

    :type: str
    """

    gain: mathutils.Color
    """ Color balance gain (highlights)

    :type: mathutils.Color
    """

    gamma: mathutils.Color
    """ Color balance gamma (midtones)

    :type: mathutils.Color
    """

    invert_gain: bool
    """ Invert the gain color

    :type: bool
    """

    invert_gamma: bool
    """ Invert the gamma color

    :type: bool
    """

    invert_lift: bool
    """ Invert the lift color

    :type: bool
    """

    invert_offset: bool
    """ Invert the offset color

    :type: bool
    """

    invert_power: bool
    """ Invert the power color

    :type: bool
    """

    invert_slope: bool
    """ Invert the slope color

    :type: bool
    """

    lift: mathutils.Color
    """ Color balance lift (shadows)

    :type: mathutils.Color
    """

    offset: mathutils.Color
    """ Correction for entire tonal range

    :type: mathutils.Color
    """

    power: mathutils.Color
    """ Correction for midtones

    :type: mathutils.Color
    """

    slope: mathutils.Color
    """ Correction for highlights

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceCrop(bpy_struct):
    """Cropping parameters for a sequence strip"""

    max_x: int
    """ Number of pixels to crop from the right side

    :type: int
    """

    max_y: int
    """ Number of pixels to crop from the top

    :type: int
    """

    min_x: int
    """ Number of pixels to crop from the left side

    :type: int
    """

    min_y: int
    """ Number of pixels to crop from the bottom

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceEditor(bpy_struct):
    """Sequence editing data for a Scene data-block"""

    active_strip: Sequence | None
    """ Sequencer's active strip

    :type: Sequence | None
    """

    channels: bpy_prop_collection[SequenceTimelineChannel]
    """ 

    :type: bpy_prop_collection[SequenceTimelineChannel]
    """

    meta_stack: bpy_prop_collection[Sequence]
    """ Meta strip stack, last is currently edited meta strip

    :type: bpy_prop_collection[Sequence]
    """

    overlay_frame: int
    """ Number of frames to offset

    :type: int
    """

    proxy_dir: str
    """ 

    :type: str
    """

    proxy_storage: str
    """ How to store proxies for this project

    :type: str
    """

    selected_retiming_keys: bool
    """ 

    :type: bool
    """

    sequences: SequencesTopLevel
    """ Top-level strips only

    :type: SequencesTopLevel
    """

    sequences_all: bpy_prop_collection[Sequence]
    """ All strips, recursively including those inside metastrips

    :type: bpy_prop_collection[Sequence]
    """

    show_cache: bool
    """ Visualize cached images on the timeline

    :type: bool
    """

    show_cache_composite: bool
    """ Visualize cached composite images

    :type: bool
    """

    show_cache_final_out: bool
    """ Visualize cached complete frames

    :type: bool
    """

    show_cache_preprocessed: bool
    """ Visualize cached pre-processed images

    :type: bool
    """

    show_cache_raw: bool
    """ Visualize cached raw images

    :type: bool
    """

    show_overlay_frame: bool
    """ Partial overlay on top of the sequencer with a frame offset

    :type: bool
    """

    use_cache_composite: bool
    """ Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage

    :type: bool
    """

    use_cache_final: bool
    """ Cache final image for each frame

    :type: bool
    """

    use_cache_preprocessed: bool
    """ Cache preprocessed images, for faster tweaking of effects at the cost of memory usage

    :type: bool
    """

    use_cache_raw: bool
    """ Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage

    :type: bool
    """

    use_overlay_frame_lock: bool
    """ 

    :type: bool
    """

    use_prefetch: bool
    """ Render frames ahead of current frame in the background for faster playback

    :type: bool
    """

    def display_stack(self, meta_sequence: Sequence | None):
        """Display sequences stack

        :param meta_sequence: Meta Sequence, Meta to display its stack
        :type meta_sequence: Sequence | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceElement(bpy_struct):
    """Sequence strip data for a single frame"""

    filename: str
    """ Name of the source file

    :type: str
    """

    orig_fps: float
    """ Original frames per second

    :type: float
    """

    orig_height: int
    """ Original image height

    :type: int
    """

    orig_width: int
    """ Original image width

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceElements(bpy_prop_collection[SequenceElement], bpy_struct):
    """Collection of SequenceElement"""

    def append(self, filename: str | typing.Any) -> SequenceElement:
        """Push an image from ImageSequence.directory

        :param filename: Filepath to image
        :type filename: str | typing.Any
        :return: New SequenceElement
        :rtype: SequenceElement
        """
        ...

    def pop(self, index: int | None):
        """Pop an image off the collection

        :param index: Index of image to remove
        :type index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceModifier(bpy_struct):
    """Modifier for sequence strip"""

    input_mask_id: Mask
    """ Mask ID used as mask input for the modifier

    :type: Mask
    """

    input_mask_strip: Sequence
    """ Strip used as mask input for the modifier

    :type: Sequence
    """

    input_mask_type: str
    """ Type of input data used for mask

    :type: str
    """

    mask_time: str
    """ Time to use for the Mask animation

    :type: str
    """

    mute: bool
    """ Mute this modifier

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    show_expanded: bool
    """ Mute expanded settings for the modifier

    :type: bool
    """

    type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceModifiers(bpy_prop_collection[SequenceModifier], bpy_struct):
    """Collection of strip modifiers"""

    def new(self, name: str | typing.Any, type: str | None) -> SequenceModifier:
        """Add a new modifier

        :param name: New name for the modifier
        :type name: str | typing.Any
        :param type: Modifier type to add
        :type type: str | None
        :return: Newly created modifier
        :rtype: SequenceModifier
        """
        ...

    def remove(self, modifier: SequenceModifier):
        """Remove an existing modifier from the sequence

        :param modifier: Modifier to remove
        :type modifier: SequenceModifier
        """
        ...

    def clear(self):
        """Remove all modifiers from the sequence"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceProxy(bpy_struct):
    """Proxy parameters for a sequence strip"""

    build_100: bool
    """ Build 100% proxy resolution

    :type: bool
    """

    build_25: bool
    """ Build 25% proxy resolution

    :type: bool
    """

    build_50: bool
    """ Build 50% proxy resolution

    :type: bool
    """

    build_75: bool
    """ Build 75% proxy resolution

    :type: bool
    """

    build_free_run: bool
    """ Build free run time code index

    :type: bool
    """

    build_free_run_rec_date: bool
    """ Build free run time code index using Record Date/Time

    :type: bool
    """

    build_record_run: bool
    """ Build record run time code index

    :type: bool
    """

    directory: str
    """ Location to store the proxy files

    :type: str
    """

    filepath: str
    """ Location of custom proxy file

    :type: str
    """

    quality: int
    """ Quality of proxies to build

    :type: int
    """

    timecode: str
    """ Method for reading the inputs timecode

    :type: str
    """

    use_overwrite: bool
    """ Overwrite existing proxy files when building

    :type: bool
    """

    use_proxy_custom_directory: bool
    """ Use a custom directory to store data

    :type: bool
    """

    use_proxy_custom_file: bool
    """ Use a custom file to read proxy data from

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceTimelineChannel(bpy_struct):
    lock: bool
    """ 

    :type: bool
    """

    mute: bool
    """ 

    :type: bool
    """

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceTransform(bpy_struct):
    """Transform parameters for a sequence strip"""

    filter: str
    """ Type of filter to use for image transformation

    :type: str
    """

    offset_x: float
    """ Move along X axis

    :type: float
    """

    offset_y: float
    """ Move along Y axis

    :type: float
    """

    origin: bpy_prop_array[float]
    """ Origin of image for transformation

    :type: bpy_prop_array[float]
    """

    rotation: float
    """ Rotate around image center

    :type: float
    """

    scale_x: float
    """ Scale along X axis

    :type: float
    """

    scale_y: float
    """ Scale along Y axis

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequencerPreviewOverlay(bpy_struct):
    show_annotation: bool
    """ Show annotations for this view

    :type: bool
    """

    show_cursor: bool
    """ 

    :type: bool
    """

    show_image_outline: bool
    """ 

    :type: bool
    """

    show_metadata: bool
    """ Show metadata of first visible strip

    :type: bool
    """

    show_safe_areas: bool
    """ Show TV title safe and action safe areas in preview

    :type: bool
    """

    show_safe_center: bool
    """ Show safe areas to fit content in a different aspect ratio

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequencerTimelineOverlay(bpy_struct):
    show_fcurves: bool
    """ Display strip opacity/volume curve

    :type: bool
    """

    show_grid: bool
    """ Show vertical grid lines

    :type: bool
    """

    show_strip_duration: bool
    """ 

    :type: bool
    """

    show_strip_name: bool
    """ 

    :type: bool
    """

    show_strip_offset: bool
    """ Display strip in/out offsets

    :type: bool
    """

    show_strip_retiming: bool
    """ Display retiming keys on top of strips

    :type: bool
    """

    show_strip_source: bool
    """ Display path to source file, or name of source datablock

    :type: bool
    """

    show_strip_tag_color: bool
    """ Display the strip color tags in the sequencer

    :type: bool
    """

    show_thumbnails: bool
    """ Show strip thumbnails

    :type: bool
    """

    waveform_display_style: str
    """ How Waveforms are displayed

    :type: str
    """

    waveform_display_type: str
    """ How Waveforms are displayed

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequencerToolSettings(bpy_struct):
    fit_method: str
    """ Scale fit method

    :type: str
    """

    overlap_mode: str
    """ How to resolve overlap after transformation

    :type: str
    """

    pivot_point: str
    """ Rotation or scaling pivot point

    :type: str
    """

    snap_distance: int
    """ Maximum distance for snapping in pixels

    :type: int
    """

    snap_ignore_muted: bool
    """ Don't snap to hidden strips

    :type: bool
    """

    snap_ignore_sound: bool
    """ Don't snap to sound strips

    :type: bool
    """

    snap_to_current_frame: bool
    """ Snap to current frame

    :type: bool
    """

    snap_to_hold_offset: bool
    """ Snap to strip hold offsets

    :type: bool
    """

    use_snap_current_frame_to_strips: bool
    """ Snap current frame to strip start or end

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequencesMeta(bpy_prop_collection[Sequence], bpy_struct):
    """Collection of Sequences"""

    def new_clip(
        self,
        name: str | typing.Any,
        clip: MovieClip,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new movie clip sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param clip: Movie clip to add
        :type clip: MovieClip
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_mask(
        self,
        name: str | typing.Any,
        mask: Mask,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new mask sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param mask: Mask to add
        :type mask: Mask
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_scene(
        self,
        name: str | typing.Any,
        scene: Scene,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new scene sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param scene: Scene to add
        :type scene: Scene
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_image(
        self,
        name: str | typing.Any,
        filepath: str | typing.Any,
        channel: int | None,
        frame_start: int | None,
        fit_method: str | None = "ORIGINAL",
    ) -> Sequence:
        """Add a new image sequence

                :param name: Name for the new sequence
                :type name: str | typing.Any
                :param filepath: Filepath to image
                :type filepath: str | typing.Any
                :param channel: Channel, The channel for the new sequence
                :type channel: int | None
                :param frame_start: The start frame for the new sequence
                :type frame_start: int | None
                :param fit_method: Image Fit Method

        FIT
        Scale to Fit -- Scale image so fits in preview.

        FILL
        Scale to Fill -- Scale image so it fills preview completely.

        STRETCH
        Stretch to Fill -- Stretch image so it fills preview.

        ORIGINAL
        Use Original Size -- Don't scale the image.
                :type fit_method: str | None
                :return: New Sequence
                :rtype: Sequence
        """
        ...

    def new_movie(
        self,
        name: str | typing.Any,
        filepath: str | typing.Any,
        channel: int | None,
        frame_start: int | None,
        fit_method: str | None = "ORIGINAL",
    ) -> Sequence:
        """Add a new movie sequence

                :param name: Name for the new sequence
                :type name: str | typing.Any
                :param filepath: Filepath to movie
                :type filepath: str | typing.Any
                :param channel: Channel, The channel for the new sequence
                :type channel: int | None
                :param frame_start: The start frame for the new sequence
                :type frame_start: int | None
                :param fit_method: Image Fit Method

        FIT
        Scale to Fit -- Scale image so fits in preview.

        FILL
        Scale to Fill -- Scale image so it fills preview completely.

        STRETCH
        Stretch to Fill -- Stretch image so it fills preview.

        ORIGINAL
        Use Original Size -- Don't scale the image.
                :type fit_method: str | None
                :return: New Sequence
                :rtype: Sequence
        """
        ...

    def new_sound(
        self,
        name: str | typing.Any,
        filepath: str | typing.Any,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new sound sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param filepath: Filepath to movie
        :type filepath: str | typing.Any
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_meta(
        self, name: str | typing.Any, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new meta sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_effect(
        self,
        name: str | typing.Any,
        type: str | None,
        channel: int | None,
        frame_start: int | None,
        frame_end: typing.Any | None = 0,
        seq1: Sequence | None = None,
        seq2: Sequence | None = None,
        seq3: Sequence | None = None,
    ) -> Sequence:
        """Add a new effect sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param type: Type, type for the new sequence
        :type type: str | None
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :param frame_end: The end frame for the new sequence
        :type frame_end: typing.Any | None
        :param seq1: Sequence 1 for effect
        :type seq1: Sequence | None
        :param seq2: Sequence 2 for effect
        :type seq2: Sequence | None
        :param seq3: Sequence 3 for effect
        :type seq3: Sequence | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def remove(self, sequence: Sequence):
        """Remove a Sequence

        :param sequence: Sequence to remove
        :type sequence: Sequence
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequencesTopLevel(bpy_prop_collection[Sequence], bpy_struct):
    """Collection of Sequences"""

    def new_clip(
        self,
        name: str | typing.Any,
        clip: MovieClip,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new movie clip sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param clip: Movie clip to add
        :type clip: MovieClip
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_mask(
        self,
        name: str | typing.Any,
        mask: Mask,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new mask sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param mask: Mask to add
        :type mask: Mask
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_scene(
        self,
        name: str | typing.Any,
        scene: Scene,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new scene sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param scene: Scene to add
        :type scene: Scene
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_image(
        self,
        name: str | typing.Any,
        filepath: str | typing.Any,
        channel: int | None,
        frame_start: int | None,
        fit_method: str | None = "ORIGINAL",
    ) -> Sequence:
        """Add a new image sequence

                :param name: Name for the new sequence
                :type name: str | typing.Any
                :param filepath: Filepath to image
                :type filepath: str | typing.Any
                :param channel: Channel, The channel for the new sequence
                :type channel: int | None
                :param frame_start: The start frame for the new sequence
                :type frame_start: int | None
                :param fit_method: Image Fit Method

        FIT
        Scale to Fit -- Scale image so fits in preview.

        FILL
        Scale to Fill -- Scale image so it fills preview completely.

        STRETCH
        Stretch to Fill -- Stretch image so it fills preview.

        ORIGINAL
        Use Original Size -- Don't scale the image.
                :type fit_method: str | None
                :return: New Sequence
                :rtype: Sequence
        """
        ...

    def new_movie(
        self,
        name: str | typing.Any,
        filepath: str | typing.Any,
        channel: int | None,
        frame_start: int | None,
        fit_method: str | None = "ORIGINAL",
    ) -> Sequence:
        """Add a new movie sequence

                :param name: Name for the new sequence
                :type name: str | typing.Any
                :param filepath: Filepath to movie
                :type filepath: str | typing.Any
                :param channel: Channel, The channel for the new sequence
                :type channel: int | None
                :param frame_start: The start frame for the new sequence
                :type frame_start: int | None
                :param fit_method: Image Fit Method

        FIT
        Scale to Fit -- Scale image so fits in preview.

        FILL
        Scale to Fill -- Scale image so it fills preview completely.

        STRETCH
        Stretch to Fill -- Stretch image so it fills preview.

        ORIGINAL
        Use Original Size -- Don't scale the image.
                :type fit_method: str | None
                :return: New Sequence
                :rtype: Sequence
        """
        ...

    def new_sound(
        self,
        name: str | typing.Any,
        filepath: str | typing.Any,
        channel: int | None,
        frame_start: int | None,
    ) -> Sequence:
        """Add a new sound sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param filepath: Filepath to movie
        :type filepath: str | typing.Any
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_meta(
        self, name: str | typing.Any, channel: int | None, frame_start: int | None
    ) -> Sequence:
        """Add a new meta sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def new_effect(
        self,
        name: str | typing.Any,
        type: str | None,
        channel: int | None,
        frame_start: int | None,
        frame_end: typing.Any | None = 0,
        seq1: Sequence | None = None,
        seq2: Sequence | None = None,
        seq3: Sequence | None = None,
    ) -> Sequence:
        """Add a new effect sequence

        :param name: Name for the new sequence
        :type name: str | typing.Any
        :param type: Type, type for the new sequence
        :type type: str | None
        :param channel: Channel, The channel for the new sequence
        :type channel: int | None
        :param frame_start: The start frame for the new sequence
        :type frame_start: int | None
        :param frame_end: The end frame for the new sequence
        :type frame_end: typing.Any | None
        :param seq1: Sequence 1 for effect
        :type seq1: Sequence | None
        :param seq2: Sequence 2 for effect
        :type seq2: Sequence | None
        :param seq3: Sequence 3 for effect
        :type seq3: Sequence | None
        :return: New Sequence
        :rtype: Sequence
        """
        ...

    def remove(self, sequence: Sequence):
        """Remove a Sequence

        :param sequence: Sequence to remove
        :type sequence: Sequence
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFx(bpy_struct):
    """Effect affecting the grease pencil object"""

    name: str
    """ Effect name

    :type: str
    """

    show_expanded: bool
    """ Set effect expansion in the user interface

    :type: bool
    """

    show_in_editmode: bool
    """ Display effect in Edit mode

    :type: bool
    """

    show_render: bool
    """ Use effect during render

    :type: bool
    """

    show_viewport: bool
    """ Display effect in viewport

    :type: bool
    """

    type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShapeKey(bpy_struct):
    """Shape key in a shape keys data-block"""

    data: bpy_prop_collection[UnknownType]
    """ 

    :type: bpy_prop_collection[UnknownType]
    """

    frame: float
    """ Frame for absolute keys

    :type: float
    """

    interpolation: str
    """ Interpolation type for absolute shape keys

    :type: str
    """

    lock_shape: bool
    """ Protect the shape key from accidental sculpting and editing

    :type: bool
    """

    mute: bool
    """ Toggle this shape key

    :type: bool
    """

    name: str
    """ Name of Shape Key

    :type: str
    """

    points: bpy_prop_collection[ShapeKeyPoint]
    """ Optimized access to shape keys point data, when using foreach_get/foreach_set accessors. (Warning: Does not support legacy Curve shape keys)

    :type: bpy_prop_collection[ShapeKeyPoint]
    """

    relative_key: ShapeKey
    """ Shape used as a relative key

    :type: ShapeKey
    """

    slider_max: float
    """ Maximum for slider

    :type: float
    """

    slider_min: float
    """ Minimum for slider

    :type: float
    """

    value: float
    """ Value of shape key at the current frame

    :type: float
    """

    vertex_group: str
    """ Vertex weight group, to blend with basis shape

    :type: str
    """

    def normals_vertex_get(self) -> float:
        """Compute local space vertices' normals for this shape key

        :return: normals
        :rtype: float
        """
        ...

    def normals_polygon_get(self) -> float:
        """Compute local space faces' normals for this shape key

        :return: normals
        :rtype: float
        """
        ...

    def normals_split_get(self) -> float:
        """Compute local space face corners' normals for this shape key

        :return: normals
        :rtype: float
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShapeKeyBezierPoint(bpy_struct):
    """Point in a shape key for Bézier curves"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    handle_left: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    handle_right: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    radius: float
    """ Radius for beveling

    :type: float
    """

    tilt: float
    """ Tilt in 3D View

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShapeKeyCurvePoint(bpy_struct):
    """Point in a shape key for curves"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    radius: float
    """ Radius for beveling

    :type: float
    """

    tilt: float
    """ Tilt in 3D View

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShapeKeyPoint(bpy_struct):
    """Point in a shape key"""

    co: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SimulationStateItem(bpy_struct):
    attribute_domain: str
    """ Attribute domain where the attribute is stored in the simulation state

    :type: str
    """

    color: bpy_prop_array[float]
    """ Color of the corresponding socket type in the node editor

    :type: bpy_prop_array[float]
    """

    name: str
    """ 

    :type: str
    """

    socket_type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SoftBodySettings(bpy_struct):
    """Soft body simulation settings for an object"""

    aero: int
    """ Make edges 'sail'

    :type: int
    """

    aerodynamics_type: str
    """ Method of calculating aerodynamic interaction

    :type: str
    """

    ball_damp: float
    """ Blending to inelastic collision

    :type: float
    """

    ball_size: float
    """ Absolute ball size or factor if not manually adjusted

    :type: float
    """

    ball_stiff: float
    """ Ball inflating pressure

    :type: float
    """

    bend: float
    """ Bending Stiffness

    :type: float
    """

    choke: int
    """ 'Viscosity' inside collision target

    :type: int
    """

    collision_collection: Collection
    """ Limit colliders to this collection

    :type: Collection
    """

    collision_type: str
    """ Choose Collision Type

    :type: str
    """

    damping: float
    """ Edge spring friction

    :type: float
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    error_threshold: float
    """ The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed

    :type: float
    """

    friction: float
    """ General media friction for point movements

    :type: float
    """

    fuzzy: int
    """ Fuzziness while on collision, high values make collision handling faster but less stable

    :type: int
    """

    goal_default: float
    """ Default Goal (vertex target position) value

    :type: float
    """

    goal_friction: float
    """ Goal (vertex target position) friction

    :type: float
    """

    goal_max: float
    """ Goal maximum, vertex weights are scaled to match this range

    :type: float
    """

    goal_min: float
    """ Goal minimum, vertex weights are scaled to match this range

    :type: float
    """

    goal_spring: float
    """ Goal (vertex target position) spring stiffness

    :type: float
    """

    gravity: float
    """ Apply gravitation to point movement

    :type: float
    """

    location_mass_center: mathutils.Vector
    """ Location of center of mass

    :type: mathutils.Vector
    """

    mass: float
    """ General Mass value

    :type: float
    """

    plastic: int
    """ Permanent deform

    :type: int
    """

    pull: float
    """ Edge spring stiffness when longer than rest length

    :type: float
    """

    push: float
    """ Edge spring stiffness when shorter than rest length

    :type: float
    """

    rotation_estimate: mathutils.Matrix
    """ Estimated rotation matrix

    :type: mathutils.Matrix
    """

    scale_estimate: mathutils.Matrix
    """ Estimated scale matrix

    :type: mathutils.Matrix
    """

    shear: float
    """ Shear Stiffness

    :type: float
    """

    speed: float
    """ Tweak timing for physics to control frequency and speed

    :type: float
    """

    spring_length: int
    """ Alter spring length to shrink/blow up (unit %) 0 to disable

    :type: int
    """

    step_max: int
    """ Maximal # solver steps/frame

    :type: int
    """

    step_min: int
    """ Minimal # solver steps/frame

    :type: int
    """

    use_auto_step: bool
    """ Use velocities for automagic step sizes

    :type: bool
    """

    use_diagnose: bool
    """ Turn on SB diagnose console prints

    :type: bool
    """

    use_edge_collision: bool
    """ Edges collide too

    :type: bool
    """

    use_edges: bool
    """ Use Edges as springs

    :type: bool
    """

    use_estimate_matrix: bool
    """ Store the estimated transforms in the soft body settings

    :type: bool
    """

    use_face_collision: bool
    """ Faces collide too, can be very slow

    :type: bool
    """

    use_goal: bool
    """ Define forces for vertices to stick to animated position

    :type: bool
    """

    use_self_collision: bool
    """ Enable naive vertex ball self collision

    :type: bool
    """

    use_stiff_quads: bool
    """ Add diagonal springs on 4-gons

    :type: bool
    """

    vertex_group_goal: str
    """ Control point weight values

    :type: str
    """

    vertex_group_mass: str
    """ Control point mass values

    :type: str
    """

    vertex_group_spring: str
    """ Control point spring strength values

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Space(bpy_struct):
    """Space data for a screen area"""

    show_locked_time: bool
    """ Synchronize the visible timeline range with other time-based editors

    :type: bool
    """

    show_region_header: bool
    """ 

    :type: bool
    """

    type: str
    """ Space data type

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceImageOverlay(bpy_struct):
    """Settings for display of overlays in the UV/Image editor"""

    show_grid_background: bool
    """ Show the grid background and borders

    :type: bool
    """

    show_overlays: bool
    """ Display overlays like UV Maps and Metadata

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpaceNodeEditorPath(bpy_prop_collection[NodeTreePath], bpy_struct):
    """Get the node tree path as a string"""

    to_string: str
    """ 

    :type: str
    """

    def clear(self):
        """Reset the node tree path"""
        ...

    def start(self, node_tree: NodeTree | None):
        """Set the root node tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        """
        ...

    def append(self, node_tree: NodeTree | None, node: Node | None = None):
        """Append a node group tree to the path

        :param node_tree: Node Tree, Node tree to append to the node editor path
        :type node_tree: NodeTree | None
        :param node: Node, Group node linking to this node tree
        :type node: Node | None
        """
        ...

    def pop(self):
        """Remove the last node tree from the path"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpaceNodeOverlay(bpy_struct):
    """Settings for display of overlays in the Node Editor"""

    preview_shape: str
    """ Preview shape used by the node previews

    :type: str
    """

    show_context_path: bool
    """ Display breadcrumbs for the editor's context

    :type: bool
    """

    show_named_attributes: bool
    """ Show when nodes are using named attributes

    :type: bool
    """

    show_overlays: bool
    """ Display overlays like colored or dashed wires

    :type: bool
    """

    show_previews: bool
    """ Display each node's preview if node is toggled

    :type: bool
    """

    show_timing: bool
    """ Display each node's last execution time

    :type: bool
    """

    show_wire_color: bool
    """ Color node links based on their connected sockets

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpaceUVEditor(bpy_struct):
    """UV editor data for the image editor space"""

    custom_grid_subdivisions: bpy_prop_array[int]
    """ Number of grid units in UV space that make one UV Unit

    :type: bpy_prop_array[int]
    """

    display_stretch_type: str
    """ Type of stretch to display

    :type: str
    """

    edge_display_type: str
    """ Display style for UV edges

    :type: str
    """

    grid_shape_source: str
    """ Specify source for the grid shape

    :type: str
    """

    lock_bounds: bool
    """ Constraint to stay within the image bounds while editing

    :type: bool
    """

    pixel_round_mode: str
    """ Round UVs to pixels while editing

    :type: str
    """

    show_faces: bool
    """ Display faces over the image

    :type: bool
    """

    show_grid_over_image: bool
    """ Show the grid over the image

    :type: bool
    """

    show_metadata: bool
    """ Display metadata properties of the image

    :type: bool
    """

    show_modified_edges: bool
    """ Display edges after modifiers are applied

    :type: bool
    """

    show_pixel_coords: bool
    """ Display UV coordinates in pixels rather than from 0.0 to 1.0

    :type: bool
    """

    show_stretch: bool
    """ Display faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)

    :type: bool
    """

    show_texpaint: bool
    """ Display overlay of texture paint UV layer

    :type: bool
    """

    tile_grid_shape: bpy_prop_array[int]
    """ How many tiles will be shown in the background

    :type: bpy_prop_array[int]
    """

    use_live_unwrap: bool
    """ Continuously unwrap the selected UV island while transforming pinned vertices

    :type: bool
    """

    uv_opacity: float
    """ Opacity of UV overlays

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Spline(bpy_struct):
    """Element of a curve, either NURBS, Bézier or Polyline or a character with text objects"""

    bezier_points: SplineBezierPoints
    """ Collection of points for Bézier curves only

    :type: SplineBezierPoints
    """

    character_index: int
    """ Location of this character in the text data (only for text curves)

    :type: int
    """

    hide: bool
    """ Hide this curve in Edit mode

    :type: bool
    """

    material_index: int
    """ Material slot index of this curve

    :type: int
    """

    order_u: int
    """ NURBS order in the U direction. Higher values make each point influence a greater area, but have worse performance

    :type: int
    """

    order_v: int
    """ NURBS order in the V direction. Higher values make each point influence a greater area, but have worse performance

    :type: int
    """

    point_count_u: int
    """ Total number points for the curve or surface in the U direction

    :type: int
    """

    point_count_v: int
    """ Total number points for the surface on the V direction

    :type: int
    """

    points: SplinePoints
    """ Collection of points that make up this poly or nurbs spline

    :type: SplinePoints
    """

    radius_interpolation: str
    """ The type of radius interpolation for Bézier curves

    :type: str
    """

    resolution_u: int
    """ Curve or Surface subdivisions per segment

    :type: int
    """

    resolution_v: int
    """ Surface subdivisions per segment

    :type: int
    """

    tilt_interpolation: str
    """ The type of tilt interpolation for 3D, Bézier curves

    :type: str
    """

    type: str
    """ The interpolation type for this curve element

    :type: str
    """

    use_bezier_u: bool
    """ Make this nurbs curve or surface act like a Bézier spline in the U direction

    :type: bool
    """

    use_bezier_v: bool
    """ Make this nurbs surface act like a Bézier spline in the V direction

    :type: bool
    """

    use_cyclic_u: bool
    """ Make this curve or surface a closed loop in the U direction

    :type: bool
    """

    use_cyclic_v: bool
    """ Make this surface a closed loop in the V direction

    :type: bool
    """

    use_endpoint_u: bool
    """ Make this nurbs curve or surface meet the endpoints in the U direction

    :type: bool
    """

    use_endpoint_v: bool
    """ Make this nurbs surface meet the endpoints in the V direction

    :type: bool
    """

    use_smooth: bool
    """ Smooth the normals of the surface or beveled curve

    :type: bool
    """

    def calc_length(self, resolution: typing.Any | None = 0) -> float:
        """Calculate spline length

        :param resolution: Resolution, Spline resolution to be used, 0 defaults to the resolution_u
        :type resolution: typing.Any | None
        :return: Length, Length of the polygonaly approximated spline
        :rtype: float
        """
        ...

    def valid_message(self, direction: int | None) -> str:
        """Return the message

        :param direction: Direction, The direction where 0-1 maps to U-V
        :type direction: int | None
        :return: Return value, The message or an empty string when there is no error
        :rtype: str
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SplineBezierPoints(bpy_prop_collection[BezierSplinePoint], bpy_struct):
    """Collection of spline Bézier points"""

    def add(self, count: int | None):
        """Add a number of points to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SplinePoint(bpy_struct):
    """Spline point without handles"""

    co: mathutils.Vector
    """ Point coordinates

    :type: mathutils.Vector
    """

    hide: bool
    """ Visibility status

    :type: bool
    """

    radius: float
    """ Radius for beveling

    :type: float
    """

    select: bool
    """ Selection status

    :type: bool
    """

    tilt: float
    """ Tilt in 3D View

    :type: float
    """

    weight: float
    """ NURBS weight

    :type: float
    """

    weight_softbody: float
    """ Softbody goal weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SplinePoints(bpy_prop_collection[SplinePoint], bpy_struct):
    """Collection of spline points"""

    def add(self, count: int | None):
        """Add a number of points to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpreadsheetColumn(bpy_struct):
    """Persistent data associated with a spreadsheet column"""

    data_type: str
    """ The data type of the corresponding column visible in the spreadsheet

    :type: str
    """

    id: SpreadsheetColumnID
    """ Data used to identify the corresponding data from the data source

    :type: SpreadsheetColumnID
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpreadsheetColumnID(bpy_struct):
    """Data used to identify a spreadsheet column"""

    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpreadsheetRowFilter(bpy_struct):
    column_name: str
    """ 

    :type: str
    """

    enabled: bool
    """ 

    :type: bool
    """

    operation: str
    """ 

    :type: str
    """

    show_expanded: bool
    """ 

    :type: bool
    """

    threshold: float
    """ How close float values need to be to be equal

    :type: float
    """

    value_boolean: bool
    """ 

    :type: bool
    """

    value_color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    value_float: float
    """ 

    :type: float
    """

    value_float2: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    value_float3: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    value_int: int
    """ 

    :type: int
    """

    value_int2: bpy_prop_array[int]
    """ 

    :type: bpy_prop_array[int]
    """

    value_int8: int
    """ 

    :type: int
    """

    value_string: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Stereo3dDisplay(bpy_struct):
    """Settings for stereo 3D display"""

    anaglyph_type: str
    """ 

    :type: str
    """

    display_mode: str
    """ 

    :type: str
    """

    interlace_type: str
    """ 

    :type: str
    """

    use_interlace_swap: bool
    """ Swap left and right stereo channels

    :type: bool
    """

    use_sidebyside_crosseyed: bool
    """ Right eye should see left image and vice versa

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Stereo3dFormat(bpy_struct):
    """Settings for stereo output"""

    anaglyph_type: str
    """ 

    :type: str
    """

    display_mode: str
    """ 

    :type: str
    """

    interlace_type: str
    """ 

    :type: str
    """

    use_interlace_swap: bool
    """ Swap left and right stereo channels

    :type: bool
    """

    use_sidebyside_crosseyed: bool
    """ Right eye should see left image and vice versa

    :type: bool
    """

    use_squeezed_frame: bool
    """ Combine both views in a squeezed image

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class StringAttributeValue(bpy_struct):
    """String value in geometry attribute"""

    value: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Struct(bpy_struct):
    """RNA structure definition"""

    base: Struct
    """ Struct definition this is derived from

    :type: Struct
    """

    description: str
    """ Description of the Struct's purpose

    :type: str
    """

    functions: bpy_prop_collection[Function]
    """ 

    :type: bpy_prop_collection[Function]
    """

    identifier: str
    """ Unique name used in the code and scripting

    :type: str
    """

    name: str
    """ Human readable name

    :type: str
    """

    name_property: StringProperty
    """ Property that gives the name of the struct

    :type: StringProperty
    """

    nested: Struct
    """ Struct in which this struct is always nested, and to which it logically belongs

    :type: Struct
    """

    properties: bpy_prop_collection[Property]
    """ Properties in the struct

    :type: bpy_prop_collection[Property]
    """

    property_tags: bpy_prop_collection[EnumPropertyItem]
    """ Tags that properties can use to influence behavior

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    translation_context: str
    """ Translation context of the struct's name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class StudioLight(bpy_struct):
    """Studio light"""

    has_specular_highlight_pass: bool
    """ Studio light image file has separate "diffuse" and "specular" passes

    :type: bool
    """

    index: int
    """ 

    :type: int
    """

    is_user_defined: bool
    """ 

    :type: bool
    """

    light_ambient: mathutils.Color
    """ Color of the ambient light that uniformly lit the scene

    :type: mathutils.Color
    """

    name: str
    """ 

    :type: str
    """

    path: str
    """ 

    :type: str
    """

    solid_lights: bpy_prop_collection[UserSolidLight]
    """ Lights used to display objects in solid draw mode

    :type: bpy_prop_collection[UserSolidLight]
    """

    type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class StudioLights(bpy_prop_collection[StudioLight], bpy_struct):
    """Collection of studio lights"""

    def load(self, path: str | typing.Any, type: str | None) -> StudioLight:
        """Load studiolight from file

        :param path: File Path, File path where the studio light file can be found
        :type path: str | typing.Any
        :param type: Type, The type for the new studio light
        :type type: str | None
        :return: Newly created StudioLight
        :rtype: StudioLight
        """
        ...

    def new(self, path: str | typing.Any) -> StudioLight:
        """Create studiolight from default lighting

        :param path: Path, Path to the file that will contain the lighting info (without extension)
        :type path: str | typing.Any
        :return: Newly created StudioLight
        :rtype: StudioLight
        """
        ...

    def remove(self, studio_light: StudioLight):
        """Remove a studio light

        :param studio_light: The studio light to remove
        :type studio_light: StudioLight
        """
        ...

    def refresh(self):
        """Refresh Studio Lights from disk"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TexMapping(bpy_struct):
    """Texture coordinate mapping settings"""

    mapping: str
    """ 

    :type: str
    """

    mapping_x: str
    """ 

    :type: str
    """

    mapping_y: str
    """ 

    :type: str
    """

    mapping_z: str
    """ 

    :type: str
    """

    max: mathutils.Vector
    """ Maximum value for clipping

    :type: mathutils.Vector
    """

    min: mathutils.Vector
    """ Minimum value for clipping

    :type: mathutils.Vector
    """

    rotation: mathutils.Euler
    """ 

    :type: mathutils.Euler
    """

    scale: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    translation: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    use_max: bool
    """ Whether to use maximum clipping value

    :type: bool
    """

    use_min: bool
    """ Whether to use minimum clipping value

    :type: bool
    """

    vector_type: str
    """ Type of vector that the mapping transforms

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TexPaintSlot(bpy_struct):
    """Slot that contains information about texture painting"""

    icon_value: int
    """ Paint slot icon

    :type: int
    """

    is_valid: bool
    """ Slot has a valid image and UV map

    :type: bool
    """

    name: str
    """ Name of the slot

    :type: str
    """

    uv_layer: str
    """ Name of UV map

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextBox(bpy_struct):
    """Text bounding box for layout"""

    height: float
    """ 

    :type: float
    """

    width: float
    """ 

    :type: float
    """

    x: float
    """ 

    :type: float
    """

    y: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextCharacterFormat(bpy_struct):
    """Text character formatting settings"""

    kerning: float
    """ Spacing between characters

    :type: float
    """

    material_index: int
    """ Material slot index of this character

    :type: int
    """

    use_bold: bool
    """ 

    :type: bool
    """

    use_italic: bool
    """ 

    :type: bool
    """

    use_small_caps: bool
    """ 

    :type: bool
    """

    use_underline: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextLine(bpy_struct):
    """Line of text in a Text data-block"""

    body: str
    """ Text in the line

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureSlot(bpy_struct):
    """Texture slot defining the mapping and influence of a texture"""

    blend_type: str
    """ Mode used to apply the texture

    :type: str
    """

    color: mathutils.Color
    """ Default color for textures that don't return RGB or when RGB to intensity is enabled

    :type: mathutils.Color
    """

    default_value: float
    """ Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard

    :type: float
    """

    name: str
    """ Texture slot name

    :type: str
    """

    offset: mathutils.Vector
    """ Fine tune of the texture mapping X, Y and Z locations

    :type: mathutils.Vector
    """

    output_node: str
    """ Which output node to use, for node-based textures

    :type: str
    """

    scale: mathutils.Vector
    """ Set scaling for the texture's X, Y and Z sizes

    :type: mathutils.Vector
    """

    texture: Texture
    """ Texture data-block used by this texture slot

    :type: Texture
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Theme(bpy_struct):
    """User interface styling and color settings"""

    bone_color_sets: bpy_prop_collection[ThemeBoneColorSet]
    """ 

    :type: bpy_prop_collection[ThemeBoneColorSet]
    """

    clip_editor: ThemeClipEditor
    """ 

    :type: ThemeClipEditor
    """

    collection_color: bpy_prop_collection[ThemeCollectionColor]
    """ 

    :type: bpy_prop_collection[ThemeCollectionColor]
    """

    console: ThemeConsole
    """ 

    :type: ThemeConsole
    """

    dopesheet_editor: ThemeDopeSheet
    """ 

    :type: ThemeDopeSheet
    """

    file_browser: ThemeFileBrowser
    """ 

    :type: ThemeFileBrowser
    """

    graph_editor: ThemeGraphEditor
    """ 

    :type: ThemeGraphEditor
    """

    image_editor: ThemeImageEditor
    """ 

    :type: ThemeImageEditor
    """

    info: ThemeInfo
    """ 

    :type: ThemeInfo
    """

    name: str
    """ Name of the theme

    :type: str
    """

    nla_editor: ThemeNLAEditor
    """ 

    :type: ThemeNLAEditor
    """

    node_editor: ThemeNodeEditor
    """ 

    :type: ThemeNodeEditor
    """

    outliner: ThemeOutliner
    """ 

    :type: ThemeOutliner
    """

    preferences: ThemePreferences
    """ 

    :type: ThemePreferences
    """

    properties: ThemeProperties
    """ 

    :type: ThemeProperties
    """

    sequence_editor: ThemeSequenceEditor
    """ 

    :type: ThemeSequenceEditor
    """

    spreadsheet: ThemeSpreadsheet
    """ 

    :type: ThemeSpreadsheet
    """

    statusbar: ThemeStatusBar
    """ 

    :type: ThemeStatusBar
    """

    strip_color: bpy_prop_collection[ThemeStripColor]
    """ 

    :type: bpy_prop_collection[ThemeStripColor]
    """

    text_editor: ThemeTextEditor
    """ 

    :type: ThemeTextEditor
    """

    theme_area: str
    """ 

    :type: str
    """

    topbar: ThemeTopBar
    """ 

    :type: ThemeTopBar
    """

    user_interface: ThemeUserInterface
    """ 

    :type: ThemeUserInterface
    """

    view_3d: ThemeView3D
    """ 

    :type: ThemeView3D
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeAssetShelf(bpy_struct):
    """Theme settings for asset shelves"""

    back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeBoneColorSet(bpy_struct):
    """Theme settings for bone color sets"""

    active: mathutils.Color | None
    """ Color used for active bones

    :type: mathutils.Color | None
    """

    normal: mathutils.Color
    """ Color used for the surface of bones

    :type: mathutils.Color
    """

    select: mathutils.Color
    """ Color used for selected bones

    :type: mathutils.Color
    """

    show_colored_constraints: bool
    """ Allow the use of colors indicating constraints/keyed status

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeClipEditor(bpy_struct):
    """Theme settings for the Movie Clip Editor"""

    active_marker: mathutils.Color | None
    """ Color of active marker

    :type: mathutils.Color | None
    """

    disabled_marker: mathutils.Color
    """ Color of disabled marker

    :type: mathutils.Color
    """

    frame_current: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_auto_clamped: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_auto_clamped: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex_size: int
    """ 

    :type: int
    """

    locked_marker: mathutils.Color
    """ Color of locked marker

    :type: mathutils.Color
    """

    marker: mathutils.Color
    """ Color of marker

    :type: mathutils.Color
    """

    marker_outline: mathutils.Color
    """ Color of marker's outline

    :type: mathutils.Color
    """

    metadatabg: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    metadatatext: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    path_after: mathutils.Color
    """ Color of path after current frame

    :type: mathutils.Color
    """

    path_before: mathutils.Color
    """ Color of path before current frame

    :type: mathutils.Color
    """

    path_keyframe_after: mathutils.Color
    """ Color of path after current frame

    :type: mathutils.Color
    """

    path_keyframe_before: mathutils.Color
    """ Color of path before current frame

    :type: mathutils.Color
    """

    selected_marker: mathutils.Color
    """ Color of selected marker

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    strips: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    strips_selected: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    time_marker_line: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_marker_line_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_scrub_background: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeCollectionColor(bpy_struct):
    """Theme settings for collection colors"""

    color: mathutils.Color
    """ Collection Color Tag

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeConsole(bpy_struct):
    """Theme settings for the Console"""

    cursor: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    line_error: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    line_info: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    line_input: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    line_output: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeDopeSheet(bpy_struct):
    """Theme settings for the Dope Sheet"""

    active_channels_group: bpy_prop_array[float] | None
    """ 

    :type: bpy_prop_array[float] | None
    """

    channel_group: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    channels: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    channels_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    dopesheet_channel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    dopesheet_subchannel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    frame_current: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    grid: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    interpolation_line: bpy_prop_array[float]
    """ Color of lines showing non-Bézier interpolation modes

    :type: bpy_prop_array[float]
    """

    keyframe: mathutils.Color
    """ Color of Keyframe

    :type: mathutils.Color
    """

    keyframe_border: bpy_prop_array[float]
    """ Color of keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_border_selected: bpy_prop_array[float]
    """ Color of selected keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_breakdown: mathutils.Color
    """ Color of breakdown keyframe

    :type: mathutils.Color
    """

    keyframe_breakdown_selected: mathutils.Color
    """ Color of selected breakdown keyframe

    :type: mathutils.Color
    """

    keyframe_extreme: mathutils.Color
    """ Color of extreme keyframe

    :type: mathutils.Color
    """

    keyframe_extreme_selected: mathutils.Color
    """ Color of selected extreme keyframe

    :type: mathutils.Color
    """

    keyframe_jitter: mathutils.Color
    """ Color of jitter keyframe

    :type: mathutils.Color
    """

    keyframe_jitter_selected: mathutils.Color
    """ Color of selected jitter keyframe

    :type: mathutils.Color
    """

    keyframe_movehold: mathutils.Color
    """ Color of moving hold keyframe

    :type: mathutils.Color
    """

    keyframe_movehold_selected: mathutils.Color
    """ Color of selected moving hold keyframe

    :type: mathutils.Color
    """

    keyframe_scale_factor: float
    """ Scale factor for adjusting the height of keyframes

    :type: float
    """

    keyframe_selected: mathutils.Color
    """ Color of selected keyframe

    :type: mathutils.Color
    """

    long_key: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    long_key_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_range: bpy_prop_array[float]
    """ Color of preview range overlay

    :type: bpy_prop_array[float]
    """

    simulated_frames: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    summary: bpy_prop_array[float]
    """ Color of summary channel

    :type: bpy_prop_array[float]
    """

    time_marker_line: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_marker_line_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_scrub_background: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    value_sliders: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    view_sliders: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeFileBrowser(bpy_struct):
    """Theme settings for the File Browser"""

    row_alternate: bpy_prop_array[float]
    """ Overlay color on every other row

    :type: bpy_prop_array[float]
    """

    selected_file: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeFontStyle(bpy_struct):
    """Theme settings for Font"""

    character_weight: int
    """ Weight of the characters. 100-900, 400 is normal

    :type: int
    """

    points: float
    """ Font size in points

    :type: float
    """

    shadow: int
    """ Shadow size (0, 3 and 5 supported)

    :type: int
    """

    shadow_alpha: float
    """ 

    :type: float
    """

    shadow_offset_x: int
    """ Shadow offset in pixels

    :type: int
    """

    shadow_offset_y: int
    """ Shadow offset in pixels

    :type: int
    """

    shadow_value: float
    """ Shadow color in gray value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeGradientColors(bpy_struct):
    """Theme settings for background colors and gradient"""

    background_type: str
    """ Type of background in the 3D viewport

    :type: str
    """

    gradient: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    high_gradient: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeGraphEditor(bpy_struct):
    """Theme settings for the graph editor"""

    active_channels_group: mathutils.Color | None
    """ 

    :type: mathutils.Color | None
    """

    channel_group: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    channels_region: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    dopesheet_channel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    dopesheet_subchannel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    frame_current: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    grid: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_auto_clamped: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_auto_clamped: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_vect: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vect: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex_size: int
    """ 

    :type: int
    """

    lastsel_point: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    preview_range: bpy_prop_array[float]
    """ Color of preview range overlay

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    time_marker_line: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_marker_line_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_scrub_background: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_active: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_bevel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_size: int
    """ 

    :type: int
    """

    vertex_unreferenced: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    window_sliders: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeImageEditor(bpy_struct):
    """Theme settings for the Image Editor"""

    edge_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_width: int
    """ 

    :type: int
    """

    editmesh_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_dot: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    face_front: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_mode_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_retopology: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    facedot_size: int
    """ 

    :type: int
    """

    frame_current: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    freestyle_face_mark: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_auto_clamped: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_auto_clamped: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vertex_size: int
    """ 

    :type: int
    """

    metadatabg: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    metadatatext: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    paint_curve_handle: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    paint_curve_pivot: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_edge: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_face: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_stitchable: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_unstitchable: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    preview_stitch_vert: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    scope_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    uv_shadow: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    vertex: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_active: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_bevel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_size: int
    """ 

    :type: int
    """

    vertex_unreferenced: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    wire_edit: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeInfo(bpy_struct):
    """Theme settings for Info"""

    info_debug: bpy_prop_array[float]
    """ Background color of Debug icon

    :type: bpy_prop_array[float]
    """

    info_debug_text: mathutils.Color
    """ Foreground color of Debug icon

    :type: mathutils.Color
    """

    info_error: bpy_prop_array[float]
    """ Background color of Error icon

    :type: bpy_prop_array[float]
    """

    info_error_text: mathutils.Color
    """ Foreground color of Error icon

    :type: mathutils.Color
    """

    info_info: bpy_prop_array[float]
    """ Background color of Info icon

    :type: bpy_prop_array[float]
    """

    info_info_text: mathutils.Color
    """ Foreground color of Info icon

    :type: mathutils.Color
    """

    info_operator: bpy_prop_array[float]
    """ Background color of Operator icon

    :type: bpy_prop_array[float]
    """

    info_operator_text: mathutils.Color
    """ Foreground color of Operator icon

    :type: mathutils.Color
    """

    info_property: bpy_prop_array[float]
    """ Background color of Property icon

    :type: bpy_prop_array[float]
    """

    info_property_text: mathutils.Color
    """ Foreground color of Property icon

    :type: mathutils.Color
    """

    info_selected: mathutils.Color
    """ Background color of selected line

    :type: mathutils.Color
    """

    info_selected_text: mathutils.Color
    """ Text color of selected line

    :type: mathutils.Color
    """

    info_warning: bpy_prop_array[float]
    """ Background color of Warning icon

    :type: bpy_prop_array[float]
    """

    info_warning_text: mathutils.Color
    """ Foreground color of Warning icon

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeNLAEditor(bpy_struct):
    """Theme settings for the NLA Editor"""

    active_action: bpy_prop_array[float] | None
    """ Animation data-block has active action

    :type: bpy_prop_array[float] | None
    """

    active_action_unset: bpy_prop_array[float] | None
    """ Animation data-block doesn't have active action

    :type: bpy_prop_array[float] | None
    """

    dopesheet_channel: mathutils.Color
    """ Nonlinear Animation Channel

    :type: mathutils.Color
    """

    dopesheet_subchannel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    frame_current: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    grid: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    keyframe_border: bpy_prop_array[float]
    """ Color of keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_border_selected: bpy_prop_array[float]
    """ Color of selected keyframe border

    :type: bpy_prop_array[float]
    """

    meta_strips: mathutils.Color
    """ Unselected Meta Strip (for grouping related strips)

    :type: mathutils.Color
    """

    meta_strips_selected: mathutils.Color
    """ Selected Meta Strip (for grouping related strips)

    :type: mathutils.Color
    """

    nla_track: mathutils.Color
    """ Nonlinear Animation Track

    :type: mathutils.Color
    """

    preview_range: bpy_prop_array[float]
    """ Color of preview range overlay

    :type: bpy_prop_array[float]
    """

    sound_strips: mathutils.Color
    """ Unselected Sound Strip (for timing speaker sounds)

    :type: mathutils.Color
    """

    sound_strips_selected: mathutils.Color
    """ Selected Sound Strip (for timing speaker sounds)

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    strips: mathutils.Color
    """ Unselected Action-Clip Strip

    :type: mathutils.Color
    """

    strips_selected: mathutils.Color
    """ Selected Action-Clip Strip

    :type: mathutils.Color
    """

    time_marker_line: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_marker_line_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_scrub_background: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    transition_strips: mathutils.Color
    """ Unselected Transition Strip

    :type: mathutils.Color
    """

    transition_strips_selected: mathutils.Color
    """ Selected Transition Strip

    :type: mathutils.Color
    """

    tweak: mathutils.Color
    """ Color for strip/action being "tweaked" or edited

    :type: mathutils.Color
    """

    tweak_duplicate: mathutils.Color
    """ Warning/error indicator color for strips referencing the strip being tweaked

    :type: mathutils.Color
    """

    view_sliders: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeNodeEditor(bpy_struct):
    """Theme settings for the Node Editor"""

    attribute_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    color_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    converter_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    dash_alpha: float
    """ Opacity for the dashed lines in wires

    :type: float
    """

    distor_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    filter_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    frame_node: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    geometry_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    grid: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    grid_levels: int
    """ Number of subdivisions for the dot grid displayed in the background

    :type: int
    """

    group_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    group_socket_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    input_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    layout_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    matte_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    node_active: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    node_backdrop: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    node_selected: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    noodle_curving: int
    """ Curving of the noodle

    :type: int
    """

    output_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    pattern_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    repeat_zone: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    script_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    selected_text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    shader_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    simulation_zone: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    texture_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vector_node: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    wire: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    wire_inner: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    wire_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeOutliner(bpy_struct):
    """Theme settings for the Outliner"""

    active: mathutils.Color | None
    """ 

    :type: mathutils.Color | None
    """

    active_object: mathutils.Color | None
    """ 

    :type: mathutils.Color | None
    """

    edited_object: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    match: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    row_alternate: bpy_prop_array[float]
    """ Overlay color on every other row

    :type: bpy_prop_array[float]
    """

    selected_highlight: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    selected_object: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemePanelColors(bpy_struct):
    """Theme settings for panel colors"""

    back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    sub_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemePreferences(bpy_struct):
    """Theme settings for the Blender Preferences"""

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeProperties(bpy_struct):
    """Theme settings for the Properties"""

    active_modifier: bpy_prop_array[float] | None
    """ 

    :type: bpy_prop_array[float] | None
    """

    match: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeSequenceEditor(bpy_struct):
    """Theme settings for the Sequence Editor"""

    active_strip: mathutils.Color | None
    """ 

    :type: mathutils.Color | None
    """

    audio_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    color_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    draw_action: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    effect_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    frame_current: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    grid: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    image_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    keyframe: mathutils.Color
    """ Color of Keyframe

    :type: mathutils.Color
    """

    keyframe_border: bpy_prop_array[float]
    """ Color of keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_border_selected: bpy_prop_array[float]
    """ Color of selected keyframe border

    :type: bpy_prop_array[float]
    """

    keyframe_breakdown: mathutils.Color
    """ Color of breakdown keyframe

    :type: mathutils.Color
    """

    keyframe_breakdown_selected: mathutils.Color
    """ Color of selected breakdown keyframe

    :type: mathutils.Color
    """

    keyframe_movehold: mathutils.Color
    """ Color of moving hold keyframe

    :type: mathutils.Color
    """

    keyframe_movehold_selected: mathutils.Color
    """ Color of selected moving hold keyframe

    :type: mathutils.Color
    """

    keyframe_selected: mathutils.Color
    """ Color of selected keyframe

    :type: mathutils.Color
    """

    mask_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    meta_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    metadatabg: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    metadatatext: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    movie_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    movieclip_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    preview_back: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    preview_range: bpy_prop_array[float]
    """ Color of preview range overlay

    :type: bpy_prop_array[float]
    """

    row_alternate: bpy_prop_array[float]
    """ Overlay color on every other row

    :type: bpy_prop_array[float]
    """

    scene_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    selected_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    text_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    time_marker_line: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_marker_line_selected: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    time_scrub_background: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    transition_strip: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    window_sliders: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeSpaceGeneric(bpy_struct):
    back: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    button: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    button_text_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    button_title: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    execution_buts: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header_text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    header_text_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    navigation_bar: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    panelcolors: ThemePanelColors
    """ 

    :type: ThemePanelColors
    """

    tab_active: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    tab_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_inactive: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    tab_outline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    text_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    title: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeSpaceGradient(bpy_struct):
    button: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    button_text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    button_text_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    button_title: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    execution_buts: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gradients: ThemeGradientColors
    """ 

    :type: ThemeGradientColors
    """

    header: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    header_text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    header_text_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    navigation_bar: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    panelcolors: ThemePanelColors
    """ 

    :type: ThemePanelColors
    """

    tab_active: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    tab_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    tab_inactive: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    tab_outline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    text_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    title: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeSpaceListGeneric(bpy_struct):
    list: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    list_text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    list_text_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    list_title: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeSpreadsheet(bpy_struct):
    """Theme settings for the Spreadsheet"""

    row_alternate: bpy_prop_array[float]
    """ Overlay color on every other row

    :type: bpy_prop_array[float]
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    space_list: ThemeSpaceListGeneric
    """ Settings for space list

    :type: ThemeSpaceListGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeStatusBar(bpy_struct):
    """Theme settings for the Status Bar"""

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeStripColor(bpy_struct):
    """Theme settings for strip colors"""

    color: mathutils.Color
    """ Strip Color

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeStyle(bpy_struct):
    """Theme settings for style sets"""

    panel_title: ThemeFontStyle
    """ 

    :type: ThemeFontStyle
    """

    widget: ThemeFontStyle
    """ 

    :type: ThemeFontStyle
    """

    widget_label: ThemeFontStyle
    """ 

    :type: ThemeFontStyle
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeTextEditor(bpy_struct):
    """Theme settings for the Text Editor"""

    cursor: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    line_numbers: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    line_numbers_background: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    selected_text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    syntax_builtin: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    syntax_comment: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    syntax_numbers: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    syntax_preprocessor: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    syntax_reserved: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    syntax_special: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    syntax_string: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    syntax_symbols: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeTopBar(bpy_struct):
    """Theme settings for the Top Bar"""

    space: ThemeSpaceGeneric
    """ Settings for space

    :type: ThemeSpaceGeneric
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeUserInterface(bpy_struct):
    """Theme settings for user interface elements"""

    axis_x: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    axis_y: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    axis_z: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    editor_outline: mathutils.Color
    """ Color of the outline of the editors and their round corners

    :type: mathutils.Color
    """

    gizmo_a: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    gizmo_b: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    gizmo_hi: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    gizmo_primary: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    gizmo_secondary: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    gizmo_view_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    icon_alpha: float
    """ Transparency of icons in the interface, to reduce contrast

    :type: float
    """

    icon_border_intensity: float
    """ Control the intensity of the border around themes icons

    :type: float
    """

    icon_collection: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    icon_folder: bpy_prop_array[float]
    """ Color of folders in the file browser

    :type: bpy_prop_array[float]
    """

    icon_modifier: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    icon_object: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    icon_object_data: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    icon_saturation: float
    """ Saturation of icons in the interface

    :type: float
    """

    icon_scene: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    icon_shading: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    menu_shadow_fac: float
    """ Blending factor for menu shadows

    :type: float
    """

    menu_shadow_width: int
    """ Width of menu shadows, set to zero to disable

    :type: int
    """

    panel_roundness: float
    """ Roundness of the corners of panels and sub-panels

    :type: float
    """

    transparent_checker_primary: mathutils.Color
    """ Primary color of checkerboard pattern indicating transparent areas

    :type: mathutils.Color
    """

    transparent_checker_secondary: mathutils.Color
    """ Secondary color of checkerboard pattern indicating transparent areas

    :type: mathutils.Color
    """

    transparent_checker_size: int
    """ Size of checkerboard pattern indicating transparent areas

    :type: int
    """

    wcol_box: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_list_item: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_menu: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_menu_back: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_menu_item: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_num: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_numslider: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_option: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_pie_menu: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_progress: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_pulldown: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_radio: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_regular: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_scroll: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_state: ThemeWidgetStateColors
    """ 

    :type: ThemeWidgetStateColors
    """

    wcol_tab: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_text: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_toggle: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_tool: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_toolbar_item: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    wcol_tooltip: ThemeWidgetColors
    """ 

    :type: ThemeWidgetColors
    """

    widget_emboss: bpy_prop_array[float]
    """ Color of the 1px shadow line underlying widgets

    :type: bpy_prop_array[float]
    """

    widget_text_cursor: mathutils.Color
    """ Color of the text insertion cursor (caret)

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeView3D(bpy_struct):
    """Theme settings for the 3D viewport"""

    act_spline: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    asset_shelf: ThemeAssetShelf
    """ Settings for asset shelf

    :type: ThemeAssetShelf
    """

    bone_locked_weight: bpy_prop_array[float]
    """ Shade for bones corresponding to a locked weight group during painting

    :type: bpy_prop_array[float]
    """

    bone_pose: mathutils.Color
    """ Outline color of selected pose bones

    :type: mathutils.Color
    """

    bone_pose_active: mathutils.Color
    """ Outline color of active pose bones

    :type: mathutils.Color
    """

    bone_solid: mathutils.Color
    """ Default color of the solid shapes of bones

    :type: mathutils.Color
    """

    bundle_solid: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    camera: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    camera_passepartout: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    camera_path: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    clipping_border_3d: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    edge_bevel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_crease: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_facesel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_mode_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_seam: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_sharp: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    edge_width: int
    """ 

    :type: int
    """

    editmesh_active: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    empty: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    extra_edge_angle: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    extra_edge_len: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    extra_face_angle: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    extra_face_area: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    face: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_back: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_dot: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    face_front: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_mode_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_retopology: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    face_select: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    facedot_size: int
    """ 

    :type: int
    """

    frame_current: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    freestyle_edge_mark: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    freestyle_face_mark: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    gp_vertex: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    gp_vertex_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    gp_vertex_size: int
    """ 

    :type: int
    """

    grid: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    handle_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_align: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_auto: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_free: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_sel_vect: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    handle_vect: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    lastsel_point: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    light: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    normal: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    nurb_sel_uline: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    nurb_sel_vline: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    nurb_uline: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    nurb_vline: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    object_active: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    object_origin_size: int
    """ Diameter in pixels for object/light origin display

    :type: int
    """

    object_selected: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    outline_width: int
    """ 

    :type: int
    """

    paint_curve_handle: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    paint_curve_pivot: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    skin_root: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    space: ThemeSpaceGradient
    """ Settings for space

    :type: ThemeSpaceGradient
    """

    speaker: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    split_normal: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    text_grease_pencil: mathutils.Color
    """ Color for indicating Grease Pencil keyframes

    :type: mathutils.Color
    """

    text_keyframe: mathutils.Color
    """ Color for indicating object keyframes

    :type: mathutils.Color
    """

    transform: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_active: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_bevel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_normal: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_select: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    vertex_size: int
    """ 

    :type: int
    """

    vertex_unreferenced: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    view_overlay: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    wire: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    wire_edit: mathutils.Color
    """ Color for wireframe when in edit mode, but edge selection is active

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeWidgetColors(bpy_struct):
    """Theme settings for widget color sets"""

    inner: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    inner_sel: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    item: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    outline: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    roundness: float
    """ Amount of edge rounding

    :type: float
    """

    shadedown: int
    """ 

    :type: int
    """

    shadetop: int
    """ 

    :type: int
    """

    show_shaded: bool
    """ 

    :type: bool
    """

    text: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    text_sel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThemeWidgetStateColors(bpy_struct):
    """Theme settings for widget state colors"""

    blend: float
    """ 

    :type: float
    """

    inner_anim: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_anim_sel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_changed: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_changed_sel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_driven: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_driven_sel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_key: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_key_sel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_overridden: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    inner_overridden_sel: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TimeGpencilModifierSegment(bpy_struct):
    """Configuration for a single dash segment"""

    name: str
    """ Name of the dash segment

    :type: str
    """

    seg_end: int
    """ Last frame of the segment

    :type: int
    """

    seg_mode: str
    """ 

    :type: str
    """

    seg_repeat: int
    """ Number of cycle repeats

    :type: int
    """

    seg_start: int
    """ First frame of the segment

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TimelineMarker(bpy_struct):
    """Marker for noting points in the timeline"""

    camera: Object
    """ Camera that becomes active on this frame

    :type: Object
    """

    frame: int
    """ The frame on which the timeline marker appears

    :type: int
    """

    name: str
    """ 

    :type: str
    """

    select: bool
    """ Marker selection state

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TimelineMarkers(bpy_prop_collection[TimelineMarker], bpy_struct):
    """Collection of timeline markers"""

    def new(
        self, name: str | typing.Any, frame: typing.Any | None = 1
    ) -> TimelineMarker:
        """Add a keyframe to the curve

        :param name: New name for the marker (not unique)
        :type name: str | typing.Any
        :param frame: The frame for the new marker
        :type frame: typing.Any | None
        :return: Newly created timeline marker
        :rtype: TimelineMarker
        """
        ...

    def remove(self, marker: TimelineMarker):
        """Remove a timeline marker

        :param marker: Timeline marker to remove
        :type marker: TimelineMarker
        """
        ...

    def clear(self):
        """Remove all timeline markers"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Timer(bpy_struct):
    """Window event timer"""

    time_delta: float
    """ Time since last step in seconds

    :type: float
    """

    time_duration: float
    """ Time since the timer started seconds

    :type: float
    """

    time_step: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ToolSettings(bpy_struct):
    annotation_stroke_placement_view2d: str
    """ 

    :type: str
    """

    annotation_stroke_placement_view3d: str
    """ How annotation strokes are orientated in 3D space

    :type: str
    """

    annotation_thickness: int
    """ Thickness of annotation strokes

    :type: int
    """

    auto_keying_mode: str
    """ Mode of automatic keyframe insertion for Objects, Bones and Masks

    :type: str
    """

    curve_paint_settings: CurvePaintSettings
    """ 

    :type: CurvePaintSettings
    """

    curves_sculpt: CurvesSculpt
    """ 

    :type: CurvesSculpt
    """

    custom_bevel_profile_preset: CurveProfile
    """ Used for defining a profile's path

    :type: CurveProfile
    """

    double_threshold: float
    """ Threshold distance for Auto Merge

    :type: float
    """

    gpencil_interpolate: GPencilInterpolateSettings
    """ Settings for Grease Pencil Interpolation tools

    :type: GPencilInterpolateSettings
    """

    gpencil_paint: GpPaint
    """ 

    :type: GpPaint
    """

    gpencil_sculpt: GPencilSculptSettings
    """ Settings for stroke sculpting tools and brushes

    :type: GPencilSculptSettings
    """

    gpencil_sculpt_paint: GpSculptPaint
    """ 

    :type: GpSculptPaint
    """

    gpencil_selectmode_edit: str
    """ 

    :type: str
    """

    gpencil_stroke_placement_view3d: str
    """ 

    :type: str
    """

    gpencil_stroke_snap_mode: str
    """ 

    :type: str
    """

    gpencil_surface_offset: float
    """ Offset along normal when drawing on surfaces

    :type: float
    """

    gpencil_vertex_paint: GpVertexPaint
    """ 

    :type: GpVertexPaint
    """

    gpencil_weight_paint: GpWeightPaint
    """ 

    :type: GpWeightPaint
    """

    image_paint: ImagePaint
    """ 

    :type: ImagePaint
    """

    keyframe_type: str
    """ Type of keyframes to create when inserting keyframes

    :type: str
    """

    lock_markers: bool
    """ Prevent marker editing

    :type: bool
    """

    lock_object_mode: bool
    """ Restrict selection to objects using the same mode as the active object, to prevent accidental mode switch when selecting

    :type: bool
    """

    mesh_select_mode: list[bool]
    """ Which mesh elements selection works on

    :type: list[bool]
    """

    normal_vector: mathutils.Vector
    """ Normal Vector used to copy, add or multiply

    :type: mathutils.Vector
    """

    paint_mode: PaintModeSettings
    """ 

    :type: PaintModeSettings
    """

    particle_edit: ParticleEdit
    """ 

    :type: ParticleEdit
    """

    plane_axis: str
    """ The axis used for placing the base region

    :type: str
    """

    plane_axis_auto: bool
    """ Select the closest axis when placing objects (surface overrides)

    :type: bool
    """

    plane_depth: str
    """ The initial depth used when placing the cursor

    :type: str
    """

    plane_orientation: str
    """ The initial depth used when placing the cursor

    :type: str
    """

    proportional_distance: float
    """ Display size for proportional editing circle

    :type: float
    """

    proportional_edit_falloff: str
    """ Falloff type for proportional editing mode

    :type: str
    """

    proportional_size: float
    """ Display size for proportional editing circle

    :type: float
    """

    sculpt: Sculpt
    """ 

    :type: Sculpt
    """

    sequencer_tool_settings: SequencerToolSettings
    """ 

    :type: SequencerToolSettings
    """

    show_uv_local_view: bool
    """ Display only faces with the currently displayed image assigned

    :type: bool
    """

    snap_anim_element: str
    """ Type of element to snap to

    :type: str
    """

    snap_elements: typing.Any
    """ Type of element to snap to"""

    snap_elements_base: set[str]
    """ Type of element for the 'Snap With' to snap to

    :type: set[str]
    """

    snap_elements_individual: set[str]
    """ Type of element for individual transformed elements to snap to

    :type: set[str]
    """

    snap_elements_tool: str
    """ The target to use while snapping

    :type: str
    """

    snap_face_nearest_steps: int
    """ Number of steps to break transformation into for face nearest snapping

    :type: int
    """

    snap_node_element: str
    """ Type of element to snap to

    :type: str
    """

    snap_target: str
    """ Which part to snap onto the target

    :type: str
    """

    snap_uv_element: str
    """ Type of element to snap to

    :type: str
    """

    statvis: MeshStatVis
    """ 

    :type: MeshStatVis
    """

    transform_pivot_point: str
    """ Pivot center for rotation/scaling

    :type: str
    """

    unified_paint_settings: UnifiedPaintSettings
    """ 

    :type: UnifiedPaintSettings
    """

    use_auto_normalize: bool
    """ Ensure all bone-deforming vertex groups add up to 1.0 while weight painting

    :type: bool
    """

    use_edge_path_live_unwrap: bool
    """ Changing edge seams recalculates UV unwrap

    :type: bool
    """

    use_gpencil_automerge_strokes: bool
    """ Join by distance last drawn stroke with previous strokes in the active layer

    :type: bool
    """

    use_gpencil_draw_additive: bool
    """ When creating new frames, the strokes from the previous/active frame are included as the basis for the new one

    :type: bool
    """

    use_gpencil_draw_onback: bool
    """ When draw new strokes, the new stroke is drawn below of all strokes in the layer

    :type: bool
    """

    use_gpencil_select_mask_point: bool
    """ Only sculpt selected stroke points

    :type: bool
    """

    use_gpencil_select_mask_segment: bool
    """ Only sculpt selected stroke points between other strokes

    :type: bool
    """

    use_gpencil_select_mask_stroke: bool
    """ Only sculpt selected stroke

    :type: bool
    """

    use_gpencil_stroke_endpoints: bool
    """ Only use the first and last parts of the stroke for snapping

    :type: bool
    """

    use_gpencil_thumbnail_list: bool
    """ Show compact list of color instead of thumbnails

    :type: bool
    """

    use_gpencil_vertex_select_mask_point: bool
    """ Only paint selected stroke points

    :type: bool
    """

    use_gpencil_vertex_select_mask_segment: bool
    """ Only paint selected stroke points between other strokes

    :type: bool
    """

    use_gpencil_vertex_select_mask_stroke: bool
    """ Only paint selected stroke

    :type: bool
    """

    use_gpencil_weight_data_add: bool
    """ When creating new strokes, the weight data is added according to the current vertex group and weight, if no vertex group selected, weight is not added

    :type: bool
    """

    use_keyframe_cycle_aware: bool
    """ For channels with cyclic extrapolation, keyframe insertion is automatically remapped inside the cycle time range, and keeps ends in sync. Curves newly added to actions with a Manual Frame Range and Cyclic Animation are automatically made cyclic

    :type: bool
    """

    use_keyframe_insert_auto: bool
    """ Automatic keyframe insertion for Objects, Bones and Masks

    :type: bool
    """

    use_keyframe_insert_keyingset: bool
    """ Automatic keyframe insertion using active Keying Set only

    :type: bool
    """

    use_lock_relative: bool
    """ Display bone-deforming groups as if all locked deform groups were deleted, and the remaining ones were re-normalized

    :type: bool
    """

    use_mesh_automerge: bool
    """ Automatically merge vertices moved to the same location

    :type: bool
    """

    use_mesh_automerge_and_split: bool
    """ Automatically split edges and faces

    :type: bool
    """

    use_multipaint: bool
    """ Paint across the weights of all selected bones, maintaining their relative influence

    :type: bool
    """

    use_proportional_action: bool
    """ Proportional editing in action editor

    :type: bool
    """

    use_proportional_connected: bool
    """ Proportional Editing using connected geometry only

    :type: bool
    """

    use_proportional_edit: bool
    """ Proportional edit mode

    :type: bool
    """

    use_proportional_edit_mask: bool
    """ Proportional editing mask mode

    :type: bool
    """

    use_proportional_edit_objects: bool
    """ Proportional editing object mode

    :type: bool
    """

    use_proportional_fcurve: bool
    """ Proportional editing in F-Curve editor

    :type: bool
    """

    use_proportional_projected: bool
    """ Proportional Editing using screen space locations

    :type: bool
    """

    use_record_with_nla: bool
    """ Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking

    :type: bool
    """

    use_snap: bool
    """ Snap during transform

    :type: bool
    """

    use_snap_align_rotation: bool
    """ Align rotation with the snapping target

    :type: bool
    """

    use_snap_anim: bool
    """ Enable snapping when transforming keyframes

    :type: bool
    """

    use_snap_backface_culling: bool
    """ Exclude back facing geometry from snapping

    :type: bool
    """

    use_snap_edit: bool
    """ Snap onto non-active objects in Edit Mode (Edit Mode Only)

    :type: bool
    """

    use_snap_grid_absolute: bool
    """ Absolute grid alignment while translating (based on the pivot center)

    :type: bool
    """

    use_snap_node: bool
    """ Snap Node during transform

    :type: bool
    """

    use_snap_nonedit: bool
    """ Snap onto objects not in Edit Mode (Edit Mode Only)

    :type: bool
    """

    use_snap_peel_object: bool
    """ Consider objects as whole when finding volume center

    :type: bool
    """

    use_snap_rotate: bool
    """ Rotate is affected by the snapping settings

    :type: bool
    """

    use_snap_scale: bool
    """ Scale is affected by snapping settings

    :type: bool
    """

    use_snap_selectable: bool
    """ Snap only onto objects that are selectable

    :type: bool
    """

    use_snap_self: bool
    """ Snap onto itself only if enabled (Edit Mode Only)

    :type: bool
    """

    use_snap_sequencer: bool
    """ Snap to strip edges or current frame

    :type: bool
    """

    use_snap_time_absolute: bool
    """ Absolute time alignment when transforming keyframes

    :type: bool
    """

    use_snap_to_same_target: bool
    """ Snap only to target that source was initially near (Face Nearest Only)

    :type: bool
    """

    use_snap_translate: bool
    """ Move is affected by snapping settings

    :type: bool
    """

    use_snap_uv: bool
    """ Snap UV during transform

    :type: bool
    """

    use_snap_uv_grid_absolute: bool
    """ Absolute grid alignment while translating (based on the pivot center)

    :type: bool
    """

    use_transform_correct_face_attributes: bool
    """ Correct data such as UVs and color attributes when transforming

    :type: bool
    """

    use_transform_correct_keep_connected: bool
    """ During the Face Attributes correction, merge attributes connected to the same vertex

    :type: bool
    """

    use_transform_data_origin: bool
    """ Transform object origins, while leaving the shape in place

    :type: bool
    """

    use_transform_pivot_point_align: bool
    """ Only transform object locations, without affecting rotation or scaling

    :type: bool
    """

    use_transform_skip_children: bool
    """ Transform the parents, leaving the children in place

    :type: bool
    """

    use_uv_select_sync: bool
    """ Keep UV and edit mode mesh selection in sync

    :type: bool
    """

    uv_relax_method: str
    """ Algorithm used for UV relaxation

    :type: str
    """

    uv_sculpt: UvSculpt
    """ 

    :type: UvSculpt
    """

    uv_sculpt_all_islands: bool
    """ Brush operates on all islands

    :type: bool
    """

    uv_sculpt_lock_borders: bool
    """ Disable editing of boundary edges

    :type: bool
    """

    uv_select_mode: str
    """ UV selection and display mode

    :type: str
    """

    uv_sticky_select_mode: str
    """ Method for extending UV vertex selection

    :type: str
    """

    vertex_group_subset: str
    """ Filter Vertex groups for Display

    :type: str
    """

    vertex_group_user: str
    """ Display unweighted vertices

    :type: str
    """

    vertex_group_weight: float
    """ Weight to assign in vertex groups

    :type: float
    """

    vertex_paint: VertexPaint
    """ 

    :type: VertexPaint
    """

    weight_paint: VertexPaint
    """ 

    :type: VertexPaint
    """

    workspace_tool_type: str
    """ Action when dragging in the viewport

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TransformOrientation(bpy_struct):
    matrix: mathutils.Matrix
    """ 

    :type: mathutils.Matrix
    """

    name: str
    """ Name of the custom transform orientation

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TransformOrientationSlot(bpy_struct):
    custom_orientation: TransformOrientation
    """ 

    :type: TransformOrientation
    """

    type: str
    """ Transformation orientation

    :type: str
    """

    use: bool
    """ Use scene orientation instead of a custom setting

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UDIMTile(bpy_struct):
    """Properties of the UDIM tile"""

    channels: int
    """ Number of channels in the tile pixels buffer

    :type: int
    """

    generated_color: bpy_prop_array[float]
    """ Fill color for the generated image

    :type: bpy_prop_array[float]
    """

    generated_height: int
    """ Generated image height

    :type: int
    """

    generated_type: str
    """ Generated image type

    :type: str
    """

    generated_width: int
    """ Generated image width

    :type: int
    """

    label: str
    """ Tile label

    :type: str
    """

    number: int
    """ Number of the position that this tile covers

    :type: int
    """

    size: bpy_prop_array[int]
    """ Width and height of the tile buffer in pixels, zero when image data can't be loaded

    :type: bpy_prop_array[int]
    """

    use_generated_float: bool
    """ Generate floating-point buffer

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UDIMTiles(bpy_prop_collection[UDIMTile], bpy_struct):
    """Collection of UDIM tiles"""

    active: UDIMTile
    """ Active Image Tile

    :type: UDIMTile
    """

    active_index: int | None
    """ Active index in tiles array

    :type: int | None
    """

    def new(self, tile_number: int | None, label: str | typing.Any = "") -> UDIMTile:
        """Add a tile to the image

        :param tile_number: Number of the newly created tile
        :type tile_number: int | None
        :param label: Optional label for the tile
        :type label: str | typing.Any
        :return: Newly created image tile
        :rtype: UDIMTile
        """
        ...

    def get(self, tile_number: int | None) -> UDIMTile:
        """Get a tile based on its tile number

        :param tile_number: Number of the tile
        :type tile_number: int | None
        :return: The tile
        :rtype: UDIMTile
        """
        ...

    def remove(self, tile: UDIMTile):
        """Remove an image tile

        :param tile: Image tile to remove
        :type tile: UDIMTile
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UILayout(bpy_struct):
    """User interface layout in a panel or header"""

    activate_init: bool
    """ When true, buttons defined in popups will be activated on first display (use so you can type into a field without having to click on it first)

    :type: bool
    """

    active: bool | None
    """ 

    :type: bool | None
    """

    active_default: bool | None
    """ When true, an operator button defined after this will be activated when pressing return(use with popup dialogs)

    :type: bool | None
    """

    alert: bool
    """ 

    :type: bool
    """

    alignment: str
    """ 

    :type: str
    """

    direction: str
    """ 

    :type: str
    """

    emboss: str
    """ 

    :type: str
    """

    enabled: bool
    """ When false, this (sub)layout is grayed out

    :type: bool
    """

    operator_context: str
    """ 

    :type: str
    """

    scale_x: float
    """ Scale factor along the X for items in this (sub)layout

    :type: float
    """

    scale_y: float
    """ Scale factor along the Y for items in this (sub)layout

    :type: float
    """

    ui_units_x: float
    """ Fixed size along the X for items in this (sub)layout

    :type: float
    """

    ui_units_y: float
    """ Fixed size along the Y for items in this (sub)layout

    :type: float
    """

    use_property_decorate: bool
    """ 

    :type: bool
    """

    use_property_split: bool
    """ 

    :type: bool
    """

    def row(
        self,
        align: bool | typing.Any | None = False,
        heading: str | typing.Any = "",
        heading_ctxt: str | typing.Any = "",
        translate: bool | typing.Any | None = True,
    ) -> UILayout:
        """Sub-layout. Items placed in this sublayout are placed next to each other in a row

        :param align: Align buttons to each other
        :type align: bool | typing.Any | None
        :param heading: Heading, Label to insert into the layout for this sub-layout
        :type heading: str | typing.Any
        :param heading_ctxt: Override automatic translation context of the given heading
        :type heading_ctxt: str | typing.Any
        :param translate: Translate the given heading, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :return: Sub-layout to put items in
        :rtype: UILayout
        """
        ...

    def column(
        self,
        align: bool | typing.Any | None = False,
        heading: str | typing.Any = "",
        heading_ctxt: str | typing.Any = "",
        translate: bool | typing.Any | None = True,
    ) -> UILayout:
        """Sub-layout. Items placed in this sublayout are placed under each other in a column

        :param align: Align buttons to each other
        :type align: bool | typing.Any | None
        :param heading: Heading, Label to insert into the layout for this sub-layout
        :type heading: str | typing.Any
        :param heading_ctxt: Override automatic translation context of the given heading
        :type heading_ctxt: str | typing.Any
        :param translate: Translate the given heading, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :return: Sub-layout to put items in
        :rtype: UILayout
        """
        ...

    def panel(
        self, idname: str | typing.Any, default_closed: bool | typing.Any | None = False
    ):
        """Creates a collapsable panel. Whether it is open or closed is stored in the region using the given idname. This can only be used when the panel has the full width of the panel region available to it. So it can't be used in e.g. in a box or columns

                :param idname: Identifier of the panel
                :type idname: str | typing.Any
                :param default_closed: Open by Default, When true, the panel will be open the first time it is shown
                :type default_closed: bool | typing.Any | None
                :return: layout_header, Sub-layout to put items in, `UILayout`

        layout_body, Sub-layout to put items in. Will be none if the panel is collapsed, `UILayout`
        """
        ...

    def panel_prop(self, data: typing.Any, property: str | typing.Any):
        """Similar to .panel(...) but instead of storing whether it is open or closed in the region, it is stored in the provided boolean property. This should be used when multiple instances of the same panel can exist. For example one for every item in a collection property or list. This can only be used when the panel has the full width of the panel region available to it. So it can't be used in e.g. in a box or columns

                :param data: Data from which to take the open-state property
                :type data: typing.Any
                :param property: Identifier of the boolean property that determines whether the panel is open or closed
                :type property: str | typing.Any
                :return: layout_header, Sub-layout to put items in, `UILayout`

        layout_body, Sub-layout to put items in. Will be none if the panel is collapsed, `UILayout`
        """
        ...

    def column_flow(
        self, columns: typing.Any | None = 0, align: bool | typing.Any | None = False
    ) -> UILayout:
        """column_flow

        :param columns: Number of columns, 0 is automatic
        :type columns: typing.Any | None
        :param align: Align buttons to each other
        :type align: bool | typing.Any | None
        :return: Sub-layout to put items in
        :rtype: UILayout
        """
        ...

    def grid_flow(
        self,
        row_major: bool | typing.Any | None = False,
        columns: typing.Any | None = 0,
        even_columns: bool | typing.Any | None = False,
        even_rows: bool | typing.Any | None = False,
        align: bool | typing.Any | None = False,
    ) -> UILayout:
        """grid_flow

        :param row_major: Fill row by row, instead of column by column
        :type row_major: bool | typing.Any | None
        :param columns: Number of columns, positive are absolute fixed numbers, 0 is automatic, negative are automatic multiple numbers along major axis (e.g. -2 will only produce 2, 4, 6 etc. columns for row major layout, and 2, 4, 6 etc. rows for column major layout)
        :type columns: typing.Any | None
        :param even_columns: All columns will have the same width
        :type even_columns: bool | typing.Any | None
        :param even_rows: All rows will have the same height
        :type even_rows: bool | typing.Any | None
        :param align: Align buttons to each other
        :type align: bool | typing.Any | None
        :return: Sub-layout to put items in
        :rtype: UILayout
        """
        ...

    def box(self) -> UILayout:
        """Sublayout (items placed in this sublayout are placed under each other in a column and are surrounded by a box)

        :return: Sub-layout to put items in
        :rtype: UILayout
        """
        ...

    def split(
        self, factor: typing.Any | None = 0.0, align: bool | typing.Any | None = False
    ) -> UILayout:
        """split

        :param factor: Percentage, Percentage of width to split at (leave unset for automatic calculation)
        :type factor: typing.Any | None
        :param align: Align buttons to each other
        :type align: bool | typing.Any | None
        :return: Sub-layout to put items in
        :rtype: UILayout
        """
        ...

    def menu_pie(self) -> UILayout:
        """Sublayout. Items placed in this sublayout are placed in a radial fashion around the menu center)

        :return: Sub-layout to put items in
        :rtype: UILayout
        """
        ...

    @classmethod
    def icon(cls, data: typing.Any) -> int:
        """Return the custom icon for this data, use it e.g. to get materials or texture icons

        :param data: Data from which to take the icon
        :type data: typing.Any
        :return: Icon identifier
        :rtype: int
        """
        ...

    @classmethod
    def enum_item_name(
        cls, data: typing.Any, property: str | typing.Any, identifier: str | typing.Any
    ) -> str | typing.Any:
        """Return the UI name for this enum item

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param identifier: Identifier of the enum item
        :type identifier: str | typing.Any
        :return: UI name of the enum item
        :rtype: str | typing.Any
        """
        ...

    @classmethod
    def enum_item_description(
        cls, data: typing.Any, property: str | typing.Any, identifier: str | typing.Any
    ) -> str | typing.Any:
        """Return the UI description for this enum item

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param identifier: Identifier of the enum item
        :type identifier: str | typing.Any
        :return: UI description of the enum item
        :rtype: str | typing.Any
        """
        ...

    @classmethod
    def enum_item_icon(
        cls, data: typing.Any, property: str | typing.Any, identifier: str | typing.Any
    ) -> int:
        """Return the icon for this enum item

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param identifier: Identifier of the enum item
        :type identifier: str | typing.Any
        :return: Icon identifier
        :rtype: int
        """
        ...

    def prop(
        self,
        data: typing.Any,
        property: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        placeholder: str | typing.Any = "",
        expand: bool | typing.Any | None = False,
        slider: bool | typing.Any | None = False,
        toggle: typing.Any | None = -1,
        icon_only: bool | typing.Any | None = False,
        event: bool | typing.Any | None = False,
        full_event: bool | typing.Any | None = False,
        emboss: bool | typing.Any | None = True,
        index: typing.Any | None = -1,
        icon_value: typing.Any | None = 0,
        invert_checkbox: bool | typing.Any | None = False,
    ):
        """Item. Exposes an RNA item and places it into the layout

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param placeholder: Hint describing the expected value when empty
        :type placeholder: str | typing.Any
        :param expand: Expand button to show more detail
        :type expand: bool | typing.Any | None
        :param slider: Use slider widget for numeric values
        :type slider: bool | typing.Any | None
        :param toggle: Use toggle widget for boolean values, or a checkbox when disabled (the default is -1 which uses toggle only when an icon is displayed)
        :type toggle: typing.Any | None
        :param icon_only: Draw only icons in buttons, no text
        :type icon_only: bool | typing.Any | None
        :param event: Use button to input key events
        :type event: bool | typing.Any | None
        :param full_event: Use button to input full events including modifiers
        :type full_event: bool | typing.Any | None
        :param emboss: Draw the button itself, not just the icon/text. When false, corresponds to the 'NONE_OR_STATUS' layout emboss type
        :type emboss: bool | typing.Any | None
        :param index: The index of this button, when set a single member of an array can be accessed, when set to -1 all array members are used
        :type index: typing.Any | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: typing.Any | None
        :param invert_checkbox: Draw checkbox value inverted
        :type invert_checkbox: bool | typing.Any | None
        """
        ...

    def props_enum(self, data: typing.Any, property: str | typing.Any):
        """props_enum

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def prop_menu_enum(
        self,
        data: typing.Any,
        property: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
    ):
        """prop_menu_enum

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        """
        ...

    def prop_with_popover(
        self,
        data: typing.Any,
        property: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        icon_only: bool | typing.Any | None = False,
        panel: str | typing.Any = None,
    ):
        """prop_with_popover

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param icon_only: Draw only icons in tabs, no text
        :type icon_only: bool | typing.Any | None
        :param panel: Identifier of the panel
        :type panel: str | typing.Any
        """
        ...

    def prop_with_menu(
        self,
        data: typing.Any,
        property: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        icon_only: bool | typing.Any | None = False,
        menu: str | typing.Any = None,
    ):
        """prop_with_menu

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param icon_only: Draw only icons in tabs, no text
        :type icon_only: bool | typing.Any | None
        :param menu: Identifier of the menu
        :type menu: str | typing.Any
        """
        ...

    def prop_tabs_enum(
        self,
        data: typing.Any,
        property: str | typing.Any,
        data_highlight: typing.Any = None,
        property_highlight: str | typing.Any = "",
        icon_only: bool | typing.Any | None = False,
    ):
        """prop_tabs_enum

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param data_highlight: Data from which to take highlight property
        :type data_highlight: typing.Any
        :param property_highlight: Identifier of highlight property in data
        :type property_highlight: str | typing.Any
        :param icon_only: Draw only icons in tabs, no text
        :type icon_only: bool | typing.Any | None
        """
        ...

    def prop_enum(
        self,
        data: typing.Any,
        property: str | typing.Any,
        value: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
    ):
        """prop_enum

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param value: Enum property value
        :type value: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        """
        ...

    def prop_search(
        self,
        data: typing.Any,
        property: str | typing.Any,
        search_data: typing.Any,
        search_property: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        results_are_suggestions: bool | typing.Any | None = False,
    ):
        """prop_search

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param search_data: Data from which to take collection to search in
        :type search_data: typing.Any
        :param search_property: Identifier of search collection property
        :type search_property: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param results_are_suggestions: Accept inputs that do not match any item
        :type results_are_suggestions: bool | typing.Any | None
        """
        ...

    def prop_decorator(
        self,
        data: typing.Any,
        property: str | typing.Any,
        index: typing.Any | None = -1,
    ):
        """prop_decorator

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param index: The index of this button, when set a single member of an array can be accessed, when set to -1 all array members are used
        :type index: typing.Any | None
        """
        ...

    def operator(
        self,
        operator: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        emboss: bool | typing.Any | None = True,
        depress: bool | typing.Any | None = False,
        icon_value: typing.Any | None = 0,
    ) -> OperatorProperties:
        """Item. Places a button into the layout to call an Operator

        :param operator: Identifier of the operator
        :type operator: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param emboss: Draw the button itself, not just the icon/text
        :type emboss: bool | typing.Any | None
        :param depress: Draw pressed in
        :type depress: bool | typing.Any | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: typing.Any | None
        :return: Operator properties to fill in
        :rtype: OperatorProperties
        """
        ...

    def operator_menu_hold(
        self,
        operator: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        emboss: bool | typing.Any | None = True,
        depress: bool | typing.Any | None = False,
        icon_value: typing.Any | None = 0,
        menu: str | typing.Any = None,
    ) -> OperatorProperties:
        """Item. Places a button into the layout to call an Operator

        :param operator: Identifier of the operator
        :type operator: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param emboss: Draw the button itself, not just the icon/text
        :type emboss: bool | typing.Any | None
        :param depress: Draw pressed in
        :type depress: bool | typing.Any | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: typing.Any | None
        :param menu: Identifier of the menu
        :type menu: str | typing.Any
        :return: Operator properties to fill in
        :rtype: OperatorProperties
        """
        ...

    def operator_enum(
        self,
        operator: str | typing.Any,
        property: str | typing.Any,
        icon_only: bool | typing.Any | None = False,
    ):
        """operator_enum

        :param operator: Identifier of the operator
        :type operator: str | typing.Any
        :param property: Identifier of property in operator
        :type property: str | typing.Any
        :param icon_only: Draw only icons in buttons, no text
        :type icon_only: bool | typing.Any | None
        """
        ...

    def operator_menu_enum(
        self,
        operator: str | typing.Any,
        property: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
    ) -> OperatorProperties:
        """operator_menu_enum

        :param operator: Identifier of the operator
        :type operator: str | typing.Any
        :param property: Identifier of property in operator
        :type property: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :return: Operator properties to fill in
        :rtype: OperatorProperties
        """
        ...

    def label(
        self,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        icon_value: typing.Any | None = 0,
    ):
        """Item. Displays text and/or icon in the layout

        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: typing.Any | None
        """
        ...

    def menu(
        self,
        menu: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        icon_value: typing.Any | None = 0,
    ):
        """menu

        :param menu: Identifier of the menu
        :type menu: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: typing.Any | None
        """
        ...

    def menu_contents(self, menu: str | typing.Any):
        """menu_contents

        :param menu: Identifier of the menu
        :type menu: str | typing.Any
        """
        ...

    def popover(
        self,
        panel: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        icon: str | None = "NONE",
        icon_value: typing.Any | None = 0,
    ):
        """popover

        :param panel: Identifier of the panel
        :type panel: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param icon: Icon, Override automatic icon of the item
        :type icon: str | None
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: typing.Any | None
        """
        ...

    def popover_group(
        self,
        space_type: str | None,
        region_type: str | None,
        context: str | typing.Any,
        category: str | typing.Any,
    ):
        """popover_group

        :param space_type: Space Type
        :type space_type: str | None
        :param region_type: Region Type
        :type region_type: str | None
        :param context: panel type context
        :type context: str | typing.Any
        :param category: panel type category
        :type category: str | typing.Any
        """
        ...

    def separator(self, factor: typing.Any | None = 1.0):
        """Item. Inserts empty space into the layout between items

        :param factor: Percentage, Percentage of width to space (leave unset for default space)
        :type factor: typing.Any | None
        """
        ...

    def separator_spacer(self):
        """Item. Inserts horizontal spacing empty space into the layout between items"""
        ...

    def progress(
        self,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
        factor: typing.Any | None = 0.0,
        type: str | None = "BAR",
    ):
        """Progress indicator

        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :param factor: Factor, Amount of progress from 0.0f to 1.0f
        :type factor: typing.Any | None
        :param type: Type, The type of progress indicator
        :type type: str | None
        """
        ...

    def context_pointer_set(self, name: str | typing.Any, data: typing.Any | None):
        """context_pointer_set

        :param name: Name, Name of entry in the context
        :type name: str | typing.Any
        :param data: Pointer to put in context
        :type data: typing.Any | None
        """
        ...

    def template_header(self):
        """Inserts common Space header UI (editor type selector)"""
        ...

    def template_ID(
        self,
        data: typing.Any,
        property: str | typing.Any,
        new: str | typing.Any = "",
        open: str | typing.Any = "",
        unlink: str | typing.Any = "",
        filter: str | None = "ALL",
        live_icon: bool | typing.Any | None = False,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
    ):
        """template_ID

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param new: Operator identifier to create a new ID block
        :type new: str | typing.Any
        :param open: Operator identifier to open a file for creating a new ID block
        :type open: str | typing.Any
        :param unlink: Operator identifier to unlink the ID block
        :type unlink: str | typing.Any
        :param filter: Optionally limit the items which can be selected
        :type filter: str | None
        :param live_icon: Show preview instead of fixed icon
        :type live_icon: bool | typing.Any | None
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        """
        ...

    def template_ID_preview(
        self,
        data: typing.Any,
        property: str | typing.Any,
        new: str | typing.Any = "",
        open: str | typing.Any = "",
        unlink: str | typing.Any = "",
        rows: typing.Any | None = 0,
        cols: typing.Any | None = 0,
        filter: str | None = "ALL",
        hide_buttons: bool | typing.Any | None = False,
    ):
        """template_ID_preview

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param new: Operator identifier to create a new ID block
        :type new: str | typing.Any
        :param open: Operator identifier to open a file for creating a new ID block
        :type open: str | typing.Any
        :param unlink: Operator identifier to unlink the ID block
        :type unlink: str | typing.Any
        :param rows: Number of thumbnail preview rows to display
        :type rows: typing.Any | None
        :param cols: Number of thumbnail preview columns to display
        :type cols: typing.Any | None
        :param filter: Optionally limit the items which can be selected
        :type filter: str | None
        :param hide_buttons: Show only list, no buttons
        :type hide_buttons: bool | typing.Any | None
        """
        ...

    def template_any_ID(
        self,
        data: typing.Any,
        property: str | typing.Any,
        type_property: str | typing.Any,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
    ):
        """template_any_ID

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param type_property: Identifier of property in data giving the type of the ID-blocks to use
        :type type_property: str | typing.Any
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        """
        ...

    def template_ID_tabs(
        self,
        data: typing.Any,
        property: str | typing.Any,
        new: str | typing.Any = "",
        menu: str | typing.Any = "",
        filter: str | None = "ALL",
    ):
        """template_ID_tabs

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param new: Operator identifier to create a new ID block
        :type new: str | typing.Any
        :param menu: Context menu identifier
        :type menu: str | typing.Any
        :param filter: Optionally limit the items which can be selected
        :type filter: str | None
        """
        ...

    def template_search(
        self,
        data: typing.Any,
        property: str | typing.Any,
        search_data: typing.Any,
        search_property: str | typing.Any,
        new: str | typing.Any = "",
        unlink: str | typing.Any = "",
    ):
        """template_search

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param search_data: Data from which to take collection to search in
        :type search_data: typing.Any
        :param search_property: Identifier of search collection property
        :type search_property: str | typing.Any
        :param new: Operator identifier to create a new item for the collection
        :type new: str | typing.Any
        :param unlink: Operator identifier to unlink or delete the active item from the collection
        :type unlink: str | typing.Any
        """
        ...

    def template_search_preview(
        self,
        data: typing.Any,
        property: str | typing.Any,
        search_data: typing.Any,
        search_property: str | typing.Any,
        new: str | typing.Any = "",
        unlink: str | typing.Any = "",
        rows: typing.Any | None = 0,
        cols: typing.Any | None = 0,
    ):
        """template_search_preview

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param search_data: Data from which to take collection to search in
        :type search_data: typing.Any
        :param search_property: Identifier of search collection property
        :type search_property: str | typing.Any
        :param new: Operator identifier to create a new item for the collection
        :type new: str | typing.Any
        :param unlink: Operator identifier to unlink or delete the active item from the collection
        :type unlink: str | typing.Any
        :param rows: Number of thumbnail preview rows to display
        :type rows: typing.Any | None
        :param cols: Number of thumbnail preview columns to display
        :type cols: typing.Any | None
        """
        ...

    def template_path_builder(
        self,
        data: typing.Any,
        property: str | typing.Any,
        root: ID | None,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
    ):
        """template_path_builder

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param root: ID-block from which path is evaluated from
        :type root: ID | None
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        """
        ...

    def template_modifiers(self):
        """Generates the UI layout for the modifier stack"""
        ...

    def template_constraints(
        self, use_bone_constraints: bool | typing.Any | None = True
    ):
        """Generates the panels for the constraint stack

        :param use_bone_constraints: Add panels for bone constraints instead of object constraints
        :type use_bone_constraints: bool | typing.Any | None
        """
        ...

    def template_grease_pencil_modifiers(self):
        """Generates the panels for the grease pencil modifier stack"""
        ...

    def template_shaderfx(self):
        """Generates the panels for the shader effect stack"""
        ...

    def template_greasepencil_color(
        self,
        data: typing.Any,
        property: str | typing.Any,
        rows: typing.Any | None = 0,
        cols: typing.Any | None = 0,
        scale: typing.Any | None = 1.0,
        filter: str | None = "ALL",
    ):
        """template_greasepencil_color

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param rows: Number of thumbnail preview rows to display
        :type rows: typing.Any | None
        :param cols: Number of thumbnail preview columns to display
        :type cols: typing.Any | None
        :param scale: Scale of the image thumbnails
        :type scale: typing.Any | None
        :param filter: Optionally limit the items which can be selected
        :type filter: str | None
        """
        ...

    def template_constraint_header(self, data: Constraint):
        """Generates the header for constraint panels

        :param data: Constraint data
        :type data: Constraint
        """
        ...

    def template_preview(
        self,
        id: ID | None,
        show_buttons: bool | typing.Any | None = True,
        parent: ID | None = None,
        slot: TextureSlot | None = None,
        preview_id: str | typing.Any = "",
    ):
        """Item. A preview window for materials, textures, lights or worlds

        :param id: ID data-block
        :type id: ID | None
        :param show_buttons: Show preview buttons?
        :type show_buttons: bool | typing.Any | None
        :param parent: ID data-block
        :type parent: ID | None
        :param slot: Texture slot
        :type slot: TextureSlot | None
        :param preview_id: Identifier of this preview widget, if not set the ID type will be used (i.e. all previews of materials without explicit ID will have the same size...)
        :type preview_id: str | typing.Any
        """
        ...

    def template_curve_mapping(
        self,
        data: typing.Any,
        property: str | typing.Any,
        type: str | None = "NONE",
        levels: bool | typing.Any | None = False,
        brush: bool | typing.Any | None = False,
        use_negative_slope: bool | typing.Any | None = False,
        show_tone: bool | typing.Any | None = False,
    ):
        """Item. A curve mapping widget used for e.g falloff curves for lights

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param type: Type, Type of curves to display
        :type type: str | None
        :param levels: Show black/white levels
        :type levels: bool | typing.Any | None
        :param brush: Show brush options
        :type brush: bool | typing.Any | None
        :param use_negative_slope: Use a negative slope by default
        :type use_negative_slope: bool | typing.Any | None
        :param show_tone: Show tone options
        :type show_tone: bool | typing.Any | None
        """
        ...

    def template_curveprofile(self, data: typing.Any, property: str | typing.Any):
        """A profile path editor used for custom profiles

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_color_ramp(
        self,
        data: typing.Any,
        property: str | typing.Any,
        expand: bool | typing.Any | None = False,
    ):
        """Item. A color ramp widget

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param expand: Expand button to show more detail
        :type expand: bool | typing.Any | None
        """
        ...

    def template_icon(self, icon_value: int | None, scale: typing.Any | None = 1.0):
        """Display a large icon

        :param icon_value: Icon to display
        :type icon_value: int | None
        :param scale: Scale, Scale the icon size (by the button size)
        :type scale: typing.Any | None
        """
        ...

    def template_icon_view(
        self,
        data: typing.Any,
        property: str | typing.Any,
        show_labels: bool | typing.Any | None = False,
        scale: typing.Any | None = 6.0,
        scale_popup: typing.Any | None = 5.0,
    ):
        """Enum. Large widget showing Icon previews

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param show_labels: Show enum label in preview buttons
        :type show_labels: bool | typing.Any | None
        :param scale: UI Units, Scale the button icon size (by the button size)
        :type scale: typing.Any | None
        :param scale_popup: Scale, Scale the popup icon size (by the button size)
        :type scale_popup: typing.Any | None
        """
        ...

    def template_histogram(self, data: typing.Any, property: str | typing.Any):
        """Item. A histogramm widget to analyze imaga data

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_waveform(self, data: typing.Any, property: str | typing.Any):
        """Item. A waveform widget to analyze imaga data

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_vectorscope(self, data: typing.Any, property: str | typing.Any):
        """Item. A vectorscope widget to analyze imaga data

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_layers(
        self,
        data: typing.Any,
        property: str | typing.Any,
        used_layers_data: typing.Any | None,
        used_layers_property: str | typing.Any,
        active_layer: int | None,
    ):
        """template_layers

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param used_layers_data: Data from which to take property
        :type used_layers_data: typing.Any | None
        :param used_layers_property: Identifier of property in data
        :type used_layers_property: str | typing.Any
        :param active_layer: Active Layer
        :type active_layer: int | None
        """
        ...

    def template_color_picker(
        self,
        data: typing.Any,
        property: str | typing.Any,
        value_slider: bool | typing.Any | None = False,
        lock: bool | typing.Any | None = False,
        lock_luminosity: bool | typing.Any | None = False,
        cubic: bool | typing.Any | None = False,
    ):
        """Item. A color wheel widget to pick colors

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param value_slider: Display the value slider to the right of the color wheel
        :type value_slider: bool | typing.Any | None
        :param lock: Lock the color wheel display to value 1.0 regardless of actual color
        :type lock: bool | typing.Any | None
        :param lock_luminosity: Keep the color at its original vector length
        :type lock_luminosity: bool | typing.Any | None
        :param cubic: Cubic saturation for picking values close to white
        :type cubic: bool | typing.Any | None
        """
        ...

    def template_palette(
        self,
        data: typing.Any,
        property: str | typing.Any,
        color: bool | typing.Any | None = False,
    ):
        """Item. A palette used to pick colors

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param color: Display the colors as colors or values
        :type color: bool | typing.Any | None
        """
        ...

    def template_image_layers(self, image: Image | None, image_user: ImageUser | None):
        """template_image_layers

        :param image:
        :type image: Image | None
        :param image_user:
        :type image_user: ImageUser | None
        """
        ...

    def template_image(
        self,
        data: typing.Any,
        property: str | typing.Any,
        image_user: ImageUser,
        compact: bool | typing.Any | None = False,
        multiview: bool | typing.Any | None = False,
    ):
        """Item(s). User interface for selecting images and their source paths

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param image_user:
        :type image_user: ImageUser
        :param compact: Use more compact layout
        :type compact: bool | typing.Any | None
        :param multiview: Expose Multi-View options
        :type multiview: bool | typing.Any | None
        """
        ...

    def template_image_settings(
        self,
        image_settings: ImageFormatSettings,
        color_management: bool | typing.Any | None = False,
    ):
        """User interface for setting image format options

        :param image_settings:
        :type image_settings: ImageFormatSettings
        :param color_management: Show color management settings
        :type color_management: bool | typing.Any | None
        """
        ...

    def template_image_stereo_3d(self, stereo_3d_format: Stereo3dFormat):
        """User interface for setting image stereo 3d options

        :param stereo_3d_format:
        :type stereo_3d_format: Stereo3dFormat
        """
        ...

    def template_image_views(self, image_settings: ImageFormatSettings):
        """User interface for setting image views output options

        :param image_settings:
        :type image_settings: ImageFormatSettings
        """
        ...

    def template_movieclip(
        self,
        data: typing.Any,
        property: str | typing.Any,
        compact: bool | typing.Any | None = False,
    ):
        """Item(s). User interface for selecting movie clips and their source paths

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param compact: Use more compact layout
        :type compact: bool | typing.Any | None
        """
        ...

    def template_track(self, data: typing.Any, property: str | typing.Any):
        """Item. A movie-track widget to preview tracking image.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_marker(
        self,
        data: typing.Any,
        property: str | typing.Any,
        clip_user: MovieClipUser,
        track: MovieTrackingTrack,
        compact: bool | typing.Any | None = False,
    ):
        """Item. A widget to control single marker settings.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param clip_user:
        :type clip_user: MovieClipUser
        :param track:
        :type track: MovieTrackingTrack
        :param compact: Use more compact layout
        :type compact: bool | typing.Any | None
        """
        ...

    def template_movieclip_information(
        self, data: typing.Any, property: str | typing.Any, clip_user: MovieClipUser
    ):
        """Item. Movie clip information data.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param clip_user:
        :type clip_user: MovieClipUser
        """
        ...

    def template_list(
        self,
        listtype_name: str | typing.Any,
        list_id: str | typing.Any,
        dataptr: typing.Any | None,
        propname: str | typing.Any,
        active_dataptr: typing.Any,
        active_propname: str | typing.Any,
        item_dyntip_propname: str | typing.Any = "",
        rows: typing.Any | None = 5,
        maxrows: typing.Any | None = 5,
        type: str | None = "DEFAULT",
        columns: typing.Any | None = 9,
        sort_reverse: bool | typing.Any | None = False,
        sort_lock: bool | typing.Any | None = False,
    ):
        """Item. A list widget to display data, e.g. vertexgroups.

        :param listtype_name: Identifier of the list type to use
        :type listtype_name: str | typing.Any
        :param list_id: Identifier of this list widget (mandatory when using default "UI_UL_list" class). If this not an empty string, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and list_id is not set by the script, then bl_idname = "OBJECT_UL_vgroups")
        :type list_id: str | typing.Any
        :param dataptr: Data from which to take the Collection property
        :type dataptr: typing.Any | None
        :param propname: Identifier of the Collection property in data
        :type propname: str | typing.Any
        :param active_dataptr: Data from which to take the integer property, index of the active item
        :type active_dataptr: typing.Any
        :param active_propname: Identifier of the integer property in active_data, index of the active item
        :type active_propname: str | typing.Any
        :param item_dyntip_propname: Identifier of a string property in items, to use as tooltip content
        :type item_dyntip_propname: str | typing.Any
        :param rows: Default and minimum number of rows to display
        :type rows: typing.Any | None
        :param maxrows: Default maximum number of rows to display
        :type maxrows: typing.Any | None
        :param type: Type, Type of layout to use
        :type type: str | None
        :param columns: Number of items to display per row, for GRID layout
        :type columns: typing.Any | None
        :param sort_reverse: Display items in reverse order by default
        :type sort_reverse: bool | typing.Any | None
        :param sort_lock: Lock display order to default value
        :type sort_lock: bool | typing.Any | None
        """
        ...

    def template_running_jobs(self):
        """template_running_jobs"""
        ...

    def template_operator_search(self):
        """template_operator_search"""
        ...

    def template_menu_search(self):
        """template_menu_search"""
        ...

    def template_header_3D_mode(self): ...
    def template_edit_mode_selection(self):
        """Inserts common 3DView Edit modes header UI (selector for selection mode)"""
        ...

    def template_reports_banner(self):
        """template_reports_banner"""
        ...

    def template_input_status(self):
        """template_input_status"""
        ...

    def template_status_info(self):
        """template_status_info"""
        ...

    def template_node_link(
        self, ntree: NodeTree | None, node: Node | None, socket: NodeSocket | None
    ):
        """template_node_link

        :param ntree:
        :type ntree: NodeTree | None
        :param node:
        :type node: Node | None
        :param socket:
        :type socket: NodeSocket | None
        """
        ...

    def template_node_view(
        self, ntree: NodeTree | None, node: Node | None, socket: NodeSocket | None
    ):
        """template_node_view

        :param ntree:
        :type ntree: NodeTree | None
        :param node:
        :type node: Node | None
        :param socket:
        :type socket: NodeSocket | None
        """
        ...

    def template_node_asset_menu_items(self, catalog_path: str | typing.Any = ""):
        """template_node_asset_menu_items

        :param catalog_path:
        :type catalog_path: str | typing.Any
        """
        ...

    def template_modifier_asset_menu_items(self, catalog_path: str | typing.Any = ""):
        """template_modifier_asset_menu_items

        :param catalog_path:
        :type catalog_path: str | typing.Any
        """
        ...

    def template_node_operator_asset_menu_items(
        self, catalog_path: str | typing.Any = ""
    ):
        """template_node_operator_asset_menu_items

        :param catalog_path:
        :type catalog_path: str | typing.Any
        """
        ...

    def template_node_operator_asset_root_items(self):
        """template_node_operator_asset_root_items"""
        ...

    def template_texture_user(self):
        """template_texture_user"""
        ...

    def template_keymap_item_properties(self, item: KeyMapItem):
        """template_keymap_item_properties

        :param item:
        :type item: KeyMapItem
        """
        ...

    def template_component_menu(
        self,
        data: typing.Any | None,
        property: str | typing.Any,
        name: str | typing.Any = "",
    ):
        """Item. Display expanded property in a popup menu

        :param data: Data from which to take property
        :type data: typing.Any | None
        :param property: Identifier of property in data
        :type property: str | typing.Any
        :param name:
        :type name: str | typing.Any
        """
        ...

    def template_colorspace_settings(
        self, data: typing.Any, property: str | typing.Any
    ):
        """Item. A widget to control input color space settings.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_colormanaged_view_settings(
        self, data: typing.Any, property: str | typing.Any
    ):
        """Item. A widget to control color managed view settings.

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_node_socket(self, color: typing.Any | None = (0.0, 0.0, 0.0, 1.0)):
        """Node Socket Icon

        :param color: Color
        :type color: typing.Any | None
        """
        ...

    def template_cache_file(self, data: typing.Any, property: str | typing.Any):
        """Item(s). User interface for selecting cache files and their source paths

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_cache_file_velocity(
        self, data: typing.Any, property: str | typing.Any
    ):
        """Show cache files velocity properties

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_cache_file_procedural(
        self, data: typing.Any, property: str | typing.Any
    ):
        """Show cache files render procedural properties

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_cache_file_time_settings(
        self, data: typing.Any, property: str | typing.Any
    ):
        """Show cache files time settings

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_cache_file_layers(self, data: typing.Any, property: str | typing.Any):
        """Show cache files override layers properties

        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_recent_files(self, rows: typing.Any | None = 5) -> int:
        """Show list of recently saved .blend files

        :param rows: Maximum number of items to show
        :type rows: typing.Any | None
        :return: Number of items drawn
        :rtype: int
        """
        ...

    def template_file_select_path(self, params: FileSelectParams | None):
        """Item. A text button to set the active file browser path.

        :param params:
        :type params: FileSelectParams | None
        """
        ...

    def template_event_from_keymap_item(
        self,
        item: KeyMapItem,
        text: str | typing.Any | None = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
    ):
        """Display keymap item as icons/text

        :param item: Item
        :type item: KeyMapItem
        :param text: Override automatic text of the item
        :type text: str | typing.Any | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        """
        ...

    def template_asset_view(
        self,
        list_id: str | typing.Any,
        asset_library_dataptr: typing.Any,
        asset_library_propname: str | typing.Any,
        assets_dataptr: typing.Any,
        assets_propname: str | typing.Any,
        active_dataptr: typing.Any,
        active_propname: str | typing.Any,
        filter_id_types: set[str] | None = {},
        display_options: set[str] | None = {},
        activate_operator: str | typing.Any = "",
        drag_operator: str | typing.Any = "",
    ):
        """Item. A scrollable list of assets in a grid view

                :param list_id: Identifier of this asset view. Necessary to tell apart different asset views and to idenify an asset view read from a .blend
                :type list_id: str | typing.Any
                :param asset_library_dataptr: Data from which to take the active asset library property
                :type asset_library_dataptr: typing.Any
                :param asset_library_propname: Identifier of the asset library property
                :type asset_library_propname: str | typing.Any
                :param assets_dataptr: Data from which to take the asset list property
                :type assets_dataptr: typing.Any
                :param assets_propname: Identifier of the asset list property
                :type assets_propname: str | typing.Any
                :param active_dataptr: Data from which to take the integer property, index of the active item
                :type active_dataptr: typing.Any
                :param active_propname: Identifier of the integer property in active_data, index of the active item
                :type active_propname: str | typing.Any
                :param filter_id_types: filter_id_types
                :type filter_id_types: set[str] | None
                :param display_options: Displaying options for the asset view

        NO_NAMES
        Do not display the name of each asset underneath preview images.

        NO_FILTER
        Do not display buttons for filtering the available assets.

        NO_LIBRARY
        Do not display buttons to choose or refresh an asset library.
                :type display_options: set[str] | None
                :param activate_operator: Name of a custom operator to invoke when activating an item
                :type activate_operator: str | typing.Any
                :param drag_operator: Name of a custom operator to invoke when starting to drag an item. Never invoked together with the active_operator (if set), it's either the drag or the activate one
                :type drag_operator: str | typing.Any
                :return: activate_operator_properties, Operator properties to fill in for the custom activate operator passed to the template, `OperatorProperties`

        drag_operator_properties, Operator properties to fill in for the custom drag operator passed to the template, `OperatorProperties`
        """
        ...

    def template_light_linking_collection(
        self, context_layout: UILayout, data: typing.Any, property: str | typing.Any
    ):
        """Visualization of a content of a light linking collection

        :param context_layout: Layout to set active list element as context properties
        :type context_layout: UILayout
        :param data: Data from which to take property
        :type data: typing.Any
        :param property: Identifier of property in data
        :type property: str | typing.Any
        """
        ...

    def template_bone_collection_tree(self):
        """Show bone collections tree"""
        ...

    def template_node_tree_interface(self, interface: NodeTreeInterface):
        """Show a node tree interface

        :param interface: Node Tree Interface, Interface of a node tree to display
        :type interface: NodeTreeInterface
        """
        ...

    def template_node_inputs(self, node: Node):
        """Show a node settings and input socket values

        :param node: Node, Display inputs of this node
        :type node: Node
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    def introspect(self):
        """Return a dictionary containing a textual representation of the UI layout."""
        ...

class UIList(bpy_struct):
    """UI list containing the elements of a collection"""

    bitflag_filter_item: int
    """ The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)

    :type: int
    """

    bl_idname: str
    """ If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and bl_idname is not set by the script, then bl_idname = "OBJECT_UL_vgroups")

    :type: str
    """

    filter_name: str
    """ Only show items matching this name (use '*' as wildcard)

    :type: str
    """

    layout_type: str
    """ 

    :type: str
    """

    list_id: str
    """ Identifier of the list, if any was passed to the "list_id" parameter of "template_list()"

    :type: str
    """

    use_filter_invert: bool
    """ Invert filtering (show hidden items, and vice versa)

    :type: bool
    """

    use_filter_show: bool
    """ Show filtering options

    :type: bool
    """

    use_filter_sort_alpha: bool
    """ Sort items by their name

    :type: bool
    """

    use_filter_sort_lock: bool
    """ Lock the order of shown items (user cannot change it)

    :type: bool
    """

    use_filter_sort_reverse: bool
    """ Reverse the order of shown items

    :type: bool
    """

    def draw_item(
        self,
        context: Context | None,
        layout: UILayout,
        data: typing.Any | None,
        item: typing.Any | None,
        icon: int | None,
        active_data: typing.Any,
        active_property: str | None,
        index: typing.Any | None = 0,
        flt_flag: typing.Any | None = 0,
    ):
        """Draw an item in the list (NOTE: when you define your own draw_item function, you may want to check given 'item' is of the right type...)

        :param context:
        :type context: Context | None
        :param layout: Layout to draw the item
        :type layout: UILayout
        :param data: Data from which to take Collection property
        :type data: typing.Any | None
        :param item: Item of the collection property
        :type item: typing.Any | None
        :param icon: Icon of the item in the collection
        :type icon: int | None
        :param active_data: Data from which to take property for the active element
        :type active_data: typing.Any
        :param active_property: Identifier of property in active_data, for the active element
        :type active_property: str | None
        :param index: Index of the item in the collection
        :type index: typing.Any | None
        :param flt_flag: The filter-flag result for this item
        :type flt_flag: typing.Any | None
        """
        ...

    def draw_filter(self, context: Context | None, layout: UILayout):
        """Draw filtering options

        :param context:
        :type context: Context | None
        :param layout: Layout to draw the item
        :type layout: UILayout
        """
        ...

    def filter_items(
        self,
        context: Context | None,
        data: typing.Any | None,
        property: str | typing.Any,
    ):
        """Filter and/or re-order items of the collection (output filter results in filter_flags, and reorder results in filter_neworder arrays)

                :param context:
                :type context: Context | None
                :param data: Data from which to take Collection property
                :type data: typing.Any | None
                :param property: Identifier of property in data, for the collection
                :type property: str | typing.Any
                :return: filter_flags, An array of filter flags, one for each item in the collection (NOTE: The upper 16 bits, including FILTER_ITEM, are reserved, only use the lower 16 bits for custom usages), int array of 1 items in [0, inf]

        filter_neworder, An array of indices, one for each item in the collection, mapping the org index to the new one, int array of 1 items in [0, inf]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UIPieMenu(bpy_struct):
    layout: UILayout
    """ 

    :type: UILayout
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UIPopover(bpy_struct):
    layout: UILayout
    """ 

    :type: UILayout
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UIPopupMenu(bpy_struct):
    layout: UILayout
    """ 

    :type: UILayout
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class USDHook(bpy_struct):
    """Defines callback functions to extend USD IO"""

    bl_description: str
    """ A short description of the USD hook

    :type: str
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UVLoopLayers(bpy_prop_collection[MeshUVLoopLayer], bpy_struct):
    """Collection of UV map layers"""

    active: MeshUVLoopLayer | None
    """ Active UV Map layer

    :type: MeshUVLoopLayer | None
    """

    active_index: int | None
    """ Active UV map index

    :type: int | None
    """

    def new(
        self, name: str | typing.Any = "UVMap", do_init: bool | typing.Any | None = True
    ) -> MeshUVLoopLayer:
        """Add a UV map layer to Mesh

        :param name: UV map name
        :type name: str | typing.Any
        :param do_init: Whether new layer's data should be initialized by copying current active one, or if none is active, with a default UVmap
        :type do_init: bool | typing.Any | None
        :return: The newly created layer
        :rtype: MeshUVLoopLayer
        """
        ...

    def remove(self, layer: MeshUVLoopLayer):
        """Remove a vertex color layer

        :param layer: The layer to remove
        :type layer: MeshUVLoopLayer
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UVProjector(bpy_struct):
    """UV projector used by the UV project modifier"""

    object: Object
    """ Object to use as projector transform

    :type: Object
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UnifiedPaintSettings(bpy_struct):
    """Overrides for some of the active brush's settings"""

    color: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    input_samples: int
    """ Number of input samples to average together to smooth the brush stroke

    :type: int
    """

    secondary_color: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    size: int
    """ Radius of the brush

    :type: int
    """

    strength: float
    """ How powerful the effect of the brush is when applied

    :type: float
    """

    unprojected_radius: float
    """ Radius of brush in Blender units

    :type: float
    """

    use_locked_size: str
    """ Measure brush size relative to the view or the scene

    :type: str
    """

    use_unified_color: bool
    """ Instead of per-brush color, the color is shared across brushes

    :type: bool
    """

    use_unified_input_samples: bool
    """ Instead of per-brush input samples, the value is shared across brushes

    :type: bool
    """

    use_unified_size: bool
    """ Instead of per-brush radius, the radius is shared across brushes

    :type: bool
    """

    use_unified_strength: bool
    """ Instead of per-brush strength, the strength is shared across brushes

    :type: bool
    """

    use_unified_weight: bool
    """ Instead of per-brush weight, the weight is shared across brushes

    :type: bool
    """

    weight: float
    """ Weight to assign in vertex groups

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UnitSettings(bpy_struct):
    length_unit: str
    """ Unit that will be used to display length values

    :type: str
    """

    mass_unit: str
    """ Unit that will be used to display mass values

    :type: str
    """

    scale_length: float
    """ Scale to use when converting between Blender units and dimensions. When working at microscopic or astronomical scale, a small or large unit scale respectively can be used to avoid numerical precision problems

    :type: float
    """

    system: str
    """ The unit system to use for user interface controls

    :type: str
    """

    system_rotation: str
    """ Unit to use for displaying/editing rotation values

    :type: str
    """

    temperature_unit: str
    """ Unit that will be used to display temperature values

    :type: str
    """

    time_unit: str
    """ Unit that will be used to display time values

    :type: str
    """

    use_separate: bool
    """ Display units in pairs (e.g. 1m 0cm)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UnknownType(bpy_struct):
    """Stub RNA type used for pointers to unknown or internal data"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UserAssetLibrary(bpy_struct):
    """Settings to define a reusable library for Asset Browsers to use"""

    import_method: str
    """ Determine how the asset will be imported, unless overridden by the Asset Browser

    :type: str
    """

    name: str
    """ Identifier (not necessarily unique) for the asset library

    :type: str
    """

    path: str
    """ Path to a directory with .blend files to use as an asset library

    :type: str
    """

    use_relative_path: bool
    """ Use relative path when linking assets from this asset library

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UserExtensionRepo(bpy_struct):
    """Settings to define an extension repository"""

    custom_directory: str
    """ The local directory containing extensions

    :type: str
    """

    enabled: bool
    """ Enable the repository

    :type: bool
    """

    module: str
    """ Unique module identifier

    :type: str
    """

    name: str
    """ Unique repository name

    :type: str
    """

    remote_path: str
    """ Remote URL or path for extension repository

    :type: str
    """

    use_cache: bool
    """ Store packages in local cache, otherwise downloaded package files are immediately deleted after installation

    :type: bool
    """

    use_custom_directory: bool
    """ Manually set the path for extensions to be stored. When disabled a users extensions directory is created

    :type: bool
    """

    use_remote_path: bool
    """ Synchronize the repository with a remote URL/path

    :type: bool
    """

    directory: typing.Any
    """ Return directory or a default path derived from the users scripts path.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UserExtensionRepoCollection(bpy_prop_collection[UserExtensionRepo], bpy_struct):
    """Collection of user extension repositories"""

    @classmethod
    def new(
        cls,
        name: str | typing.Any = "",
        module: str | typing.Any = "",
        custom_directory: str | typing.Any = "",
        remote_path: str | typing.Any = "",
    ) -> UserExtensionRepo:
        """Add a new repository

        :param name: Name
        :type name: str | typing.Any
        :param module: Module
        :type module: str | typing.Any
        :param custom_directory: Custom Directory
        :type custom_directory: str | typing.Any
        :param remote_path: Remote Path
        :type remote_path: str | typing.Any
        :return: Newly added repository
        :rtype: UserExtensionRepo
        """
        ...

    @classmethod
    def remove(cls, repo: UserExtensionRepo):
        """Remove repos

        :param repo: Repository to remove
        :type repo: UserExtensionRepo
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UserSolidLight(bpy_struct):
    """Light used for Studio lighting in solid shading mode"""

    diffuse_color: mathutils.Color
    """ Color of the light's diffuse highlight

    :type: mathutils.Color
    """

    direction: mathutils.Vector
    """ Direction that the light is shining

    :type: mathutils.Vector
    """

    smooth: float
    """ Smooth the lighting from this light

    :type: float
    """

    specular_color: mathutils.Color
    """ Color of the light's specular highlight

    :type: mathutils.Color
    """

    use: bool
    """ Enable this light in solid shading mode

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VertexGroup(bpy_struct):
    """Group of vertices, used for armature deform and other purposes"""

    index: int
    """ Index number of the vertex group

    :type: int
    """

    lock_weight: bool
    """ Maintain the relative weights for the group

    :type: bool
    """

    name: str
    """ Vertex group name

    :type: str
    """

    def add(
        self,
        index: collections.abc.Iterable[int] | None,
        weight: float | None,
        type: str | None,
    ):
        """Add vertices to the group

                :param index: List of indices
                :type index: collections.abc.Iterable[int] | None
                :param weight: Vertex weight
                :type weight: float | None
                :param type: Vertex assign mode

        REPLACE
        Replace -- Replace.

        ADD
        Add -- Add.

        SUBTRACT
        Subtract -- Subtract.
                :type type: str | None
        """
        ...

    def remove(self, index: collections.abc.Iterable[int] | None):
        """Remove vertices from the group

        :param index: List of indices
        :type index: collections.abc.Iterable[int] | None
        """
        ...

    def weight(self, index: int | None) -> float:
        """Get a vertex weight from the group

        :param index: Index, The index of the vertex
        :type index: int | None
        :return: Vertex weight
        :rtype: float
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VertexGroupElement(bpy_struct):
    """Weight value of a vertex in a vertex group"""

    group: int
    """ 

    :type: int
    """

    weight: float
    """ Vertex Weight

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VertexGroups(bpy_prop_collection[VertexGroup], bpy_struct):
    """Collection of vertex groups"""

    active: VertexGroup | None
    """ Vertex groups of the object

    :type: VertexGroup | None
    """

    active_index: int | None
    """ Active index in vertex group array

    :type: int | None
    """

    def new(self, name: str | typing.Any = "Group") -> VertexGroup:
        """Add vertex group to object

        :param name: Vertex group name
        :type name: str | typing.Any
        :return: New vertex group
        :rtype: VertexGroup
        """
        ...

    def remove(self, group: VertexGroup):
        """Delete vertex group from object

        :param group: Vertex group to remove
        :type group: VertexGroup
        """
        ...

    def clear(self):
        """Delete all vertex groups from object"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class View2D(bpy_struct):
    """Scroll and zoom for a 2D region"""

    def region_to_view(self, x: float | None, y: float | None) -> bpy_prop_array[float]:
        """Transform region coordinates to 2D view

        :param x: x, Region x coordinate
        :type x: float | None
        :param y: y, Region y coordinate
        :type y: float | None
        :return: Result, View coordinates
        :rtype: bpy_prop_array[float]
        """
        ...

    def view_to_region(
        self, x: float | None, y: float | None, clip: bool | typing.Any | None = True
    ) -> bpy_prop_array[int]:
        """Transform 2D view coordinates to region

        :param x: x, 2D View x coordinate
        :type x: float | None
        :param y: y, 2D View y coordinate
        :type y: float | None
        :param clip: Clip, Clip coordinates to the visible region
        :type clip: bool | typing.Any | None
        :return: Result, Region coordinates
        :rtype: bpy_prop_array[int]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class View3DCursor(bpy_struct):
    location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    matrix: mathutils.Matrix
    """ Matrix combining location and rotation of the cursor

    :type: mathutils.Matrix
    """

    rotation_axis_angle: bpy_prop_array[float]
    """ Angle of Rotation for Axis-Angle rotation representation

    :type: bpy_prop_array[float]
    """

    rotation_euler: mathutils.Euler
    """ 3D rotation

    :type: mathutils.Euler
    """

    rotation_mode: str
    """ 

    :type: str
    """

    rotation_quaternion: mathutils.Quaternion
    """ Rotation in quaternions (keep normalized)

    :type: mathutils.Quaternion
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class View3DOverlay(bpy_struct):
    """Settings for display of overlays in the 3D viewport"""

    bone_wire_alpha: float
    """ Maximum opacity of bones in wireframe display mode

    :type: float
    """

    display_handle: str
    """ Limit the display of curve handles in edit mode

    :type: str
    """

    fade_inactive_alpha: float
    """ Strength of the fade effect

    :type: float
    """

    gpencil_fade_layer: float
    """ Fade layer opacity for Grease Pencil layers except the active one

    :type: float
    """

    gpencil_fade_objects: float
    """ Fade factor

    :type: float
    """

    gpencil_grid_opacity: float
    """ Canvas grid opacity

    :type: float
    """

    gpencil_vertex_paint_opacity: float
    """ Vertex Paint mix factor

    :type: float
    """

    grid_lines: int
    """ Number of grid lines to display in perspective view

    :type: int
    """

    grid_scale: float
    """ Multiplier for the distance between 3D View grid lines

    :type: float
    """

    grid_scale_unit: float
    """ Grid cell size scaled by scene unit system settings

    :type: float
    """

    grid_subdivisions: int
    """ Number of subdivisions between grid lines

    :type: int
    """

    normals_constant_screen_size: float
    """ Screen size for normals in the 3D view

    :type: float
    """

    normals_length: float
    """ Display size for normals in the 3D view

    :type: float
    """

    retopology_offset: float
    """ Offset used to draw edit mesh in front of other geometry

    :type: float
    """

    sculpt_curves_cage_opacity: float
    """ Opacity of the cage overlay in curves sculpt mode

    :type: float
    """

    sculpt_mode_face_sets_opacity: float
    """ 

    :type: float
    """

    sculpt_mode_mask_opacity: float
    """ 

    :type: float
    """

    show_annotation: bool
    """ Show annotations for this view

    :type: bool
    """

    show_axis_x: bool
    """ Show the X axis line

    :type: bool
    """

    show_axis_y: bool
    """ Show the Y axis line

    :type: bool
    """

    show_axis_z: bool
    """ Show the Z axis line

    :type: bool
    """

    show_bones: bool
    """ Display bones (disable to show motion paths only)

    :type: bool
    """

    show_cursor: bool
    """ Display 3D Cursor Overlay

    :type: bool
    """

    show_curve_normals: bool
    """ Display 3D curve normals in editmode

    :type: bool
    """

    show_edge_bevel_weight: bool
    """ Display weights created for the Bevel modifier

    :type: bool
    """

    show_edge_crease: bool
    """ Display creases created for Subdivision Surface modifier

    :type: bool
    """

    show_edge_seams: bool
    """ Display UV unwrapping seams

    :type: bool
    """

    show_edge_sharp: bool
    """ Display sharp edges, used with the Edge Split modifier

    :type: bool
    """

    show_extra_edge_angle: bool
    """ Display selected edge angle, using global values when set in the transform panel

    :type: bool
    """

    show_extra_edge_length: bool
    """ Display selected edge lengths, using global values when set in the transform panel

    :type: bool
    """

    show_extra_face_angle: bool
    """ Display the angles in the selected edges, using global values when set in the transform panel

    :type: bool
    """

    show_extra_face_area: bool
    """ Display the area of selected faces, using global values when set in the transform panel

    :type: bool
    """

    show_extra_indices: bool
    """ Display the index numbers of selected vertices, edges, and faces

    :type: bool
    """

    show_extras: bool
    """ Object details, including empty wire, cameras and other visual guides

    :type: bool
    """

    show_face_center: bool
    """ Display face center when face selection is enabled in solid shading modes

    :type: bool
    """

    show_face_normals: bool
    """ Display face normals as lines

    :type: bool
    """

    show_face_orientation: bool
    """ Show the Face Orientation Overlay

    :type: bool
    """

    show_faces: bool
    """ Highlight selected faces

    :type: bool
    """

    show_fade_inactive: bool
    """ Fade inactive geometry using the viewport background color

    :type: bool
    """

    show_floor: bool
    """ Show the ground plane grid

    :type: bool
    """

    show_freestyle_edge_marks: bool
    """ Display Freestyle edge marks, used with the Freestyle renderer

    :type: bool
    """

    show_freestyle_face_marks: bool
    """ Display Freestyle face marks, used with the Freestyle renderer

    :type: bool
    """

    show_light_colors: bool
    """ Show light colors

    :type: bool
    """

    show_look_dev: bool
    """ Show HDRI preview spheres

    :type: bool
    """

    show_motion_paths: bool
    """ Show the Motion Paths Overlay

    :type: bool
    """

    show_object_origins: bool
    """ Show object center dots

    :type: bool
    """

    show_object_origins_all: bool
    """ Show the object origin center dot for all (selected and unselected) objects

    :type: bool
    """

    show_onion_skins: bool
    """ Show the Onion Skinning Overlay

    :type: bool
    """

    show_ortho_grid: bool
    """ Show grid in orthographic side view

    :type: bool
    """

    show_outline_selected: bool
    """ Show an outline highlight around selected objects

    :type: bool
    """

    show_overlays: bool
    """ Display overlays like gizmos and outlines

    :type: bool
    """

    show_paint_wire: bool
    """ Use wireframe display in painting modes

    :type: bool
    """

    show_relationship_lines: bool
    """ Show dashed lines indicating parent or constraint relationships

    :type: bool
    """

    show_retopology: bool
    """ Hide the solid mesh and offset the overlay towards the view. Selection is occluded by inactive geometry, unless X-Ray is enabled

    :type: bool
    """

    show_sculpt_curves_cage: bool
    """ Show original curves that are currently being edited

    :type: bool
    """

    show_sculpt_face_sets: bool
    """ 

    :type: bool
    """

    show_sculpt_mask: bool
    """ 

    :type: bool
    """

    show_split_normals: bool
    """ Display vertex-per-face normals as lines

    :type: bool
    """

    show_stats: bool
    """ Display scene statistics overlay text

    :type: bool
    """

    show_statvis: bool
    """ Display statistical information about the mesh

    :type: bool
    """

    show_text: bool
    """ Display overlay text

    :type: bool
    """

    show_vertex_normals: bool
    """ Display vertex normals as lines

    :type: bool
    """

    show_viewer_attribute: bool
    """ Show attribute overlay for active viewer node

    :type: bool
    """

    show_viewer_text: bool
    """ Show attribute values as text in viewport

    :type: bool
    """

    show_weight: bool
    """ Display weights in editmode

    :type: bool
    """

    show_wireframes: bool
    """ Show face edges wires

    :type: bool
    """

    show_wpaint_contours: bool
    """ Show contour lines formed by points with the same interpolated weight

    :type: bool
    """

    show_xray_bone: bool
    """ Show the bone selection overlay

    :type: bool
    """

    texture_paint_mode_opacity: float
    """ Opacity of the texture paint mode stencil mask overlay

    :type: float
    """

    use_debug_freeze_view_culling: bool
    """ Freeze view culling bounds

    :type: bool
    """

    use_gpencil_canvas_xray: bool
    """ Show Canvas grid in front

    :type: bool
    """

    use_gpencil_edit_lines: bool
    """ Show Edit Lines when editing strokes

    :type: bool
    """

    use_gpencil_fade_gp_objects: bool
    """ Fade Grease Pencil Objects, except the active one

    :type: bool
    """

    use_gpencil_fade_layers: bool
    """ Toggle fading of Grease Pencil layers except the active one

    :type: bool
    """

    use_gpencil_fade_objects: bool
    """ Fade all viewport objects with a full color layer to improve visibility

    :type: bool
    """

    use_gpencil_grid: bool
    """ Display a grid over grease pencil paper

    :type: bool
    """

    use_gpencil_multiedit_line_only: bool
    """ Show Edit Lines only in multiframe

    :type: bool
    """

    use_gpencil_onion_skin: bool
    """ Show ghosts of the keyframes before and after the current frame

    :type: bool
    """

    use_gpencil_show_directions: bool
    """ Show stroke drawing direction with a bigger green dot (start) and smaller red dot (end) points

    :type: bool
    """

    use_gpencil_show_material_name: bool
    """ Show material name assigned to each stroke

    :type: bool
    """

    use_normals_constant_screen_size: bool
    """ Keep size of normals constant in relation to 3D view

    :type: bool
    """

    vertex_opacity: float
    """ Opacity for edit vertices

    :type: float
    """

    vertex_paint_mode_opacity: float
    """ Opacity of the texture paint mode stencil mask overlay

    :type: float
    """

    viewer_attribute_opacity: float
    """ Opacity of the attribute that is currently visualized

    :type: float
    """

    weight_paint_mode_opacity: float
    """ Opacity of the weight paint mode overlay

    :type: float
    """

    wireframe_opacity: float
    """ Opacity of the displayed edges (1.0 for opaque)

    :type: float
    """

    wireframe_threshold: float
    """ Adjust the angle threshold for displaying edges (1.0 for all)

    :type: float
    """

    xray_alpha_bone: float
    """ Opacity to use for bone selection

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class View3DShading(bpy_struct):
    """Settings for shading in the 3D viewport"""

    aov_name: str
    """ Name of the active Shader AOV

    :type: str
    """

    background_color: mathutils.Color
    """ Color for custom background color

    :type: mathutils.Color
    """

    background_type: str
    """ Way to display the background

    :type: str
    """

    cavity_ridge_factor: float
    """ Factor for the cavity ridges

    :type: float
    """

    cavity_type: str
    """ Way to display the cavity shading

    :type: str
    """

    cavity_valley_factor: float
    """ Factor for the cavity valleys

    :type: float
    """

    color_type: str
    """ Color Type

    :type: str
    """

    curvature_ridge_factor: float
    """ Factor for the curvature ridges

    :type: float
    """

    curvature_valley_factor: float
    """ Factor for the curvature valleys

    :type: float
    """

    cycles: typing.Any
    """ 

    :type: typing.Any
    """

    light: str
    """ Lighting Method for Solid/Texture Viewport Shading

    :type: str
    """

    object_outline_color: mathutils.Color
    """ Color for object outline

    :type: mathutils.Color
    """

    render_pass: str
    """ Render Pass to show in the viewport

    :type: str
    """

    selected_studio_light: StudioLight
    """ Selected StudioLight

    :type: StudioLight
    """

    shadow_intensity: float
    """ Darkness of shadows

    :type: float
    """

    show_backface_culling: bool
    """ Use back face culling to hide the back side of faces

    :type: bool
    """

    show_cavity: bool
    """ Show Cavity

    :type: bool
    """

    show_object_outline: bool
    """ Show Object Outline

    :type: bool
    """

    show_shadows: bool
    """ Show Shadow

    :type: bool
    """

    show_specular_highlight: bool
    """ Render specular highlights

    :type: bool
    """

    show_xray: bool
    """ Show whole scene transparent

    :type: bool
    """

    show_xray_wireframe: bool
    """ Show whole scene transparent

    :type: bool
    """

    single_color: mathutils.Color
    """ Color for single color mode

    :type: mathutils.Color
    """

    studio_light: str
    """ Studio lighting setup

    :type: str
    """

    studiolight_background_alpha: float
    """ Show the studiolight in the background

    :type: float
    """

    studiolight_background_blur: float
    """ Blur the studiolight in the background

    :type: float
    """

    studiolight_intensity: float
    """ Strength of the studiolight

    :type: float
    """

    studiolight_rotate_z: float
    """ Rotation of the studiolight around the Z-Axis

    :type: float
    """

    type: str
    """ Method to display/shade objects in the 3D View

    :type: str
    """

    use_compositor: str
    """ When to preview the compositor output inside the viewport

    :type: str
    """

    use_dof: bool
    """ Use depth of field on viewport using the values from the active camera

    :type: bool
    """

    use_scene_lights: bool
    """ Render lights and light probes of the scene

    :type: bool
    """

    use_scene_lights_render: bool
    """ Render lights and light probes of the scene

    :type: bool
    """

    use_scene_world: bool
    """ Use scene world for lighting

    :type: bool
    """

    use_scene_world_render: bool
    """ Use scene world for lighting

    :type: bool
    """

    use_studiolight_view_rotation: bool
    """ Make the HDR rotation fixed and not follow the camera

    :type: bool
    """

    use_world_space_lighting: bool
    """ Make the lighting fixed and not follow the camera

    :type: bool
    """

    wireframe_color_type: str
    """ Wire Color Type

    :type: str
    """

    xray_alpha: float
    """ Amount of alpha to use

    :type: float
    """

    xray_alpha_wireframe: float
    """ Amount of alpha to use

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ViewLayer(bpy_struct):
    """View layer"""

    active_aov: AOV
    """ Active AOV

    :type: AOV
    """

    active_aov_index: int | None
    """ Index of active AOV

    :type: int | None
    """

    active_layer_collection: LayerCollection
    """ Active layer collection in this view layer's hierarchy

    :type: LayerCollection
    """

    active_lightgroup: Lightgroup
    """ Active Lightgroup

    :type: Lightgroup
    """

    active_lightgroup_index: int | None
    """ Index of active lightgroup

    :type: int | None
    """

    aovs: AOVs
    """ 

    :type: AOVs
    """

    cycles: typing.Any
    """ Cycles ViewLayer Settings

    :type: typing.Any
    """

    depsgraph: Depsgraph
    """ Dependencies in the scene data

    :type: Depsgraph
    """

    eevee: ViewLayerEEVEE
    """ View layer settings for EEVEE

    :type: ViewLayerEEVEE
    """

    freestyle_settings: FreestyleSettings
    """ 

    :type: FreestyleSettings
    """

    layer_collection: LayerCollection
    """ Root of collections hierarchy of this view layer, its 'collection' pointer property is the same as the scene's master collection

    :type: LayerCollection
    """

    lightgroups: Lightgroups
    """ 

    :type: Lightgroups
    """

    material_override: Material
    """ Material to override all other materials in this view layer

    :type: Material
    """

    name: str
    """ View layer name

    :type: str
    """

    objects: LayerObjects
    """ All the objects in this layer

    :type: LayerObjects
    """

    pass_alpha_threshold: float
    """ Z, Index, normal, UV and vector passes are only affected by surfaces with alpha transparency equal to or higher than this threshold

    :type: float
    """

    pass_cryptomatte_depth: int
    """ Sets how many unique objects can be distinguished per pixel

    :type: int
    """

    samples: int
    """ Override number of render samples for this view layer, 0 will use the scene setting

    :type: int
    """

    use: bool
    """ Enable or disable rendering of this View Layer

    :type: bool
    """

    use_ao: bool
    """ Render Ambient Occlusion in this Layer

    :type: bool
    """

    use_freestyle: bool
    """ Render stylized strokes in this Layer

    :type: bool
    """

    use_motion_blur: bool
    """ Render motion blur in this Layer, if enabled in the scene

    :type: bool
    """

    use_pass_ambient_occlusion: bool
    """ Deliver Ambient Occlusion pass

    :type: bool
    """

    use_pass_combined: bool
    """ Deliver full combined RGBA buffer

    :type: bool
    """

    use_pass_cryptomatte_accurate: bool
    """ Generate a more accurate cryptomatte pass

    :type: bool
    """

    use_pass_cryptomatte_asset: bool
    """ Render cryptomatte asset pass, for isolating groups of objects with the same parent

    :type: bool
    """

    use_pass_cryptomatte_material: bool
    """ Render cryptomatte material pass, for isolating materials in compositing

    :type: bool
    """

    use_pass_cryptomatte_object: bool
    """ Render cryptomatte object pass, for isolating objects in compositing

    :type: bool
    """

    use_pass_diffuse_color: bool
    """ Deliver diffuse color pass

    :type: bool
    """

    use_pass_diffuse_direct: bool
    """ Deliver diffuse direct pass

    :type: bool
    """

    use_pass_diffuse_indirect: bool
    """ Deliver diffuse indirect pass

    :type: bool
    """

    use_pass_emit: bool
    """ Deliver emission pass

    :type: bool
    """

    use_pass_environment: bool
    """ Deliver environment lighting pass

    :type: bool
    """

    use_pass_glossy_color: bool
    """ Deliver glossy color pass

    :type: bool
    """

    use_pass_glossy_direct: bool
    """ Deliver glossy direct pass

    :type: bool
    """

    use_pass_glossy_indirect: bool
    """ Deliver glossy indirect pass

    :type: bool
    """

    use_pass_material_index: bool
    """ Deliver material index pass

    :type: bool
    """

    use_pass_mist: bool
    """ Deliver mist factor pass (0.0 to 1.0)

    :type: bool
    """

    use_pass_normal: bool
    """ Deliver normal pass

    :type: bool
    """

    use_pass_object_index: bool
    """ Deliver object index pass

    :type: bool
    """

    use_pass_position: bool
    """ Deliver position pass

    :type: bool
    """

    use_pass_shadow: bool
    """ Deliver shadow pass

    :type: bool
    """

    use_pass_subsurface_color: bool
    """ Deliver subsurface color pass

    :type: bool
    """

    use_pass_subsurface_direct: bool
    """ Deliver subsurface direct pass

    :type: bool
    """

    use_pass_subsurface_indirect: bool
    """ Deliver subsurface indirect pass

    :type: bool
    """

    use_pass_transmission_color: bool
    """ Deliver transmission color pass

    :type: bool
    """

    use_pass_transmission_direct: bool
    """ Deliver transmission direct pass

    :type: bool
    """

    use_pass_transmission_indirect: bool
    """ Deliver transmission indirect pass

    :type: bool
    """

    use_pass_uv: bool
    """ Deliver texture UV pass

    :type: bool
    """

    use_pass_vector: bool
    """ Deliver speed vector pass

    :type: bool
    """

    use_pass_z: bool
    """ Deliver Z values pass

    :type: bool
    """

    use_sky: bool
    """ Render Sky in this Layer

    :type: bool
    """

    use_solid: bool
    """ Render Solid faces in this Layer

    :type: bool
    """

    use_strand: bool
    """ Render Strands in this Layer

    :type: bool
    """

    use_volumes: bool
    """ Render volumes in this Layer

    :type: bool
    """

    @classmethod
    def update_render_passes(cls):
        """Requery the enabled render passes from the render engine"""
        ...

    def update(self):
        """Update data tagged to be updated from previous access to data or operators"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ViewLayerEEVEE(bpy_struct):
    """View Layer settings for EEVEE"""

    use_pass_bloom: bool
    """ Deliver bloom pass

    :type: bool
    """

    use_pass_transparent: bool
    """ Deliver alpha blended surfaces in a separate pass

    :type: bool
    """

    use_pass_volume_direct: bool
    """ Deliver volume direct light pass

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ViewLayers(bpy_prop_collection[ViewLayer], bpy_struct):
    """Collection of render layers"""

    def new(self, name: str | typing.Any) -> ViewLayer:
        """Add a view layer to scene

        :param name: New name for the view layer (not unique)
        :type name: str | typing.Any
        :return: Newly created view layer
        :rtype: ViewLayer
        """
        ...

    def remove(self, layer: ViewLayer):
        """Remove a view layer

        :param layer: View layer to remove
        :type layer: ViewLayer
        """
        ...

    def move(self, from_index: int | None, to_index: int | None):
        """Move a view layer

        :param from_index: From Index, Index to move
        :type from_index: int | None
        :param to_index: To Index, Target index
        :type to_index: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ViewerPath(bpy_struct):
    """Path to data that is viewed"""

    path: bpy_prop_collection[ViewerPathElem]
    """ 

    :type: bpy_prop_collection[ViewerPathElem]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ViewerPathElem(bpy_struct):
    """Element of a viewer path"""

    type: str
    """ Type of the path element

    :type: str
    """

    ui_name: str
    """ Name that can be displayed in the UI for this element

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VolumeDisplay(bpy_struct):
    """Volume object display settings for 3D viewport"""

    density: float
    """ Thickness of volume display in the viewport

    :type: float
    """

    interpolation_method: str
    """ Interpolation method to use for volumes in solid mode

    :type: str
    """

    slice_axis: str
    """ 

    :type: str
    """

    slice_depth: float
    """ Position of the slice

    :type: float
    """

    use_slice: bool
    """ Perform a single slice of the domain object

    :type: bool
    """

    wireframe_detail: str
    """ Amount of detail for wireframe display

    :type: str
    """

    wireframe_type: str
    """ Type of wireframe display

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VolumeGrid(bpy_struct):
    """3D volume grid"""

    channels: int
    """ Number of dimensions of the grid data type

    :type: int
    """

    data_type: str
    """ Data type of voxel values

    :type: str
    """

    is_loaded: bool
    """ Grid tree is loaded in memory

    :type: bool
    """

    matrix_object: mathutils.Matrix
    """ Transformation matrix from voxel index to object space

    :type: mathutils.Matrix
    """

    name: str
    """ Volume grid name

    :type: str
    """

    def load(self) -> bool:
        """Load grid tree from file

        :return: True if grid tree was successfully loaded
        :rtype: bool
        """
        ...

    def unload(self):
        """Unload grid tree and voxel data from memory, leaving only metadata"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VolumeGrids(bpy_prop_collection[VolumeGrid], bpy_struct):
    """3D volume grids"""

    active_index: int | None
    """ Index of active volume grid

    :type: int | None
    """

    error_message: str
    """ If loading grids failed, error message with details

    :type: str
    """

    frame: int
    """ Frame number that volume grids will be loaded at, based on scene time and volume parameters

    :type: int
    """

    frame_filepath: str
    """ Volume file used for loading the volume at the current frame. Empty if the volume has not be loaded or the frame only exists in memory

    :type: str
    """

    is_loaded: bool
    """ List of grids and metadata are loaded in memory

    :type: bool
    """

    def load(self) -> bool:
        """Load list of grids and metadata from file

        :return: True if grid list was successfully loaded
        :rtype: bool
        """
        ...

    def unload(self):
        """Unload all grid and voxel data from memory"""
        ...

    def save(self, filepath: str | typing.Any) -> bool:
        """Save grids and metadata to file

        :param filepath: File path to save to
        :type filepath: str | typing.Any
        :return: True if grid list was successfully loaded
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VolumeRender(bpy_struct):
    """Volume object render settings"""

    clipping: float
    """ Value under which voxels are considered empty space to optimize rendering

    :type: float
    """

    precision: str
    """ Specify volume data precision. Lower values reduce memory consumption at the cost of detail

    :type: str
    """

    space: str
    """ Specify volume density and step size in object or world space

    :type: str
    """

    step_size: float
    """ Distance between volume samples. Lower values render more detail at the cost of performance. If set to zero, the step size is automatically determined based on voxel size

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WalkNavigation(bpy_struct):
    """Walk navigation settings"""

    jump_height: float
    """ Maximum height of a jump

    :type: float
    """

    mouse_speed: float
    """ Speed factor for when looking around, high values mean faster mouse movement

    :type: float
    """

    teleport_time: float
    """ Interval of time warp when teleporting in navigation mode

    :type: float
    """

    use_gravity: bool
    """ Walk with gravity, or free navigate

    :type: bool
    """

    use_mouse_reverse: bool
    """ Reverse the vertical movement of the mouse

    :type: bool
    """

    view_height: float
    """ View distance from the floor when walking

    :type: float
    """

    walk_speed: float
    """ Base speed for walking and flying

    :type: float
    """

    walk_speed_factor: float
    """ Multiplication factor when using the fast or slow modifiers

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Window(bpy_struct):
    """Open window"""

    height: int
    """ Window height

    :type: int
    """

    parent: Window
    """ Active workspace and scene follow this window

    :type: Window
    """

    scene: Scene
    """ Active scene to be edited in the window

    :type: Scene
    """

    screen: Screen
    """ Active workspace screen showing in the window

    :type: Screen
    """

    stereo_3d_display: Stereo3dDisplay
    """ Settings for stereo 3D display

    :type: Stereo3dDisplay
    """

    view_layer: ViewLayer
    """ The active workspace view layer showing in the window

    :type: ViewLayer
    """

    width: int
    """ Window width

    :type: int
    """

    workspace: WorkSpace
    """ Active workspace showing in the window

    :type: WorkSpace
    """

    x: int
    """ Horizontal location of the window

    :type: int
    """

    y: int
    """ Vertical location of the window

    :type: int
    """

    def cursor_warp(self, x: int | None, y: int | None):
        """Set the cursor position

        :param x:
        :type x: int | None
        :param y:
        :type y: int | None
        """
        ...

    def cursor_set(self, cursor: str | None):
        """Set the cursor

        :param cursor: cursor
        :type cursor: str | None
        """
        ...

    def cursor_modal_set(self, cursor: str | None):
        """Restore the previous cursor after calling cursor_modal_set

        :param cursor: cursor
        :type cursor: str | None
        """
        ...

    def cursor_modal_restore(self):
        """cursor_modal_restore"""
        ...

    def event_simulate(
        self,
        type: str | None,
        value: str | None,
        unicode: str | typing.Any | None = "",
        x: typing.Any | None = 0,
        y: typing.Any | None = 0,
        shift: bool | typing.Any | None = False,
        ctrl: bool | typing.Any | None = False,
        alt: bool | typing.Any | None = False,
        oskey: bool | typing.Any | None = False,
    ) -> Event:
        """event_simulate

        :param type: Type
        :type type: str | None
        :param value: Value
        :type value: str | None
        :param unicode:
        :type unicode: str | typing.Any | None
        :param x:
        :type x: typing.Any | None
        :param y:
        :type y: typing.Any | None
        :param shift: Shift
        :type shift: bool | typing.Any | None
        :param ctrl: Ctrl
        :type ctrl: bool | typing.Any | None
        :param alt: Alt
        :type alt: bool | typing.Any | None
        :param oskey: OS Key
        :type oskey: bool | typing.Any | None
        :return: Item, Added key map item
        :rtype: Event
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WorkSpaceTool(bpy_struct):
    has_datablock: bool
    """ 

    :type: bool
    """

    idname: str
    """ 

    :type: str
    """

    idname_fallback: str
    """ 

    :type: str
    """

    index: int
    """ 

    :type: int
    """

    mode: str
    """ 

    :type: str
    """

    space_type: str
    """ 

    :type: str
    """

    use_paint_canvas: bool
    """ Does this tool use a painting canvas

    :type: bool
    """

    widget: str
    """ 

    :type: str
    """

    def setup(
        self,
        idname: str | typing.Any,
        cursor: str | None = "DEFAULT",
        keymap: str | typing.Any = "",
        gizmo_group: str | typing.Any = "",
        data_block: str | typing.Any = "",
        operator: str | typing.Any = "",
        index: typing.Any | None = 0,
        options: set[str] | None = {},
        idname_fallback: str | typing.Any = "",
        keymap_fallback: str | typing.Any = "",
    ):
        """Set the tool settings

        :param idname: Identifier
        :type idname: str | typing.Any
        :param cursor: cursor
        :type cursor: str | None
        :param keymap: Key Map
        :type keymap: str | typing.Any
        :param gizmo_group: Gizmo Group
        :type gizmo_group: str | typing.Any
        :param data_block: Data Block
        :type data_block: str | typing.Any
        :param operator: Operator
        :type operator: str | typing.Any
        :param index: Index
        :type index: typing.Any | None
        :param options: Tool Options
        :type options: set[str] | None
        :param idname_fallback: Fallback Identifier
        :type idname_fallback: str | typing.Any
        :param keymap_fallback: Fallback Key Map
        :type keymap_fallback: str | typing.Any
        """
        ...

    def operator_properties(self, operator: str | typing.Any) -> OperatorProperties:
        """operator_properties

        :param operator:
        :type operator: str | typing.Any
        :return:
        :rtype: OperatorProperties
        """
        ...

    def gizmo_group_properties(self, group: str | typing.Any) -> GizmoGroupProperties:
        """gizmo_group_properties

        :param group:
        :type group: str | typing.Any
        :return:
        :rtype: GizmoGroupProperties
        """
        ...

    def refresh_from_context(self):
        """refresh_from_context"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WorldLighting(bpy_struct):
    """Lighting for a World data-block"""

    ao_factor: float
    """ Factor for ambient occlusion blending

    :type: float
    """

    distance: float
    """ Length of rays, defines how far away other faces give occlusion effect

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WorldMistSettings(bpy_struct):
    """Mist settings for a World data-block"""

    depth: float
    """ Distance over which the mist effect fades in

    :type: float
    """

    falloff: str
    """ Type of transition used to fade mist

    :type: str
    """

    height: float
    """ Control how much mist density decreases with height

    :type: float
    """

    intensity: float
    """ Overall minimum intensity of the mist effect

    :type: float
    """

    start: float
    """ Starting distance of the mist, measured from the camera

    :type: float
    """

    use_mist: bool
    """ Occlude objects with the environment color as they are further away

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrActionMap(bpy_struct):
    actionmap_items: XrActionMapItems
    """ Items in the action map, mapping an XR event to an operator, pose, or haptic output

    :type: XrActionMapItems
    """

    name: str
    """ Name of the action map

    :type: str
    """

    selected_item: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrActionMapBinding(bpy_struct):
    """Binding in an XR action map item"""

    axis0_region: str
    """ Action execution region for the first input axis

    :type: str
    """

    axis1_region: str
    """ Action execution region for the second input axis

    :type: str
    """

    component_paths: XrComponentPaths
    """ OpenXR component paths

    :type: XrComponentPaths
    """

    name: str
    """ Name of the action map binding

    :type: str
    """

    pose_location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    pose_rotation: mathutils.Euler
    """ 

    :type: mathutils.Euler
    """

    profile: str
    """ OpenXR interaction profile path

    :type: str
    """

    threshold: float
    """ Input threshold for button/axis actions

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrActionMapBindings(bpy_prop_collection[XrActionMapBinding], bpy_struct):
    """Collection of XR action map bindings"""

    def new(
        self, name: str | typing.Any, replace_existing: bool | None
    ) -> XrActionMapBinding:
        """new

        :param name: Name of the action map binding
        :type name: str | typing.Any
        :param replace_existing: Replace Existing, Replace any existing binding with the same name
        :type replace_existing: bool | None
        :return: Binding, Added action map binding
        :rtype: XrActionMapBinding
        """
        ...

    def new_from_binding(self, binding: XrActionMapBinding) -> XrActionMapBinding:
        """new_from_binding

        :param binding: Binding, Binding to use as a reference
        :type binding: XrActionMapBinding
        :return: Binding, Added action map binding
        :rtype: XrActionMapBinding
        """
        ...

    def remove(self, binding: XrActionMapBinding):
        """remove

        :param binding: Binding
        :type binding: XrActionMapBinding
        """
        ...

    def find(self, name: str | typing.Any) -> XrActionMapBinding:
        """find

        :param name: Name
        :type name: str | typing.Any
        :return: Binding, The action map binding with the given name
        :rtype: XrActionMapBinding
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrActionMapItem(bpy_struct):
    bimanual: bool
    """ The action depends on the states/poses of both user paths

    :type: bool
    """

    bindings: XrActionMapBindings
    """ Bindings for the action map item, mapping the action to an XR input

    :type: XrActionMapBindings
    """

    haptic_amplitude: float
    """ Intensity of the haptic vibration, ranging from 0.0 to 1.0

    :type: float
    """

    haptic_duration: float
    """ Haptic duration in seconds. 0.0 is the minimum supported duration

    :type: float
    """

    haptic_frequency: float
    """ Frequency of the haptic vibration in hertz. 0.0 specifies the OpenXR runtime's default frequency

    :type: float
    """

    haptic_match_user_paths: bool
    """ Apply haptics to the same user paths for the haptic action and this action

    :type: bool
    """

    haptic_mode: str
    """ Haptic application mode

    :type: str
    """

    haptic_name: str
    """ Name of the haptic action to apply when executing this action

    :type: str
    """

    name: str
    """ Name of the action map item

    :type: str
    """

    op: str
    """ Identifier of operator to call on action event

    :type: str
    """

    op_mode: str
    """ Operator execution mode

    :type: str
    """

    op_name: str
    """ Name of operator (translated) to call on action event

    :type: str
    """

    op_properties: OperatorProperties
    """ Properties to set when the operator is called

    :type: OperatorProperties
    """

    pose_is_controller_aim: bool
    """ The action poses will be used for the VR controller aims

    :type: bool
    """

    pose_is_controller_grip: bool
    """ The action poses will be used for the VR controller grips

    :type: bool
    """

    selected_binding: int
    """ Currently selected binding

    :type: int
    """

    type: str
    """ Action type

    :type: str
    """

    user_paths: XrUserPaths
    """ OpenXR user paths

    :type: XrUserPaths
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrActionMapItems(bpy_prop_collection[XrActionMapItem], bpy_struct):
    """Collection of XR action map items"""

    def new(
        self, name: str | typing.Any, replace_existing: bool | None
    ) -> XrActionMapItem:
        """new

        :param name: Name of the action map item
        :type name: str | typing.Any
        :param replace_existing: Replace Existing, Replace any existing item with the same name
        :type replace_existing: bool | None
        :return: Item, Added action map item
        :rtype: XrActionMapItem
        """
        ...

    def new_from_item(self, item: XrActionMapItem) -> XrActionMapItem:
        """new_from_item

        :param item: Item, Item to use as a reference
        :type item: XrActionMapItem
        :return: Item, Added action map item
        :rtype: XrActionMapItem
        """
        ...

    def remove(self, item: XrActionMapItem):
        """remove

        :param item: Item
        :type item: XrActionMapItem
        """
        ...

    def find(self, name: str | typing.Any) -> XrActionMapItem:
        """find

        :param name: Name
        :type name: str | typing.Any
        :return: Item, The action map item with the given name
        :rtype: XrActionMapItem
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrActionMaps(bpy_prop_collection[XrActionMap], bpy_struct):
    """Collection of XR action maps"""

    @classmethod
    def new(
        cls,
        xr_session_state: XrSessionState,
        name: str | typing.Any,
        replace_existing: bool | None,
    ) -> XrActionMap:
        """new

        :param xr_session_state: XR Session State
        :type xr_session_state: XrSessionState
        :param name: Name
        :type name: str | typing.Any
        :param replace_existing: Replace Existing, Replace any existing actionmap with the same name
        :type replace_existing: bool | None
        :return: Action Map, Added action map
        :rtype: XrActionMap
        """
        ...

    @classmethod
    def new_from_actionmap(
        cls, xr_session_state: XrSessionState, actionmap: XrActionMap
    ) -> XrActionMap:
        """new_from_actionmap

        :param xr_session_state: XR Session State
        :type xr_session_state: XrSessionState
        :param actionmap: Action Map, Action map to use as a reference
        :type actionmap: XrActionMap
        :return: Action Map, Added action map
        :rtype: XrActionMap
        """
        ...

    @classmethod
    def remove(cls, xr_session_state: XrSessionState, actionmap: XrActionMap):
        """remove

        :param xr_session_state: XR Session State
        :type xr_session_state: XrSessionState
        :param actionmap: Action Map, Removed action map
        :type actionmap: XrActionMap
        """
        ...

    @classmethod
    def find(
        cls, xr_session_state: XrSessionState, name: str | typing.Any
    ) -> XrActionMap:
        """find

        :param xr_session_state: XR Session State
        :type xr_session_state: XrSessionState
        :param name: Name
        :type name: str | typing.Any
        :return: Action Map, The action map with the given name
        :rtype: XrActionMap
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrComponentPath(bpy_struct):
    path: str
    """ OpenXR component path

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrComponentPaths(bpy_prop_collection[XrComponentPath], bpy_struct):
    """Collection of OpenXR component paths"""

    def new(self, path: str | typing.Any) -> XrComponentPath:
        """new

        :param path: Path, OpenXR component path
        :type path: str | typing.Any
        :return: Component Path, Added component path
        :rtype: XrComponentPath
        """
        ...

    def remove(self, component_path: XrComponentPath):
        """remove

        :param component_path: Component Path
        :type component_path: XrComponentPath
        """
        ...

    def find(self, path: str | typing.Any) -> XrComponentPath:
        """find

        :param path: Path, OpenXR component path
        :type path: str | typing.Any
        :return: Component Path, The component path with the given path
        :rtype: XrComponentPath
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrEventData(bpy_struct):
    """XR Data for Window Manager Event"""

    action: str
    """ XR action name

    :type: str
    """

    action_set: str
    """ XR action set name

    :type: str
    """

    bimanual: bool
    """ Whether bimanual interaction is occurring

    :type: bool
    """

    controller_location: mathutils.Vector
    """ Location of the action's corresponding controller aim in world space

    :type: mathutils.Vector
    """

    controller_location_other: mathutils.Vector
    """ Controller aim location of the other user path for bimanual actions

    :type: mathutils.Vector
    """

    controller_rotation: mathutils.Quaternion
    """ Rotation of the action's corresponding controller aim in world space

    :type: mathutils.Quaternion
    """

    controller_rotation_other: mathutils.Quaternion
    """ Controller aim rotation of the other user path for bimanual actions

    :type: mathutils.Quaternion
    """

    float_threshold: float
    """ Input threshold for float/2D vector actions

    :type: float
    """

    state: bpy_prop_array[float]
    """ XR action values corresponding to type

    :type: bpy_prop_array[float]
    """

    state_other: bpy_prop_array[float]
    """ State of the other user path for bimanual actions

    :type: bpy_prop_array[float]
    """

    type: str
    """ XR action type

    :type: str
    """

    user_path: str
    """ User path of the action. E.g. "/user/hand/left"

    :type: str
    """

    user_path_other: str
    """ Other user path, for bimanual actions. E.g. "/user/hand/right"

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrSessionSettings(bpy_struct):
    base_pose_angle: float
    """ Rotation angle around the Z-Axis to apply the rotation deltas from the VR headset to

    :type: float
    """

    base_pose_location: mathutils.Vector
    """ Coordinates to apply translation deltas from the VR headset to

    :type: mathutils.Vector
    """

    base_pose_object: Object
    """ Object to take the location and rotation to which translation and rotation deltas from the VR headset will be applied to

    :type: Object
    """

    base_pose_type: str
    """ Define where the location and rotation for the VR view come from, to which translation and rotation deltas from the VR headset will be applied to

    :type: str
    """

    base_scale: float
    """ Uniform scale to apply to VR view

    :type: float
    """

    clip_end: float
    """ VR viewport far clipping distance

    :type: float
    """

    clip_start: float
    """ VR viewport near clipping distance

    :type: float
    """

    controller_draw_style: str
    """ Style to use when drawing VR controllers

    :type: str
    """

    icon_from_show_object_viewport: int
    """ 

    :type: int
    """

    shading: View3DShading
    """ 

    :type: View3DShading
    """

    show_annotation: bool
    """ Show annotations for this view

    :type: bool
    """

    show_controllers: bool
    """ Show VR controllers (requires VR actions for controller poses)

    :type: bool
    """

    show_custom_overlays: bool
    """ Show custom VR overlays

    :type: bool
    """

    show_floor: bool
    """ Show the ground plane grid

    :type: bool
    """

    show_object_extras: bool
    """ Show object extras, including empties, lights, and cameras

    :type: bool
    """

    show_object_select_armature: bool
    """ Allow selection of armatures

    :type: bool
    """

    show_object_select_camera: bool
    """ Allow selection of cameras

    :type: bool
    """

    show_object_select_curve: bool
    """ Allow selection of curves

    :type: bool
    """

    show_object_select_curves: bool
    """ Allow selection of hair curves

    :type: bool
    """

    show_object_select_empty: bool
    """ Allow selection of empties

    :type: bool
    """

    show_object_select_font: bool
    """ Allow selection of text objects

    :type: bool
    """

    show_object_select_grease_pencil: bool
    """ Allow selection of grease pencil objects

    :type: bool
    """

    show_object_select_lattice: bool
    """ Allow selection of lattices

    :type: bool
    """

    show_object_select_light: bool
    """ Allow selection of lights

    :type: bool
    """

    show_object_select_light_probe: bool
    """ Allow selection of light probes

    :type: bool
    """

    show_object_select_mesh: bool
    """ Allow selection of mesh objects

    :type: bool
    """

    show_object_select_meta: bool
    """ Allow selection of metaballs

    :type: bool
    """

    show_object_select_pointcloud: bool
    """ Allow selection of point clouds

    :type: bool
    """

    show_object_select_speaker: bool
    """ Allow selection of speakers

    :type: bool
    """

    show_object_select_surf: bool
    """ Allow selection of surfaces

    :type: bool
    """

    show_object_select_volume: bool
    """ Allow selection of volumes

    :type: bool
    """

    show_object_viewport_armature: bool
    """ Show armatures

    :type: bool
    """

    show_object_viewport_camera: bool
    """ Show cameras

    :type: bool
    """

    show_object_viewport_curve: bool
    """ Show curves

    :type: bool
    """

    show_object_viewport_curves: bool
    """ Show hair curves

    :type: bool
    """

    show_object_viewport_empty: bool
    """ Show empties

    :type: bool
    """

    show_object_viewport_font: bool
    """ Show text objects

    :type: bool
    """

    show_object_viewport_grease_pencil: bool
    """ Show grease pencil objects

    :type: bool
    """

    show_object_viewport_lattice: bool
    """ Show lattices

    :type: bool
    """

    show_object_viewport_light: bool
    """ Show lights

    :type: bool
    """

    show_object_viewport_light_probe: bool
    """ Show light probes

    :type: bool
    """

    show_object_viewport_mesh: bool
    """ Show mesh objects

    :type: bool
    """

    show_object_viewport_meta: bool
    """ Show metaballs

    :type: bool
    """

    show_object_viewport_pointcloud: bool
    """ Show point clouds

    :type: bool
    """

    show_object_viewport_speaker: bool
    """ Show speakers

    :type: bool
    """

    show_object_viewport_surf: bool
    """ Show surfaces

    :type: bool
    """

    show_object_viewport_volume: bool
    """ Show volumes

    :type: bool
    """

    show_selection: bool
    """ Show selection outlines

    :type: bool
    """

    use_absolute_tracking: bool
    """ Allow the VR tracking origin to be defined independently of the headset location

    :type: bool
    """

    use_positional_tracking: bool
    """ Allow VR headsets to affect the location in virtual space, in addition to the rotation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrSessionState(bpy_struct):
    """Runtime state information about the VR session"""

    actionmaps: XrActionMaps
    """ 

    :type: XrActionMaps
    """

    active_actionmap: int | None
    """ 

    :type: int | None
    """

    navigation_location: mathutils.Vector
    """ Location offset to apply to base pose when determining viewer location

    :type: mathutils.Vector
    """

    navigation_rotation: mathutils.Quaternion
    """ Rotation offset to apply to base pose when determining viewer rotation

    :type: mathutils.Quaternion
    """

    navigation_scale: float
    """ Additional scale multiplier to apply to base scale when determining viewer scale

    :type: float
    """

    selected_actionmap: int
    """ 

    :type: int
    """

    viewer_pose_location: mathutils.Vector
    """ Last known location of the viewer pose (center between the eyes) in world space

    :type: mathutils.Vector
    """

    viewer_pose_rotation: mathutils.Quaternion
    """ Last known rotation of the viewer pose (center between the eyes) in world space

    :type: mathutils.Quaternion
    """

    @classmethod
    def is_running(cls, context: Context) -> bool:
        """Query if the VR session is currently running

        :param context:
        :type context: Context
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def reset_to_base_pose(cls, context: Context):
        """Force resetting of position and rotation deltas

        :param context:
        :type context: Context
        """
        ...

    @classmethod
    def action_set_create(cls, context: Context, actionmap: XrActionMap) -> bool:
        """Create a VR action set

        :param context:
        :type context: Context
        :param actionmap:
        :type actionmap: XrActionMap
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def action_create(
        cls, context: Context, actionmap: XrActionMap, actionmap_item: XrActionMapItem
    ) -> bool:
        """Create a VR action

        :param context:
        :type context: Context
        :param actionmap:
        :type actionmap: XrActionMap
        :param actionmap_item:
        :type actionmap_item: XrActionMapItem
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def action_binding_create(
        cls,
        context: Context,
        actionmap: XrActionMap,
        actionmap_item: XrActionMapItem,
        actionmap_binding: XrActionMapBinding,
    ) -> bool:
        """Create a VR action binding

        :param context:
        :type context: Context
        :param actionmap:
        :type actionmap: XrActionMap
        :param actionmap_item:
        :type actionmap_item: XrActionMapItem
        :param actionmap_binding:
        :type actionmap_binding: XrActionMapBinding
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def active_action_set_set(
        cls, context: Context, action_set: str | typing.Any
    ) -> bool:
        """Set the active VR action set

        :param context:
        :type context: Context
        :param action_set: Action Set, Action set name
        :type action_set: str | typing.Any
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def controller_pose_actions_set(
        cls,
        context: Context,
        action_set: str | typing.Any,
        grip_action: str | typing.Any,
        aim_action: str | typing.Any,
    ) -> bool:
        """Set the actions that determine the VR controller poses

        :param context:
        :type context: Context
        :param action_set: Action Set, Action set name
        :type action_set: str | typing.Any
        :param grip_action: Grip Action, Name of the action representing the controller grips
        :type grip_action: str | typing.Any
        :param aim_action: Aim Action, Name of the action representing the controller aims
        :type aim_action: str | typing.Any
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def action_state_get(
        cls,
        context: Context,
        action_set_name: str | typing.Any,
        action_name: str | typing.Any,
        user_path: str | typing.Any,
    ) -> typing.Any:
        """Get the current state of a VR action

        :param context:
        :type context: Context
        :param action_set_name: Action Set, Action set name
        :type action_set_name: str | typing.Any
        :param action_name: Action, Action name
        :type action_name: str | typing.Any
        :param user_path: User Path, OpenXR user path
        :type user_path: str | typing.Any
        :return: Action State, Current state of the VR action. Second float value is only set for 2D vector type actions
        :rtype: typing.Any
        """
        ...

    @classmethod
    def haptic_action_apply(
        cls,
        context: Context,
        action_set_name: str | typing.Any,
        action_name: str | typing.Any,
        user_path: str | typing.Any,
        duration: float | None,
        frequency: float | None,
        amplitude: float | None,
    ) -> bool:
        """Apply a VR haptic action

        :param context:
        :type context: Context
        :param action_set_name: Action Set, Action set name
        :type action_set_name: str | typing.Any
        :param action_name: Action, Action name
        :type action_name: str | typing.Any
        :param user_path: User Path, Optional OpenXR user path. If not set, the action will be applied to all paths
        :type user_path: str | typing.Any
        :param duration: Duration, Haptic duration in seconds. 0.0 is the minimum supported duration
        :type duration: float | None
        :param frequency: Frequency, Frequency of the haptic vibration in hertz. 0.0 specifies the OpenXR runtime's default frequency
        :type frequency: float | None
        :param amplitude: Amplitude, Haptic amplitude, ranging from 0.0 to 1.0
        :type amplitude: float | None
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def haptic_action_stop(
        cls,
        context: Context,
        action_set_name: str | typing.Any,
        action_name: str | typing.Any,
        user_path: str | typing.Any,
    ):
        """Stop a VR haptic action

        :param context:
        :type context: Context
        :param action_set_name: Action Set, Action set name
        :type action_set_name: str | typing.Any
        :param action_name: Action, Action name
        :type action_name: str | typing.Any
        :param user_path: User Path, Optional OpenXR user path. If not set, the action will be stopped for all paths
        :type user_path: str | typing.Any
        """
        ...

    @classmethod
    def controller_grip_location_get(
        cls, context: Context, index: int | None
    ) -> typing.Any:
        """Get the last known controller grip location in world space

        :param context:
        :type context: Context
        :param index: Index, Controller index
        :type index: int | None
        :return: Location, Controller grip location
        :rtype: typing.Any
        """
        ...

    @classmethod
    def controller_grip_rotation_get(
        cls, context: Context, index: int | None
    ) -> typing.Any:
        """Get the last known controller grip rotation (quaternion) in world space

        :param context:
        :type context: Context
        :param index: Index, Controller index
        :type index: int | None
        :return: Rotation, Controller grip quaternion rotation
        :rtype: typing.Any
        """
        ...

    @classmethod
    def controller_aim_location_get(
        cls, context: Context, index: int | None
    ) -> typing.Any:
        """Get the last known controller aim location in world space

        :param context:
        :type context: Context
        :param index: Index, Controller index
        :type index: int | None
        :return: Location, Controller aim location
        :rtype: typing.Any
        """
        ...

    @classmethod
    def controller_aim_rotation_get(
        cls, context: Context, index: int | None
    ) -> typing.Any:
        """Get the last known controller aim rotation (quaternion) in world space

        :param context:
        :type context: Context
        :param index: Index, Controller index
        :type index: int | None
        :return: Rotation, Controller aim quaternion rotation
        :rtype: typing.Any
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrUserPath(bpy_struct):
    path: str
    """ OpenXR user path

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class XrUserPaths(bpy_prop_collection[XrUserPath], bpy_struct):
    """Collection of OpenXR user paths"""

    def new(self, path: str | typing.Any) -> XrUserPath:
        """new

        :param path: Path, OpenXR user path
        :type path: str | typing.Any
        :return: User Path, Added user path
        :rtype: XrUserPath
        """
        ...

    def remove(self, user_path: XrUserPath):
        """remove

        :param user_path: User Path
        :type user_path: XrUserPath
        """
        ...

    def find(self, path: str | typing.Any) -> XrUserPath:
        """find

        :param path: Path, OpenXR user path
        :type path: str | typing.Any
        :return: User Path, The user path with the given path
        :rtype: XrUserPath
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class wmOwnerID(bpy_struct):
    name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class wmOwnerIDs(bpy_prop_collection[wmOwnerID], bpy_struct):
    def new(self, name: str | typing.Any) -> wmOwnerID:
        """Add ui tag

        :param name: New name for the tag
        :type name: str | typing.Any
        :return:
        :rtype: wmOwnerID
        """
        ...

    def remove(self, owner_id: wmOwnerID):
        """Remove ui tag

        :param owner_id: Tag to remove
        :type owner_id: wmOwnerID
        """
        ...

    def clear(self):
        """Remove all tags"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class wmTools(bpy_prop_collection[WorkSpaceTool], bpy_struct):
    def from_space_view3d_mode(
        self, mode: str | None, create: bool | typing.Any | None = False
    ) -> WorkSpaceTool:
        """

        :param mode:
        :type mode: str | None
        :param create: Create
        :type create: bool | typing.Any | None
        :return:
        :rtype: WorkSpaceTool
        """
        ...

    def from_space_image_mode(
        self, mode: str | None, create: bool | typing.Any | None = False
    ) -> WorkSpaceTool:
        """

        :param mode:
        :type mode: str | None
        :param create: Create
        :type create: bool | typing.Any | None
        :return:
        :rtype: WorkSpaceTool
        """
        ...

    def from_space_node(
        self, create: bool | typing.Any | None = False
    ) -> WorkSpaceTool:
        """

        :param create: Create
        :type create: bool | typing.Any | None
        :return:
        :rtype: WorkSpaceTool
        """
        ...

    def from_space_sequencer(
        self, mode: str | None, create: bool | typing.Any | None = False
    ) -> WorkSpaceTool:
        """

        :param mode:
        :type mode: str | None
        :param create: Create
        :type create: bool | typing.Any | None
        :return:
        :rtype: WorkSpaceTool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VIEW3D_AST_pose_library(AssetShelf, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VIEW3D_AST_sculpt_brushes(AssetShelf, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoolAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores booleans"""

    data: bpy_prop_collection[BoolAttributeValue]
    """ 

    :type: bpy_prop_collection[BoolAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ByteColorAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores RGBA colors as positive integer values using 8-bits per channel"""

    data: bpy_prop_collection[ByteColorAttributeValue]
    """ 

    :type: bpy_prop_collection[ByteColorAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ByteIntAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores 8-bit integers"""

    data: bpy_prop_collection[ByteIntAttributeValue]
    """ 

    :type: bpy_prop_collection[ByteIntAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Float2Attribute(Attribute, bpy_struct):
    """Geometry attribute that stores floating-point 2D vectors"""

    data: bpy_prop_collection[Float2AttributeValue]
    """ 

    :type: bpy_prop_collection[Float2AttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores floating-point values"""

    data: bpy_prop_collection[FloatAttributeValue]
    """ 

    :type: bpy_prop_collection[FloatAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatColorAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores RGBA colors as floating-point values using 32-bits per channel"""

    data: bpy_prop_collection[FloatColorAttributeValue]
    """ 

    :type: bpy_prop_collection[FloatColorAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatVectorAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores floating-point 3D vectors"""

    data: bpy_prop_collection[FloatVectorAttributeValue]
    """ 

    :type: bpy_prop_collection[FloatVectorAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Int2Attribute(Attribute, bpy_struct):
    """Geometry attribute that stores 2D integer vectors"""

    data: bpy_prop_collection[Int2AttributeValue]
    """ 

    :type: bpy_prop_collection[Int2AttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IntAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores integer values"""

    data: bpy_prop_collection[IntAttributeValue]
    """ 

    :type: bpy_prop_collection[IntAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class QuaternionAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores rotation"""

    data: bpy_prop_collection[QuaternionAttributeValue]
    """ 

    :type: bpy_prop_collection[QuaternionAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class StringAttribute(Attribute, bpy_struct):
    """Geometry attribute that stores strings"""

    data: bpy_prop_collection[StringAttributeValue]
    """ 

    :type: bpy_prop_collection[StringAttributeValue]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidRuleAverageSpeed(BoidRule, bpy_struct):
    level: float
    """ How much velocity's z-component is kept constant

    :type: float
    """

    speed: float
    """ Percentage of maximum speed

    :type: float
    """

    wander: float
    """ How fast velocity's direction is randomized

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidRuleAvoid(BoidRule, bpy_struct):
    fear_factor: float
    """ Avoid object if danger from it is above this threshold

    :type: float
    """

    object: Object
    """ Object to avoid

    :type: Object
    """

    use_predict: bool
    """ Predict target movement

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidRuleAvoidCollision(BoidRule, bpy_struct):
    look_ahead: float
    """ Time to look ahead in seconds

    :type: float
    """

    use_avoid: bool
    """ Avoid collision with other boids

    :type: bool
    """

    use_avoid_collision: bool
    """ Avoid collision with deflector objects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidRuleFight(BoidRule, bpy_struct):
    distance: float
    """ Attack boids at max this distance

    :type: float
    """

    flee_distance: float
    """ Flee to this distance

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidRuleFollowLeader(BoidRule, bpy_struct):
    distance: float
    """ Distance behind leader to follow

    :type: float
    """

    object: Object
    """ Follow this object instead of a boid

    :type: Object
    """

    queue_count: int
    """ How many boids in a line

    :type: int
    """

    use_line: bool
    """ Follow leader in a line

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoidRuleGoal(BoidRule, bpy_struct):
    object: Object
    """ Goal object

    :type: Object
    """

    use_predict: bool
    """ Predict target movement

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ActionConstraint(Constraint, bpy_struct):
    """Map an action to the transform axes of a bone"""

    action: Action
    """ The constraining action

    :type: Action
    """

    eval_time: float
    """ Interpolates between Action Start and End frames

    :type: float
    """

    frame_end: int
    """ Last frame of the Action to use

    :type: int
    """

    frame_start: int
    """ First frame of the Action to use

    :type: int
    """

    max: float
    """ Maximum value for target channel range

    :type: float
    """

    min: float
    """ Minimum value for target channel range

    :type: float
    """

    mix_mode: str
    """ Specify how existing transformations and the action channels are combined

    :type: str
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    transform_channel: str
    """ Transformation channel from the target that is used to key the Action

    :type: str
    """

    use_bone_object_action: bool
    """ Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels

    :type: bool
    """

    use_eval_time: bool
    """ Interpolate between Action Start and End frames, with the Evaluation Time slider instead of the Target object/bone

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArmatureConstraint(Constraint, bpy_struct):
    """Applies transformations done by the Armature modifier"""

    targets: ArmatureConstraintTargets
    """ Target Bones

    :type: ArmatureConstraintTargets
    """

    use_bone_envelopes: bool
    """ Multiply weights by envelope for all bones, instead of acting like Vertex Group based blending. The specified weights are still used, and only the listed bones are considered

    :type: bool
    """

    use_current_location: bool
    """ Use the current bone location for envelopes and choosing B-Bone segments instead of rest position

    :type: bool
    """

    use_deform_preserve_volume: bool
    """ Deform rotation interpolation with quaternions

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CameraSolverConstraint(Constraint, bpy_struct):
    """Lock motion to the reconstructed camera movement"""

    clip: MovieClip
    """ Movie Clip to get tracking data from

    :type: MovieClip
    """

    use_active_clip: bool
    """ Use active clip defined in scene

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ChildOfConstraint(Constraint, bpy_struct):
    """Create constraint-based parent-child relationship"""

    inverse_matrix: mathutils.Matrix
    """ Transformation matrix to apply before

    :type: mathutils.Matrix
    """

    set_inverse_pending: bool
    """ Set to true to request recalculation of the inverse matrix

    :type: bool
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_location_x: bool
    """ Use X Location of Parent

    :type: bool
    """

    use_location_y: bool
    """ Use Y Location of Parent

    :type: bool
    """

    use_location_z: bool
    """ Use Z Location of Parent

    :type: bool
    """

    use_rotation_x: bool
    """ Use X Rotation of Parent

    :type: bool
    """

    use_rotation_y: bool
    """ Use Y Rotation of Parent

    :type: bool
    """

    use_rotation_z: bool
    """ Use Z Rotation of Parent

    :type: bool
    """

    use_scale_x: bool
    """ Use X Scale of Parent

    :type: bool
    """

    use_scale_y: bool
    """ Use Y Scale of Parent

    :type: bool
    """

    use_scale_z: bool
    """ Use Z Scale of Parent

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ClampToConstraint(Constraint, bpy_struct):
    """Constrain an object's location to the nearest point along the target path"""

    main_axis: str
    """ Main axis of movement

    :type: str
    """

    target: Object
    """ Target Object (Curves only)

    :type: Object
    """

    use_cyclic: bool
    """ Treat curve as cyclic curve (no clamping to curve bounding box)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CopyLocationConstraint(Constraint, bpy_struct):
    """Copy the location of the target"""

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    invert_x: bool
    """ Invert the X location

    :type: bool
    """

    invert_y: bool
    """ Invert the Y location

    :type: bool
    """

    invert_z: bool
    """ Invert the Z location

    :type: bool
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_offset: bool
    """ Add original location into copied location

    :type: bool
    """

    use_x: bool
    """ Copy the target's X location

    :type: bool
    """

    use_y: bool
    """ Copy the target's Y location

    :type: bool
    """

    use_z: bool
    """ Copy the target's Z location

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CopyRotationConstraint(Constraint, bpy_struct):
    """Copy the rotation of the target"""

    euler_order: str
    """ Explicitly specify the euler rotation order

    :type: str
    """

    invert_x: bool
    """ Invert the X rotation

    :type: bool
    """

    invert_y: bool
    """ Invert the Y rotation

    :type: bool
    """

    invert_z: bool
    """ Invert the Z rotation

    :type: bool
    """

    mix_mode: str
    """ Specify how the copied and existing rotations are combined

    :type: str
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_offset: bool
    """ DEPRECATED: Add original rotation into copied rotation

    :type: bool
    """

    use_x: bool
    """ Copy the target's X rotation

    :type: bool
    """

    use_y: bool
    """ Copy the target's Y rotation

    :type: bool
    """

    use_z: bool
    """ Copy the target's Z rotation

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CopyScaleConstraint(Constraint, bpy_struct):
    """Copy the scale of the target"""

    power: float
    """ Raise the target's scale to the specified power

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_add: bool
    """ Use addition instead of multiplication to combine scale (2.7 compatibility)

    :type: bool
    """

    use_make_uniform: bool
    """ Redistribute the copied change in volume equally between the three axes of the owner

    :type: bool
    """

    use_offset: bool
    """ Combine original scale with copied scale

    :type: bool
    """

    use_x: bool
    """ Copy the target's X scale

    :type: bool
    """

    use_y: bool
    """ Copy the target's Y scale

    :type: bool
    """

    use_z: bool
    """ Copy the target's Z scale

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CopyTransformsConstraint(Constraint, bpy_struct):
    """Copy all the transforms of the target"""

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    mix_mode: str
    """ Specify how the copied and existing transformations are combined

    :type: str
    """

    remove_target_shear: bool
    """ Remove shear from the target transformation before combining

    :type: bool
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DampedTrackConstraint(Constraint, bpy_struct):
    """Point toward target by taking the shortest rotation path"""

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    track_axis: str
    """ Axis that points to the target object

    :type: str
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloorConstraint(Constraint, bpy_struct):
    """Use the target object for location limitation"""

    floor_location: str
    """ Location of target that object will not pass through

    :type: str
    """

    offset: float
    """ Offset of floor from object origin

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_rotation: bool
    """ Use the target's rotation to determine floor

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FollowPathConstraint(Constraint, bpy_struct):
    """Lock motion to the target path"""

    forward_axis: str
    """ Axis that points forward along the path

    :type: str
    """

    offset: float
    """ Offset from the position corresponding to the time frame

    :type: float
    """

    offset_factor: float
    """ Percentage value defining target position along length of curve

    :type: float
    """

    target: Object
    """ Target Curve object

    :type: Object
    """

    up_axis: str
    """ Axis that points upward

    :type: str
    """

    use_curve_follow: bool
    """ Object will follow the heading and banking of the curve

    :type: bool
    """

    use_curve_radius: bool
    """ Object is scaled by the curve radius

    :type: bool
    """

    use_fixed_location: bool
    """ Object will stay locked to a single point somewhere along the length of the curve regardless of time

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FollowTrackConstraint(Constraint, bpy_struct):
    """Lock motion to the target motion track"""

    camera: Object
    """ Camera to which motion is parented (if empty active scene camera is used)

    :type: Object
    """

    clip: MovieClip
    """ Movie Clip to get tracking data from

    :type: MovieClip
    """

    depth_object: Object
    """ Object used to define depth in camera space by projecting onto surface of this object

    :type: Object
    """

    frame_method: str
    """ How the footage fits in the camera frame

    :type: str
    """

    object: str
    """ Movie tracking object to follow (if empty, camera object is used)

    :type: str
    """

    track: str
    """ Movie tracking track to follow

    :type: str
    """

    use_3d_position: bool
    """ Use 3D position of track to parent to

    :type: bool
    """

    use_active_clip: bool
    """ Use active clip defined in scene

    :type: bool
    """

    use_undistorted_position: bool
    """ Parent to undistorted position of 2D track

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class KinematicConstraint(Constraint, bpy_struct):
    """Inverse Kinematics"""

    chain_count: int
    """ How many bones are included in the IK effect - 0 uses all bones

    :type: int
    """

    distance: float
    """ Radius of limiting sphere

    :type: float
    """

    ik_type: str
    """ 

    :type: str
    """

    iterations: int
    """ Maximum number of solving iterations

    :type: int
    """

    limit_mode: str
    """ Distances in relation to sphere of influence to allow

    :type: str
    """

    lock_location_x: bool
    """ Constraint position along X axis

    :type: bool
    """

    lock_location_y: bool
    """ Constraint position along Y axis

    :type: bool
    """

    lock_location_z: bool
    """ Constraint position along Z axis

    :type: bool
    """

    lock_rotation_x: bool
    """ Constraint rotation along X axis

    :type: bool
    """

    lock_rotation_y: bool
    """ Constraint rotation along Y axis

    :type: bool
    """

    lock_rotation_z: bool
    """ Constraint rotation along Z axis

    :type: bool
    """

    orient_weight: float
    """ For Tree-IK: Weight of orientation control for this target

    :type: float
    """

    pole_angle: float
    """ Pole rotation offset

    :type: float
    """

    pole_subtarget: str
    """ 

    :type: str
    """

    pole_target: Object
    """ Object for pole rotation

    :type: Object
    """

    reference_axis: str
    """ Constraint axis Lock options relative to Bone or Target reference

    :type: str
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_location: bool
    """ Chain follows position of target

    :type: bool
    """

    use_rotation: bool
    """ Chain follows rotation of target

    :type: bool
    """

    use_stretch: bool
    """ Enable IK Stretching

    :type: bool
    """

    use_tail: bool
    """ Include bone's tail as last element in chain

    :type: bool
    """

    weight: float
    """ For Tree-IK: Weight of position control for this target

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LimitDistanceConstraint(Constraint, bpy_struct):
    """Limit the distance from target object"""

    distance: float
    """ Radius of limiting sphere

    :type: float
    """

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    limit_mode: str
    """ Distances in relation to sphere of influence to allow

    :type: str
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_transform_limit: bool
    """ Transforms are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LimitLocationConstraint(Constraint, bpy_struct):
    """Limit the location of the constrained object"""

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    max_z: float
    """ Highest Z value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    min_z: float
    """ Lowest Z value to allow

    :type: float
    """

    use_max_x: bool
    """ Use the maximum X value

    :type: bool
    """

    use_max_y: bool
    """ Use the maximum Y value

    :type: bool
    """

    use_max_z: bool
    """ Use the maximum Z value

    :type: bool
    """

    use_min_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_min_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    use_min_z: bool
    """ Use the minimum Z value

    :type: bool
    """

    use_transform_limit: bool
    """ Transform tools are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LimitRotationConstraint(Constraint, bpy_struct):
    """Limit the rotation of the constrained object"""

    euler_order: str
    """ Explicitly specify the euler rotation order

    :type: str
    """

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    max_z: float
    """ Highest Z value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    min_z: float
    """ Lowest Z value to allow

    :type: float
    """

    use_limit_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_limit_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    use_limit_z: bool
    """ Use the minimum Z value

    :type: bool
    """

    use_transform_limit: bool
    """ Transform tools are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LimitScaleConstraint(Constraint, bpy_struct):
    """Limit the scaling of the constrained object"""

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    max_z: float
    """ Highest Z value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    min_z: float
    """ Lowest Z value to allow

    :type: float
    """

    use_max_x: bool
    """ Use the maximum X value

    :type: bool
    """

    use_max_y: bool
    """ Use the maximum Y value

    :type: bool
    """

    use_max_z: bool
    """ Use the maximum Z value

    :type: bool
    """

    use_min_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_min_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    use_min_z: bool
    """ Use the minimum Z value

    :type: bool
    """

    use_transform_limit: bool
    """ Transform tools are affected by this constraint as well

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LockedTrackConstraint(Constraint, bpy_struct):
    """Point toward the target along the track axis, while locking the other axis"""

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    lock_axis: str
    """ Axis that points upward

    :type: str
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    track_axis: str
    """ Axis that points to the target object

    :type: str
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaintainVolumeConstraint(Constraint, bpy_struct):
    """Maintain a constant volume along a single scaling axis"""

    free_axis: str
    """ The free scaling axis of the object

    :type: str
    """

    mode: str
    """ The way the constraint treats original non-free axis scaling

    :type: str
    """

    volume: float
    """ Volume of the bone at rest

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ObjectSolverConstraint(Constraint, bpy_struct):
    """Lock motion to the reconstructed object movement"""

    camera: Object
    """ Camera to which motion is parented (if empty active scene camera is used)

    :type: Object
    """

    clip: MovieClip
    """ Movie Clip to get tracking data from

    :type: MovieClip
    """

    object: str
    """ Movie tracking object to follow

    :type: str
    """

    set_inverse_pending: bool
    """ Set to true to request recalculation of the inverse matrix

    :type: bool
    """

    use_active_clip: bool
    """ Use active clip defined in scene

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PivotConstraint(Constraint, bpy_struct):
    """Rotate around a different point"""

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    offset: mathutils.Vector
    """ Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point

    :type: mathutils.Vector
    """

    rotation_range: str
    """ Rotation range on which pivoting should occur

    :type: str
    """

    subtarget: str
    """ 

    :type: str
    """

    target: Object
    """ Target Object, defining the position of the pivot when defined

    :type: Object
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_relative_location: bool
    """ Offset will be an absolute point in space instead of relative to the target

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PythonConstraint(Constraint, bpy_struct):
    """Use Python script for constraint evaluation"""

    has_script_error: bool
    """ The linked Python script has thrown an error

    :type: bool
    """

    target_count: int
    """ Usually only 1 to 3 are needed

    :type: int
    """

    targets: bpy_prop_collection[ConstraintTarget]
    """ Target Objects

    :type: bpy_prop_collection[ConstraintTarget]
    """

    text: Text
    """ The text object that contains the Python script

    :type: Text
    """

    use_targets: bool
    """ Use the targets indicated in the constraint panel

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShrinkwrapConstraint(Constraint, bpy_struct):
    """Create constraint-based shrinkwrap relationship"""

    cull_face: str
    """ Stop vertices from projecting to a face on the target when facing towards/away

    :type: str
    """

    distance: float
    """ Distance to Target

    :type: float
    """

    project_axis: str
    """ Axis constrain to

    :type: str
    """

    project_axis_space: str
    """ Space for the projection axis

    :type: str
    """

    project_limit: float
    """ Limit the distance used for projection (zero disables)

    :type: float
    """

    shrinkwrap_type: str
    """ Select type of shrinkwrap algorithm for target position

    :type: str
    """

    target: Object
    """ Target Mesh object

    :type: Object
    """

    track_axis: str
    """ Axis that is aligned to the normal

    :type: str
    """

    use_invert_cull: bool
    """ When projecting in the opposite direction invert the face cull mode

    :type: bool
    """

    use_project_opposite: bool
    """ Project in both specified and opposite directions

    :type: bool
    """

    use_track_normal: bool
    """ Align the specified axis to the surface normal

    :type: bool
    """

    wrap_mode: str
    """ Select how to constrain the object to the target surface

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SplineIKConstraint(Constraint, bpy_struct):
    """Align 'n' bones along a curve"""

    bulge: float
    """ Factor between volume variation and stretching

    :type: float
    """

    bulge_max: float
    """ Maximum volume stretching factor

    :type: float
    """

    bulge_min: float
    """ Minimum volume stretching factor

    :type: float
    """

    bulge_smooth: float
    """ Strength of volume stretching clamping

    :type: float
    """

    chain_count: int
    """ How many bones are included in the chain

    :type: int
    """

    joint_bindings: bpy_prop_array[float]
    """ (EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages

    :type: bpy_prop_array[float]
    """

    target: Object
    """ Curve that controls this relationship

    :type: Object
    """

    use_bulge_max: bool
    """ Use upper limit for volume variation

    :type: bool
    """

    use_bulge_min: bool
    """ Use lower limit for volume variation

    :type: bool
    """

    use_chain_offset: bool
    """ Offset the entire chain relative to the root joint

    :type: bool
    """

    use_curve_radius: bool
    """ Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode

    :type: bool
    """

    use_even_divisions: bool
    """ Ignore the relative lengths of the bones when fitting to the curve

    :type: bool
    """

    use_original_scale: bool
    """ Apply volume preservation over the original scaling

    :type: bool
    """

    xz_scale_mode: str
    """ Method used for determining the scaling of the X and Z axes of the bones

    :type: str
    """

    y_scale_mode: str
    """ Method used for determining the scaling of the Y axis of the bones, on top of the shape and scaling of the curve itself

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class StretchToConstraint(Constraint, bpy_struct):
    """Stretch to meet the target object"""

    bulge: float
    """ Factor between volume variation and stretching

    :type: float
    """

    bulge_max: float
    """ Maximum volume stretching factor

    :type: float
    """

    bulge_min: float
    """ Minimum volume stretching factor

    :type: float
    """

    bulge_smooth: float
    """ Strength of volume stretching clamping

    :type: float
    """

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    keep_axis: str
    """ The rotation type and axis order to use

    :type: str
    """

    rest_length: float
    """ Length at rest position

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_bulge_max: bool
    """ Use upper limit for volume variation

    :type: bool
    """

    use_bulge_min: bool
    """ Use lower limit for volume variation

    :type: bool
    """

    volume: str
    """ Maintain the object's volume as it stretches

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TrackToConstraint(Constraint, bpy_struct):
    """Aim the constrained object toward the target"""

    head_tail: float
    """ Target along length of bone: Head is 0, Tail is 1

    :type: float
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    track_axis: str
    """ Axis that points to the target object

    :type: str
    """

    up_axis: str
    """ Axis that points upward

    :type: str
    """

    use_bbone_shape: bool
    """ Follow shape of B-Bone segments when calculating Head/Tail position

    :type: bool
    """

    use_target_z: bool
    """ Target's Z axis, not World Z axis, will constraint the Up direction

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TransformCacheConstraint(Constraint, bpy_struct):
    """Look up transformation from an external file"""

    cache_file: CacheFile
    """ 

    :type: CacheFile
    """

    object_path: str
    """ Path to the object in the Alembic archive used to lookup the transform matrix

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TransformConstraint(Constraint, bpy_struct):
    """Map transformations of the target to the object"""

    from_max_x: float
    """ Top range of X axis source motion

    :type: float
    """

    from_max_x_rot: float
    """ Top range of X axis source motion

    :type: float
    """

    from_max_x_scale: float
    """ Top range of X axis source motion

    :type: float
    """

    from_max_y: float
    """ Top range of Y axis source motion

    :type: float
    """

    from_max_y_rot: float
    """ Top range of Y axis source motion

    :type: float
    """

    from_max_y_scale: float
    """ Top range of Y axis source motion

    :type: float
    """

    from_max_z: float
    """ Top range of Z axis source motion

    :type: float
    """

    from_max_z_rot: float
    """ Top range of Z axis source motion

    :type: float
    """

    from_max_z_scale: float
    """ Top range of Z axis source motion

    :type: float
    """

    from_min_x: float
    """ Bottom range of X axis source motion

    :type: float
    """

    from_min_x_rot: float
    """ Bottom range of X axis source motion

    :type: float
    """

    from_min_x_scale: float
    """ Bottom range of X axis source motion

    :type: float
    """

    from_min_y: float
    """ Bottom range of Y axis source motion

    :type: float
    """

    from_min_y_rot: float
    """ Bottom range of Y axis source motion

    :type: float
    """

    from_min_y_scale: float
    """ Bottom range of Y axis source motion

    :type: float
    """

    from_min_z: float
    """ Bottom range of Z axis source motion

    :type: float
    """

    from_min_z_rot: float
    """ Bottom range of Z axis source motion

    :type: float
    """

    from_min_z_scale: float
    """ Bottom range of Z axis source motion

    :type: float
    """

    from_rotation_mode: str
    """ Specify the type of rotation channels to use

    :type: str
    """

    map_from: str
    """ The transformation type to use from the target

    :type: str
    """

    map_to: str
    """ The transformation type to affect on the constrained object

    :type: str
    """

    map_to_x_from: str
    """ The source axis constrained object's X axis uses

    :type: str
    """

    map_to_y_from: str
    """ The source axis constrained object's Y axis uses

    :type: str
    """

    map_to_z_from: str
    """ The source axis constrained object's Z axis uses

    :type: str
    """

    mix_mode: str
    """ Specify how to combine the new location with original

    :type: str
    """

    mix_mode_rot: str
    """ Specify how to combine the new rotation with original

    :type: str
    """

    mix_mode_scale: str
    """ Specify how to combine the new scale with original

    :type: str
    """

    subtarget: str
    """ Armature bone, mesh or lattice vertex group, ...

    :type: str
    """

    target: Object
    """ Target object

    :type: Object
    """

    to_euler_order: str
    """ Explicitly specify the output euler rotation order

    :type: str
    """

    to_max_x: float
    """ Top range of X axis destination motion

    :type: float
    """

    to_max_x_rot: float
    """ Top range of X axis destination motion

    :type: float
    """

    to_max_x_scale: float
    """ Top range of X axis destination motion

    :type: float
    """

    to_max_y: float
    """ Top range of Y axis destination motion

    :type: float
    """

    to_max_y_rot: float
    """ Top range of Y axis destination motion

    :type: float
    """

    to_max_y_scale: float
    """ Top range of Y axis destination motion

    :type: float
    """

    to_max_z: float
    """ Top range of Z axis destination motion

    :type: float
    """

    to_max_z_rot: float
    """ Top range of Z axis destination motion

    :type: float
    """

    to_max_z_scale: float
    """ Top range of Z axis destination motion

    :type: float
    """

    to_min_x: float
    """ Bottom range of X axis destination motion

    :type: float
    """

    to_min_x_rot: float
    """ Bottom range of X axis destination motion

    :type: float
    """

    to_min_x_scale: float
    """ Bottom range of X axis destination motion

    :type: float
    """

    to_min_y: float
    """ Bottom range of Y axis destination motion

    :type: float
    """

    to_min_y_rot: float
    """ Bottom range of Y axis destination motion

    :type: float
    """

    to_min_y_scale: float
    """ Bottom range of Y axis destination motion

    :type: float
    """

    to_min_z: float
    """ Bottom range of Z axis destination motion

    :type: float
    """

    to_min_z_rot: float
    """ Bottom range of Z axis destination motion

    :type: float
    """

    to_min_z_scale: float
    """ Bottom range of Z axis destination motion

    :type: float
    """

    use_motion_extrapolate: bool
    """ Extrapolate ranges

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierCycles(FModifier, bpy_struct):
    """Repeat the values of the modified F-Curve"""

    cycles_after: int
    """ Maximum number of cycles to allow after last keyframe (0 = infinite)

    :type: int
    """

    cycles_before: int
    """ Maximum number of cycles to allow before first keyframe (0 = infinite)

    :type: int
    """

    mode_after: str
    """ Cycling mode to use after last keyframe

    :type: str
    """

    mode_before: str
    """ Cycling mode to use before first keyframe

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierEnvelope(FModifier, bpy_struct):
    """Scale the values of the modified F-Curve"""

    control_points: FModifierEnvelopeControlPoints
    """ Control points defining the shape of the envelope

    :type: FModifierEnvelopeControlPoints
    """

    default_max: float
    """ Upper distance from Reference Value for 1:1 default influence

    :type: float
    """

    default_min: float
    """ Lower distance from Reference Value for 1:1 default influence

    :type: float
    """

    reference_value: float
    """ Value that envelope's influence is centered around / based on

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierFunctionGenerator(FModifier, bpy_struct):
    """Generate values using a built-in function"""

    amplitude: float
    """ Scale factor determining the maximum/minimum values

    :type: float
    """

    function_type: str
    """ Type of built-in function to use

    :type: str
    """

    phase_multiplier: float
    """ Scale factor determining the 'speed' of the function

    :type: float
    """

    phase_offset: float
    """ Constant factor to offset time by for function

    :type: float
    """

    use_additive: bool
    """ Values generated by this modifier are applied on top of the existing values instead of overwriting them

    :type: bool
    """

    value_offset: float
    """ Constant factor to offset values by

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierGenerator(FModifier, bpy_struct):
    """Deterministically generate values for the modified F-Curve"""

    coefficients: bpy_prop_array[float]
    """ Coefficients for 'x' (starting from lowest power of x^0)

    :type: bpy_prop_array[float]
    """

    mode: str
    """ Type of generator to use

    :type: str
    """

    poly_order: int
    """ The highest power of 'x' for this polynomial (number of coefficients - 1)

    :type: int
    """

    use_additive: bool
    """ Values generated by this modifier are applied on top of the existing values instead of overwriting them

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierLimits(FModifier, bpy_struct):
    """Limit the time/value ranges of the modified F-Curve"""

    max_x: float
    """ Highest X value to allow

    :type: float
    """

    max_y: float
    """ Highest Y value to allow

    :type: float
    """

    min_x: float
    """ Lowest X value to allow

    :type: float
    """

    min_y: float
    """ Lowest Y value to allow

    :type: float
    """

    use_max_x: bool
    """ Use the maximum X value

    :type: bool
    """

    use_max_y: bool
    """ Use the maximum Y value

    :type: bool
    """

    use_min_x: bool
    """ Use the minimum X value

    :type: bool
    """

    use_min_y: bool
    """ Use the minimum Y value

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierNoise(FModifier, bpy_struct):
    """Give randomness to the modified F-Curve"""

    blend_type: str
    """ Method of modifying the existing F-Curve

    :type: str
    """

    depth: int
    """ Amount of fine level detail present in the noise

    :type: int
    """

    offset: float
    """ Time offset for the noise effect

    :type: float
    """

    phase: float
    """ A random seed for the noise effect

    :type: float
    """

    scale: float
    """ Scaling (in time) of the noise

    :type: float
    """

    strength: float
    """ Amplitude of the noise - the amount that it modifies the underlying curve

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierPython(FModifier, bpy_struct):
    """Perform user-defined operation on the modified F-Curve"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FModifierStepped(FModifier, bpy_struct):
    """Hold each interpolated value from the F-Curve for several frames without changing the timing"""

    frame_end: float
    """ Frame that modifier's influence ends (if applicable)

    :type: float
    """

    frame_offset: float
    """ Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)

    :type: float
    """

    frame_start: float
    """ Frame that modifier's influence starts (if applicable)

    :type: float
    """

    frame_step: float
    """ Number of frames to hold each value

    :type: float
    """

    use_frame_end: bool
    """ Restrict modifier to only act before its 'end' frame

    :type: bool
    """

    use_frame_start: bool
    """ Restrict modifier to only act after its 'start' frame

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FileAssetSelectParams(FileSelectParams, bpy_struct):
    """Settings for the file selection in Asset Browser mode"""

    asset_library_reference: str
    """ 

    :type: str
    """

    catalog_id: str
    """ The UUID of the catalog shown in the browser

    :type: str
    """

    filter_asset_id: FileAssetSelectIDFilter
    """ Which asset types to show/hide, when browsing an asset library

    :type: FileAssetSelectIDFilter
    """

    import_method: str
    """ Determine how the asset will be imported

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArmatureGpencilModifier(GpencilModifier, bpy_struct):
    """Change stroke using armature to deform modifier"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object: Object
    """ Armature object to deform with

    :type: Object
    """

    use_bone_envelopes: bool
    """ Bind Bone envelopes to armature modifier

    :type: bool
    """

    use_deform_preserve_volume: bool
    """ Deform rotation interpolation with quaternions

    :type: bool
    """

    use_vertex_groups: bool
    """ Bind vertex groups to armature modifier

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArrayGpencilModifier(GpencilModifier, bpy_struct):
    """Create grid of duplicate instances"""

    constant_offset: mathutils.Vector
    """ Value for the distance between items

    :type: mathutils.Vector
    """

    count: int
    """ Number of items

    :type: int
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    offset_object: Object
    """ Use the location and rotation of another object to determine the distance and rotational change between arrayed items

    :type: Object
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    random_offset: mathutils.Vector
    """ Value for changes in location

    :type: mathutils.Vector
    """

    random_rotation: mathutils.Euler
    """ Value for changes in rotation

    :type: mathutils.Euler
    """

    random_scale: mathutils.Vector
    """ Value for changes in scale

    :type: mathutils.Vector
    """

    relative_offset: mathutils.Vector
    """ The size of the geometry will determine the distance between arrayed items

    :type: mathutils.Vector
    """

    replace_material: int
    """ Index of the material used for generated strokes (0 keep original material)

    :type: int
    """

    seed: int
    """ Random seed

    :type: int
    """

    use_constant_offset: bool
    """ Enable offset

    :type: bool
    """

    use_object_offset: bool
    """ Enable object offset

    :type: bool
    """

    use_relative_offset: bool
    """ Enable shift

    :type: bool
    """

    use_uniform_random_scale: bool
    """ Use the same random seed for each scale axis for a uniform scale

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BuildGpencilModifier(GpencilModifier, bpy_struct):
    """Animate strokes appearing and disappearing"""

    concurrent_time_alignment: str
    """ How should strokes start to appear/disappear

    :type: str
    """

    fade_factor: float
    """ Defines how much of the stroke is fading in/out

    :type: float
    """

    fade_opacity_strength: float
    """ How much strength fading applies on top of stroke opacity

    :type: float
    """

    fade_thickness_strength: float
    """ How much strength fading applies on top of stroke thickness

    :type: float
    """

    frame_end: float
    """ End Frame (when Restrict Frame Range is enabled)

    :type: float
    """

    frame_start: float
    """ Start Frame (when Restrict Frame Range is enabled)

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    length: float
    """ Maximum number of frames that the build effect can run for (unless another GP keyframe occurs before this time has elapsed)

    :type: float
    """

    mode: str
    """ How strokes are being built

    :type: str
    """

    object: Object
    """ Object used as build starting position

    :type: Object
    """

    percentage_factor: float
    """ Defines how much of the stroke is visible

    :type: float
    """

    speed_factor: float
    """ Multiply recorded drawing speed by a factor

    :type: float
    """

    speed_maxgap: float
    """ The maximum gap between strokes in seconds

    :type: float
    """

    start_delay: float
    """ Number of frames after each GP keyframe before the modifier has any effect

    :type: float
    """

    target_vertex_group: str
    """ Output Vertex group

    :type: str
    """

    time_mode: str
    """ Use drawing speed, a number of frames, or a manual factor to build strokes

    :type: str
    """

    transition: str
    """ How are strokes animated (i.e. are they appearing or disappearing)

    :type: str
    """

    use_fading: bool
    """ Fade out strokes instead of directly cutting off

    :type: bool
    """

    use_percentage: bool
    """ Use a percentage factor to determine the visible points

    :type: bool
    """

    use_restrict_frame_range: bool
    """ Only modify strokes during the specified frame range

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorGpencilModifier(GpencilModifier, bpy_struct):
    """Change Hue/Saturation modifier"""

    curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    hue: float
    """ Color Hue

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    modify_color: str
    """ Set what colors of the stroke are affected

    :type: str
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    saturation: float
    """ Color Saturation

    :type: float
    """

    use_custom_curve: bool
    """ Use a custom curve to define color effect along the strokes

    :type: bool
    """

    value: float
    """ Color Value

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DashGpencilModifierData(GpencilModifier, bpy_struct):
    """Create dot-dash effect for strokes"""

    dash_offset: int
    """ Offset into each stroke before the beginning of the dashed segment generation

    :type: int
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    segment_active_index: int
    """ Active index in the segment list

    :type: int
    """

    segments: bpy_prop_collection[DashGpencilModifierSegment]
    """ 

    :type: bpy_prop_collection[DashGpencilModifierSegment]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EnvelopeGpencilModifier(GpencilModifier, bpy_struct):
    """Envelope stroke effect modifier"""

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    mat_nr: int
    """ The material to use for the new strokes

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    mode: str
    """ Algorithm to use for generating the envelope

    :type: str
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    skip: int
    """ The number of generated segments to skip to reduce complexity

    :type: int
    """

    spread: int
    """ The number of points to skip to create straight segments

    :type: int
    """

    strength: float
    """ Multiplier for the strength of the new strokes

    :type: float
    """

    thickness: float
    """ Multiplier for the thickness of the new strokes

    :type: float
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class HookGpencilModifier(GpencilModifier, bpy_struct):
    """Hook modifier to modify the location of stroke points"""

    center: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    falloff_curve: CurveMapping
    """ Custom falloff curve

    :type: CurveMapping
    """

    falloff_radius: float
    """ If not zero, the distance from the hook where influence ends

    :type: float
    """

    falloff_type: str
    """ 

    :type: str
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    matrix_inverse: mathutils.Matrix
    """ Reverse the transformation between this object and its target

    :type: mathutils.Matrix
    """

    object: Object
    """ Parent Object for hook, also recalculates and clears offset

    :type: Object
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    strength: float
    """ Relative force of the hook

    :type: float
    """

    subtarget: str
    """ Name of Parent Bone for hook (if applicable), also recalculates and clears offset

    :type: str
    """

    use_falloff_uniform: bool
    """ Compensate for non-uniform object scale

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LatticeGpencilModifier(GpencilModifier, bpy_struct):
    """Change stroke using lattice to deform modifier"""

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    object: Object
    """ Lattice object to deform with

    :type: Object
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    strength: float
    """ Strength of modifier effect

    :type: float
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LengthGpencilModifier(GpencilModifier, bpy_struct):
    """Stretch or shrink strokes"""

    end_factor: float
    """ Added length to the end of each stroke relative to its length

    :type: float
    """

    end_length: float
    """ Absolute added length to the end of each stroke

    :type: float
    """

    invert_curvature: bool
    """ Invert the curvature of the stroke's extension

    :type: bool
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    max_angle: float
    """ Ignore points on the stroke that deviate from their neighbors by more than this angle when determining the extrapolation shape

    :type: float
    """

    mode: str
    """ Mode to define length

    :type: str
    """

    overshoot_factor: float
    """ Defines what portion of the stroke is used for the calculation of the extension

    :type: float
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    point_density: float
    """ Multiplied by Start/End for the total added point count

    :type: float
    """

    random_end_factor: float
    """ Size of random length added to the end of each stroke

    :type: float
    """

    random_offset: float
    """ Smoothly offset each stroke's random value

    :type: float
    """

    random_start_factor: float
    """ Size of random length added to the start of each stroke

    :type: float
    """

    seed: int
    """ Random seed

    :type: int
    """

    segment_influence: float
    """ Factor to determine how much the length of the individual segments should influence the final computed curvature. Higher factors makes small segments influence the overall curvature less

    :type: float
    """

    start_factor: float
    """ Added length to the start of each stroke relative to its length

    :type: float
    """

    start_length: float
    """ Absolute added length to the start of each stroke

    :type: float
    """

    step: int
    """ Number of frames between randomization steps

    :type: int
    """

    use_curvature: bool
    """ Follow the curvature of the stroke

    :type: bool
    """

    use_random: bool
    """ Use random values over time

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineartGpencilModifier(GpencilModifier, bpy_struct):
    """Generate line art strokes from selected source"""

    chaining_image_threshold: float
    """ Segments with an image distance smaller than this will be chained together

    :type: float
    """

    crease_threshold: float
    """ Angles smaller than this will be treated as creases. Crease angle priority: object line art crease override > mesh auto smooth angle > line art default crease

    :type: float
    """

    invert_source_vertex_group: bool
    """ Invert source vertex group values

    :type: bool
    """

    is_baked: bool
    """ This modifier has baked data

    :type: bool
    """

    level_end: int
    """ Maximum number of occlusions for the generated strokes

    :type: int
    """

    level_start: int
    """ Minimum number of occlusions for the generated strokes

    :type: int
    """

    light_contour_object: Object
    """ Use this light object to generate light contour

    :type: Object
    """

    opacity: float
    """ The strength value for the generate strokes

    :type: float
    """

    overscan: float
    """ A margin to prevent strokes from ending abruptly at the edge of the image

    :type: float
    """

    shadow_camera_far: float
    """ Far clipping distance of shadow camera

    :type: float
    """

    shadow_camera_near: float
    """ Near clipping distance of shadow camera

    :type: float
    """

    shadow_camera_size: float
    """ Represents the "Orthographic Scale" of an orthographic camera. If the camera is positioned at the light's location with this scale, it will represent the coverage of the shadow "camera"

    :type: float
    """

    shadow_region_filtering: str
    """ Select feature lines that comes from lit or shaded regions. Will not affect cast shadow and light contour since they are at the border

    :type: str
    """

    silhouette_filtering: str
    """ Select contour or silhouette

    :type: str
    """

    smooth_tolerance: float
    """ Strength of smoothing applied on jagged chains

    :type: float
    """

    source_camera: Object
    """ Use specified camera object for generating line art

    :type: Object
    """

    source_collection: Collection
    """ Generate strokes from the objects in this collection

    :type: Collection
    """

    source_object: Object
    """ Generate strokes from this object

    :type: Object
    """

    source_type: str
    """ Line art stroke source type

    :type: str
    """

    source_vertex_group: str
    """ Match the beginning of vertex group names from mesh objects, match all when left empty

    :type: str
    """

    split_angle: float
    """ Angle in screen space below which a stroke is split in two

    :type: float
    """

    stroke_depth_offset: float
    """ Move strokes slightly towards the camera to avoid clipping while preserve depth for the viewport

    :type: float
    """

    target_layer: str
    """ Grease Pencil layer to which assign the generated strokes

    :type: str
    """

    target_material: Material
    """ Grease Pencil material assigned to the generated strokes

    :type: Material
    """

    thickness: int
    """ The thickness for the generated strokes

    :type: int
    """

    use_back_face_culling: bool
    """ Remove all back faces to speed up calculation, this will create edges in different occlusion levels than when disabled

    :type: bool
    """

    use_cache: bool
    """ Use cached scene data from the first line art modifier in the stack. Certain settings will be unavailable

    :type: bool
    """

    use_clip_plane_boundaries: bool
    """ Allow lines generated by the near/far clipping plane to be shown

    :type: bool
    """

    use_contour: bool
    """ Generate strokes from contours lines

    :type: bool
    """

    use_crease: bool
    """ Generate strokes from creased edges

    :type: bool
    """

    use_crease_on_sharp: bool
    """ Allow crease to show on sharp edges

    :type: bool
    """

    use_crease_on_smooth: bool
    """ Allow crease edges to show inside smooth surfaces

    :type: bool
    """

    use_custom_camera: bool
    """ Use custom camera instead of the active camera

    :type: bool
    """

    use_detail_preserve: bool
    """ Keep the zig-zag "noise" in initial chaining

    :type: bool
    """

    use_edge_mark: bool
    """ Generate strokes from freestyle marked edges

    :type: bool
    """

    use_edge_overlap: bool
    """ Allow edges in the same location (i.e. from edge split) to show properly. May run slower

    :type: bool
    """

    use_face_mark: bool
    """ Filter feature lines using freestyle face marks

    :type: bool
    """

    use_face_mark_boundaries: bool
    """ Filter feature lines based on face mark boundaries

    :type: bool
    """

    use_face_mark_invert: bool
    """ Invert face mark filtering

    :type: bool
    """

    use_face_mark_keep_contour: bool
    """ Preserve contour lines while filtering

    :type: bool
    """

    use_fuzzy_all: bool
    """ Treat all lines as the same line type so they can be chained together

    :type: bool
    """

    use_fuzzy_intersections: bool
    """ Treat intersection and contour lines as if they were the same type so they can be chained together

    :type: bool
    """

    use_geometry_space_chain: bool
    """ Use geometry distance for chaining instead of image space

    :type: bool
    """

    use_image_boundary_trimming: bool
    """ Trim all edges right at the boundary of image (including overscan region)

    :type: bool
    """

    use_intersection: bool
    """ Generate strokes from intersections

    :type: bool
    """

    use_intersection_mask: list[bool]
    """ Mask bits to match from Collection Line Art settings

    :type: list[bool]
    """

    use_intersection_match: bool
    """ Require matching all intersection masks instead of just one

    :type: bool
    """

    use_invert_collection: bool
    """ Select everything except lines from specified collection

    :type: bool
    """

    use_invert_silhouette: bool
    """ Select anti-silhouette lines

    :type: bool
    """

    use_light_contour: bool
    """ Generate light/shadow separation lines from a reference light object

    :type: bool
    """

    use_loose: bool
    """ Generate strokes from loose edges

    :type: bool
    """

    use_loose_as_contour: bool
    """ Loose edges will have contour type

    :type: bool
    """

    use_loose_edge_chain: bool
    """ Allow loose edges to be chained together

    :type: bool
    """

    use_material: bool
    """ Generate strokes from borders between materials

    :type: bool
    """

    use_material_mask: bool
    """ Use material masks to filter out occluded strokes

    :type: bool
    """

    use_material_mask_bits: list[bool]
    """ Mask bits to match from Material Line Art settings

    :type: list[bool]
    """

    use_material_mask_match: bool
    """ Require matching all material masks instead of just one

    :type: bool
    """

    use_multiple_levels: bool
    """ Generate strokes from a range of occlusion levels

    :type: bool
    """

    use_object_instances: bool
    """ Allow particle objects and face/vertex instances to show in line art

    :type: bool
    """

    use_offset_towards_custom_camera: bool
    """ Offset strokes towards selected camera instead of the active camera

    :type: bool
    """

    use_output_vertex_group_match_by_name: bool
    """ Match output vertex group based on name

    :type: bool
    """

    use_overlap_edge_type_support: bool
    """ Allow an edge to have multiple overlapping types. This will create a separate stroke for each overlapping type

    :type: bool
    """

    use_shadow: bool
    """ Project contour lines using a light source object

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for selected strokes

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MirrorGpencilModifier(GpencilModifier, bpy_struct):
    """Create mirroring strokes"""

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    object: Object
    """ Object used as center

    :type: Object
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    use_axis_x: bool
    """ Mirror the X axis

    :type: bool
    """

    use_axis_y: bool
    """ Mirror the Y axis

    :type: bool
    """

    use_axis_z: bool
    """ Mirror the Z axis

    :type: bool
    """

    use_clip: bool
    """ Clip points

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MultiplyGpencilModifier(GpencilModifier, bpy_struct):
    """Generate multiple strokes from one stroke"""

    distance: float
    """ Distance of duplications

    :type: float
    """

    duplicates: int
    """ How many copies of strokes be displayed

    :type: int
    """

    fading_center: float
    """ Fade center

    :type: float
    """

    fading_opacity: float
    """ Fade influence of stroke's opacity

    :type: float
    """

    fading_thickness: float
    """ Fade influence of stroke's thickness

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    offset: float
    """ Offset of duplicates. -1 to 1: inner to outer

    :type: float
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    use_fade: bool
    """ Fade the stroke thickness for each generated stroke

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NoiseGpencilModifier(GpencilModifier, bpy_struct):
    """Noise effect modifier"""

    curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    factor: float
    """ Amount of noise to apply

    :type: float
    """

    factor_strength: float
    """ Amount of noise to apply to opacity

    :type: float
    """

    factor_thickness: float
    """ Amount of noise to apply to thickness

    :type: float
    """

    factor_uvs: float
    """ Amount of noise to apply to UV rotation

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    noise_offset: float
    """ Offset the noise along the strokes

    :type: float
    """

    noise_scale: float
    """ Scale the noise frequency

    :type: float
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    random_mode: str
    """ Where to perform randomization

    :type: str
    """

    seed: int
    """ Random seed

    :type: int
    """

    step: int
    """ Number of frames between randomization steps

    :type: int
    """

    use_custom_curve: bool
    """ Use a custom curve to define noise effect along the strokes

    :type: bool
    """

    use_random: bool
    """ Use random values over time

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OffsetGpencilModifier(GpencilModifier, bpy_struct):
    """Offset Stroke modifier"""

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    location: mathutils.Vector
    """ Values for change location

    :type: mathutils.Vector
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    mode: str
    """ 

    :type: str
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    random_offset: mathutils.Vector
    """ Value for changes in location

    :type: mathutils.Vector
    """

    random_rotation: mathutils.Euler
    """ Value for changes in rotation

    :type: mathutils.Euler
    """

    random_scale: mathutils.Vector
    """ Value for changes in scale

    :type: mathutils.Vector
    """

    rotation: mathutils.Euler
    """ Values for changes in rotation

    :type: mathutils.Euler
    """

    scale: mathutils.Vector
    """ Values for changes in scale

    :type: mathutils.Vector
    """

    seed: int
    """ Random seed

    :type: int
    """

    stroke_start_offset: int
    """ Offset starting point

    :type: int
    """

    stroke_step: int
    """ Number of elements that will be grouped

    :type: int
    """

    use_uniform_random_scale: bool
    """ Use the same random seed for each scale axis for a uniform scale

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OpacityGpencilModifier(GpencilModifier, bpy_struct):
    """Opacity of Strokes modifier"""

    curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    factor: float
    """ Factor of Opacity

    :type: float
    """

    hardness: float
    """ Factor of stroke hardness

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    modify_color: str
    """ Set what colors of the stroke are affected

    :type: str
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    use_custom_curve: bool
    """ Use a custom curve to define opacity effect along the strokes

    :type: bool
    """

    use_normalized_opacity: bool
    """ Replace the stroke opacity

    :type: bool
    """

    use_weight_factor: bool
    """ Use weight to modulate effect

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OutlineGpencilModifier(GpencilModifier, bpy_struct):
    """Outline of Strokes modifier from camera view"""

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    object: Object
    """ Target object to define stroke start

    :type: Object
    """

    outline_material: Material
    """ Material used for outline strokes

    :type: Material
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    sample_length: float
    """ 

    :type: float
    """

    subdivision: int
    """ Number of subdivisions

    :type: int
    """

    thickness: int
    """ Thickness of the perimeter stroke

    :type: int
    """

    use_keep_shape: bool
    """ Try to keep global shape

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShrinkwrapGpencilModifier(GpencilModifier, bpy_struct):
    """Shrink wrapping modifier to shrink wrap and object to a target"""

    auxiliary_target: Object
    """ Additional mesh target to shrink to

    :type: Object
    """

    cull_face: str
    """ Stop vertices from projecting to a face on the target when facing towards/away

    :type: str
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    offset: float
    """ Distance to keep from the target

    :type: float
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    project_limit: float
    """ Limit the distance used for projection (zero disables)

    :type: float
    """

    smooth_factor: float
    """ Amount of smoothing to apply

    :type: float
    """

    smooth_step: int
    """ Number of times to apply smooth (high numbers can reduce FPS)

    :type: int
    """

    subsurf_levels: int
    """ Number of subdivisions that must be performed before extracting vertices' positions and normals

    :type: int
    """

    target: Object
    """ Mesh target to shrink to

    :type: Object
    """

    use_invert_cull: bool
    """ When projecting in the negative direction invert the face cull mode

    :type: bool
    """

    use_negative_direction: bool
    """ Allow vertices to move in the negative direction of axis

    :type: bool
    """

    use_positive_direction: bool
    """ Allow vertices to move in the positive direction of axis

    :type: bool
    """

    use_project_x: bool
    """ 

    :type: bool
    """

    use_project_y: bool
    """ 

    :type: bool
    """

    use_project_z: bool
    """ 

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    wrap_method: str
    """ 

    :type: str
    """

    wrap_mode: str
    """ Select how vertices are constrained to the target surface

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SimplifyGpencilModifier(GpencilModifier, bpy_struct):
    """Simplify Stroke modifier"""

    distance: float
    """ Distance between points

    :type: float
    """

    factor: float
    """ Factor of Simplify

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    length: float
    """ Length of each segment

    :type: float
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    mode: str
    """ How to simplify the stroke

    :type: str
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    sharp_threshold: float
    """ Preserve corners that have sharper angle than this threshold

    :type: float
    """

    step: int
    """ Number of times to apply simplify

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SmoothGpencilModifier(GpencilModifier, bpy_struct):
    """Smooth effect modifier"""

    curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    factor: float
    """ Amount of smooth to apply

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    step: int
    """ Number of times to apply smooth (high numbers can reduce fps)

    :type: int
    """

    use_custom_curve: bool
    """ Use a custom curve to define smooth effect along the strokes

    :type: bool
    """

    use_edit_position: bool
    """ The modifier affects the position of the point

    :type: bool
    """

    use_edit_strength: bool
    """ The modifier affects the color strength of the point

    :type: bool
    """

    use_edit_thickness: bool
    """ The modifier affects the thickness of the point

    :type: bool
    """

    use_edit_uv: bool
    """ The modifier affects the UV rotation factor of the point

    :type: bool
    """

    use_keep_shape: bool
    """ Smooth the details, but keep the overall shape

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SubdivGpencilModifier(GpencilModifier, bpy_struct):
    """Subdivide Stroke modifier"""

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    level: int
    """ Number of subdivisions

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    subdivision_type: str
    """ Select type of subdivision algorithm

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureGpencilModifier(GpencilModifier, bpy_struct):
    """Transform stroke texture coordinates Modifier"""

    alignment_rotation: float
    """ Additional rotation applied to dots and square strokes

    :type: float
    """

    fill_offset: mathutils.Vector
    """ Additional offset of the fill UV

    :type: mathutils.Vector
    """

    fill_rotation: float
    """ Additional rotation of the fill UV

    :type: float
    """

    fill_scale: float
    """ Additional scale of the fill UV

    :type: float
    """

    fit_method: str
    """ 

    :type: str
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    mode: str
    """ 

    :type: str
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    uv_offset: float
    """ Offset value to add to stroke UVs

    :type: float
    """

    uv_scale: float
    """ Factor to scale the UVs

    :type: float
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ThickGpencilModifier(GpencilModifier, bpy_struct):
    """Subdivide and Smooth Stroke modifier"""

    curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    thickness: int
    """ Absolute thickness to apply everywhere

    :type: int
    """

    thickness_factor: float
    """ Factor to multiply the thickness with

    :type: float
    """

    use_custom_curve: bool
    """ Use a custom curve to define thickness change along the strokes

    :type: bool
    """

    use_normalized_thickness: bool
    """ Replace the stroke thickness

    :type: bool
    """

    use_weight_factor: bool
    """ Use weight to modulate effect

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TimeGpencilModifier(GpencilModifier, bpy_struct):
    """Time offset modifier"""

    frame_end: int
    """ Final frame of the range

    :type: int
    """

    frame_scale: float
    """ Evaluation time in seconds

    :type: float
    """

    frame_start: int
    """ First frame of the range

    :type: int
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    mode: str
    """ 

    :type: str
    """

    offset: int
    """ Number of frames to offset original keyframe number or frame to fix

    :type: int
    """

    segment_active_index: int
    """ Active index in the segment list

    :type: int
    """

    segments: bpy_prop_collection[TimeGpencilModifierSegment]
    """ 

    :type: bpy_prop_collection[TimeGpencilModifierSegment]
    """

    use_custom_frame_range: bool
    """ Define a custom range of frames to use in modifier

    :type: bool
    """

    use_keep_loop: bool
    """ Retiming end frames and move to start of animation to keep loop

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TintGpencilModifier(GpencilModifier, bpy_struct):
    """Tint modifier"""

    color: mathutils.Color
    """ Color used for tinting

    :type: mathutils.Color
    """

    colors: ColorRamp
    """ Color ramp used to define tinting colors

    :type: ColorRamp
    """

    curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    factor: float
    """ Factor for tinting

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    object: Object
    """ Parent object to define the center of the effect

    :type: Object
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    radius: float
    """ Defines the maximum distance of the effect

    :type: float
    """

    tint_type: str
    """ Select type of tinting algorithm

    :type: str
    """

    use_custom_curve: bool
    """ Use a custom curve to define vertex color effect along the strokes

    :type: bool
    """

    use_weight_factor: bool
    """ Use weight to modulate effect

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    vertex_mode: str
    """ Defines how vertex color affect to the strokes

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WeightAngleGpencilModifier(GpencilModifier, bpy_struct):
    """Calculate Vertex Weight dynamically"""

    angle: float
    """ Angle

    :type: float
    """

    axis: str
    """ 

    :type: str
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    minimum_weight: float
    """ Minimum value for vertex weight

    :type: float
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    space: str
    """ Coordinates space

    :type: str
    """

    target_vertex_group: str
    """ Output Vertex group

    :type: str
    """

    use_invert_output: bool
    """ Invert output weight values

    :type: bool
    """

    use_multiply: bool
    """ Multiply the calculated weights with the existing values in the vertex group

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WeightProxGpencilModifier(GpencilModifier, bpy_struct):
    """Calculate Vertex Weight dynamically"""

    distance_end: float
    """ Distance mapping to 1.0 weight

    :type: float
    """

    distance_start: float
    """ Distance mapping to 0.0 weight

    :type: float
    """

    invert_layer_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_layers: bool
    """ Inverse filter

    :type: bool
    """

    invert_material_pass: bool
    """ Inverse filter

    :type: bool
    """

    invert_materials: bool
    """ Inverse filter

    :type: bool
    """

    invert_vertex: bool
    """ Inverse filter

    :type: bool
    """

    layer: str
    """ Layer name

    :type: str
    """

    layer_pass: int
    """ Layer pass index

    :type: int
    """

    material: Material
    """ Material used for filtering effect

    :type: Material
    """

    minimum_weight: float
    """ Minimum value for vertex weight

    :type: float
    """

    object: Object
    """ Object used as distance reference

    :type: Object
    """

    pass_index: int
    """ Pass index

    :type: int
    """

    target_vertex_group: str
    """ Output Vertex group

    :type: str
    """

    use_invert_output: bool
    """ Invert output weight values

    :type: bool
    """

    use_multiply: bool
    """ Multiply the calculated weights with the existing values in the vertex group

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Action(ID, bpy_struct):
    """A collection of F-Curves for animation"""

    curve_frame_range: mathutils.Vector
    """ The combined frame range of all F-Curves within this action

    :type: mathutils.Vector
    """

    fcurves: ActionFCurves
    """ The individual F-Curves that make up the action

    :type: ActionFCurves
    """

    frame_end: float
    """ The end frame of the manually set intended playback range

    :type: float
    """

    frame_range: mathutils.Vector
    """ The intended playback frame range of this action, using the manually set range if available, or the combined frame range of all F-Curves within this action if not (assigning sets the manual frame range)

    :type: mathutils.Vector
    """

    frame_start: float
    """ The start frame of the manually set intended playback range

    :type: float
    """

    groups: ActionGroups
    """ Convenient groupings of F-Curves

    :type: ActionGroups
    """

    id_root: str
    """ Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING

    :type: str
    """

    pose_markers: ActionPoseMarkers
    """ Markers specific to this action, for labeling poses

    :type: ActionPoseMarkers
    """

    use_cyclic: bool
    """ The action is intended to be used as a cycle looping over its manually set playback frame range (enabling this doesn't automatically make it loop)

    :type: bool
    """

    use_frame_range: bool
    """ Manually specify the intended playback frame range for the action (this range is used by some tools, but does not affect animation evaluation)

    :type: bool
    """

    def flip_with_pose(self, object: Object):
        """Flip the action around the X axis using a pose

        :param object: The reference armature object to use when flipping
        :type object: Object
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Armature(ID, bpy_struct):
    """Armature data-block containing a hierarchy of bones, usually used for rigging characters"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    axes_position: float
    """ The position for the axes on the bone. Increasing the value moves it closer to the tip; decreasing moves it closer to the root

    :type: float
    """

    bones: ArmatureBones
    """ 

    :type: ArmatureBones
    """

    collections: typing.Any
    collections_all: bpy_prop_collection[BoneCollection]
    """ List of all bone collections of the armature

    :type: bpy_prop_collection[BoneCollection]
    """

    display_type: str
    """ 

    :type: str
    """

    edit_bones: ArmatureEditBones
    """ 

    :type: ArmatureEditBones
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    pose_position: str
    """ Show armature in binding pose or final posed state

    :type: str
    """

    relation_line_position: str
    """ The start position of the relation lines from parent to child bones

    :type: str
    """

    show_axes: bool
    """ Display bone axes

    :type: bool
    """

    show_bone_colors: bool
    """ Display bone colors

    :type: bool
    """

    show_bone_custom_shapes: bool
    """ Display bones with their custom shapes

    :type: bool
    """

    show_names: bool
    """ Display bone names

    :type: bool
    """

    use_mirror_x: bool
    """ Apply changes to matching bone on opposite side of X-Axis

    :type: bool
    """

    def transform(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
    ):
        """Transform armature bones by a matrix

        :param matrix: Matrix
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Brush(ID, bpy_struct):
    """Brush data-block for storing brush settings for painting and sculpting"""

    area_radius_factor: float
    """ Ratio between the brush radius and the radius that is going to be used to sample the area center

    :type: float
    """

    auto_smooth_factor: float
    """ Amount of smoothing to automatically apply to each stroke

    :type: float
    """

    automasking_boundary_edges_propagation_steps: int
    """ Distance where boundary edge automasking is going to protect vertices from the fully masked edge

    :type: int
    """

    automasking_cavity_blur_steps: int
    """ The number of times the cavity mask is blurred

    :type: int
    """

    automasking_cavity_curve: CurveMapping
    """ Curve used for the sensitivity

    :type: CurveMapping
    """

    automasking_cavity_factor: float
    """ The contrast of the cavity mask

    :type: float
    """

    automasking_start_normal_falloff: float
    """ Extend the angular range with a falloff gradient

    :type: float
    """

    automasking_start_normal_limit: float
    """ The range of angles that will be affected

    :type: float
    """

    automasking_view_normal_falloff: float
    """ Extend the angular range with a falloff gradient

    :type: float
    """

    automasking_view_normal_limit: float
    """ The range of angles that will be affected

    :type: float
    """

    blend: str
    """ Brush blending mode

    :type: str
    """

    blur_kernel_radius: int
    """ Radius of kernel used for soften and sharpen in pixels

    :type: int
    """

    blur_mode: str
    """ 

    :type: str
    """

    boundary_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    boundary_falloff_type: str
    """ How the brush falloff is applied across the boundary

    :type: str
    """

    boundary_offset: float
    """ Offset of the boundary origin in relation to the brush radius

    :type: float
    """

    brush_capabilities: BrushCapabilities
    """ Brush's capabilities

    :type: BrushCapabilities
    """

    clone_alpha: float
    """ Opacity of clone image display

    :type: float
    """

    clone_image: Image
    """ Image for clone tool

    :type: Image
    """

    clone_offset: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    cloth_constraint_softbody_strength: float
    """ How much the cloth preserves the original shape, acting as a soft body

    :type: float
    """

    cloth_damping: float
    """ How much the applied forces are propagated through the cloth

    :type: float
    """

    cloth_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    cloth_force_falloff_type: str
    """ Shape used in the brush to apply force to the cloth

    :type: str
    """

    cloth_mass: float
    """ Mass of each simulation particle

    :type: float
    """

    cloth_sim_falloff: float
    """ Area to apply deformation falloff to the effects of the simulation

    :type: float
    """

    cloth_sim_limit: float
    """ Factor added relative to the size of the radius to limit the cloth simulation effects

    :type: float
    """

    cloth_simulation_area_type: str
    """ Part of the mesh that is going to be simulated when the stroke is active

    :type: str
    """

    color: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    color_type: str
    """ Use single color or gradient when painting

    :type: str
    """

    crease_pinch_factor: float
    """ How much the crease brush pinches

    :type: float
    """

    cursor_color_add: bpy_prop_array[float]
    """ Color of cursor when adding

    :type: bpy_prop_array[float]
    """

    cursor_color_subtract: bpy_prop_array[float]
    """ Color of cursor when subtracting

    :type: bpy_prop_array[float]
    """

    cursor_overlay_alpha: int
    """ 

    :type: int
    """

    curve: CurveMapping
    """ Editable falloff curve

    :type: CurveMapping
    """

    curve_preset: str
    """ 

    :type: str
    """

    curves_sculpt_settings: BrushCurvesSculptSettings
    """ 

    :type: BrushCurvesSculptSettings
    """

    curves_sculpt_tool: str
    """ 

    :type: str
    """

    dash_ratio: float
    """ Ratio of samples in a cycle that the brush is enabled

    :type: float
    """

    dash_samples: int
    """ Length of a dash cycle measured in stroke samples

    :type: int
    """

    deform_target: str
    """ How the deformation of the brush will affect the object

    :type: str
    """

    density: float
    """ Amount of random elements that are going to be affected by the brush

    :type: float
    """

    direction: str
    """ 

    :type: str
    """

    disconnected_distance_max: float
    """ Maximum distance to search for disconnected loose parts in the mesh

    :type: float
    """

    elastic_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    elastic_deform_volume_preservation: float
    """ Poisson ratio for elastic deformation. Higher values preserve volume more, but also lead to more bulging

    :type: float
    """

    falloff_angle: float
    """ Paint most on faces pointing towards the view according to this angle

    :type: float
    """

    falloff_shape: str
    """ Use projected or spherical falloff

    :type: str
    """

    fill_threshold: float
    """ Threshold above which filling is not propagated

    :type: float
    """

    flow: float
    """ Amount of paint that is applied per stroke sample

    :type: float
    """

    gpencil_sculpt_tool: str
    """ 

    :type: str
    """

    gpencil_settings: BrushGpencilSettings
    """ 

    :type: BrushGpencilSettings
    """

    gpencil_tool: str
    """ 

    :type: str
    """

    gpencil_vertex_tool: str
    """ 

    :type: str
    """

    gpencil_weight_tool: str
    """ 

    :type: str
    """

    grad_spacing: int
    """ Spacing before brush gradient goes full circle

    :type: int
    """

    gradient: ColorRamp
    """ 

    :type: ColorRamp
    """

    gradient_fill_mode: str
    """ 

    :type: str
    """

    gradient_stroke_mode: str
    """ 

    :type: str
    """

    hardness: float
    """ How close the brush falloff starts from the edge of the brush

    :type: float
    """

    height: float
    """ Affectable height of brush (layer height for layer tool, i.e.)

    :type: float
    """

    icon_filepath: str
    """ File path to brush icon

    :type: str
    """

    image_paint_capabilities: BrushCapabilitiesImagePaint
    """ 

    :type: BrushCapabilitiesImagePaint
    """

    image_tool: str
    """ 

    :type: str
    """

    input_samples: int
    """ Number of input samples to average together to smooth the brush stroke

    :type: int
    """

    invert_density_pressure: bool
    """ Invert the modulation of pressure in density

    :type: bool
    """

    invert_flow_pressure: bool
    """ Invert the modulation of pressure in flow

    :type: bool
    """

    invert_hardness_pressure: bool
    """ Invert the modulation of pressure in hardness

    :type: bool
    """

    invert_to_scrape_fill: bool
    """ Use Scrape or Fill tool when inverting this brush instead of inverting its displacement direction

    :type: bool
    """

    invert_wet_mix_pressure: bool
    """ Invert the modulation of pressure in wet mix

    :type: bool
    """

    invert_wet_persistence_pressure: bool
    """ Invert the modulation of pressure in wet persistence

    :type: bool
    """

    jitter: float
    """ Jitter the position of the brush while painting

    :type: float
    """

    jitter_absolute: int
    """ Jitter the position of the brush in pixels while painting

    :type: int
    """

    jitter_unit: str
    """ Jitter in screen space or relative to brush size

    :type: str
    """

    mask_overlay_alpha: int
    """ 

    :type: int
    """

    mask_stencil_dimension: mathutils.Vector
    """ Dimensions of mask stencil in viewport

    :type: mathutils.Vector
    """

    mask_stencil_pos: mathutils.Vector
    """ Position of mask stencil in viewport

    :type: mathutils.Vector
    """

    mask_texture: Texture
    """ 

    :type: Texture
    """

    mask_texture_slot: BrushTextureSlot
    """ 

    :type: BrushTextureSlot
    """

    mask_tool: str
    """ 

    :type: str
    """

    multiplane_scrape_angle: float
    """ Angle between the planes of the crease

    :type: float
    """

    normal_radius_factor: float
    """ Ratio between the brush radius and the radius that is going to be used to sample the normal

    :type: float
    """

    normal_weight: float
    """ How much grab will pull vertices out of surface during a grab

    :type: float
    """

    paint_curve: PaintCurve
    """ Active paint curve

    :type: PaintCurve
    """

    plane_offset: float
    """ Adjust plane on which the brush acts towards or away from the object surface

    :type: float
    """

    plane_trim: float
    """ If a vertex is further away from offset plane than this, then it is not affected

    :type: float
    """

    pose_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    pose_ik_segments: int
    """ Number of segments of the inverse kinematics chain that will deform the mesh

    :type: int
    """

    pose_offset: float
    """ Offset of the pose origin in relation to the brush radius

    :type: float
    """

    pose_origin_type: str
    """ Method to set the rotation origins for the segments of the brush

    :type: str
    """

    pose_smooth_iterations: int
    """ Smooth iterations applied after calculating the pose factor of each vertex

    :type: int
    """

    rake_factor: float
    """ How much grab will follow cursor rotation

    :type: float
    """

    rate: float
    """ Interval between paints for Airbrush

    :type: float
    """

    sculpt_capabilities: BrushCapabilitiesSculpt
    """ 

    :type: BrushCapabilitiesSculpt
    """

    sculpt_plane: str
    """ 

    :type: str
    """

    sculpt_tool: str
    """ 

    :type: str
    """

    secondary_color: mathutils.Color
    """ 

    :type: mathutils.Color
    """

    sharp_threshold: float
    """ Threshold below which, no sharpening is done

    :type: float
    """

    show_multiplane_scrape_planes_preview: bool
    """ Preview the scrape planes in the cursor during the stroke

    :type: bool
    """

    size: int
    """ Radius of the brush in pixels

    :type: int
    """

    slide_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    smear_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    smooth_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    smooth_stroke_factor: float
    """ Higher values give a smoother stroke

    :type: float
    """

    smooth_stroke_radius: int
    """ Minimum distance from last point before stroke continues

    :type: int
    """

    snake_hook_deform_type: str
    """ Deformation type that is used in the brush

    :type: str
    """

    spacing: int
    """ Spacing between brush daubs as a percentage of brush diameter

    :type: int
    """

    stencil_dimension: mathutils.Vector
    """ Dimensions of stencil in viewport

    :type: mathutils.Vector
    """

    stencil_pos: mathutils.Vector
    """ Position of stencil in viewport

    :type: mathutils.Vector
    """

    strength: float
    """ How powerful the effect of the brush is when applied

    :type: float
    """

    stroke_method: str
    """ 

    :type: str
    """

    surface_smooth_current_vertex: float
    """ How much the position of each individual vertex influences the final result

    :type: float
    """

    surface_smooth_iterations: int
    """ Number of smoothing iterations per brush step

    :type: int
    """

    surface_smooth_shape_preservation: float
    """ How much of the original shape is preserved when smoothing

    :type: float
    """

    texture: Texture
    """ 

    :type: Texture
    """

    texture_overlay_alpha: int
    """ 

    :type: int
    """

    texture_sample_bias: float
    """ Value added to texture samples

    :type: float
    """

    texture_slot: BrushTextureSlot
    """ 

    :type: BrushTextureSlot
    """

    tilt_strength_factor: float
    """ How much the tilt of the pen will affect the brush

    :type: float
    """

    tip_roundness: float
    """ Roundness of the brush tip

    :type: float
    """

    tip_scale_x: float
    """ Scale of the brush tip in the X axis

    :type: float
    """

    topology_rake_factor: float
    """ Automatically align edges to the brush direction to generate cleaner topology and define sharp features. Best used on low-poly meshes as it has a performance impact

    :type: float
    """

    unprojected_radius: float
    """ Radius of brush in Blender units

    :type: float
    """

    use_accumulate: bool
    """ Accumulate stroke daubs on top of each other

    :type: bool
    """

    use_adaptive_space: bool
    """ Space daubs according to surface orientation instead of screen space

    :type: bool
    """

    use_airbrush: bool
    """ Keep applying paint effect while holding mouse (spray)

    :type: bool
    """

    use_alpha: bool
    """ When this is disabled, lock alpha while painting

    :type: bool
    """

    use_anchor: bool
    """ Keep the brush anchored to the initial location

    :type: bool
    """

    use_automasking_boundary_edges: bool
    """ Do not affect non manifold boundary edges

    :type: bool
    """

    use_automasking_boundary_face_sets: bool
    """ Do not affect vertices that belong to a Face Set boundary

    :type: bool
    """

    use_automasking_cavity: bool
    """ Do not affect vertices on peaks, based on the surface curvature

    :type: bool
    """

    use_automasking_cavity_inverted: bool
    """ Do not affect vertices within crevices, based on the surface curvature

    :type: bool
    """

    use_automasking_custom_cavity_curve: bool
    """ Use custom curve

    :type: bool
    """

    use_automasking_face_sets: bool
    """ Affect only vertices that share Face Sets with the active vertex

    :type: bool
    """

    use_automasking_start_normal: bool
    """ Affect only vertices with a similar normal to where the stroke starts

    :type: bool
    """

    use_automasking_topology: bool
    """ Affect only vertices connected to the active vertex under the brush

    :type: bool
    """

    use_automasking_view_normal: bool
    """ Affect only vertices with a normal that faces the viewer

    :type: bool
    """

    use_automasking_view_occlusion: bool
    """ Only affect vertices that are not occluded by other faces. (Slower performance)

    :type: bool
    """

    use_cloth_collision: bool
    """ Collide with objects during the simulation

    :type: bool
    """

    use_cloth_pin_simulation_boundary: bool
    """ Lock the position of the vertices in the simulation falloff area to avoid artifacts and create a softer transition with unaffected areas

    :type: bool
    """

    use_color_as_displacement: bool
    """ Handles each pixel color as individual vector for displacement. Works only with area plane mapping

    :type: bool
    """

    use_connected_only: bool
    """ Affect only topologically connected elements

    :type: bool
    """

    use_cursor_overlay: bool
    """ Show cursor in viewport

    :type: bool
    """

    use_cursor_overlay_override: bool
    """ Don't show overlay during a stroke

    :type: bool
    """

    use_curve: bool
    """ Define the stroke curve with a Bézier curve. Dabs are separated according to spacing

    :type: bool
    """

    use_custom_icon: bool
    """ Set the brush icon from an image file

    :type: bool
    """

    use_density_pressure: bool
    """ Use pressure to modulate density

    :type: bool
    """

    use_edge_to_edge: bool
    """ Drag anchor brush from edge-to-edge

    :type: bool
    """

    use_flow_pressure: bool
    """ Use pressure to modulate flow

    :type: bool
    """

    use_frontface: bool
    """ Brush only affects vertices that face the viewer

    :type: bool
    """

    use_frontface_falloff: bool
    """ Blend brush influence by how much they face the front

    :type: bool
    """

    use_grab_active_vertex: bool
    """ Apply the maximum grab strength to the active vertex instead of the cursor location

    :type: bool
    """

    use_grab_silhouette: bool
    """ Grabs trying to automask the silhouette of the object

    :type: bool
    """

    use_hardness_pressure: bool
    """ Use pressure to modulate hardness

    :type: bool
    """

    use_inverse_smooth_pressure: bool
    """ Lighter pressure causes more smoothing to be applied

    :type: bool
    """

    use_line: bool
    """ Draw a line with dabs separated according to spacing

    :type: bool
    """

    use_locked_size: str
    """ Measure brush size relative to the view or the scene

    :type: str
    """

    use_multiplane_scrape_dynamic: bool
    """ The angle between the planes changes during the stroke to fit the surface under the cursor

    :type: bool
    """

    use_offset_pressure: bool
    """ Enable tablet pressure sensitivity for offset

    :type: bool
    """

    use_original_normal: bool
    """ When locked keep using normal of surface where stroke was initiated

    :type: bool
    """

    use_original_plane: bool
    """ When locked keep using the plane origin of surface where stroke was initiated

    :type: bool
    """

    use_paint_antialiasing: bool
    """ Smooths the edges of the strokes

    :type: bool
    """

    use_paint_grease_pencil: bool
    """ Use this brush in grease pencil drawing mode

    :type: bool
    """

    use_paint_image: bool
    """ Use this brush in texture paint mode

    :type: bool
    """

    use_paint_sculpt: bool
    """ Use this brush in sculpt mode

    :type: bool
    """

    use_paint_sculpt_curves: bool
    """ Use this brush in sculpt curves mode

    :type: bool
    """

    use_paint_uv_sculpt: bool
    """ Use this brush in UV sculpt mode

    :type: bool
    """

    use_paint_vertex: bool
    """ Use this brush in vertex paint mode

    :type: bool
    """

    use_paint_weight: bool
    """ Use this brush in weight paint mode

    :type: bool
    """

    use_persistent: bool
    """ Sculpt on a persistent layer of the mesh

    :type: bool
    """

    use_plane_trim: bool
    """ Limit the distance from the offset plane that a vertex can be affected

    :type: bool
    """

    use_pose_ik_anchored: bool
    """ Keep the position of the last segment in the IK chain fixed

    :type: bool
    """

    use_pose_lock_rotation: bool
    """ Do not rotate the segment when using the scale deform mode

    :type: bool
    """

    use_pressure_area_radius: bool
    """ Enable tablet pressure sensitivity for area radius

    :type: bool
    """

    use_pressure_jitter: bool
    """ Enable tablet pressure sensitivity for jitter

    :type: bool
    """

    use_pressure_masking: str
    """ Pen pressure makes texture influence smaller

    :type: str
    """

    use_pressure_size: bool
    """ Enable tablet pressure sensitivity for size

    :type: bool
    """

    use_pressure_spacing: bool
    """ Enable tablet pressure sensitivity for spacing

    :type: bool
    """

    use_pressure_strength: bool
    """ Enable tablet pressure sensitivity for strength

    :type: bool
    """

    use_primary_overlay: bool
    """ Show texture in viewport

    :type: bool
    """

    use_primary_overlay_override: bool
    """ Don't show overlay during a stroke

    :type: bool
    """

    use_restore_mesh: bool
    """ Allow a single dot to be carefully positioned

    :type: bool
    """

    use_scene_spacing: str
    """ Calculate the brush spacing using view or scene distance

    :type: str
    """

    use_secondary_overlay: bool
    """ Show texture in viewport

    :type: bool
    """

    use_secondary_overlay_override: bool
    """ Don't show overlay during a stroke

    :type: bool
    """

    use_smooth_stroke: bool
    """ Brush lags behind mouse and follows a smoother path

    :type: bool
    """

    use_space: bool
    """ Limit brush application to the distance specified by spacing

    :type: bool
    """

    use_space_attenuation: bool
    """ Automatically adjust strength to give consistent results for different spacings

    :type: bool
    """

    use_vertex_grease_pencil: bool
    """ Use this brush in grease pencil vertex color mode

    :type: bool
    """

    use_wet_mix_pressure: bool
    """ Use pressure to modulate wet mix

    :type: bool
    """

    use_wet_persistence_pressure: bool
    """ Use pressure to modulate wet persistence

    :type: bool
    """

    uv_sculpt_tool: str
    """ 

    :type: str
    """

    vertex_paint_capabilities: BrushCapabilitiesVertexPaint
    """ 

    :type: BrushCapabilitiesVertexPaint
    """

    vertex_tool: str
    """ 

    :type: str
    """

    weight: float
    """ Vertex weight when brush is applied

    :type: float
    """

    weight_paint_capabilities: BrushCapabilitiesWeightPaint
    """ 

    :type: BrushCapabilitiesWeightPaint
    """

    weight_tool: str
    """ 

    :type: str
    """

    wet_mix: float
    """ Amount of paint that is picked from the surface into the brush color

    :type: float
    """

    wet_paint_radius_factor: float
    """ Ratio between the brush radius and the radius that is going to be used to sample the color to blend in wet paint

    :type: float
    """

    wet_persistence: float
    """ Amount of wet paint that stays in the brush after applying paint to the surface

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CacheFile(ID, bpy_struct):
    active_index: int | None
    """ 

    :type: int | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    filepath: str
    """ Path to external displacements file

    :type: str
    """

    forward_axis: str
    """ 

    :type: str
    """

    frame: float
    """ The time to use for looking up the data in the cache file, or to determine which file to use in a file sequence

    :type: float
    """

    frame_offset: float
    """ Subtracted from the current frame to use for looking up the data in the cache file, or to determine which file to use in a file sequence

    :type: float
    """

    is_sequence: bool
    """ Whether the cache is separated in a series of files

    :type: bool
    """

    layers: CacheFileLayers
    """ Layers of the cache

    :type: CacheFileLayers
    """

    object_paths: CacheObjectPaths
    """ Paths of the objects inside the Alembic archive

    :type: CacheObjectPaths
    """

    override_frame: bool
    """ Whether to use a custom frame for looking up data in the cache file, instead of using the current scene frame

    :type: bool
    """

    prefetch_cache_size: int
    """ Memory usage limit in megabytes for the Cycles Procedural cache, if the data does not fit within the limit, rendering is aborted

    :type: int
    """

    scale: float
    """ Value by which to enlarge or shrink the object with respect to the world's origin (only applicable through a Transform Cache constraint)

    :type: float
    """

    up_axis: str
    """ 

    :type: str
    """

    use_prefetch: bool
    """ When enabled, the Cycles Procedural will preload animation data for faster updates

    :type: bool
    """

    use_render_procedural: bool
    """ Display boxes in the viewport as placeholders for the objects, Cycles will use a procedural to load the objects during viewport rendering in experimental mode, other render engines will also receive a placeholder and should take care of loading the Alembic data themselves if possible

    :type: bool
    """

    velocity_name: str
    """ Name of the Alembic attribute used for generating motion blur data

    :type: str
    """

    velocity_unit: str
    """ Define how the velocity vectors are interpreted with regard to time, 'frame' means the delta time is 1 frame, 'second' means the delta time is 1 / FPS

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Camera(ID, bpy_struct):
    """Camera data-block for storing camera settings"""

    angle: float
    """ Camera lens field of view

    :type: float
    """

    angle_x: float
    """ Camera lens horizontal field of view

    :type: float
    """

    angle_y: float
    """ Camera lens vertical field of view

    :type: float
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    background_images: CameraBackgroundImages
    """ List of background images

    :type: CameraBackgroundImages
    """

    clip_end: float
    """ Camera far clipping distance

    :type: float
    """

    clip_start: float
    """ Camera near clipping distance

    :type: float
    """

    display_size: float
    """ Apparent size of the Camera object in the 3D View

    :type: float
    """

    dof: CameraDOFSettings
    """ 

    :type: CameraDOFSettings
    """

    fisheye_fov: float
    """ Field of view for the fisheye lens

    :type: float
    """

    fisheye_lens: float
    """ Lens focal length (mm)

    :type: float
    """

    fisheye_polynomial_k0: float
    """ Coefficient K0 of the lens polynomial

    :type: float
    """

    fisheye_polynomial_k1: float
    """ Coefficient K1 of the lens polynomial

    :type: float
    """

    fisheye_polynomial_k2: float
    """ Coefficient K2 of the lens polynomial

    :type: float
    """

    fisheye_polynomial_k3: float
    """ Coefficient K3 of the lens polynomial

    :type: float
    """

    fisheye_polynomial_k4: float
    """ Coefficient K4 of the lens polynomial

    :type: float
    """

    latitude_max: float
    """ Maximum latitude (vertical angle) for the equirectangular lens

    :type: float
    """

    latitude_min: float
    """ Minimum latitude (vertical angle) for the equirectangular lens

    :type: float
    """

    lens: float
    """ Perspective Camera focal length value in millimeters

    :type: float
    """

    lens_unit: str
    """ Unit to edit lens in for the user interface

    :type: str
    """

    longitude_max: float
    """ Maximum longitude (horizontal angle) for the equirectangular lens

    :type: float
    """

    longitude_min: float
    """ Minimum longitude (horizontal angle) for the equirectangular lens

    :type: float
    """

    ortho_scale: float
    """ Orthographic Camera scale (similar to zoom)

    :type: float
    """

    panorama_type: str
    """ Distortion to use for the calculation

    :type: str
    """

    passepartout_alpha: float
    """ Opacity (alpha) of the darkened overlay in Camera view

    :type: float
    """

    sensor_fit: str
    """ Method to fit image and field of view angle inside the sensor

    :type: str
    """

    sensor_height: float
    """ Vertical size of the image sensor area in millimeters

    :type: float
    """

    sensor_width: float
    """ Horizontal size of the image sensor area in millimeters

    :type: float
    """

    shift_x: float
    """ Camera horizontal shift

    :type: float
    """

    shift_y: float
    """ Camera vertical shift

    :type: float
    """

    show_background_images: bool
    """ Display reference images behind objects in the 3D View

    :type: bool
    """

    show_composition_center: bool
    """ Display center composition guide inside the camera view

    :type: bool
    """

    show_composition_center_diagonal: bool
    """ Display diagonal center composition guide inside the camera view

    :type: bool
    """

    show_composition_golden: bool
    """ Display golden ratio composition guide inside the camera view

    :type: bool
    """

    show_composition_golden_tria_a: bool
    """ Display golden triangle A composition guide inside the camera view

    :type: bool
    """

    show_composition_golden_tria_b: bool
    """ Display golden triangle B composition guide inside the camera view

    :type: bool
    """

    show_composition_harmony_tri_a: bool
    """ Display harmony A composition guide inside the camera view

    :type: bool
    """

    show_composition_harmony_tri_b: bool
    """ Display harmony B composition guide inside the camera view

    :type: bool
    """

    show_composition_thirds: bool
    """ Display rule of thirds composition guide inside the camera view

    :type: bool
    """

    show_limits: bool
    """ Display the clipping range and focus point on the camera

    :type: bool
    """

    show_mist: bool
    """ Display a line from the Camera to indicate the mist area

    :type: bool
    """

    show_name: bool
    """ Show the active Camera's name in Camera view

    :type: bool
    """

    show_passepartout: bool
    """ Show a darkened overlay outside the image area in Camera view

    :type: bool
    """

    show_safe_areas: bool
    """ Show TV title safe and action safe areas in Camera view

    :type: bool
    """

    show_safe_center: bool
    """ Show safe areas to fit content in a different aspect ratio

    :type: bool
    """

    show_sensor: bool
    """ Show sensor size (film gate) in Camera view

    :type: bool
    """

    stereo: CameraStereoData
    """ 

    :type: CameraStereoData
    """

    type: str
    """ Camera types

    :type: str
    """

    def view_frame(self, scene: Scene | None = None):
        """Return 4 points for the cameras frame (before object transformation)

                :param scene: Scene to use for aspect calculation, when omitted 1:1 aspect is used
                :type scene: Scene | None
                :return: result_1, Result, `mathutils.Vector` of 3 items in [-inf, inf]

        result_2, Result, `mathutils.Vector` of 3 items in [-inf, inf]

        result_3, Result, `mathutils.Vector` of 3 items in [-inf, inf]

        result_4, Result, `mathutils.Vector` of 3 items in [-inf, inf]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Collection(ID, bpy_struct):
    """Collection of Object data-blocks"""

    all_objects: bpy_prop_collection[Object]
    """ Objects that are in this collection and its child collections

    :type: bpy_prop_collection[Object]
    """

    children: CollectionChildren
    """ Collections that are immediate children of this collection

    :type: CollectionChildren
    """

    collection_children: bpy_prop_collection[CollectionChild]
    """ Children collections their parent-collection-specific settings

    :type: bpy_prop_collection[CollectionChild]
    """

    collection_objects: bpy_prop_collection[CollectionObject]
    """ Objects of the collection with their parent-collection-specific settings

    :type: bpy_prop_collection[CollectionObject]
    """

    color_tag: str
    """ Color tag for a collection

    :type: str
    """

    hide_render: bool
    """ Globally disable in renders

    :type: bool
    """

    hide_select: bool
    """ Disable selection in viewport

    :type: bool
    """

    hide_viewport: bool
    """ Globally disable in viewports

    :type: bool
    """

    instance_offset: mathutils.Vector
    """ Offset from the origin to use when instancing

    :type: mathutils.Vector
    """

    lineart_intersection_mask: list[bool]
    """ Intersection generated by this collection will have this mask value

    :type: list[bool]
    """

    lineart_intersection_priority: int
    """ The intersection line will be included into the object with the higher intersection priority value

    :type: int
    """

    lineart_usage: str
    """ How to use this collection in line art

    :type: str
    """

    lineart_use_intersection_mask: bool
    """ Use custom intersection mask for faces in this collection

    :type: bool
    """

    objects: CollectionObjects
    """ Objects that are directly in this collection

    :type: CollectionObjects
    """

    use_lineart_intersection_priority: bool
    """ Assign intersection priority value for this collection

    :type: bool
    """

    children_recursive: typing.Any
    """ A list of all children from this collection.(readonly)"""

    users_dupli_group: typing.Any
    """ The collection instance objects this collection is used in(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Curve(ID, bpy_struct):
    """Curve data-block storing curves, splines and NURBS"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    bevel_depth: float
    """ Radius of the bevel geometry, not including extrusion

    :type: float
    """

    bevel_factor_end: float
    """ Define where along the spline the curve geometry ends (0 for the beginning, 1 for the end)

    :type: float
    """

    bevel_factor_mapping_end: str
    """ Determine how the geometry end factor is mapped to a spline

    :type: str
    """

    bevel_factor_mapping_start: str
    """ Determine how the geometry start factor is mapped to a spline

    :type: str
    """

    bevel_factor_start: float
    """ Define where along the spline the curve geometry starts (0 for the beginning, 1 for the end)

    :type: float
    """

    bevel_mode: str
    """ Determine how to build the curve's bevel geometry

    :type: str
    """

    bevel_object: Object
    """ The name of the Curve object that defines the bevel shape

    :type: Object
    """

    bevel_profile: CurveProfile
    """ The path for the curve's custom profile

    :type: CurveProfile
    """

    bevel_resolution: int
    """ The number of segments in each quarter-circle of the bevel

    :type: int
    """

    cycles: typing.Any
    """ Cycles mesh settings

    :type: typing.Any
    """

    dimensions: str
    """ Select 2D or 3D curve type

    :type: str
    """

    eval_time: float
    """ Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)

    :type: float
    """

    extrude: float
    """ Length of the depth added in the local Z direction along the curve, perpendicular to its normals

    :type: float
    """

    fill_mode: str
    """ Mode of filling curve

    :type: str
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    offset: float
    """ Distance to move the curve parallel to its normals

    :type: float
    """

    path_duration: int
    """ The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting

    :type: int
    """

    render_resolution_u: int
    """ Surface resolution in U direction used while rendering (zero uses preview resolution)

    :type: int
    """

    render_resolution_v: int
    """ Surface resolution in V direction used while rendering (zero uses preview resolution)

    :type: int
    """

    resolution_u: int
    """ Number of computed points in the U direction between every pair of control points

    :type: int
    """

    resolution_v: int
    """ The number of computed points in the V direction between every pair of control points

    :type: int
    """

    shape_keys: Key
    """ 

    :type: Key
    """

    splines: CurveSplines
    """ Collection of splines in this curve data object

    :type: CurveSplines
    """

    taper_object: Object
    """ Curve object name that defines the taper (width)

    :type: Object
    """

    taper_radius_mode: str
    """ Determine how the effective radius of the spline point is computed when a taper object is specified

    :type: str
    """

    texspace_location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    texspace_size: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    twist_mode: str
    """ The type of tilt calculation for 3D Curves

    :type: str
    """

    twist_smooth: float
    """ Smoothing iteration for tangents

    :type: float
    """

    use_auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    use_deform_bounds: bool
    """ Option for curve-deform: Use the mesh bounds to clamp the deformation

    :type: bool
    """

    use_fill_caps: bool
    """ Fill caps for beveled curves

    :type: bool
    """

    use_map_taper: bool
    """ Map effect of the taper object to the beveled part of the curve

    :type: bool
    """

    use_path: bool
    """ Enable the curve to become a translation path

    :type: bool
    """

    use_path_clamp: bool
    """ Clamp the curve path children so they can't travel past the start/end point of the curve

    :type: bool
    """

    use_path_follow: bool
    """ Make curve path children rotate along the path

    :type: bool
    """

    use_radius: bool
    """ Option for paths and curve-deform: apply the curve radius to objects following it and to deformed objects

    :type: bool
    """

    use_stretch: bool
    """ Option for curve-deform: make deformed child stretch along entire path

    :type: bool
    """

    def transform(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        shape_keys: bool | typing.Any | None = False,
    ):
        """Transform curve by a matrix

        :param matrix: Matrix
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool | typing.Any | None
        """
        ...

    def validate_material_indices(self) -> bool:
        """Validate material indices of splines or letters, return True when the curve has had invalid indices corrected (to default 0)

        :return: Result
        :rtype: bool
        """
        ...

    def update_gpu_tag(self):
        """update_gpu_tag"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Curves(ID, bpy_struct):
    """Hair data-block for hair curves"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    attributes: AttributeGroup
    """ Geometry attributes

    :type: AttributeGroup
    """

    color_attributes: AttributeGroup
    """ Geometry color attributes

    :type: AttributeGroup
    """

    curve_offset_data: bpy_prop_collection[IntAttributeValue]
    """ 

    :type: bpy_prop_collection[IntAttributeValue]
    """

    curves: bpy_prop_collection[CurveSlice]
    """ All curves in the data-block

    :type: bpy_prop_collection[CurveSlice]
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    normals: bpy_prop_collection[FloatVectorValueReadOnly]
    """ The curve normal value at each of the curve's control points

    :type: bpy_prop_collection[FloatVectorValueReadOnly]
    """

    points: bpy_prop_collection[CurvePoint]
    """ Control points of all curves

    :type: bpy_prop_collection[CurvePoint]
    """

    position_data: bpy_prop_collection[FloatVectorAttributeValue]
    """ 

    :type: bpy_prop_collection[FloatVectorAttributeValue]
    """

    selection_domain: str
    """ 

    :type: str
    """

    surface: Object
    """ Mesh object that the curves can be attached to

    :type: Object
    """

    surface_uv_map: str
    """ The name of the attribute on the surface mesh used to define the attachment of each curve

    :type: str
    """

    use_mirror_x: bool
    """ Enable symmetry in the X axis

    :type: bool
    """

    use_mirror_y: bool
    """ Enable symmetry in the Y axis

    :type: bool
    """

    use_mirror_z: bool
    """ Enable symmetry in the Z axis

    :type: bool
    """

    use_sculpt_collision: bool
    """ Enable collision with the surface while sculpting

    :type: bool
    """

    def add_curves(self, sizes: collections.abc.Iterable[int] | None):
        """add_curves

        :param sizes: Sizes, The number of points in each curve
        :type sizes: collections.abc.Iterable[int] | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FreestyleLineStyle(ID, bpy_struct):
    """Freestyle line style, reusable by multiple line sets"""

    active_texture: Texture | None
    """ Active texture slot being displayed

    :type: Texture | None
    """

    active_texture_index: int | None
    """ Index of active texture slot

    :type: int | None
    """

    alpha: float
    """ Base alpha transparency, possibly modified by alpha transparency modifiers

    :type: float
    """

    alpha_modifiers: LineStyleAlphaModifiers
    """ List of alpha transparency modifiers

    :type: LineStyleAlphaModifiers
    """

    angle_max: float
    """ Maximum 2D angle for splitting chains

    :type: float
    """

    angle_min: float
    """ Minimum 2D angle for splitting chains

    :type: float
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    caps: str
    """ Select the shape of both ends of strokes

    :type: str
    """

    chain_count: int
    """ Chain count for the selection of first N chains

    :type: int
    """

    chaining: str
    """ Select the way how feature edges are jointed to form chains

    :type: str
    """

    color: mathutils.Color
    """ Base line color, possibly modified by line color modifiers

    :type: mathutils.Color
    """

    color_modifiers: LineStyleColorModifiers
    """ List of line color modifiers

    :type: LineStyleColorModifiers
    """

    dash1: int
    """ Length of the 1st dash for dashed lines

    :type: int
    """

    dash2: int
    """ Length of the 2nd dash for dashed lines

    :type: int
    """

    dash3: int
    """ Length of the 3rd dash for dashed lines

    :type: int
    """

    gap1: int
    """ Length of the 1st gap for dashed lines

    :type: int
    """

    gap2: int
    """ Length of the 2nd gap for dashed lines

    :type: int
    """

    gap3: int
    """ Length of the 3rd gap for dashed lines

    :type: int
    """

    geometry_modifiers: LineStyleGeometryModifiers
    """ List of stroke geometry modifiers

    :type: LineStyleGeometryModifiers
    """

    integration_type: str
    """ Select the way how the sort key is computed for each chain

    :type: str
    """

    length_max: float
    """ Maximum curvilinear 2D length for the selection of chains

    :type: float
    """

    length_min: float
    """ Minimum curvilinear 2D length for the selection of chains

    :type: float
    """

    material_boundary: bool
    """ If true, chains of feature edges are split at material boundaries

    :type: bool
    """

    node_tree: NodeTree
    """ Node tree for node-based shaders

    :type: NodeTree
    """

    panel: str
    """ Select the property panel to be shown

    :type: str
    """

    rounds: int
    """ Number of rounds in a sketchy multiple touch

    :type: int
    """

    sort_key: str
    """ Select the sort key to determine the stacking order of chains

    :type: str
    """

    sort_order: str
    """ Select the sort order

    :type: str
    """

    split_dash1: int
    """ Length of the 1st dash for splitting

    :type: int
    """

    split_dash2: int
    """ Length of the 2nd dash for splitting

    :type: int
    """

    split_dash3: int
    """ Length of the 3rd dash for splitting

    :type: int
    """

    split_gap1: int
    """ Length of the 1st gap for splitting

    :type: int
    """

    split_gap2: int
    """ Length of the 2nd gap for splitting

    :type: int
    """

    split_gap3: int
    """ Length of the 3rd gap for splitting

    :type: int
    """

    split_length: float
    """ Curvilinear 2D length for chain splitting

    :type: float
    """

    texture_slots: LineStyleTextureSlots
    """ Texture slots defining the mapping and influence of textures

    :type: LineStyleTextureSlots
    """

    texture_spacing: float
    """ Spacing for textures along stroke length

    :type: float
    """

    thickness: float
    """ Base line thickness, possibly modified by line thickness modifiers

    :type: float
    """

    thickness_modifiers: LineStyleThicknessModifiers
    """ List of line thickness modifiers

    :type: LineStyleThicknessModifiers
    """

    thickness_position: str
    """ Thickness position of silhouettes and border edges (applicable when plain chaining is used with the Same Object option)

    :type: str
    """

    thickness_ratio: float
    """ A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness

    :type: float
    """

    use_angle_max: bool
    """ Split chains at points with angles larger than the maximum 2D angle

    :type: bool
    """

    use_angle_min: bool
    """ Split chains at points with angles smaller than the minimum 2D angle

    :type: bool
    """

    use_chain_count: bool
    """ Enable the selection of first N chains

    :type: bool
    """

    use_chaining: bool
    """ Enable chaining of feature edges

    :type: bool
    """

    use_dashed_line: bool
    """ Enable or disable dashed line

    :type: bool
    """

    use_length_max: bool
    """ Enable the selection of chains by a maximum 2D length

    :type: bool
    """

    use_length_min: bool
    """ Enable the selection of chains by a minimum 2D length

    :type: bool
    """

    use_nodes: bool
    """ Use shader nodes for the line style

    :type: bool
    """

    use_same_object: bool
    """ If true, only feature edges of the same object are joined

    :type: bool
    """

    use_sorting: bool
    """ Arrange the stacking order of strokes

    :type: bool
    """

    use_split_length: bool
    """ Enable chain splitting by curvilinear 2D length

    :type: bool
    """

    use_split_pattern: bool
    """ Enable chain splitting by dashed line patterns

    :type: bool
    """

    use_texture: bool
    """ Enable or disable textured strokes

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencil(ID, bpy_struct):
    """Freehand annotation sketchbook"""

    after_color: mathutils.Color
    """ Base color for ghosts after the active frame

    :type: mathutils.Color
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    before_color: mathutils.Color
    """ Base color for ghosts before the active frame

    :type: mathutils.Color
    """

    curve_edit_corner_angle: float
    """ Angles above this are considered corners

    :type: float
    """

    curve_edit_threshold: float
    """ Curve conversion error threshold

    :type: float
    """

    edit_curve_resolution: int
    """ Number of segments generated between control points when editing strokes in curve mode

    :type: int
    """

    edit_line_color: bpy_prop_array[float]
    """ Color for editing line

    :type: bpy_prop_array[float]
    """

    ghost_after_range: int
    """ Maximum number of frames to show after current frame (0 = don't show any frames after current)

    :type: int
    """

    ghost_before_range: int
    """ Maximum number of frames to show before current frame (0 = don't show any frames before current)

    :type: int
    """

    grid: GreasePencilGrid
    """ Settings for grid and canvas in the 3D viewport

    :type: GreasePencilGrid
    """

    is_annotation: bool
    """ Current data-block is an annotation

    :type: bool
    """

    is_stroke_paint_mode: bool
    """ Draw Grease Pencil strokes on click/drag

    :type: bool
    """

    is_stroke_sculpt_mode: bool
    """ Sculpt Grease Pencil strokes instead of viewport data

    :type: bool
    """

    is_stroke_vertex_mode: bool
    """ Grease Pencil vertex paint

    :type: bool
    """

    is_stroke_weight_mode: bool
    """ Grease Pencil weight paint

    :type: bool
    """

    layers: GreasePencilLayers
    """ 

    :type: GreasePencilLayers
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    onion_factor: float
    """ Change fade opacity of displayed onion frames

    :type: float
    """

    onion_keyframe_type: str
    """ Type of keyframe (for filtering)

    :type: str
    """

    onion_mode: str
    """ Mode to display frames

    :type: str
    """

    pixel_factor: float
    """ Scale conversion factor for pixel size (use larger values for thicker lines)

    :type: float
    """

    stroke_depth_order: str
    """ Defines how the strokes are ordered in 3D space (for objects not displayed 'In Front')

    :type: str
    """

    stroke_thickness_space: str
    """ Set stroke thickness in screen space or world space

    :type: str
    """

    use_adaptive_curve_resolution: bool
    """ Set the resolution of each editcurve segment dynamically depending on the length of the segment. The resolution is the number of points generated per unit distance

    :type: bool
    """

    use_autolock_layers: bool
    """ Automatically lock all layers except the active one to avoid accidental changes

    :type: bool
    """

    use_curve_edit: bool
    """ Edit strokes using curve handles

    :type: bool
    """

    use_ghost_custom_colors: bool
    """ Use custom colors for ghost frames

    :type: bool
    """

    use_ghosts_always: bool
    """ Ghosts are shown in renders and animation playback. Useful for special effects (e.g. motion blur)

    :type: bool
    """

    use_multiedit: bool
    """ Edit strokes from multiple grease pencil keyframes at the same time (keyframes must be selected to be included)

    :type: bool
    """

    use_onion_fade: bool
    """ Display onion keyframes with a fade in color transparency

    :type: bool
    """

    use_onion_loop: bool
    """ Display onion keyframes for looping animations

    :type: bool
    """

    use_onion_skinning: bool
    """ Show ghosts of the keyframes before and after the current frame

    :type: bool
    """

    use_stroke_edit_mode: bool
    """ Edit Grease Pencil strokes instead of viewport data

    :type: bool
    """

    zdepth_offset: float
    """ Offset amount when drawing in surface mode

    :type: float
    """

    def clear(self):
        """Remove all the Grease Pencil data"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Image(ID, bpy_struct):
    """Image data-block referencing an external or packed image"""

    alpha_mode: str
    """ Representation of alpha in the image file, to convert to and from when saving and loading the image

    :type: str
    """

    bindcode: int
    """ OpenGL bindcode

    :type: int
    """

    channels: int
    """ Number of channels in pixels buffer

    :type: int
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    depth: int
    """ Image bit depth

    :type: int
    """

    display_aspect: mathutils.Vector
    """ Display Aspect for this image, does not affect rendering

    :type: mathutils.Vector
    """

    file_format: str
    """ Format used for re-saving this file

    :type: str
    """

    filepath: str
    """ Image/Movie file name

    :type: str
    """

    filepath_raw: str
    """ Image/Movie file name (without data refreshing)

    :type: str
    """

    frame_duration: int
    """ Duration (in frames) of the image (1 when not a video/sequence)

    :type: int
    """

    generated_color: bpy_prop_array[float]
    """ Fill color for the generated image

    :type: bpy_prop_array[float]
    """

    generated_height: int
    """ Generated image height

    :type: int
    """

    generated_type: str
    """ Generated image type

    :type: str
    """

    generated_width: int
    """ Generated image width

    :type: int
    """

    has_data: bool
    """ True if the image data is loaded into memory

    :type: bool
    """

    is_dirty: bool
    """ Image has changed and is not saved

    :type: bool
    """

    is_float: bool
    """ True if this image is stored in floating-point buffer

    :type: bool
    """

    is_multiview: bool
    """ Image has more than one view

    :type: bool
    """

    is_stereo_3d: bool
    """ Image has left and right views

    :type: bool
    """

    packed_file: PackedFile
    """ First packed file of the image

    :type: PackedFile
    """

    packed_files: bpy_prop_collection[ImagePackedFile]
    """ Collection of packed images

    :type: bpy_prop_collection[ImagePackedFile]
    """

    pixels: float
    """ Image buffer pixels in floating-point values

    :type: float
    """

    render_slots: RenderSlots
    """ Render slots of the image

    :type: RenderSlots
    """

    resolution: mathutils.Vector
    """ X/Y pixels per meter, for the image buffer

    :type: mathutils.Vector
    """

    seam_margin: int
    """ Margin to take into account when fixing UV seams during painting. Higher number would improve seam-fixes for mipmaps, but decreases performance

    :type: int
    """

    size: bpy_prop_array[int]
    """ Width and height of the image buffer in pixels, zero when image data can't be loaded

    :type: bpy_prop_array[int]
    """

    source: str
    """ Where the image comes from

    :type: str
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3d

    :type: Stereo3dFormat
    """

    tiles: UDIMTiles
    """ Tiles of the image

    :type: UDIMTiles
    """

    type: str
    """ How to generate the image

    :type: str
    """

    use_deinterlace: bool
    """ Deinterlace movie file on load

    :type: bool
    """

    use_generated_float: bool
    """ Generate floating-point buffer

    :type: bool
    """

    use_half_precision: bool
    """ Use 16 bits per channel to lower the memory usage during rendering

    :type: bool
    """

    use_multiview: bool
    """ Use Multiple Views (when available)

    :type: bool
    """

    use_view_as_render: bool
    """ Apply render part of display transformation when displaying this image on the screen

    :type: bool
    """

    views_format: str
    """ Mode to load image views

    :type: str
    """

    def save_render(
        self,
        filepath: str | typing.Any,
        scene: Scene | None = None,
        quality: typing.Any | None = 0,
    ):
        """Save image to a specific path using a scenes render settings

        :param filepath: Output path
        :type filepath: str | typing.Any
        :param scene: Scene to take image parameters from
        :type scene: Scene | None
        :param quality: Quality, Quality for image formats that support lossy compression, uses default quality if not specified
        :type quality: typing.Any | None
        """
        ...

    def save(self, filepath: str | typing.Any = "", quality: typing.Any | None = 0):
        """Save image

        :param filepath: Output path, uses image data-block filepath if not specified
        :type filepath: str | typing.Any
        :param quality: Quality, Quality for image formats that support lossy compression, uses default quality if not specified
        :type quality: typing.Any | None
        """
        ...

    def pack(self, data: str | typing.Any = "", data_len: typing.Any | None = 0):
        """Pack an image as embedded data into the .blend file

        :param data: data, Raw data (bytes, exact content of the embedded file)
        :type data: str | typing.Any
        :param data_len: data_len, length of given data (mandatory if data is provided)
        :type data_len: typing.Any | None
        """
        ...

    def unpack(self, method: str | None = "USE_LOCAL"):
        """Save an image packed in the .blend file to disk

        :param method: method, How to unpack
        :type method: str | None
        """
        ...

    def reload(self):
        """Reload the image from its source path"""
        ...

    def update(self):
        """Update the display image from the floating-point buffer"""
        ...

    def scale(
        self,
        width: int | None,
        height: int | None,
        frame: typing.Any | None = 0,
        tile_index: typing.Any | None = 0,
    ):
        """Scale the buffer of the image, in pixels

        :param width: Width
        :type width: int | None
        :param height: Height
        :type height: int | None
        :param frame: Frame, Frame (for image sequences)
        :type frame: typing.Any | None
        :param tile_index: Tile, Tile index (for tiled images)
        :type tile_index: typing.Any | None
        """
        ...

    def gl_touch(
        self,
        frame: typing.Any | None = 0,
        layer_index: typing.Any | None = 0,
        pass_index: typing.Any | None = 0,
    ) -> int:
        """Delay the image from being cleaned from the cache due inactivity

        :param frame: Frame, Frame of image sequence or movie
        :type frame: typing.Any | None
        :param layer_index: Layer, Index of layer that should be loaded
        :type layer_index: typing.Any | None
        :param pass_index: Pass, Index of pass that should be loaded
        :type pass_index: typing.Any | None
        :return: Error, OpenGL error value
        :rtype: int
        """
        ...

    def gl_load(
        self,
        frame: typing.Any | None = 0,
        layer_index: typing.Any | None = 0,
        pass_index: typing.Any | None = 0,
    ) -> int:
        """Load the image into an OpenGL texture. On success, image.bindcode will contain the OpenGL texture bindcode. Colors read from the texture will be in scene linear color space and have premultiplied or straight alpha matching the image alpha mode

        :param frame: Frame, Frame of image sequence or movie
        :type frame: typing.Any | None
        :param layer_index: Layer, Index of layer that should be loaded
        :type layer_index: typing.Any | None
        :param pass_index: Pass, Index of pass that should be loaded
        :type pass_index: typing.Any | None
        :return: Error, OpenGL error value
        :rtype: int
        """
        ...

    def gl_free(self):
        """Free the image from OpenGL graphics memory"""
        ...

    def filepath_from_user(
        self, image_user: ImageUser | None = None
    ) -> str | typing.Any:
        """Return the absolute path to the filepath of an image frame specified by the image user

        :param image_user: Image user of the image to get filepath for
        :type image_user: ImageUser | None
        :return: File Path, The resulting filepath from the image and its user
        :rtype: str | typing.Any
        """
        ...

    def buffers_free(self):
        """Free the image buffers from memory"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Key(ID, bpy_struct):
    """Shape keys data-block containing different shapes of geometric data-blocks"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    eval_time: float
    """ Evaluation time for absolute shape keys

    :type: float
    """

    key_blocks: bpy_prop_collection[ShapeKey]
    """ Shape keys

    :type: bpy_prop_collection[ShapeKey]
    """

    reference_key: ShapeKey
    """ 

    :type: ShapeKey
    """

    use_relative: bool
    """ Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time

    :type: bool
    """

    user: ID
    """ Data-block using these shape keys

    :type: ID
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Lattice(ID, bpy_struct):
    """Lattice data-block defining a grid for deforming other objects"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    interpolation_type_u: str
    """ 

    :type: str
    """

    interpolation_type_v: str
    """ 

    :type: str
    """

    interpolation_type_w: str
    """ 

    :type: str
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    points: bpy_prop_collection[LatticePoint]
    """ Points of the lattice

    :type: bpy_prop_collection[LatticePoint]
    """

    points_u: int
    """ Points in U direction (cannot be changed when there are shape keys)

    :type: int
    """

    points_v: int
    """ Points in V direction (cannot be changed when there are shape keys)

    :type: int
    """

    points_w: int
    """ Points in W direction (cannot be changed when there are shape keys)

    :type: int
    """

    shape_keys: Key
    """ 

    :type: Key
    """

    use_outside: bool
    """ Only display and take into account the outer vertices

    :type: bool
    """

    vertex_group: str
    """ Vertex group to apply the influence of the lattice

    :type: str
    """

    def transform(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        shape_keys: bool | typing.Any | None = False,
    ):
        """Transform lattice by a matrix

        :param matrix: Matrix
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool | typing.Any | None
        """
        ...

    def update_gpu_tag(self):
        """update_gpu_tag"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Library(ID, bpy_struct):
    """External .blend file from which data is linked"""

    filepath: str
    """ Path to the library .blend file

    :type: str
    """

    needs_liboverride_resync: bool
    """ True if this library contains library overrides that are linked in current blendfile, and that had to be recursively resynced on load (it is recommended to open and re-save that library blendfile then)

    :type: bool
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    parent: Library
    """ 

    :type: Library
    """

    version: bpy_prop_array[int]
    """ Version of Blender the library .blend was saved with

    :type: bpy_prop_array[int]
    """

    users_id: typing.Any
    """ ID data blocks which use this library(readonly)"""

    def reload(self):
        """Reload this library and all its linked data-blocks"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Light(ID, bpy_struct):
    """Light data-block for lighting a scene"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    color: mathutils.Color
    """ Light color

    :type: mathutils.Color
    """

    cutoff_distance: float
    """ Distance at which the light influence will be set to 0

    :type: float
    """

    cycles: typing.Any
    """ Cycles light settings

    :type: typing.Any
    """

    diffuse_factor: float
    """ Diffuse reflection multiplier

    :type: float
    """

    node_tree: NodeTree
    """ Node tree for node based lights

    :type: NodeTree
    """

    specular_factor: float
    """ Specular reflection multiplier

    :type: float
    """

    type: str
    """ Type of light

    :type: str
    """

    use_custom_distance: bool
    """ Use custom attenuation distance instead of global light threshold

    :type: bool
    """

    use_nodes: bool
    """ Use shader nodes to render the light

    :type: bool
    """

    volume_factor: float
    """ Volume light multiplier

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LightProbe(ID, bpy_struct):
    """Light Probe data-block for lighting capture objects"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    clip_end: float
    """ Probe clip end, beyond which objects will not appear in reflections

    :type: float
    """

    clip_start: float
    """ Probe clip start, below which objects will not appear in reflections

    :type: float
    """

    data_display_size: float
    """ Viewport display size of the sampled data

    :type: float
    """

    falloff: float
    """ Control how fast the probe influence decreases

    :type: float
    """

    grid_bake_samples: int
    """ Number of ray directions to evaluate when baking

    :type: int
    """

    grid_capture_emission: bool
    """ Bake emissive surfaces for more accurate lighting

    :type: bool
    """

    grid_capture_indirect: bool
    """ Bake light bounces from light sources for more accurate lighting

    :type: bool
    """

    grid_capture_world: bool
    """ Bake incoming light from the world, instead of just the visibility, for more accurate lighting, but lose correct blending to surrounding irradiance volumes

    :type: bool
    """

    grid_clamp_direct: float
    """ Clamp the direct lighting intensity to reduce noise (0 to disable)

    :type: float
    """

    grid_clamp_indirect: float
    """ Clamp the indirect lighting intensity to reduce noise (0 to disable)

    :type: float
    """

    grid_dilation_radius: float
    """ Radius in grid sample to search valid grid samples to copy into invalid grid samples

    :type: float
    """

    grid_dilation_threshold: float
    """ Ratio of front-facing surface hits under which a grid sample will reuse neighbors grid sample lighting

    :type: float
    """

    grid_escape_bias: float
    """ Moves capture points outside objects

    :type: float
    """

    grid_irradiance_smoothing: float
    """ Smoother irradiance interpolation but introduce light bleeding

    :type: float
    """

    grid_normal_bias: float
    """ Offset sampling of the irradiance grid in the surface normal direction to reduce light bleeding

    :type: float
    """

    grid_resolution_x: int
    """ Number of samples along the x axis of the volume

    :type: int
    """

    grid_resolution_y: int
    """ Number of samples along the y axis of the volume

    :type: int
    """

    grid_resolution_z: int
    """ Number of samples along the z axis of the volume

    :type: int
    """

    grid_surface_bias: float
    """ Moves capture points position away from surfaces to avoid artifacts

    :type: float
    """

    grid_validity_threshold: float
    """ Ratio of front-facing surface hits under which a grid sample will not be considered for lighting

    :type: float
    """

    grid_view_bias: float
    """ Offset sampling of the irradiance grid in the viewing direction to reduce light bleeding

    :type: float
    """

    influence_distance: float
    """ Influence distance of the probe

    :type: float
    """

    influence_type: str
    """ Type of influence volume

    :type: str
    """

    intensity: float
    """ Modify the intensity of the lighting captured by this probe

    :type: float
    """

    invert_visibility_collection: bool
    """ Invert visibility collection

    :type: bool
    """

    parallax_distance: float
    """ Lowest corner of the parallax bounding box

    :type: float
    """

    parallax_type: str
    """ Type of parallax volume

    :type: str
    """

    show_clip: bool
    """ Show the clipping distances in the 3D view

    :type: bool
    """

    show_data: bool
    """ Deprecated, use use_data_display instead

    :type: bool
    """

    show_influence: bool
    """ Show the influence volume in the 3D view

    :type: bool
    """

    show_parallax: bool
    """ Show the parallax correction volume in the 3D view

    :type: bool
    """

    surfel_density: float
    """ Number of surfels per unit distance (higher values improve quality)

    :type: float
    """

    type: str
    """ Type of light probe

    :type: str
    """

    use_custom_parallax: bool
    """ Enable custom settings for the parallax correction volume

    :type: bool
    """

    use_data_display: bool
    """ Display sampled data in the viewport to debug captured light

    :type: bool
    """

    visibility_bleed_bias: float
    """ Bias for reducing light-bleed on variance shadow maps

    :type: float
    """

    visibility_blur: float
    """ Filter size of the visibility blur

    :type: float
    """

    visibility_buffer_bias: float
    """ Bias for reducing self shadowing

    :type: float
    """

    visibility_collection: Collection
    """ Restrict objects visible for this probe

    :type: Collection
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Mask(ID, bpy_struct):
    """Mask data-block defining mask for compositing"""

    active_layer_index: int | None
    """ Index of active layer in list of all mask's layers

    :type: int | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    frame_end: int
    """ Final frame of the mask (used for sequencer)

    :type: int
    """

    frame_start: int
    """ First frame of the mask (used for sequencer)

    :type: int
    """

    layers: MaskLayers
    """ Collection of layers which defines this mask

    :type: MaskLayers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Material(ID, bpy_struct):
    """Material data-block to define the appearance of geometric objects for rendering"""

    alpha_threshold: float
    """ A pixel is rendered only if its alpha value is above this threshold

    :type: float
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    blend_method: str
    """ Blend Mode for Transparent Faces

    :type: str
    """

    cycles: typing.Any
    """ Cycles material settings

    :type: typing.Any
    """

    diffuse_color: bpy_prop_array[float]
    """ Diffuse color of the material

    :type: bpy_prop_array[float]
    """

    displacement_method: str
    """ Method to use for the displacement

    :type: str
    """

    grease_pencil: MaterialGPencilStyle
    """ Grease pencil color settings for material

    :type: MaterialGPencilStyle
    """

    is_grease_pencil: bool
    """ True if this material has grease pencil data

    :type: bool
    """

    lightprobe_volume_single_sided: bool
    """ Consider material single sided for light probe volume capture. Additionally helps rejecting probes inside the object to avoid light leaks

    :type: bool
    """

    line_color: bpy_prop_array[float]
    """ Line color used for Freestyle line rendering

    :type: bpy_prop_array[float]
    """

    line_priority: int
    """ The line color of a higher priority is used at material boundaries

    :type: int
    """

    lineart: MaterialLineArt
    """ Line art settings for material

    :type: MaterialLineArt
    """

    max_vertex_displacement: float
    """ The max distance a vertex can be displaced. Displacements over this threshold may cause visibility issues

    :type: float
    """

    metallic: float
    """ Amount of mirror reflection for raytrace

    :type: float
    """

    node_tree: NodeTree
    """ Node tree for node based materials

    :type: NodeTree
    """

    paint_active_slot: int
    """ Index of active texture paint slot

    :type: int
    """

    paint_clone_slot: int
    """ Index of clone texture paint slot

    :type: int
    """

    pass_index: int
    """ Index number for the "Material Index" render pass

    :type: int
    """

    preview_render_type: str
    """ Type of preview render

    :type: str
    """

    refraction_depth: float
    """ Approximate the thickness of the object to compute two refraction events (0 is disabled)

    :type: float
    """

    roughness: float
    """ Roughness of the material

    :type: float
    """

    shadow_method: str
    """ Shadow mapping method

    :type: str
    """

    show_transparent_back: bool
    """ Render multiple transparent layers (may introduce transparency sorting problems)

    :type: bool
    """

    specular_color: mathutils.Color
    """ Specular color of the material

    :type: mathutils.Color
    """

    specular_intensity: float
    """ How intense (bright) the specular reflection is

    :type: float
    """

    surface_render_method: str
    """ Controls the blending and the compatibility with certain features

    :type: str
    """

    texture_paint_images: bpy_prop_collection[Image]
    """ Texture images used for texture painting

    :type: bpy_prop_collection[Image]
    """

    texture_paint_slots: bpy_prop_collection[TexPaintSlot]
    """ Texture slots defining the mapping and influence of textures

    :type: bpy_prop_collection[TexPaintSlot]
    """

    use_backface_culling: bool
    """ Use back face culling to hide the back side of faces

    :type: bool
    """

    use_backface_culling_shadow: bool
    """ Use back face culling when casting shadows

    :type: bool
    """

    use_nodes: bool
    """ Use shader nodes to render the material

    :type: bool
    """

    use_preview_world: bool
    """ Use the current world background to light the preview render

    :type: bool
    """

    use_screen_refraction: bool
    """ Use raytracing to determine refracted color instead of using only light probes. This prevents the surface from contributing to the lighting of surfaces not using this setting

    :type: bool
    """

    use_sss_translucency: bool
    """ Add translucency effect to subsurface

    :type: bool
    """

    use_transparent_shadow: bool
    """ Use transparent shadows for this material if it contains a Transparent BSDF, disabling will render faster but not give accurate shadows

    :type: bool
    """

    volume_intersection_method: str
    """ Determines which inner part of the mesh will produce volumetric effect

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Mesh(ID, bpy_struct):
    """Mesh data-block defining geometric surfaces"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    attributes: AttributeGroup
    """ Geometry attributes

    :type: AttributeGroup
    """

    auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    color_attributes: AttributeGroup
    """ Geometry color attributes

    :type: AttributeGroup
    """

    corner_normals: bpy_prop_collection[MeshNormalValue]
    """ The "slit" normal direction of each face corner, influenced by vertex normals, sharp faces, sharp edges, and custom normals. May be empty

    :type: bpy_prop_collection[MeshNormalValue]
    """

    cycles: typing.Any
    """ Cycles mesh settings

    :type: typing.Any
    """

    edges: MeshEdges
    """ Edges of the mesh

    :type: MeshEdges
    """

    has_custom_normals: bool
    """ True if there are custom split normals data in this mesh

    :type: bool
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    loop_triangle_polygons: bpy_prop_collection[ReadOnlyInteger]
    """ The face index for each loop triangle

    :type: bpy_prop_collection[ReadOnlyInteger]
    """

    loop_triangles: MeshLoopTriangles
    """ Tessellation of mesh polygons into triangles

    :type: MeshLoopTriangles
    """

    loops: MeshLoops
    """ Loops of the mesh (face corners)

    :type: MeshLoops
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    normals_domain: str
    """ The attribute domain that gives enough information to represent the mesh's normals

    :type: str
    """

    polygon_normals: bpy_prop_collection[MeshNormalValue]
    """ The normal direction of each face, defined by the winding order and position of its vertices

    :type: bpy_prop_collection[MeshNormalValue]
    """

    polygons: MeshPolygons
    """ Polygons of the mesh

    :type: MeshPolygons
    """

    remesh_mode: str
    """ 

    :type: str
    """

    remesh_voxel_adaptivity: float
    """ Reduces the final face count by simplifying geometry where detail is not needed, generating triangles. A value greater than 0 disables Fix Poles

    :type: float
    """

    remesh_voxel_size: float
    """ Size of the voxel in object space used for volume evaluation. Lower values preserve finer details

    :type: float
    """

    shape_keys: Key
    """ 

    :type: Key
    """

    skin_vertices: bpy_prop_collection[MeshSkinVertexLayer]
    """ All skin vertices

    :type: bpy_prop_collection[MeshSkinVertexLayer]
    """

    texco_mesh: Mesh
    """ Derive texture coordinates from another mesh

    :type: Mesh
    """

    texspace_location: mathutils.Vector
    """ Texture space location

    :type: mathutils.Vector
    """

    texspace_size: mathutils.Vector
    """ Texture space size

    :type: mathutils.Vector
    """

    texture_mesh: Mesh
    """ Use another mesh for texture indices (vertex indices must be aligned)

    :type: Mesh
    """

    total_edge_sel: int
    """ Selected edge count in editmode

    :type: int
    """

    total_face_sel: int
    """ Selected face count in editmode

    :type: int
    """

    total_vert_sel: int
    """ Selected vertex count in editmode

    :type: int
    """

    use_auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    use_mirror_topology: bool
    """ Use topology based mirroring (for when both sides of mesh have matching, unique topology)

    :type: bool
    """

    use_mirror_vertex_groups: bool
    """ Mirror the left/right vertex groups when painting. The symmetry axis is determined by the symmetry settings

    :type: bool
    """

    use_mirror_x: bool
    """ Enable symmetry in the X axis

    :type: bool
    """

    use_mirror_y: bool
    """ Enable symmetry in the Y axis

    :type: bool
    """

    use_mirror_z: bool
    """ Enable symmetry in the Z axis

    :type: bool
    """

    use_paint_bone_selection: bool
    """ Bone selection during painting

    :type: bool
    """

    use_paint_mask: bool
    """ Face selection masking for painting

    :type: bool
    """

    use_paint_mask_vertex: bool
    """ Vertex selection masking for painting

    :type: bool
    """

    use_remesh_fix_poles: bool
    """ Produces fewer poles and a better topology flow

    :type: bool
    """

    use_remesh_preserve_attributes: bool
    """ Transfer all attributes to the new mesh

    :type: bool
    """

    use_remesh_preserve_volume: bool
    """ Projects the mesh to preserve the volume and details of the original mesh

    :type: bool
    """

    uv_layer_clone: MeshUVLoopLayer
    """ UV loop layer to be used as cloning source

    :type: MeshUVLoopLayer
    """

    uv_layer_clone_index: int
    """ Clone UV loop layer index

    :type: int
    """

    uv_layer_stencil: MeshUVLoopLayer
    """ UV loop layer to mask the painted area

    :type: MeshUVLoopLayer
    """

    uv_layer_stencil_index: int
    """ Mask UV loop layer index

    :type: int
    """

    uv_layers: UVLoopLayers
    """ All UV loop layers

    :type: UVLoopLayers
    """

    vertex_colors: LoopColors
    """ Legacy vertex color layers. Deprecated, use color attributes instead

    :type: LoopColors
    """

    vertex_normals: bpy_prop_collection[MeshNormalValue]
    """ The normal direction of each vertex, defined as the average of the surrounding face normals

    :type: bpy_prop_collection[MeshNormalValue]
    """

    vertices: MeshVertices
    """ Vertices of the mesh

    :type: MeshVertices
    """

    edge_creases: typing.Any
    """ Edge crease values for subdivision surface, corresponding to the "crease_edge" attribute.(readonly)"""

    edge_keys: typing.Any
    """ (readonly)"""

    vertex_creases: typing.Any
    """ Vertex crease values for subdivision surface, corresponding to the "crease_vert" attribute.(readonly)"""

    vertex_paint_mask: typing.Any
    """ Mask values for sculpting and painting, corresponding to the ".sculpt_mask" attribute.(readonly)"""

    def transform(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
        shape_keys: bool | typing.Any | None = False,
    ):
        """Transform mesh vertices by a matrix (Warning: inverts normals if matrix is negative)

        :param matrix: Matrix
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool | typing.Any | None
        """
        ...

    def flip_normals(self):
        """Invert winding of all polygons (clears tessellation, does not handle custom normals)"""
        ...

    def set_sharp_from_angle(self, angle: typing.Any | None = 3.14159):
        """Reset and fill the "sharp_edge" attribute based on the angle of faces neighboring manifold edges

        :param angle: Angle, Angle between faces beyond which edges are marked sharp
        :type angle: typing.Any | None
        """
        ...

    def split_faces(self):
        """Split faces based on the edge angle"""
        ...

    def calc_tangents(self, uvmap: str | typing.Any = ""):
        """Compute tangents and bitangent signs, to be used together with the split normals to get a complete tangent space for normal mapping (split normals are also computed if not yet present)

        :param uvmap: Name of the UV map to use for tangent space computation
        :type uvmap: str | typing.Any
        """
        ...

    def free_tangents(self):
        """Free tangents"""
        ...

    def calc_loop_triangles(self):
        """Calculate loop triangle tessellation (supports editmode too)"""
        ...

    def calc_smooth_groups(self, use_bitflags: bool | typing.Any | None = False):
        """Calculate smooth groups from sharp edges

                :param use_bitflags: Produce bitflags groups instead of simple numeric values
                :type use_bitflags: bool | typing.Any | None
                :return: poly_groups, Smooth Groups, int array of 1 items in [-inf, inf]

        groups, Total number of groups, int in [0, inf]
        """
        ...

    def normals_split_custom_set(
        self,
        normals: list[list[float]]
        | tuple[tuple[float], tuple[float], tuple[float]]
        | None,
    ):
        """Define custom split normals of this mesh (use zero-vectors to keep auto ones)

        :param normals: Normals
        :type normals: list[list[float]] | tuple[tuple[float], tuple[float], tuple[float]] | None
        """
        ...

    def normals_split_custom_set_from_vertices(
        self,
        normals: list[list[float]]
        | tuple[tuple[float], tuple[float], tuple[float]]
        | None,
    ):
        """Define custom split normals of this mesh, from vertices' normals (use zero-vectors to keep auto ones)

        :param normals: Normals
        :type normals: list[list[float]] | tuple[tuple[float], tuple[float], tuple[float]] | None
        """
        ...

    def update(
        self,
        calc_edges: bool | typing.Any | None = False,
        calc_edges_loose: bool | typing.Any | None = False,
    ):
        """update

        :param calc_edges: Calculate Edges, Force recalculation of edges
        :type calc_edges: bool | typing.Any | None
        :param calc_edges_loose: Calculate Loose Edges, Calculate the loose state of each edge
        :type calc_edges_loose: bool | typing.Any | None
        """
        ...

    def update_gpu_tag(self):
        """update_gpu_tag"""
        ...

    def unit_test_compare(
        self, mesh: Mesh | None = None, threshold: typing.Any | None = 7.1526e-06
    ) -> str | typing.Any:
        """unit_test_compare

        :param mesh: Mesh to compare to
        :type mesh: Mesh | None
        :param threshold: Threshold, Comparison tolerance threshold
        :type threshold: typing.Any | None
        :return: Return value, String description of result of comparison
        :rtype: str | typing.Any
        """
        ...

    def clear_geometry(self):
        """Remove all geometry from the mesh. Note that this does not free shape keys or materials"""
        ...

    def validate(
        self,
        verbose: bool | typing.Any | None = False,
        clean_customdata: bool | typing.Any | None = True,
    ) -> bool:
        """Validate geometry, return True when the mesh has had invalid geometry corrected/removed

        :param verbose: Verbose, Output information about the errors found
        :type verbose: bool | typing.Any | None
        :param clean_customdata: Clean Custom Data, Remove temp/cached custom-data layers, like e.g. normals...
        :type clean_customdata: bool | typing.Any | None
        :return: Result
        :rtype: bool
        """
        ...

    def validate_material_indices(self) -> bool:
        """Validate material indices of polygons, return True when the mesh has had invalid indices corrected (to default 0)

        :return: Result
        :rtype: bool
        """
        ...

    def count_selected_items(self) -> bpy_prop_array[int]:
        """Return the number of selected items (vert, edge, face)

        :return: Result
        :rtype: bpy_prop_array[int]
        """
        ...

    def edge_creases_ensure(self): ...
    def edge_creases_remove(self): ...
    def from_pydata(
        self,
        vertices: list | None,
        edges: list | None,
        faces: list | None,
        shade_flat=True,
    ):
        """Make a mesh from a list of vertices/edges/faces
        Until we have a nicer way to make geometry, use this.

                :param vertices: float triplets each representing (X, Y, Z)
        eg: [(0.0, 1.0, 0.5), ...].
                :type vertices: list | None
                :param edges: int pairs, each pair contains two indices to the
        vertices argument. eg: [(1, 2), ...]

        When an empty iterable is passed in, the edges are inferred from the polygons.
                :type edges: list | None
                :param faces: iterator of faces, each faces contains three or more indices to
        the vertices argument. eg: [(5, 6, 8, 9), (1, 2, 3), ...]
                :type faces: list | None
                :param shade_flat:
        """
        ...

    def shade_flat(self):
        """Render and display faces uniform, using face normals,
        setting the "sharp_face" attribute true for every face

        """
        ...

    def shade_smooth(self):
        """Render and display faces smooth, using interpolated vertex normals,
        removing the "sharp_face" attribute

        """
        ...

    def vertex_creases_ensure(self): ...
    def vertex_creases_remove(self): ...
    def vertex_paint_mask_ensure(self): ...
    def vertex_paint_mask_remove(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MetaBall(ID, bpy_struct):
    """Metaball data-block to define blobby surfaces"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    cycles: typing.Any
    """ Cycles mesh settings

    :type: typing.Any
    """

    elements: MetaBallElements
    """ Metaball elements

    :type: MetaBallElements
    """

    is_editmode: bool
    """ True when used in editmode

    :type: bool
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    render_resolution: float
    """ Polygonization resolution in rendering

    :type: float
    """

    resolution: float
    """ Polygonization resolution in the 3D viewport

    :type: float
    """

    texspace_location: mathutils.Vector
    """ Texture space location

    :type: mathutils.Vector
    """

    texspace_size: mathutils.Vector
    """ Texture space size

    :type: mathutils.Vector
    """

    threshold: float
    """ Influence of metaball elements

    :type: float
    """

    update_method: str
    """ Metaball edit update behavior

    :type: str
    """

    use_auto_texspace: bool
    """ Adjust active object's texture space automatically when transforming object

    :type: bool
    """

    def transform(
        self,
        matrix: collections.abc.Sequence[collections.abc.Sequence[float]]
        | mathutils.Matrix
        | None,
    ):
        """Transform metaball elements by a matrix

        :param matrix: Matrix
        :type matrix: collections.abc.Sequence[collections.abc.Sequence[float]] | mathutils.Matrix | None
        """
        ...

    def update_gpu_tag(self):
        """update_gpu_tag"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieClip(ID, bpy_struct):
    """MovieClip data-block referencing an external movie file"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    display_aspect: mathutils.Vector
    """ Display Aspect for this clip, does not affect rendering

    :type: mathutils.Vector
    """

    filepath: str
    """ Filename of the movie or sequence file

    :type: str
    """

    fps: float
    """ Detected frame rate of the movie clip in frames per second

    :type: float
    """

    frame_duration: int
    """ Detected duration of movie clip in frames

    :type: int
    """

    frame_offset: int
    """ Offset of footage first frame relative to its file name (affects only how footage is loading, does not change data associated with a clip)

    :type: int
    """

    frame_start: int
    """ Global scene frame number at which this movie starts playing (affects all data associated with a clip)

    :type: int
    """

    grease_pencil: GreasePencil
    """ Grease pencil data for this movie clip

    :type: GreasePencil
    """

    proxy: MovieClipProxy
    """ 

    :type: MovieClipProxy
    """

    size: bpy_prop_array[int]
    """ Width and height in pixels, zero when image data can't be loaded

    :type: bpy_prop_array[int]
    """

    source: str
    """ Where the clip comes from

    :type: str
    """

    tracking: MovieTracking
    """ 

    :type: MovieTracking
    """

    use_proxy: bool
    """ Use a preview proxy and/or timecode index for this clip

    :type: bool
    """

    use_proxy_custom_directory: bool
    """ Create proxy images in a custom directory (default is movie location)

    :type: bool
    """

    def metadata(self) -> IDPropertyWrapPtr:
        """Retrieve metadata of the movie file

        :return: Dict-like object containing the metadata
        :rtype: IDPropertyWrapPtr
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTree(ID, bpy_struct):
    """Node tree consisting of linked nodes used for shading, textures and compositing"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    bl_description: str
    """ 

    :type: str
    """

    bl_icon: str
    """ The node tree icon

    :type: str
    """

    bl_idname: str
    """ 

    :type: str
    """

    bl_label: str
    """ The node tree label

    :type: str
    """

    grease_pencil: GreasePencil
    """ Grease Pencil data-block

    :type: GreasePencil
    """

    interface: NodeTreeInterface
    """ Interface declaration for this node tree

    :type: NodeTreeInterface
    """

    links: NodeLinks
    """ 

    :type: NodeLinks
    """

    nodes: Nodes
    """ 

    :type: Nodes
    """

    type: str
    """ Node Tree type (deprecated, bl_idname is the actual node tree type identifier)

    :type: str
    """

    view_center: mathutils.Vector
    """ The current location (offset) of the view for this Node Tree

    :type: mathutils.Vector
    """

    def interface_update(self, context: Context):
        """Updated node group interface

        :param context:
        :type context: Context
        """
        ...

    def contains_tree(self, sub_tree: NodeTree) -> bool:
        """Check if the node tree contains another. Used to avoid creating recursive node groups

        :param sub_tree: Node Tree, Node tree for recursive check
        :type sub_tree: NodeTree
        :return: contained
        :rtype: bool
        """
        ...

    @classmethod
    def poll(cls, context: Context) -> bool:
        """Check visibility in the editor

        :param context:
        :type context: Context
        :return:
        :rtype: bool
        """
        ...

    def update(self):
        """Update on editor changes"""
        ...

    @classmethod
    def get_from_context(cls, context: Context):
        """Get a node tree from the context

                :param context:
                :type context: Context
                :return: result_1, Active node tree from context, `NodeTree`

        result_2, ID data-block that owns the node tree, `ID`

        result_3, Original ID data-block selected from the context, `ID`
        """
        ...

    @classmethod
    def valid_socket_type(cls, idname: str | typing.Any) -> bool:
        """Check if the socket type is valid for the node tree

        :param idname: Socket Type, Identifier of the socket type
        :type idname: str | typing.Any
        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Object(ID, bpy_struct):
    """Object data-block defining an object in a scene"""

    active_material: Material | None
    """ Active material being displayed

    :type: Material | None
    """

    active_material_index: int | None
    """ Index of active material slot

    :type: int | None
    """

    active_shape_key: ShapeKey
    """ Current shape key

    :type: ShapeKey
    """

    active_shape_key_index: int | None
    """ Current shape key index

    :type: int | None
    """

    add_rest_position_attribute: bool
    """ Add a "rest_position" attribute that is a copy of the position attribute before shape keys and modifiers are evaluated

    :type: bool
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    animation_visualization: AnimViz
    """ Animation data for this data-block

    :type: AnimViz
    """

    bound_box: list[list[float]] | tuple[
        tuple[float, float, float, float, float, float, float, float],
        tuple[float, float, float, float, float, float, float, float],
        tuple[float, float, float, float, float, float, float, float],
    ]
    """ Object's bounding box in object-space coordinates, all values are -1.0 when not available

    :type: list[list[float]] | tuple[tuple[float, float, float, float, float, float, float, float], tuple[float, float, float, float, float, float, float, float], tuple[float, float, float, float, float, float, float, float]]
    """

    collision: CollisionSettings
    """ Settings for using the object as a collider in physics simulation

    :type: CollisionSettings
    """

    color: bpy_prop_array[float]
    """ Object color and alpha, used when the Object Color mode is enabled

    :type: bpy_prop_array[float]
    """

    constraints: ObjectConstraints
    """ Constraints affecting the transformation of the object

    :type: ObjectConstraints
    """

    cycles: typing.Any
    """ Cycles object settings

    :type: typing.Any
    """

    data: ID
    """ Object data

    :type: ID
    """

    delta_location: mathutils.Vector
    """ Extra translation added to the location of the object

    :type: mathutils.Vector
    """

    delta_rotation_euler: mathutils.Euler
    """ Extra rotation added to the rotation of the object (when using Euler rotations)

    :type: mathutils.Euler
    """

    delta_rotation_quaternion: mathutils.Quaternion
    """ Extra rotation added to the rotation of the object (when using Quaternion rotations)

    :type: mathutils.Quaternion
    """

    delta_scale: mathutils.Vector
    """ Extra scaling added to the scale of the object

    :type: mathutils.Vector
    """

    dimensions: mathutils.Vector
    """ Absolute bounding box dimensions of the object.
Warning: Assigning to it or its members multiple consecutive times will not work correctly, as this needs up-to-date evaluated data

    :type: mathutils.Vector
    """

    display: ObjectDisplay
    """ Object display settings for 3D viewport

    :type: ObjectDisplay
    """

    display_bounds_type: str
    """ Object boundary display type

    :type: str
    """

    display_type: str
    """ How to display object in viewport

    :type: str
    """

    empty_display_size: float
    """ Size of display for empties in the viewport

    :type: float
    """

    empty_display_type: str
    """ Viewport display style for empties

    :type: str
    """

    empty_image_depth: str
    """ Determine which other objects will occlude the image

    :type: str
    """

    empty_image_offset: bpy_prop_array[float]
    """ Origin offset distance

    :type: bpy_prop_array[float]
    """

    empty_image_side: str
    """ Show front/back side

    :type: str
    """

    field: FieldSettings
    """ Settings for using the object as a field in physics simulation

    :type: FieldSettings
    """

    grease_pencil_modifiers: ObjectGpencilModifiers
    """ Modifiers affecting the data of the grease pencil object

    :type: ObjectGpencilModifiers
    """

    hide_probe_plane: bool
    """ Globally disable in planar light probes

    :type: bool
    """

    hide_probe_sphere: bool
    """ Globally disable in spherical light probes

    :type: bool
    """

    hide_probe_volume: bool
    """ Globally disable in volume probes

    :type: bool
    """

    hide_render: bool
    """ Globally disable in renders

    :type: bool
    """

    hide_select: bool
    """ Disable selection in viewport

    :type: bool
    """

    hide_viewport: bool
    """ Globally disable in viewports

    :type: bool
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    instance_collection: Collection
    """ Instance an existing collection

    :type: Collection
    """

    instance_faces_scale: float
    """ Scale the face instance objects

    :type: float
    """

    instance_type: str
    """ If not None, object instancing method to use

    :type: str
    """

    is_from_instancer: bool
    """ Object comes from a instancer

    :type: bool
    """

    is_from_set: bool
    """ Object comes from a background set

    :type: bool
    """

    is_holdout: bool
    """ Render objects as a holdout or matte, creating a hole in the image with zero alpha, to fill out in compositing with real footage or another render

    :type: bool
    """

    is_instancer: bool
    """ 

    :type: bool
    """

    is_shadow_catcher: bool
    """ Only render shadows and reflections on this object, for compositing renders into real footage. Objects with this setting are considered to already exist in the footage, objects without it are synthetic objects being composited into it

    :type: bool
    """

    light_linking: ObjectLightLinking
    """ Light linking settings

    :type: ObjectLightLinking
    """

    lightgroup: str
    """ Lightgroup that the object belongs to

    :type: str
    """

    lineart: ObjectLineArt
    """ Line art settings for the object

    :type: ObjectLineArt
    """

    location: mathutils.Vector
    """ Location of the object

    :type: mathutils.Vector
    """

    lock_location: list[bool]
    """ Lock editing of location when transforming

    :type: list[bool]
    """

    lock_rotation: list[bool]
    """ Lock editing of rotation when transforming

    :type: list[bool]
    """

    lock_rotation_w: bool
    """ Lock editing of 'angle' component of four-component rotations when transforming

    :type: bool
    """

    lock_rotations_4d: bool
    """ Lock editing of four component rotations by components (instead of as Eulers)

    :type: bool
    """

    lock_scale: list[bool]
    """ Lock editing of scale when transforming

    :type: list[bool]
    """

    material_slots: bpy_prop_collection[MaterialSlot]
    """ Material slots in the object

    :type: bpy_prop_collection[MaterialSlot]
    """

    matrix_basis: mathutils.Matrix
    """ Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied

    :type: mathutils.Matrix
    """

    matrix_local: mathutils.Matrix
    """ Parent relative transformation matrix.
Warning: Only takes into account object parenting, so e.g. in case of bone parenting you get a matrix relative to the Armature object, not to the actual parent bone

    :type: mathutils.Matrix
    """

    matrix_parent_inverse: mathutils.Matrix
    """ Inverse of object's parent matrix at time of parenting

    :type: mathutils.Matrix
    """

    matrix_world: mathutils.Matrix
    """ Worldspace transformation matrix

    :type: mathutils.Matrix
    """

    mode: str
    """ Object interaction mode

    :type: str
    """

    modifiers: ObjectModifiers
    """ Modifiers affecting the geometric data of the object

    :type: ObjectModifiers
    """

    motion_path: MotionPath
    """ Motion Path for this element

    :type: MotionPath
    """

    parent: Object
    """ Parent object

    :type: Object
    """

    parent_bone: str
    """ Name of parent bone in case of a bone parenting relation

    :type: str
    """

    parent_type: str
    """ Type of parent relation

    :type: str
    """

    parent_vertices: bpy_prop_array[int]
    """ Indices of vertices in case of a vertex parenting relation

    :type: bpy_prop_array[int]
    """

    particle_systems: ParticleSystems
    """ Particle systems emitted from the object

    :type: ParticleSystems
    """

    pass_index: int
    """ Index number for the "Object Index" render pass

    :type: int
    """

    pose: Pose
    """ Current pose for armatures

    :type: Pose
    """

    rigid_body: RigidBodyObject
    """ Settings for rigid body simulation

    :type: RigidBodyObject
    """

    rigid_body_constraint: RigidBodyConstraint
    """ Constraint constraining rigid bodies

    :type: RigidBodyConstraint
    """

    rotation_axis_angle: bpy_prop_array[float]
    """ Angle of Rotation for Axis-Angle rotation representation

    :type: bpy_prop_array[float]
    """

    rotation_euler: mathutils.Euler
    """ Rotation in Eulers

    :type: mathutils.Euler
    """

    rotation_mode: str
    """ 

    :type: str
    """

    rotation_quaternion: mathutils.Quaternion
    """ Rotation in Quaternions

    :type: mathutils.Quaternion
    """

    scale: mathutils.Vector
    """ Scaling of the object

    :type: mathutils.Vector
    """

    shader_effects: ObjectShaderFx
    """ Effects affecting display of object

    :type: ObjectShaderFx
    """

    show_all_edges: bool
    """ Display all edges for mesh objects

    :type: bool
    """

    show_axis: bool
    """ Display the object's origin and axes

    :type: bool
    """

    show_bounds: bool
    """ Display the object's bounds

    :type: bool
    """

    show_empty_image_only_axis_aligned: bool
    """ Only display the image when it is aligned with the view axis

    :type: bool
    """

    show_empty_image_orthographic: bool
    """ Display image in orthographic mode

    :type: bool
    """

    show_empty_image_perspective: bool
    """ Display image in perspective mode

    :type: bool
    """

    show_in_front: bool
    """ Make the object display in front of others

    :type: bool
    """

    show_instancer_for_render: bool
    """ Make instancer visible when rendering

    :type: bool
    """

    show_instancer_for_viewport: bool
    """ Make instancer visible in the viewport

    :type: bool
    """

    show_name: bool
    """ Display the object's name

    :type: bool
    """

    show_only_shape_key: bool
    """ Only show the active shape key at full value

    :type: bool
    """

    show_texture_space: bool
    """ Display the object's texture space

    :type: bool
    """

    show_transparent: bool
    """ Display material transparency in the object

    :type: bool
    """

    show_wire: bool
    """ Display the object's wireframe over solid shading

    :type: bool
    """

    soft_body: SoftBodySettings
    """ Settings for soft body simulation

    :type: SoftBodySettings
    """

    track_axis: str
    """ Axis that points in the 'forward' direction (applies to Instance Vertices when Align to Vertex Normal is enabled)

    :type: str
    """

    type: str
    """ Type of object

    :type: str
    """

    up_axis: str
    """ Axis that points in the upward direction (applies to Instance Vertices when Align to Vertex Normal is enabled)

    :type: str
    """

    use_camera_lock_parent: bool
    """ View Lock 3D viewport camera transformation affects the object's parent instead

    :type: bool
    """

    use_dynamic_topology_sculpting: bool
    """ 

    :type: bool
    """

    use_empty_image_alpha: bool
    """ Use alpha blending instead of alpha test (can produce sorting artifacts)

    :type: bool
    """

    use_grease_pencil_lights: bool
    """ Lights affect grease pencil object

    :type: bool
    """

    use_instance_faces_scale: bool
    """ Scale instance based on face size

    :type: bool
    """

    use_instance_vertices_rotation: bool
    """ Rotate instance according to vertex normal

    :type: bool
    """

    use_mesh_mirror_x: bool
    """ Enable mesh symmetry in the X axis

    :type: bool
    """

    use_mesh_mirror_y: bool
    """ Enable mesh symmetry in the Y axis

    :type: bool
    """

    use_mesh_mirror_z: bool
    """ Enable mesh symmetry in the Z axis

    :type: bool
    """

    use_shape_key_edit_mode: bool
    """ Display shape keys in edit mode (for meshes only)

    :type: bool
    """

    use_simulation_cache: bool
    """ Cache frames during simulation nodes playback

    :type: bool
    """

    vertex_groups: VertexGroups
    """ Vertex groups of the object

    :type: VertexGroups
    """

    visible_camera: bool
    """ Object visibility to camera rays

    :type: bool
    """

    visible_diffuse: bool
    """ Object visibility to diffuse rays

    :type: bool
    """

    visible_glossy: bool
    """ Object visibility to glossy rays

    :type: bool
    """

    visible_shadow: bool
    """ Object visibility to shadow rays

    :type: bool
    """

    visible_transmission: bool
    """ Object visibility to transmission rays

    :type: bool
    """

    visible_volume_scatter: bool
    """ Object visibility to volume scattering rays

    :type: bool
    """

    children: tuple[Object, ...]
    """ All the children of this object.(readonly)

    :type: tuple[Object, ...]
    """

    children_recursive: tuple[Object, ...]
    """ A list of all children from this object.(readonly)

    :type: tuple[Object, ...]
    """

    users_collection: tuple[Collection, ...]
    """ The collections this object is in.(readonly)

    :type: tuple[Collection, ...]
    """

    users_scene: tuple[Scene, ...]
    """ The scenes this object is in.(readonly)

    :type: tuple[Scene, ...]
    """

    def select_get(self, view_layer: ViewLayer | None = None) -> bool:
        """Test if the object is selected. The selection state is per view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: ViewLayer | None
        :return: Object selected
        :rtype: bool
        """
        ...

    def select_set(self, state: bool | None, view_layer: ViewLayer | None = None):
        """Select or deselect the object. The selection state is per view layer

        :param state: Selection state to define
        :type state: bool | None
        :param view_layer: Use this instead of the active view layer
        :type view_layer: ViewLayer | None
        """
        ...

    def hide_get(self, view_layer: ViewLayer | None = None) -> bool:
        """Test if the object is hidden for viewport editing. This hiding state is per view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: ViewLayer | None
        :return: Object hidden
        :rtype: bool
        """
        ...

    def hide_set(self, state: bool | None, view_layer: ViewLayer | None = None):
        """Hide the object for viewport editing. This hiding state is per view layer

        :param state: Hide state to define
        :type state: bool | None
        :param view_layer: Use this instead of the active view layer
        :type view_layer: ViewLayer | None
        """
        ...

    def visible_get(
        self, view_layer: ViewLayer | None = None, viewport: SpaceView3D | None = None
    ) -> bool:
        """Test if the object is visible in the 3D viewport, taking into account all visibility settings

        :param view_layer: Use this instead of the active view layer
        :type view_layer: ViewLayer | None
        :param viewport: Use this instead of the active 3D viewport
        :type viewport: SpaceView3D | None
        :return: Object visible
        :rtype: bool
        """
        ...

    def holdout_get(self, view_layer: ViewLayer | None = None) -> bool:
        """Test if object is masked in the view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: ViewLayer | None
        :return: Object holdout
        :rtype: bool
        """
        ...

    def indirect_only_get(self, view_layer: ViewLayer | None = None) -> bool:
        """Test if object is set to contribute only indirectly (through shadows and reflections) in the view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: ViewLayer | None
        :return: Object indirect only
        :rtype: bool
        """
        ...

    def local_view_get(self, viewport: SpaceView3D | None) -> bool:
        """Get the local view state for this object

        :param viewport: Viewport in local view
        :type viewport: SpaceView3D | None
        :return: Object local view state
        :rtype: bool
        """
        ...

    def local_view_set(self, viewport: SpaceView3D | None, state: bool | None):
        """Set the local view state for this object

        :param viewport: Viewport in local view
        :type viewport: SpaceView3D | None
        :param state: Local view state to define
        :type state: bool | None
        """
        ...

    def visible_in_viewport_get(self, viewport: SpaceView3D | None) -> bool:
        """Check for local view and local collections for this viewport and object

        :param viewport: Viewport in local collections
        :type viewport: SpaceView3D | None
        :return: Object viewport visibility
        :rtype: bool
        """
        ...

    def convert_space(
        self,
        pose_bone: PoseBone | None = None,
        matrix: typing.Any | None = (
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0),
        ),
        from_space: str | None = "WORLD",
        to_space: str | None = "WORLD",
    ) -> mathutils.Matrix:
        """Convert (transform) the given matrix from one space to another

                :param pose_bone: Bone to use to define spaces (may be None, in which case only the two 'WORLD' and 'LOCAL' spaces are usable)
                :type pose_bone: PoseBone | None
                :param matrix: The matrix to transform
                :type matrix: typing.Any | None
                :param from_space: The space in which 'matrix' is currently

        WORLD
        World Space -- The most global space in Blender.

        POSE
        Pose Space -- The pose space of a bone (its armature's object space).

        LOCAL_WITH_PARENT
        Local With Parent -- The rest pose local space of a bone (this matrix includes parent transforms).

        LOCAL
        Local Space -- The local space of an object/bone.
                :type from_space: str | None
                :param to_space: The space to which you want to transform 'matrix'

        WORLD
        World Space -- The most global space in Blender.

        POSE
        Pose Space -- The pose space of a bone (its armature's object space).

        LOCAL_WITH_PARENT
        Local With Parent -- The rest pose local space of a bone (this matrix includes parent transforms).

        LOCAL
        Local Space -- The local space of an object/bone.
                :type to_space: str | None
                :return: The transformed matrix
                :rtype: mathutils.Matrix
        """
        ...

    def calc_matrix_camera(
        self,
        depsgraph: Depsgraph | None,
        x: typing.Any | None = 1,
        y: typing.Any | None = 1,
        scale_x: typing.Any | None = 1.0,
        scale_y: typing.Any | None = 1.0,
    ) -> mathutils.Matrix:
        """Generate the camera projection matrix of this object (mostly useful for Camera and Light types)

        :param depsgraph: Depsgraph to get evaluated data from
        :type depsgraph: Depsgraph | None
        :param x: Width of the render area
        :type x: typing.Any | None
        :param y: Height of the render area
        :type y: typing.Any | None
        :param scale_x: Width scaling factor
        :type scale_x: typing.Any | None
        :param scale_y: Height scaling factor
        :type scale_y: typing.Any | None
        :return: The camera projection matrix
        :rtype: mathutils.Matrix
        """
        ...

    def camera_fit_coords(self, depsgraph: Depsgraph | None, coordinates: typing.Any):
        """Compute the coordinate (and scale for ortho cameras) given object should be to 'see' all given coordinates

                :param depsgraph: Depsgraph to get evaluated data from
                :type depsgraph: Depsgraph | None
                :param coordinates: Coordinates to fit in
                :type coordinates: typing.Any
                :return: co_return, The location to aim to be able to see all given points, `mathutils.Vector` of 3 items in [-inf, inf]

        scale_return, The ortho scale to aim to be able to see all given points (if relevant), float in [-inf, inf]
        """
        ...

    def crazyspace_eval(self, depsgraph: Depsgraph | None, scene: Scene | None):
        """Compute orientation mapping between vertices of an original object and object with shape keys and deforming modifiers applied.The evaluation is to be freed with the crazyspace_eval_free function

        :param depsgraph: Dependency Graph, Evaluated dependency graph
        :type depsgraph: Depsgraph | None
        :param scene: Scene, Scene of the object
        :type scene: Scene | None
        """
        ...

    def crazyspace_displacement_to_deformed(
        self,
        vertex_index: typing.Any | None = 0,
        displacement: typing.Any | None = (0.0, 0.0, 0.0),
    ) -> mathutils.Vector:
        """Convert displacement vector from non-deformed object space to deformed object space

        :param vertex_index: vertex_index
        :type vertex_index: typing.Any | None
        :param displacement: displacement
        :type displacement: typing.Any | None
        :return: displacement_deformed
        :rtype: mathutils.Vector
        """
        ...

    def crazyspace_displacement_to_original(
        self,
        vertex_index: typing.Any | None = 0,
        displacement: typing.Any | None = (0.0, 0.0, 0.0),
    ) -> mathutils.Vector:
        """Free evaluated state of crazyspace

        :param vertex_index: vertex_index
        :type vertex_index: typing.Any | None
        :param displacement: displacement
        :type displacement: typing.Any | None
        :return: displacement_original
        :rtype: mathutils.Vector
        """
        ...

    def crazyspace_eval_clear(self):
        """crazyspace_eval_clear"""
        ...

    def to_mesh(
        self,
        preserve_all_data_layers: bool | typing.Any | None = False,
        depsgraph: Depsgraph | None = None,
    ) -> Mesh:
        """Create a Mesh data-block from the current state of the object. The object owns the data-block. To force free it use to_mesh_clear(). The result is temporary and cannot be used by objects from the main database

        :param preserve_all_data_layers: Preserve all data layers in the mesh, like UV maps and vertex groups. By default Blender only computes the subset of data layers needed for viewport display and rendering, for better performance
        :type preserve_all_data_layers: bool | typing.Any | None
        :param depsgraph: Dependency Graph, Evaluated dependency graph which is required when preserve_all_data_layers is true
        :type depsgraph: Depsgraph | None
        :return: Mesh created from object
        :rtype: Mesh
        """
        ...

    def to_mesh_clear(self):
        """Clears mesh data-block created by to_mesh()"""
        ...

    def to_curve(
        self,
        depsgraph: Depsgraph | None,
        apply_modifiers: bool | typing.Any | None = False,
    ) -> Curve:
        """Create a Curve data-block from the current state of the object. This only works for curve and text objects. The object owns the data-block. To force free it, use to_curve_clear(). The result is temporary and cannot be used by objects from the main database

        :param depsgraph: Dependency Graph, Evaluated dependency graph
        :type depsgraph: Depsgraph | None
        :param apply_modifiers: Apply the deform modifiers on the control points of the curve. This is only supported for curve objects
        :type apply_modifiers: bool | typing.Any | None
        :return: Curve created from object
        :rtype: Curve
        """
        ...

    def to_curve_clear(self):
        """Clears curve data-block created by to_curve()"""
        ...

    def find_armature(self) -> Object:
        """Find armature influencing this object as a parent or via a modifier

        :return: Armature object influencing this object or nullptr
        :rtype: Object
        """
        ...

    def shape_key_add(
        self, name: str | typing.Any = "Key", from_mix: bool | typing.Any | None = True
    ) -> ShapeKey:
        """Add shape key to this object

        :param name: Unique name for the new keyblock
        :type name: str | typing.Any
        :param from_mix: Create new shape from existing mix of shapes
        :type from_mix: bool | typing.Any | None
        :return: New shape keyblock
        :rtype: ShapeKey
        """
        ...

    def shape_key_remove(self, key: ShapeKey):
        """Remove a Shape Key from this object

        :param key: Keyblock to be removed
        :type key: ShapeKey
        """
        ...

    def shape_key_clear(self):
        """Remove all Shape Keys from this object"""
        ...

    def ray_cast(
        self,
        origin: collections.abc.Sequence[float] | mathutils.Vector | None,
        direction: collections.abc.Sequence[float] | mathutils.Vector | None,
        distance: typing.Any | None = 1.70141e38,
        depsgraph: Depsgraph | None = None,
    ):
        """Cast a ray onto evaluated geometry, in object space (using context's or provided depsgraph to get evaluated mesh if needed)

                :param origin: Origin of the ray, in object space
                :type origin: collections.abc.Sequence[float] | mathutils.Vector | None
                :param direction: Direction of the ray, in object space
                :type direction: collections.abc.Sequence[float] | mathutils.Vector | None
                :param distance: Maximum distance
                :type distance: typing.Any | None
                :param depsgraph: Depsgraph to use to get evaluated data, when called from original object (only needed if current Context's depsgraph is not suitable)
                :type depsgraph: Depsgraph | None
                :return: result, Whether the ray successfully hit the geometry, boolean

        location, The hit location of this ray cast, `mathutils.Vector` of 3 items in [-inf, inf]

        normal, The face normal at the ray cast hit location, `mathutils.Vector` of 3 items in [-inf, inf]

        index, The face index, -1 when original data isn't available, int in [-inf, inf]
        """
        ...

    def closest_point_on_mesh(
        self,
        origin: collections.abc.Sequence[float] | mathutils.Vector | None,
        distance: typing.Any | None = 1.84467e19,
        depsgraph: Depsgraph | None = None,
    ):
        """Find the nearest point on evaluated geometry, in object space (using context's or provided depsgraph to get evaluated mesh if needed)

                :param origin: Point to find closest geometry from (in object space)
                :type origin: collections.abc.Sequence[float] | mathutils.Vector | None
                :param distance: Maximum distance
                :type distance: typing.Any | None
                :param depsgraph: Depsgraph to use to get evaluated data, when called from original object (only needed if current Context's depsgraph is not suitable)
                :type depsgraph: Depsgraph | None
                :return: result, Whether closest point on geometry was found, boolean

        location, The location on the object closest to the point, `mathutils.Vector` of 3 items in [-inf, inf]

        normal, The face normal at the closest point, `mathutils.Vector` of 3 items in [-inf, inf]

        index, The face index, -1 when original data isn't available, int in [-inf, inf]
        """
        ...

    def is_modified(self, scene: Scene, settings: str | None) -> bool:
        """Determine if this object is modified from the base mesh data

                :param scene: Scene in which to check the object
                :type scene: Scene
                :param settings: Modifier settings to apply

        PREVIEW
        Preview -- Apply modifier preview settings.

        RENDER
        Render -- Apply modifier render settings.
                :type settings: str | None
                :return: Whether the object is modified
                :rtype: bool
        """
        ...

    def is_deform_modified(self, scene: Scene, settings: str | None) -> bool:
        """Determine if this object is modified by a deformation from the base mesh data

                :param scene: Scene in which to check the object
                :type scene: Scene
                :param settings: Modifier settings to apply

        PREVIEW
        Preview -- Apply modifier preview settings.

        RENDER
        Render -- Apply modifier render settings.
                :type settings: str | None
                :return: Whether the object is deform-modified
                :rtype: bool
        """
        ...

    def update_from_editmode(self) -> bool:
        """Load the objects edit-mode data into the object data

        :return: Success
        :rtype: bool
        """
        ...

    def cache_release(self):
        """Release memory used by caches associated with this object. Intended to be used by render engines only"""
        ...

    def generate_gpencil_strokes(
        self,
        grease_pencil_object: Object,
        use_collections: bool | typing.Any | None = True,
        scale_thickness: typing.Any | None = 1.0,
        sample: typing.Any | None = 0.0,
    ) -> bool:
        """Convert a curve object to grease pencil strokes.

        :param grease_pencil_object: Grease Pencil object used to create new strokes
        :type grease_pencil_object: Object
        :param use_collections: Use Collections
        :type use_collections: bool | typing.Any | None
        :param scale_thickness: Thickness scaling factor
        :type scale_thickness: typing.Any | None
        :param sample: Sample distance, zero to disable
        :type sample: typing.Any | None
        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PaintCurve(ID, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Palette(ID, bpy_struct):
    colors: PaletteColors
    """ 

    :type: PaletteColors
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleSettings(ID, bpy_struct):
    """Particle settings, reusable by multiple particle systems"""

    active_instanceweight: ParticleDupliWeight
    """ 

    :type: ParticleDupliWeight
    """

    active_instanceweight_index: int | None
    """ 

    :type: int | None
    """

    active_texture: Texture | None
    """ Active texture slot being displayed

    :type: Texture | None
    """

    active_texture_index: int | None
    """ Index of active texture slot

    :type: int | None
    """

    adaptive_angle: int
    """ How many degrees path has to curve to make another render segment

    :type: int
    """

    adaptive_pixel: int
    """ How many pixels path has to cover to make another render segment

    :type: int
    """

    angular_velocity_factor: float
    """ Angular velocity amount (in radians per second)

    :type: float
    """

    angular_velocity_mode: str
    """ What axis is used to change particle rotation with time

    :type: str
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    apply_effector_to_children: bool
    """ Apply effectors to children

    :type: bool
    """

    apply_guide_to_children: bool
    """ 

    :type: bool
    """

    bending_random: float
    """ Random stiffness of hairs

    :type: float
    """

    boids: BoidSettings
    """ 

    :type: BoidSettings
    """

    branch_threshold: float
    """ Threshold of branching

    :type: float
    """

    brownian_factor: float
    """ Amount of random, erratic particle movement

    :type: float
    """

    child_length: float
    """ Length of child paths

    :type: float
    """

    child_length_threshold: float
    """ Amount of particles left untouched by child path length

    :type: float
    """

    child_parting_factor: float
    """ Create parting in the children based on parent strands

    :type: float
    """

    child_parting_max: float
    """ Maximum root to tip angle (tip distance/root distance for long hair)

    :type: float
    """

    child_parting_min: float
    """ Minimum root to tip angle (tip distance/root distance for long hair)

    :type: float
    """

    child_percent: int
    """ Number of children per parent

    :type: int
    """

    child_radius: float
    """ Radius of children around parent

    :type: float
    """

    child_roundness: float
    """ Roundness of children around parent

    :type: float
    """

    child_size: float
    """ A multiplier for the child particle size

    :type: float
    """

    child_size_random: float
    """ Random variation to the size of the child particles

    :type: float
    """

    child_type: str
    """ Create child particles

    :type: str
    """

    clump_curve: CurveMapping
    """ Curve defining clump tapering

    :type: CurveMapping
    """

    clump_factor: float
    """ Amount of clumping

    :type: float
    """

    clump_noise_size: float
    """ Size of clump noise

    :type: float
    """

    clump_shape: float
    """ Shape of clumping

    :type: float
    """

    collision_collection: Collection
    """ Limit colliders to this collection

    :type: Collection
    """

    color_maximum: float
    """ Maximum length of the particle color vector

    :type: float
    """

    count: int
    """ Total number of particles

    :type: int
    """

    courant_target: float
    """ The relative distance a particle can move before requiring more subframes (target Courant number); 0.01 to 0.3 is the recommended range

    :type: float
    """

    create_long_hair_children: bool
    """ Calculate children that suit long hair well

    :type: bool
    """

    damping: float
    """ Amount of damping

    :type: float
    """

    display_color: str
    """ Display additional particle data as a color

    :type: str
    """

    display_method: str
    """ How particles are displayed in viewport

    :type: str
    """

    display_percentage: int
    """ Percentage of particles to display in 3D view

    :type: int
    """

    display_size: float
    """ Size of particles on viewport

    :type: float
    """

    display_step: int
    """ How many steps paths are displayed with (power of 2)

    :type: int
    """

    distribution: str
    """ How to distribute particles on selected element

    :type: str
    """

    drag_factor: float
    """ Amount of air drag

    :type: float
    """

    effect_hair: float
    """ Hair stiffness for effectors

    :type: float
    """

    effector_amount: int
    """ How many particles are effectors (0 is all particles)

    :type: int
    """

    effector_weights: EffectorWeights
    """ 

    :type: EffectorWeights
    """

    emit_from: str
    """ Where to emit particles from

    :type: str
    """

    factor_random: float
    """ Give the starting velocity a random variation

    :type: float
    """

    fluid: SPHFluidSettings
    """ 

    :type: SPHFluidSettings
    """

    force_field_1: FieldSettings
    """ 

    :type: FieldSettings
    """

    force_field_2: FieldSettings
    """ 

    :type: FieldSettings
    """

    frame_end: float
    """ Frame number to stop emitting particles

    :type: float
    """

    frame_start: float
    """ Frame number to start emitting particles

    :type: float
    """

    grid_random: float
    """ Add random offset to the grid locations

    :type: float
    """

    grid_resolution: int
    """ The resolution of the particle grid

    :type: int
    """

    hair_length: float
    """ Length of the hair

    :type: float
    """

    hair_step: int
    """ Number of hair segments

    :type: int
    """

    hexagonal_grid: bool
    """ Create the grid in a hexagonal pattern

    :type: bool
    """

    instance_collection: Collection
    """ Show objects in this collection in place of particles

    :type: Collection
    """

    instance_object: Object
    """ Show this object in place of particles

    :type: Object
    """

    instance_weights: bpy_prop_collection[ParticleDupliWeight]
    """ Weights for all of the objects in the instance collection

    :type: bpy_prop_collection[ParticleDupliWeight]
    """

    integrator: str
    """ Algorithm used to calculate physics, from the fastest to the most stable and accurate: Midpoint, Euler, Verlet, RK4

    :type: str
    """

    invert_grid: bool
    """ Invert what is considered object and what is not

    :type: bool
    """

    is_fluid: bool
    """ Particles were created by a fluid simulation

    :type: bool
    """

    jitter_factor: float
    """ Amount of jitter applied to the sampling

    :type: float
    """

    keyed_loops: int
    """ Number of times the keys are looped

    :type: int
    """

    keys_step: int
    """ 

    :type: int
    """

    kink: str
    """ Type of periodic offset on the path

    :type: str
    """

    kink_amplitude: float
    """ The amplitude of the offset

    :type: float
    """

    kink_amplitude_clump: float
    """ How much clump affects kink amplitude

    :type: float
    """

    kink_amplitude_random: float
    """ Random variation of the amplitude

    :type: float
    """

    kink_axis: str
    """ Which axis to use for offset

    :type: str
    """

    kink_axis_random: float
    """ Random variation of the orientation

    :type: float
    """

    kink_extra_steps: int
    """ Extra steps for resolution of special kink features

    :type: int
    """

    kink_flat: float
    """ How flat the hairs are

    :type: float
    """

    kink_frequency: float
    """ The frequency of the offset (1/total length)

    :type: float
    """

    kink_shape: float
    """ Adjust the offset to the beginning/end

    :type: float
    """

    length_random: float
    """ Give path length a random variation

    :type: float
    """

    lifetime: float
    """ Life span of the particles

    :type: float
    """

    lifetime_random: float
    """ Give the particle life a random variation

    :type: float
    """

    line_length_head: float
    """ Length of the line's head

    :type: float
    """

    line_length_tail: float
    """ Length of the line's tail

    :type: float
    """

    lock_boids_to_surface: bool
    """ Constrain boids to a surface

    :type: bool
    """

    mass: float
    """ Mass of the particles

    :type: float
    """

    material: int
    """ Index of material slot used for rendering particles

    :type: int
    """

    material_slot: str
    """ Material slot used for rendering particles

    :type: str
    """

    normal_factor: float
    """ Let the surface normal give the particle a starting velocity

    :type: float
    """

    object_align_factor: mathutils.Vector
    """ Let the emitter object orientation give the particle a starting velocity

    :type: mathutils.Vector
    """

    object_factor: float
    """ Let the object give the particle a starting velocity

    :type: float
    """

    particle_factor: float
    """ Let the target particle give the particle a starting velocity

    :type: float
    """

    particle_size: float
    """ The size of the particles

    :type: float
    """

    path_end: float
    """ End time of path

    :type: float
    """

    path_start: float
    """ Starting time of path

    :type: float
    """

    phase_factor: float
    """ Rotation around the chosen orientation axis

    :type: float
    """

    phase_factor_random: float
    """ Randomize rotation around the chosen orientation axis

    :type: float
    """

    physics_type: str
    """ Particle physics type

    :type: str
    """

    radius_scale: float
    """ Multiplier of diameter properties

    :type: float
    """

    react_event: str
    """ The event of target particles to react on

    :type: str
    """

    reactor_factor: float
    """ Let the vector away from the target particle's location give the particle a starting velocity

    :type: float
    """

    render_step: int
    """ How many steps paths are rendered with (power of 2)

    :type: int
    """

    render_type: str
    """ How particles are rendered

    :type: str
    """

    rendered_child_count: int
    """ Number of children per parent for rendering

    :type: int
    """

    root_radius: float
    """ Strand diameter width at the root

    :type: float
    """

    rotation_factor_random: float
    """ Randomize particle orientation

    :type: float
    """

    rotation_mode: str
    """ Particle orientation axis (does not affect Explode modifier's results)

    :type: str
    """

    roughness_1: float
    """ Amount of location dependent roughness

    :type: float
    """

    roughness_1_size: float
    """ Size of location dependent roughness

    :type: float
    """

    roughness_2: float
    """ Amount of random roughness

    :type: float
    """

    roughness_2_size: float
    """ Size of random roughness

    :type: float
    """

    roughness_2_threshold: float
    """ Amount of particles left untouched by random roughness

    :type: float
    """

    roughness_curve: CurveMapping
    """ Curve defining roughness

    :type: CurveMapping
    """

    roughness_end_shape: float
    """ Shape of endpoint roughness

    :type: float
    """

    roughness_endpoint: float
    """ Amount of endpoint roughness

    :type: float
    """

    shape: float
    """ Strand shape parameter

    :type: float
    """

    show_guide_hairs: bool
    """ Show guide hairs

    :type: bool
    """

    show_hair_grid: bool
    """ Show hair simulation grid

    :type: bool
    """

    show_health: bool
    """ Display boid health

    :type: bool
    """

    show_number: bool
    """ Show particle number

    :type: bool
    """

    show_size: bool
    """ Show particle size

    :type: bool
    """

    show_unborn: bool
    """ Show particles before they are emitted

    :type: bool
    """

    show_velocity: bool
    """ Show particle velocity

    :type: bool
    """

    size_random: float
    """ Give the particle size a random variation

    :type: float
    """

    subframes: int
    """ Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))

    :type: int
    """

    tangent_factor: float
    """ Let the surface tangent give the particle a starting velocity

    :type: float
    """

    tangent_phase: float
    """ Rotate the surface tangent

    :type: float
    """

    texture_slots: ParticleSettingsTextureSlots
    """ Texture slots defining the mapping and influence of textures

    :type: ParticleSettingsTextureSlots
    """

    time_tweak: float
    """ A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)

    :type: float
    """

    timestep: float
    """ The simulation timestep per frame (seconds per frame)

    :type: float
    """

    tip_radius: float
    """ Strand diameter width at the tip

    :type: float
    """

    trail_count: int
    """ Number of trail particles

    :type: int
    """

    twist: float
    """ Number of turns around parent along the strand

    :type: float
    """

    twist_curve: CurveMapping
    """ Curve defining twist

    :type: CurveMapping
    """

    type: str
    """ Particle type

    :type: str
    """

    use_absolute_path_time: bool
    """ Path timing is in absolute frames

    :type: bool
    """

    use_adaptive_subframes: bool
    """ Automatically set the number of subframes

    :type: bool
    """

    use_advanced_hair: bool
    """ Use full physics calculations for growing hair

    :type: bool
    """

    use_close_tip: bool
    """ Set tip radius to zero

    :type: bool
    """

    use_clump_curve: bool
    """ Use a curve to define clump tapering

    :type: bool
    """

    use_clump_noise: bool
    """ Create random clumps around the parent

    :type: bool
    """

    use_collection_count: bool
    """ Use object multiple times in the same collection

    :type: bool
    """

    use_collection_pick_random: bool
    """ Pick objects from collection randomly

    :type: bool
    """

    use_dead: bool
    """ Show particles after they have died

    :type: bool
    """

    use_die_on_collision: bool
    """ Particles die when they collide with a deflector object

    :type: bool
    """

    use_dynamic_rotation: bool
    """ Particle rotations are affected by collisions and effectors

    :type: bool
    """

    use_emit_random: bool
    """ Emit in random order of elements

    :type: bool
    """

    use_even_distribution: bool
    """ Use even distribution from faces based on face areas or edge lengths

    :type: bool
    """

    use_global_instance: bool
    """ Use object's global coordinates for duplication

    :type: bool
    """

    use_hair_bspline: bool
    """ Interpolate hair using B-Splines

    :type: bool
    """

    use_modifier_stack: bool
    """ Emit particles from mesh with modifiers applied (must use same subdivision surface level for viewport and render for correct results)

    :type: bool
    """

    use_multiply_size_mass: bool
    """ Multiply mass by particle size

    :type: bool
    """

    use_parent_particles: bool
    """ Render parent particles

    :type: bool
    """

    use_react_multiple: bool
    """ React multiple times

    :type: bool
    """

    use_react_start_end: bool
    """ Give birth to unreacted particles eventually

    :type: bool
    """

    use_regrow_hair: bool
    """ Regrow hair for each frame

    :type: bool
    """

    use_render_adaptive: bool
    """ Display steps of the particle path

    :type: bool
    """

    use_rotation_instance: bool
    """ Use object's rotation for duplication (global x-axis is aligned particle rotation axis)

    :type: bool
    """

    use_rotations: bool
    """ Calculate particle rotations

    :type: bool
    """

    use_roughness_curve: bool
    """ Use a curve to define roughness

    :type: bool
    """

    use_scale_instance: bool
    """ Use object's scale for duplication

    :type: bool
    """

    use_self_effect: bool
    """ Particle effectors affect themselves

    :type: bool
    """

    use_size_deflect: bool
    """ Use particle's size in deflection

    :type: bool
    """

    use_strand_primitive: bool
    """ Use the strand primitive for rendering

    :type: bool
    """

    use_twist_curve: bool
    """ Use a curve to define twist

    :type: bool
    """

    use_velocity_length: bool
    """ Multiply line length by particle speed

    :type: bool
    """

    use_whole_collection: bool
    """ Use whole collection at once

    :type: bool
    """

    userjit: int
    """ Emission locations per face (0 = automatic)

    :type: int
    """

    virtual_parents: float
    """ Relative amount of virtual parents

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PointCloud(ID, bpy_struct):
    """Point cloud data-block"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    attributes: AttributeGroup
    """ Geometry attributes

    :type: AttributeGroup
    """

    color_attributes: AttributeGroup
    """ Geometry color attributes

    :type: AttributeGroup
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    points: bpy_prop_collection[Point]
    """ 

    :type: bpy_prop_collection[Point]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Scene(ID, bpy_struct):
    """Scene data-block, consisting in objects and defining time and render related settings"""

    active_clip: MovieClip | None
    """ Active Movie Clip that can be used by motion tracking constraints or as a camera's background image

    :type: MovieClip | None
    """

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    audio_distance_model: str
    """ Distance model for distance attenuation calculation

    :type: str
    """

    audio_doppler_factor: float
    """ Pitch factor for Doppler effect calculation

    :type: float
    """

    audio_doppler_speed: float
    """ Speed of sound for Doppler effect calculation

    :type: float
    """

    audio_volume: float
    """ Audio volume

    :type: float
    """

    background_set: Scene
    """ Background set scene

    :type: Scene
    """

    camera: Object
    """ Active camera, used for rendering the scene

    :type: Object
    """

    collection: Collection
    """ Scene root collection that owns all the objects and other collections instantiated in the scene

    :type: Collection
    """

    cursor: View3DCursor
    """ 

    :type: View3DCursor
    """

    cycles: typing.Any
    """ Cycles render settings

    :type: typing.Any
    """

    cycles_curves: typing.Any
    """ Cycles curves rendering settings

    :type: typing.Any
    """

    display: SceneDisplay
    """ Scene display settings for 3D viewport

    :type: SceneDisplay
    """

    display_settings: ColorManagedDisplaySettings
    """ Settings of device saved image would be displayed on

    :type: ColorManagedDisplaySettings
    """

    eevee: SceneEEVEE
    """ EEVEE settings for the scene

    :type: SceneEEVEE
    """

    frame_current: int
    """ Current frame, to update animation data from Python frame_set() instead

    :type: int
    """

    frame_current_final: float
    """ Current frame with subframe and time remapping applied

    :type: float
    """

    frame_end: int
    """ Final frame of the playback/rendering range

    :type: int
    """

    frame_float: float
    """ 

    :type: float
    """

    frame_preview_end: int
    """ Alternative end frame for UI playback

    :type: int
    """

    frame_preview_start: int
    """ Alternative start frame for UI playback

    :type: int
    """

    frame_start: int
    """ First frame of the playback/rendering range

    :type: int
    """

    frame_step: int
    """ Number of frames to skip forward while rendering/playing back each frame

    :type: int
    """

    frame_subframe: float
    """ 

    :type: float
    """

    gravity: mathutils.Vector
    """ Constant acceleration in a given direction

    :type: mathutils.Vector
    """

    grease_pencil: GreasePencil
    """ Grease Pencil data-block used for annotations in the 3D view

    :type: GreasePencil
    """

    grease_pencil_settings: SceneGpencil
    """ Grease Pencil settings for the scene

    :type: SceneGpencil
    """

    hydra: SceneHydra
    """ Hydra settings for the scene

    :type: SceneHydra
    """

    is_nla_tweakmode: bool
    """ Whether there is any action referenced by NLA being edited (strictly read-only)

    :type: bool
    """

    keying_sets: KeyingSets
    """ Absolute Keying Sets for this Scene

    :type: KeyingSets
    """

    keying_sets_all: KeyingSetsAll
    """ All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)

    :type: KeyingSetsAll
    """

    lock_frame_selection_to_range: bool
    """ Don't allow frame to be selected with mouse outside of frame range

    :type: bool
    """

    node_tree: NodeTree
    """ Compositing node tree

    :type: NodeTree
    """

    objects: SceneObjects
    """ 

    :type: SceneObjects
    """

    render: RenderSettings
    """ 

    :type: RenderSettings
    """

    rigidbody_world: RigidBodyWorld
    """ 

    :type: RigidBodyWorld
    """

    safe_areas: DisplaySafeAreas
    """ 

    :type: DisplaySafeAreas
    """

    sequence_editor: SequenceEditor
    """ 

    :type: SequenceEditor
    """

    sequencer_colorspace_settings: ColorManagedSequencerColorspaceSettings
    """ Settings of color space sequencer is working in

    :type: ColorManagedSequencerColorspaceSettings
    """

    show_keys_from_selected_only: bool
    """ Only include channels relating to selected objects and data

    :type: bool
    """

    show_subframe: bool
    """ Show current scene subframe and allow set it using interface tools

    :type: bool
    """

    simulation_frame_end: int
    """ Frame at which simulations end

    :type: int
    """

    simulation_frame_start: int
    """ Frame at which simulations start

    :type: int
    """

    sync_mode: str
    """ How to sync playback

    :type: str
    """

    timeline_markers: TimelineMarkers
    """ Markers used in all timelines for the current scene

    :type: TimelineMarkers
    """

    tool_settings: ToolSettings
    """ 

    :type: ToolSettings
    """

    transform_orientation_slots: bpy_prop_collection[TransformOrientationSlot]
    """ 

    :type: bpy_prop_collection[TransformOrientationSlot]
    """

    unit_settings: UnitSettings
    """ Unit editing settings

    :type: UnitSettings
    """

    use_audio: bool
    """ Play back of audio from Sequence Editor, otherwise mute audio

    :type: bool
    """

    use_audio_scrub: bool
    """ Play audio from Sequence Editor while scrubbing

    :type: bool
    """

    use_custom_simulation_range: bool
    """ Use a simulation range that is different from the scene range for simulation nodes that don't override the frame range themselves

    :type: bool
    """

    use_gravity: bool
    """ Use global gravity for all dynamics

    :type: bool
    """

    use_nodes: bool
    """ Enable the compositing node tree

    :type: bool
    """

    use_preview_range: bool
    """ Use an alternative start/end frame range for animation playback and view renders

    :type: bool
    """

    use_stamp_note: str
    """ User defined note for the render stamping

    :type: str
    """

    view_layers: ViewLayers
    """ 

    :type: ViewLayers
    """

    view_settings: ColorManagedViewSettings
    """ Color management settings applied on image before saving

    :type: ColorManagedViewSettings
    """

    world: World
    """ World used for rendering the scene

    :type: World
    """

    @classmethod
    def update_render_engine(cls):
        """Trigger a render engine update"""
        ...

    def statistics(self, view_layer: ViewLayer) -> str | typing.Any:
        """statistics

        :param view_layer: View Layer
        :type view_layer: ViewLayer
        :return: Statistics
        :rtype: str | typing.Any
        """
        ...

    def frame_set(self, frame: int | None, subframe: typing.Any | None = 0.0):
        """Set scene frame updating all objects immediately

        :param frame: Frame number to set
        :type frame: int | None
        :param subframe: Subframe time, between 0.0 and 1.0
        :type subframe: typing.Any | None
        """
        ...

    def uvedit_aspect(self, object: Object) -> mathutils.Vector:
        """Get uv aspect for current object

        :param object: Object
        :type object: Object
        :return: aspect
        :rtype: mathutils.Vector
        """
        ...

    def ray_cast(
        self,
        depsgraph: Depsgraph,
        origin: collections.abc.Sequence[float] | mathutils.Vector | None,
        direction: collections.abc.Sequence[float] | mathutils.Vector | None,
        distance: typing.Any | None = 1.70141e38,
    ):
        """Cast a ray onto in object space

                :param depsgraph: The current dependency graph
                :type depsgraph: Depsgraph
                :param origin:
                :type origin: collections.abc.Sequence[float] | mathutils.Vector | None
                :param direction:
                :type direction: collections.abc.Sequence[float] | mathutils.Vector | None
                :param distance: Maximum distance
                :type distance: typing.Any | None
                :return: result, boolean

        location, The hit location of this ray cast, `mathutils.Vector` of 3 items in [-inf, inf]

        normal, The face normal at the ray cast hit location, `mathutils.Vector` of 3 items in [-inf, inf]

        index, The face index, -1 when original data isn't available, int in [-inf, inf]

        object, Ray cast object, `Object`

        matrix, Matrix, `mathutils.Matrix` of 4 * 4 items in [-inf, inf]
        """
        ...

    def sequence_editor_create(self) -> SequenceEditor:
        """Ensure sequence editor is valid in this scene

        :return: New sequence editor data or nullptr
        :rtype: SequenceEditor
        """
        ...

    def sequence_editor_clear(self):
        """Clear sequence editor in this scene"""
        ...

    def alembic_export(
        self,
        filepath: str | typing.Any,
        frame_start: typing.Any | None = 1,
        frame_end: typing.Any | None = 1,
        xform_samples: typing.Any | None = 1,
        geom_samples: typing.Any | None = 1,
        shutter_open: typing.Any | None = 0.0,
        shutter_close: typing.Any | None = 1.0,
        selected_only: bool | typing.Any | None = False,
        uvs: bool | typing.Any | None = True,
        normals: bool | typing.Any | None = True,
        vcolors: bool | typing.Any | None = False,
        apply_subdiv: bool | typing.Any | None = True,
        flatten: bool | typing.Any | None = False,
        visible_objects_only: bool | typing.Any | None = False,
        face_sets: bool | typing.Any | None = False,
        subdiv_schema: bool | typing.Any | None = False,
        export_hair: bool | typing.Any | None = True,
        export_particles: bool | typing.Any | None = True,
        packuv: bool | typing.Any | None = False,
        scale: typing.Any | None = 1.0,
        triangulate: bool | typing.Any | None = False,
        quad_method: str | None = "BEAUTY",
        ngon_method: str | None = "BEAUTY",
    ):
        """Export to Alembic file (deprecated, use the Alembic export operator)

        :param filepath: File Path, File path to write Alembic file
        :type filepath: str | typing.Any
        :param frame_start: Start, Start Frame
        :type frame_start: typing.Any | None
        :param frame_end: End, End Frame
        :type frame_end: typing.Any | None
        :param xform_samples: Xform samples, Transform samples per frame
        :type xform_samples: typing.Any | None
        :param geom_samples: Geom samples, Geometry samples per frame
        :type geom_samples: typing.Any | None
        :param shutter_open: Shutter open
        :type shutter_open: typing.Any | None
        :param shutter_close: Shutter close
        :type shutter_close: typing.Any | None
        :param selected_only: Selected only, Export only selected objects
        :type selected_only: bool | typing.Any | None
        :param uvs: UVs, Export UVs
        :type uvs: bool | typing.Any | None
        :param normals: Normals, Export normals
        :type normals: bool | typing.Any | None
        :param vcolors: Color Attributes, Export color attributes
        :type vcolors: bool | typing.Any | None
        :param apply_subdiv: Subsurfs as meshes, Export subdivision surfaces as meshes
        :type apply_subdiv: bool | typing.Any | None
        :param flatten: Flatten hierarchy, Flatten hierarchy
        :type flatten: bool | typing.Any | None
        :param visible_objects_only: Visible layers only, Export only objects in visible layers
        :type visible_objects_only: bool | typing.Any | None
        :param face_sets: Facesets, Export face sets
        :type face_sets: bool | typing.Any | None
        :param subdiv_schema: Use Alembic subdivision Schema, Use Alembic subdivision Schema
        :type subdiv_schema: bool | typing.Any | None
        :param export_hair: Export Hair, Exports hair particle systems as animated curves
        :type export_hair: bool | typing.Any | None
        :param export_particles: Export Particles, Exports non-hair particle systems
        :type export_particles: bool | typing.Any | None
        :param packuv: Export with packed UV islands, Export with packed UV islands
        :type packuv: bool | typing.Any | None
        :param scale: Scale, Value by which to enlarge or shrink the objects with respect to the world's origin
        :type scale: typing.Any | None
        :param triangulate: Triangulate, Export polygons (quads and n-gons) as triangles
        :type triangulate: bool | typing.Any | None
        :param quad_method: Quad Method, Method for splitting the quads into triangles
        :type quad_method: str | None
        :param ngon_method: N-gon Method, Method for splitting the n-gons into triangles
        :type ngon_method: str | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Screen(ID, bpy_struct):
    """Screen data-block, defining the layout of areas in a window"""

    areas: bpy_prop_collection[Area]
    """ Areas the screen is subdivided into

    :type: bpy_prop_collection[Area]
    """

    is_animation_playing: bool
    """ Animation playback is active

    :type: bool
    """

    is_scrubbing: bool
    """ True when the user is scrubbing through time

    :type: bool
    """

    is_temporary: bool
    """ 

    :type: bool
    """

    show_fullscreen: bool
    """ An area is maximized, filling this screen

    :type: bool
    """

    show_statusbar: bool
    """ Show status bar

    :type: bool
    """

    use_follow: bool
    """ Follow current frame in editors

    :type: bool
    """

    use_play_3d_editors: bool
    """ 

    :type: bool
    """

    use_play_animation_editors: bool
    """ 

    :type: bool
    """

    use_play_clip_editors: bool
    """ 

    :type: bool
    """

    use_play_image_editors: bool
    """ 

    :type: bool
    """

    use_play_node_editors: bool
    """ 

    :type: bool
    """

    use_play_properties_editors: bool
    """ 

    :type: bool
    """

    use_play_sequence_editors: bool
    """ 

    :type: bool
    """

    use_play_spreadsheet_editors: bool
    """ 

    :type: bool
    """

    use_play_top_left_3d_editor: bool
    """ 

    :type: bool
    """

    def statusbar_info(self) -> str | typing.Any:
        """statusbar_info

        :return: Status Bar Info
        :rtype: str | typing.Any
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Sound(ID, bpy_struct):
    """Sound data-block referencing an external or packed sound file"""

    channels: str
    """ Definition of audio channels

    :type: str
    """

    filepath: str
    """ Sound sample file used by this Sound data-block

    :type: str
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    samplerate: int
    """ Sample rate of the audio in Hz

    :type: int
    """

    use_memory_cache: bool
    """ The sound file is decoded and loaded into RAM

    :type: bool
    """

    use_mono: bool
    """ If the file contains multiple audio channels they are rendered to a single one

    :type: bool
    """

    factory: typing.Any
    """ The aud.Factory object of the sound.(readonly)"""

    def pack(self):
        """Pack the sound into the current blend file"""
        ...

    def unpack(self, method: str | None = "USE_LOCAL"):
        """Unpack the sound to the samples filename

        :param method: method, How to unpack
        :type method: str | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Speaker(ID, bpy_struct):
    """Speaker data-block for 3D audio speaker objects"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    attenuation: float
    """ How strong the distance affects volume, depending on distance model

    :type: float
    """

    cone_angle_inner: float
    """ Angle of the inner cone, in degrees, inside the cone the volume is 100%

    :type: float
    """

    cone_angle_outer: float
    """ Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated

    :type: float
    """

    cone_volume_outer: float
    """ Volume outside the outer cone

    :type: float
    """

    distance_max: float
    """ Maximum distance for volume calculation, no matter how far away the object is

    :type: float
    """

    distance_reference: float
    """ Reference distance at which volume is 100%

    :type: float
    """

    muted: bool
    """ Mute the speaker

    :type: bool
    """

    pitch: float
    """ Playback pitch of the sound

    :type: float
    """

    sound: Sound
    """ Sound data-block used by this speaker

    :type: Sound
    """

    volume: float
    """ How loud the sound is

    :type: float
    """

    volume_max: float
    """ Maximum volume, no matter how near the object is

    :type: float
    """

    volume_min: float
    """ Minimum volume, no matter how far away the object is

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Text(ID, bpy_struct):
    """Text data-block referencing an external or packed text file"""

    current_character: int
    """ Index of current character in current line, and also start index of character in selection if one exists

    :type: int
    """

    current_line: TextLine
    """ Current line, and start line of selection if one exists

    :type: TextLine
    """

    current_line_index: int
    """ Index of current TextLine in TextLine collection

    :type: int
    """

    filepath: str
    """ Filename of the text file

    :type: str
    """

    indentation: str
    """ Use tabs or spaces for indentation

    :type: str
    """

    is_dirty: bool
    """ Text file has been edited since last save

    :type: bool
    """

    is_in_memory: bool
    """ Text file is in memory, without a corresponding file on disk

    :type: bool
    """

    is_modified: bool
    """ Text file on disk is different than the one in memory

    :type: bool
    """

    lines: bpy_prop_collection[TextLine]
    """ Lines of text

    :type: bpy_prop_collection[TextLine]
    """

    select_end_character: int
    """ Index of character after end of selection in the selection end line

    :type: int
    """

    select_end_line: TextLine
    """ End line of selection

    :type: TextLine
    """

    select_end_line_index: int
    """ Index of last TextLine in selection

    :type: int
    """

    use_module: bool
    """ Run this text as a Python script on loading

    :type: bool
    """

    def clear(self):
        """clear the text block"""
        ...

    def write(self, text: str | typing.Any):
        """write text at the cursor location and advance to the end of the text block

        :param text: New text for this data-block
        :type text: str | typing.Any
        """
        ...

    def from_string(self, text: str | typing.Any):
        """Replace text with this string.

        :param text:
        :type text: str | typing.Any
        """
        ...

    def as_string(self) -> str | typing.Any:
        """Return the text as a string

        :return:
        :rtype: str | typing.Any
        """
        ...

    def is_syntax_highlight_supported(self) -> bool:
        """Returns True if the editor supports syntax highlighting for the current text datablock

        :return:
        :rtype: bool
        """
        ...

    def select_set(
        self,
        line_start: int | None,
        char_start: int | None,
        line_end: int | None,
        char_end: int | None,
    ):
        """Set selection range by line and character index

        :param line_start: Start Line
        :type line_start: int | None
        :param char_start: Start Character
        :type char_start: int | None
        :param line_end: End Line
        :type line_end: int | None
        :param char_end: End Character
        :type char_end: int | None
        """
        ...

    def cursor_set(
        self,
        line: int | None,
        character: typing.Any | None = 0,
        select: bool | typing.Any | None = False,
    ):
        """Set cursor by line and (optionally) character index

        :param line: Line
        :type line: int | None
        :param character: Character
        :type character: typing.Any | None
        :param select: Select when moving the cursor
        :type select: bool | typing.Any | None
        """
        ...

    def as_module(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    def region_as_string(self, range=None) -> str:
        """

                :param range: The region of text to be returned, defaulting to the selection when no range is passed.
        Each int pair represents a line and column: ((start_line, start_column), (end_line, end_column))
        The values match Python's slicing logic (negative values count backwards from the end, the end value is not inclusive).
                :return: The specified region as a string.
                :rtype: str
        """
        ...

    def region_from_string(self, body: str | None, range=None):
        """

                :param body: The text to be inserted.
                :type body: str | None
                :param range: The region of text to be returned, defaulting to the selection when no range is passed.
        Each int pair represents a line and column: ((start_line, start_column), (end_line, end_column))
        The values match Python's slicing logic (negative values count backwards from the end, the end value is not inclusive).
        """
        ...

class Texture(ID, bpy_struct):
    """Texture data-block used by materials, lights, worlds and brushes"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    contrast: float
    """ Adjust the contrast of the texture

    :type: float
    """

    factor_blue: float
    """ 

    :type: float
    """

    factor_green: float
    """ 

    :type: float
    """

    factor_red: float
    """ 

    :type: float
    """

    intensity: float
    """ Adjust the brightness of the texture

    :type: float
    """

    node_tree: NodeTree
    """ Node tree for node-based textures

    :type: NodeTree
    """

    saturation: float
    """ Adjust the saturation of colors in the texture

    :type: float
    """

    type: str
    """ 

    :type: str
    """

    use_clamp: bool
    """ Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range

    :type: bool
    """

    use_color_ramp: bool
    """ Map the texture intensity to the color ramp. Note that the alpha value is used for image textures, enable "Calculate Alpha" for images without an alpha channel

    :type: bool
    """

    use_nodes: bool
    """ Make this a node-based texture

    :type: bool
    """

    use_preview_alpha: bool
    """ Show Alpha in Preview Render

    :type: bool
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    def evaluate(
        self, value: collections.abc.Sequence[float] | mathutils.Vector | None
    ) -> mathutils.Vector:
        """Evaluate the texture at the a given coordinate and returns the result

        :param value: The coordinates (x,y,z) of the texture, in case of a 3D texture, the z value is the slice of the texture that is evaluated. For 2D textures such as images, the z value is ignored
        :type value: collections.abc.Sequence[float] | mathutils.Vector | None
        :return: The result of the texture where (x,y,z,w) are (red, green, blue, intensity). For grayscale textures, often intensity only will be used
        :rtype: mathutils.Vector
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VectorFont(ID, bpy_struct):
    """Vector font for Text objects"""

    filepath: str
    """ 

    :type: str
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    def pack(self):
        """Pack the font into the current blend file"""
        ...

    def unpack(self, method: str | None = "USE_LOCAL"):
        """Unpack the font to the samples filename

        :param method: method, How to unpack
        :type method: str | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Volume(ID, bpy_struct):
    """Volume data-block for 3D volume grids"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    display: VolumeDisplay
    """ Volume display settings for 3D viewport

    :type: VolumeDisplay
    """

    filepath: str
    """ Volume file used by this Volume data-block

    :type: str
    """

    frame_duration: int
    """ Number of frames of the sequence to use

    :type: int
    """

    frame_offset: int
    """ Offset the number of the frame to use in the animation

    :type: int
    """

    frame_start: int
    """ Global starting frame of the sequence, assuming first has a #1

    :type: int
    """

    grids: VolumeGrids
    """ 3D volume grids

    :type: VolumeGrids
    """

    is_sequence: bool
    """ Whether the cache is separated in a series of files

    :type: bool
    """

    materials: IDMaterials
    """ 

    :type: IDMaterials
    """

    packed_file: PackedFile
    """ 

    :type: PackedFile
    """

    render: VolumeRender
    """ Volume render settings for 3D viewport

    :type: VolumeRender
    """

    sequence_mode: str
    """ Sequence playback mode

    :type: str
    """

    velocity_grid: str
    """ Name of the velocity field, or the base name if the velocity is split into multiple grids

    :type: str
    """

    velocity_scale: float
    """ Factor to control the amount of motion blur

    :type: float
    """

    velocity_unit: str
    """ Define how the velocity vectors are interpreted with regard to time, 'frame' means the delta time is 1 frame, 'second' means the delta time is 1 / FPS

    :type: str
    """

    velocity_x_grid: str
    """ Name of the grid for the X axis component of the velocity field if it was split into multiple grids

    :type: str
    """

    velocity_y_grid: str
    """ Name of the grid for the Y axis component of the velocity field if it was split into multiple grids

    :type: str
    """

    velocity_z_grid: str
    """ Name of the grid for the Z axis component of the velocity field if it was split into multiple grids

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WindowManager(ID, bpy_struct):
    """Window manager data-block defining open windows and other user interface data"""

    addon_filter: str
    """ Filter add-ons by category

    :type: str
    """

    addon_search: str
    """ Filter by add-on name, author & category

    :type: str
    """

    addon_support: set[str]
    """ Display support level

    :type: set[str]
    """

    asset_path_dummy: str
    """ Full path to the Blender file containing the active asset

    :type: str
    """

    is_interface_locked: bool
    """ If true, the interface is currently locked by a running job and data shouldn't be modified from application timers. Otherwise, the running job might conflict with the handler causing unexpected results or even crashes

    :type: bool
    """

    keyconfigs: KeyConfigurations
    """ Registered key configurations

    :type: KeyConfigurations
    """

    operators: bpy_prop_collection[Operator]
    """ Operator registry

    :type: bpy_prop_collection[Operator]
    """

    pose_assets: bpy_prop_collection[AssetHandle]
    """ 

    :type: bpy_prop_collection[AssetHandle]
    """

    poselib_previous_action: Action
    """ 

    :type: Action
    """

    preset_name: str | typing.Any
    """ Name for new preset

    :type: str | typing.Any
    """

    windows: bpy_prop_collection[Window]
    """ Open windows

    :type: bpy_prop_collection[Window]
    """

    xr_session_settings: XrSessionSettings
    """ 

    :type: XrSessionSettings
    """

    xr_session_state: XrSessionState
    """ Runtime state information about the VR session

    :type: XrSessionState
    """

    clipboard: str
    """ Clipboard text storage.

    :type: str
    """

    @classmethod
    def fileselect_add(cls, operator: Operator | None):
        """Opens a file selector with an operator. The string properties 'filepath', 'filename', 'directory' and a 'files' collection are assigned when present in the operator

        :param operator: Operator to call
        :type operator: Operator | None
        """
        ...

    @classmethod
    def modal_handler_add(cls, operator: Operator | None) -> bool:
        """Add a modal handler to the window manager, for the given modal operator (called by invoke() with self, just before returning {'RUNNING_MODAL'})

        :param operator: Operator to call
        :type operator: Operator | None
        :return: Whether adding the handler was successful
        :rtype: bool
        """
        ...

    def event_timer_add(
        self, time_step: float | None, window: Window | None = None
    ) -> Timer:
        """Add a timer to the given window, to generate periodic 'TIMER' events

        :param time_step: Time Step, Interval in seconds between timer events
        :type time_step: float | None
        :param window: Window to attach the timer to, or None
        :type window: Window | None
        :return:
        :rtype: Timer
        """
        ...

    def event_timer_remove(self, timer: Timer):
        """event_timer_remove

        :param timer:
        :type timer: Timer
        """
        ...

    @classmethod
    def gizmo_group_type_ensure(cls, identifier: str | typing.Any):
        """Activate an existing widget group (when the persistent option isn't set)

        :param identifier: Gizmo group type name
        :type identifier: str | typing.Any
        """
        ...

    @classmethod
    def gizmo_group_type_unlink_delayed(cls, identifier: str | typing.Any):
        """Unlink a widget group (when the persistent option is set)

        :param identifier: Gizmo group type name
        :type identifier: str | typing.Any
        """
        ...

    def progress_begin(self, min: float | None, max: float | None):
        """Start progress report

        :param min: min, any value in range [0,9999]
        :type min: float | None
        :param max: max, any value in range [min+1,9998]
        :type max: float | None
        """
        ...

    def progress_update(self, value: float | None):
        """Update the progress feedback

        :param value: value, Any value between min and max as set in progress_begin()
        :type value: float | None
        """
        ...

    def progress_end(self):
        """Terminate progress report"""
        ...

    @classmethod
    def invoke_props_popup(cls, operator: Operator | None, event: Event | None):
        """Operator popup invoke (show operator properties and execute it automatically on changes)

        :param operator: Operator to call
        :type operator: Operator | None
        :param event: Event
        :type event: Event | None
        :return: result
        """
        ...

    @classmethod
    def invoke_props_dialog(
        cls,
        operator: Operator | None,
        width: typing.Any | None = 300,
        title: str | typing.Any = "",
        confirm_text: str | typing.Any = "",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
    ):
        """Operator dialog (non-autoexec popup) invoke (show operator properties and only execute it on click on OK button)

        :param operator: Operator to call
        :type operator: Operator | None
        :param width: Width of the popup
        :type width: typing.Any | None
        :param title: Title, Optional text to show as title of the popup
        :type title: str | typing.Any
        :param confirm_text: Confirm Text, Optional text to show instead to the default "OK" confirmation button text
        :type confirm_text: str | typing.Any
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :return: result
        """
        ...

    @classmethod
    def invoke_search_popup(cls, operator: Operator | None):
        """Operator search popup invoke which searches values of the operator's `bpy.types.Operator.bl_property` (which must be an EnumProperty), executing it on confirmation

        :param operator: Operator to call
        :type operator: Operator | None
        """
        ...

    @classmethod
    def invoke_popup(cls, operator: Operator | None, width: typing.Any | None = 300):
        """Operator popup invoke (only shows operator's properties, without executing it)

        :param operator: Operator to call
        :type operator: Operator | None
        :param width: Width of the popup
        :type width: typing.Any | None
        :return: result
        """
        ...

    @classmethod
    def invoke_confirm(
        cls,
        operator: Operator | None,
        event: Event | None,
        title: str | typing.Any = "",
        message: str | typing.Any = "",
        confirm_text: str | typing.Any = "",
        icon: str | None = "WARNING",
        text_ctxt: str | typing.Any | None = "",
        translate: bool | typing.Any | None = True,
    ):
        """Operator confirmation popup (only to let user confirm the execution, no operator properties shown)

        :param operator: Operator to call
        :type operator: Operator | None
        :param event: Event
        :type event: Event | None
        :param title: Title, Optional text to show as title of the popup
        :type title: str | typing.Any
        :param message: Message, Optional first line of content text
        :type message: str | typing.Any
        :param confirm_text: Confirm Text, Optional text to show instead to the default "OK" confirmation button text
        :type confirm_text: str | typing.Any
        :param icon: Icon, Optional icon displayed in the dialog
        :type icon: str | None
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str | typing.Any | None
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool | typing.Any | None
        :return: result
        """
        ...

    @classmethod
    def popmenu_begin__internal(
        cls, title: str | typing.Any, icon: str | None = "NONE"
    ) -> UIPopupMenu:
        """popmenu_begin__internal

        :param title:
        :type title: str | typing.Any
        :param icon: icon
        :type icon: str | None
        :return:
        :rtype: UIPopupMenu
        """
        ...

    @classmethod
    def popmenu_end__internal(cls, menu: UIPopupMenu):
        """popmenu_end__internal

        :param menu:
        :type menu: UIPopupMenu
        """
        ...

    @classmethod
    def popover_begin__internal(
        cls,
        ui_units_x: typing.Any | None = 0,
        from_active_button: bool | typing.Any | None = False,
    ) -> UIPopover:
        """popover_begin__internal

        :param ui_units_x: ui_units_x
        :type ui_units_x: typing.Any | None
        :param from_active_button: Use Button, Use the active button for positioning
        :type from_active_button: bool | typing.Any | None
        :return:
        :rtype: UIPopover
        """
        ...

    @classmethod
    def popover_end__internal(cls, menu: UIPopover, keymap: KeyMap | None = None):
        """popover_end__internal

        :param menu:
        :type menu: UIPopover
        :param keymap: Key Map, Active key map
        :type keymap: KeyMap | None
        """
        ...

    @classmethod
    def piemenu_begin__internal(
        cls, title: str | typing.Any, icon: str | None = "NONE", event: Event = None
    ) -> UIPieMenu:
        """piemenu_begin__internal

        :param title:
        :type title: str | typing.Any
        :param icon: icon
        :type icon: str | None
        :param event:
        :type event: Event
        :return:
        :rtype: UIPieMenu
        """
        ...

    @classmethod
    def piemenu_end__internal(cls, menu: UIPieMenu):
        """piemenu_end__internal

        :param menu:
        :type menu: UIPieMenu
        """
        ...

    @classmethod
    def operator_properties_last(cls, operator: str | typing.Any) -> OperatorProperties:
        """operator_properties_last

        :param operator:
        :type operator: str | typing.Any
        :return:
        :rtype: OperatorProperties
        """
        ...

    def print_undo_steps(self):
        """print_undo_steps"""
        ...

    @classmethod
    def tag_script_reload(cls):
        """Tag for refreshing the interface after scripts have been reloaded"""
        ...

    def popover(
        self, draw_func, *, ui_units_x=0, keymap=None, from_active_button=False
    ):
        """

        :param draw_func:
        :param ui_units_x:
        :param keymap:
        :param from_active_button:
        """
        ...

    def popup_menu(self, draw_func, *, title="", icon="NONE"):
        """Popup menus can be useful for creating menus without having to register menu classes.Note that they will not block the scripts execution, so the caller can't wait for user input.

        :param draw_func:
        :param title:
        :param icon:
        """
        ...

    def popup_menu_pie(self, event, draw_func, *, title="", icon="NONE"):
        """

        :param event:
        :param draw_func:
        :param title:
        :param icon:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_cursor_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        space_type: str | None,
        region_type: str | None,
    ) -> typing.Any:
        """Add a new draw cursor handler to this space type.
        It will be called every time the cursor for the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the cursor is drawn.
        It gets the specified arguments as input with the mouse position (tuple) as last argument.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param space_type: The space type the callback draws in; for example VIEW_3D. (`bpy.types.Space.type`)
                :type space_type: str | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_cursor_remove(cls, handler: typing.Any | None):
        """Remove a draw cursor handler that was added previously.

        :param handler: The draw cursor handler that should be removed.
        :type handler: typing.Any | None
        """
        ...

class WorkSpace(ID, bpy_struct):
    """Workspace data-block, defining the working environment for the user"""

    active_addon: int | None
    """ Active Add-on in the Workspace Add-ons filter

    :type: int | None
    """

    active_pose_asset_index: int | None
    """ Per workspace index of the active pose asset

    :type: int | None
    """

    asset_library_reference: str
    """ Active asset library to show in the UI, not used by the Asset Browser (which has its own active asset library)

    :type: str
    """

    object_mode: str
    """ Switch to this object mode when activating the workspace

    :type: str
    """

    owner_ids: wmOwnerIDs
    """ 

    :type: wmOwnerIDs
    """

    screens: bpy_prop_collection[Screen]
    """ Screen layouts of a workspace

    :type: bpy_prop_collection[Screen]
    """

    tools: wmTools
    """ 

    :type: wmTools
    """

    use_filter_by_owner: bool
    """ Filter the UI by tags

    :type: bool
    """

    use_pin_scene: bool
    """ Remember the last used scene for the workspace and switch to it whenever this workspace is activated again

    :type: bool
    """

    @classmethod
    def status_text_set_internal(cls, text: str | None):
        """Set the status bar text, typically key shortcuts for modal operators

        :param text: Text, New string for the status bar, None clears the text
        :type text: str | None
        """
        ...

    def status_text_set(self, text):
        """Set the status text or None to clear,
        When text is a function, this will be called with the (header, context) arguments.

                :param text:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class World(ID, bpy_struct):
    """World data-block describing the environment and ambient lighting of a scene"""

    animation_data: AnimData
    """ Animation data for this data-block

    :type: AnimData
    """

    color: mathutils.Color
    """ Color of the background

    :type: mathutils.Color
    """

    cycles: typing.Any
    """ Cycles world settings

    :type: typing.Any
    """

    cycles_visibility: typing.Any
    """ Cycles visibility settings

    :type: typing.Any
    """

    light_settings: WorldLighting
    """ World lighting settings

    :type: WorldLighting
    """

    lightgroup: str
    """ Lightgroup that the world belongs to

    :type: str
    """

    mist_settings: WorldMistSettings
    """ World mist settings

    :type: WorldMistSettings
    """

    node_tree: NodeTree
    """ Node tree for node based worlds

    :type: NodeTree
    """

    probe_resolution: str
    """ Resolution when baked to a texture

    :type: str
    """

    use_nodes: bool
    """ Use shader nodes to render the world

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Itasc(IKParam, bpy_struct):
    """Parameters for the iTaSC IK solver"""

    damping_epsilon: float
    """ Singular value under which damping is progressively applied (higher values produce results with more stability, less reactivity)

    :type: float
    """

    damping_max: float
    """ Maximum damping coefficient when singular value is nearly 0 (higher values produce results with more stability, less reactivity)

    :type: float
    """

    feedback: float
    """ Feedback coefficient for error correction, average response time is 1/feedback

    :type: float
    """

    iterations: int
    """ Maximum number of iterations for convergence in case of reiteration

    :type: int
    """

    mode: str
    """ 

    :type: str
    """

    precision: float
    """ Precision of convergence in case of reiteration

    :type: float
    """

    reiteration_method: str
    """ Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames

    :type: str
    """

    solver: str
    """ Solving method selection: automatic damping or manual damping

    :type: str
    """

    step_count: int
    """ Divide the frame interval into this many steps

    :type: int
    """

    step_max: float
    """ Higher bound for timestep in second in case of automatic substeps

    :type: float
    """

    step_min: float
    """ Lower bound for timestep in second in case of automatic substeps

    :type: float
    """

    translate_root_bones: bool
    """ Translate root (i.e. parentless) bones to the armature origin

    :type: bool
    """

    use_auto_step: bool
    """ Automatically determine the optimal number of steps for best performance/accuracy trade off

    :type: bool
    """

    velocity_max: float
    """ Maximum joint velocity in radians/second

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier(LineStyleModifier, bpy_struct):
    """Base type to define alpha transparency modifiers"""

    name: str
    """ Name of the modifier

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier(LineStyleModifier, bpy_struct):
    """Base type to define line color modifiers"""

    name: str
    """ Name of the modifier

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier(LineStyleModifier, bpy_struct):
    """Base type to define stroke geometry modifiers"""

    name: str
    """ Name of the modifier

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier(LineStyleModifier, bpy_struct):
    """Base type to define line thickness modifiers"""

    name: str
    """ Name of the modifier

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArmatureModifier(Modifier, bpy_struct):
    """Armature deformation modifier"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object: Object
    """ Armature object to deform with

    :type: Object
    """

    use_bone_envelopes: bool
    """ Bind Bone envelopes to armature modifier

    :type: bool
    """

    use_deform_preserve_volume: bool
    """ Deform rotation interpolation with quaternions

    :type: bool
    """

    use_multi_modifier: bool
    """ Use same input as previous modifier, and mix results using overall vgroup

    :type: bool
    """

    use_vertex_groups: bool
    """ Bind vertex groups to armature modifier

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ArrayModifier(Modifier, bpy_struct):
    """Array duplication modifier"""

    constant_offset_displace: mathutils.Vector
    """ Value for the distance between arrayed items

    :type: mathutils.Vector
    """

    count: int
    """ Number of duplicates to make

    :type: int
    """

    curve: Object
    """ Curve object to fit array length to

    :type: Object
    """

    end_cap: Object
    """ Mesh object to use as an end cap

    :type: Object
    """

    fit_length: float
    """ Length to fit array within

    :type: float
    """

    fit_type: str
    """ Array length calculation method

    :type: str
    """

    merge_threshold: float
    """ Limit below which to merge vertices

    :type: float
    """

    offset_object: Object
    """ Use the location and rotation of another object to determine the distance and rotational change between arrayed items

    :type: Object
    """

    offset_u: float
    """ Amount to offset array UVs on the U axis

    :type: float
    """

    offset_v: float
    """ Amount to offset array UVs on the V axis

    :type: float
    """

    relative_offset_displace: mathutils.Vector
    """ The size of the geometry will determine the distance between arrayed items

    :type: mathutils.Vector
    """

    start_cap: Object
    """ Mesh object to use as a start cap

    :type: Object
    """

    use_constant_offset: bool
    """ Add a constant offset

    :type: bool
    """

    use_merge_vertices: bool
    """ Merge vertices in adjacent duplicates

    :type: bool
    """

    use_merge_vertices_cap: bool
    """ Merge vertices in first and last duplicates

    :type: bool
    """

    use_object_offset: bool
    """ Add another object's transformation to the total offset

    :type: bool
    """

    use_relative_offset: bool
    """ Add an offset relative to the object's bounding box

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BevelModifier(Modifier, bpy_struct):
    """Bevel modifier to make edges and vertices more rounded"""

    affect: str
    """ Affect edges or vertices

    :type: str
    """

    angle_limit: float
    """ Angle above which to bevel edges

    :type: float
    """

    custom_profile: CurveProfile
    """ The path for the custom profile

    :type: CurveProfile
    """

    face_strength_mode: str
    """ Whether to set face strength, and which faces to set it on

    :type: str
    """

    harden_normals: bool
    """ Match normals of new faces to adjacent faces

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    limit_method: str
    """ 

    :type: str
    """

    loop_slide: bool
    """ Prefer sliding along edges to having even widths

    :type: bool
    """

    mark_seam: bool
    """ Mark Seams along beveled edges

    :type: bool
    """

    mark_sharp: bool
    """ Mark beveled edges as sharp

    :type: bool
    """

    material: int
    """ Material index of generated faces, -1 for automatic

    :type: int
    """

    miter_inner: str
    """ Pattern to use for inside of miters

    :type: str
    """

    miter_outer: str
    """ Pattern to use for outside of miters

    :type: str
    """

    offset_type: str
    """ What distance Width measures

    :type: str
    """

    profile: float
    """ The profile shape (0.5 = round)

    :type: float
    """

    profile_type: str
    """ The type of shape used to rebuild a beveled section

    :type: str
    """

    segments: int
    """ Number of segments for round edges/verts

    :type: int
    """

    spread: float
    """ Spread distance for inner miter arcs

    :type: float
    """

    use_clamp_overlap: bool
    """ Clamp the width to avoid overlap

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    vmesh_method: str
    """ The method to use to create the mesh at intersections

    :type: str
    """

    width: float
    """ Bevel amount

    :type: float
    """

    width_pct: float
    """ Bevel amount for percentage method

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BooleanModifier(Modifier, bpy_struct):
    """Boolean operations modifier"""

    collection: Collection
    """ Use mesh objects in this collection for Boolean operation

    :type: Collection
    """

    debug_options: set[str]
    """ Debugging options, only when started with '-d'

    :type: set[str]
    """

    double_threshold: float
    """ Threshold for checking overlapping geometry

    :type: float
    """

    material_mode: str
    """ Method for setting materials on the new faces

    :type: str
    """

    object: Object
    """ Mesh object to use for Boolean operation

    :type: Object
    """

    operand_type: str
    """ 

    :type: str
    """

    operation: str
    """ 

    :type: str
    """

    solver: str
    """ Method for calculating booleans

    :type: str
    """

    use_hole_tolerant: bool
    """ Better results when there are holes (slower)

    :type: bool
    """

    use_self: bool
    """ Allow self-intersection in operands

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BuildModifier(Modifier, bpy_struct):
    """Build effect modifier"""

    frame_duration: float
    """ Total time the build effect requires

    :type: float
    """

    frame_start: float
    """ Start frame of the effect

    :type: float
    """

    seed: int
    """ Seed for random if used

    :type: int
    """

    use_random_order: bool
    """ Randomize the faces or edges during build

    :type: bool
    """

    use_reverse: bool
    """ Deconstruct the mesh instead of building it

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CastModifier(Modifier, bpy_struct):
    """Modifier to cast to other shapes"""

    cast_type: str
    """ Target object shape

    :type: str
    """

    factor: float
    """ 

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object: Object
    """ Control object: if available, its location determines the center of the effect

    :type: Object
    """

    radius: float
    """ Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)

    :type: float
    """

    size: float
    """ Size of projection shape (leave as 0 for auto)

    :type: float
    """

    use_radius_as_size: bool
    """ Use radius as size of projection shape (0 = auto)

    :type: bool
    """

    use_transform: bool
    """ Use object transform to control projection shape

    :type: bool
    """

    use_x: bool
    """ 

    :type: bool
    """

    use_y: bool
    """ 

    :type: bool
    """

    use_z: bool
    """ 

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ClothModifier(Modifier, bpy_struct):
    """Cloth simulation modifier"""

    collision_settings: ClothCollisionSettings
    """ 

    :type: ClothCollisionSettings
    """

    hair_grid_max: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    hair_grid_min: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    hair_grid_resolution: bpy_prop_array[int]
    """ 

    :type: bpy_prop_array[int]
    """

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    settings: ClothSettings
    """ 

    :type: ClothSettings
    """

    solver_result: ClothSolverResult
    """ 

    :type: ClothSolverResult
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollisionModifier(Modifier, bpy_struct):
    """Collision modifier defining modifier stack position used for collision"""

    settings: CollisionSettings
    """ 

    :type: CollisionSettings
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CorrectiveSmoothModifier(Modifier, bpy_struct):
    """Correct distortion caused by deformation"""

    factor: float
    """ Smooth effect factor

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    is_bind: bool
    """ 

    :type: bool
    """

    iterations: int
    """ 

    :type: int
    """

    rest_source: str
    """ Select the source of rest positions

    :type: str
    """

    scale: float
    """ Compensate for scale applied by other modifiers

    :type: float
    """

    smooth_type: str
    """ Method used for smoothing

    :type: str
    """

    use_only_smooth: bool
    """ Apply smoothing without reconstructing the surface

    :type: bool
    """

    use_pin_boundary: bool
    """ Excludes boundary vertices from being smoothed

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurveModifier(Modifier, bpy_struct):
    """Curve deformation modifier"""

    deform_axis: str
    """ The axis that the curve deforms along

    :type: str
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object: Object
    """ Curve object to deform with

    :type: Object
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DataTransferModifier(Modifier, bpy_struct):
    """Modifier transferring some data from a source mesh"""

    data_types_edges: set[str]
    """ Which edge data layers to transfer

    :type: set[str]
    """

    data_types_loops: set[str]
    """ Which face corner data layers to transfer

    :type: set[str]
    """

    data_types_polys: set[str]
    """ Which face data layers to transfer

    :type: set[str]
    """

    data_types_verts: set[str]
    """ Which vertex data layers to transfer

    :type: set[str]
    """

    edge_mapping: str
    """ Method used to map source edges to destination ones

    :type: str
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    islands_precision: float
    """ Factor controlling precision of islands handling (typically, 0.1 should be enough, higher values can make things really slow)

    :type: float
    """

    layers_uv_select_dst: str
    """ How to match source and destination layers

    :type: str
    """

    layers_uv_select_src: str
    """ Which layers to transfer, in case of multi-layers types

    :type: str
    """

    layers_vcol_loop_select_dst: str
    """ How to match source and destination layers

    :type: str
    """

    layers_vcol_loop_select_src: str
    """ Which layers to transfer, in case of multi-layers types

    :type: str
    """

    layers_vcol_vert_select_dst: str
    """ How to match source and destination layers

    :type: str
    """

    layers_vcol_vert_select_src: str
    """ Which layers to transfer, in case of multi-layers types

    :type: str
    """

    layers_vgroup_select_dst: str
    """ How to match source and destination layers

    :type: str
    """

    layers_vgroup_select_src: str
    """ Which layers to transfer, in case of multi-layers types

    :type: str
    """

    loop_mapping: str
    """ Method used to map source faces' corners to destination ones

    :type: str
    """

    max_distance: float
    """ Maximum allowed distance between source and destination element, for non-topology mappings

    :type: float
    """

    mix_factor: float
    """ Factor to use when applying data to destination (exact behavior depends on mix mode, multiplied with weights from vertex group when defined)

    :type: float
    """

    mix_mode: str
    """ How to affect destination elements with source values

    :type: str
    """

    object: Object
    """ Object to transfer data from

    :type: Object
    """

    poly_mapping: str
    """ Method used to map source faces to destination ones

    :type: str
    """

    ray_radius: float
    """ 'Width' of rays (especially useful when raycasting against vertices or edges)

    :type: float
    """

    use_edge_data: bool
    """ Enable edge data transfer

    :type: bool
    """

    use_loop_data: bool
    """ Enable face corner data transfer

    :type: bool
    """

    use_max_distance: bool
    """ Source elements must be closer than given distance from destination one

    :type: bool
    """

    use_object_transform: bool
    """ Evaluate source and destination meshes in global space

    :type: bool
    """

    use_poly_data: bool
    """ Enable face data transfer

    :type: bool
    """

    use_vert_data: bool
    """ Enable vertex data transfer

    :type: bool
    """

    vert_mapping: str
    """ Method used to map source vertices to destination ones

    :type: str
    """

    vertex_group: str
    """ Vertex group name for selecting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DecimateModifier(Modifier, bpy_struct):
    """Decimation modifier"""

    angle_limit: float
    """ Only dissolve angles below this (planar only)

    :type: float
    """

    decimate_type: str
    """ 

    :type: str
    """

    delimit: typing.Any
    """ Limit merging geometry"""

    face_count: int
    """ The current number of faces in the decimated mesh

    :type: int
    """

    invert_vertex_group: bool
    """ Invert vertex group influence (collapse only)

    :type: bool
    """

    iterations: int
    """ Number of times reduce the geometry (unsubdivide only)

    :type: int
    """

    ratio: float
    """ Ratio of triangles to reduce to (collapse only)

    :type: float
    """

    symmetry_axis: str
    """ Axis of symmetry

    :type: str
    """

    use_collapse_triangulate: bool
    """ Keep triangulated faces resulting from decimation (collapse only)

    :type: bool
    """

    use_dissolve_boundaries: bool
    """ Dissolve all vertices in between face boundaries (planar only)

    :type: bool
    """

    use_symmetry: bool
    """ Maintain symmetry on an axis

    :type: bool
    """

    vertex_group: str
    """ Vertex group name (collapse only)

    :type: str
    """

    vertex_group_factor: float
    """ Vertex group strength

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DisplaceModifier(Modifier, bpy_struct):
    """Displacement modifier"""

    direction: str
    """ 

    :type: str
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    mid_level: float
    """ Material value that gives no displacement

    :type: float
    """

    space: str
    """ 

    :type: str
    """

    strength: float
    """ Amount to displace geometry

    :type: float
    """

    texture: Texture
    """ 

    :type: Texture
    """

    texture_coords: str
    """ 

    :type: str
    """

    texture_coords_bone: str
    """ Bone to set the texture coordinates

    :type: str
    """

    texture_coords_object: Object
    """ Object to set the texture coordinates

    :type: Object
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DynamicPaintModifier(Modifier, bpy_struct):
    """Dynamic Paint modifier"""

    brush_settings: DynamicPaintBrushSettings
    """ 

    :type: DynamicPaintBrushSettings
    """

    canvas_settings: DynamicPaintCanvasSettings
    """ 

    :type: DynamicPaintCanvasSettings
    """

    ui_type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EdgeSplitModifier(Modifier, bpy_struct):
    """Edge splitting modifier to create sharp edges"""

    split_angle: float
    """ Angle above which to split edges

    :type: float
    """

    use_edge_angle: bool
    """ Split edges with high angle between faces

    :type: bool
    """

    use_edge_sharp: bool
    """ Split edges that are marked as sharp

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ExplodeModifier(Modifier, bpy_struct):
    """Explosion effect modifier based on a particle system"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    particle_uv: str
    """ UV map to change with particle age

    :type: str
    """

    protect: float
    """ Clean vertex group edges

    :type: float
    """

    show_alive: bool
    """ Show mesh when particles are alive

    :type: bool
    """

    show_dead: bool
    """ Show mesh when particles are dead

    :type: bool
    """

    show_unborn: bool
    """ Show mesh when particles are unborn

    :type: bool
    """

    use_edge_cut: bool
    """ Cut face edges for nicer shrapnel

    :type: bool
    """

    use_size: bool
    """ Use particle size for the shrapnel

    :type: bool
    """

    vertex_group: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FluidModifier(Modifier, bpy_struct):
    """Fluid simulation modifier"""

    domain_settings: FluidDomainSettings
    """ 

    :type: FluidDomainSettings
    """

    effector_settings: FluidEffectorSettings
    """ 

    :type: FluidEffectorSettings
    """

    flow_settings: FluidFlowSettings
    """ 

    :type: FluidFlowSettings
    """

    fluid_type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilColorModifier(Modifier, bpy_struct):
    color_mode: str
    """ Attributes to modify

    :type: str
    """

    custom_curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    hue: float
    """ Color hue offset

    :type: float
    """

    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    saturation: float
    """ Color saturation factor

    :type: float
    """

    use_custom_curve: bool
    """ Use a custom curve to define a factor along the strokes

    :type: bool
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    value: float
    """ Color value factor

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilMirrorModifier(Modifier, bpy_struct):
    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    object: Object
    """ Object used as center

    :type: Object
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    use_axis_x: bool
    """ Mirror the X axis

    :type: bool
    """

    use_axis_y: bool
    """ Mirror the Y axis

    :type: bool
    """

    use_axis_z: bool
    """ Mirror the Z axis

    :type: bool
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilNoiseModifier(Modifier, bpy_struct):
    """Noise effect modifier"""

    custom_curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    factor: float
    """ Amount of noise to apply

    :type: float
    """

    factor_strength: float
    """ Amount of noise to apply to opacity

    :type: float
    """

    factor_thickness: float
    """ Amount of noise to apply to thickness

    :type: float
    """

    factor_uvs: float
    """ Amount of noise to apply to UV rotation

    :type: float
    """

    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group weights

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    noise_offset: float
    """ Offset the noise along the strokes

    :type: float
    """

    noise_scale: float
    """ Scale the noise frequency

    :type: float
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    open_random_panel: bool
    """ 

    :type: bool
    """

    random_mode: str
    """ Where to perform randomization

    :type: str
    """

    seed: int
    """ Random seed

    :type: int
    """

    step: int
    """ Number of frames between randomization steps

    :type: int
    """

    use_custom_curve: bool
    """ Use a custom curve to define a factor along the strokes

    :type: bool
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    use_random: bool
    """ Use random values over time

    :type: bool
    """

    vertex_group_name: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilOffsetModifier(Modifier, bpy_struct):
    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group weights

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    location: mathutils.Vector
    """ Values for change location

    :type: mathutils.Vector
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    offset_mode: str
    """ 

    :type: str
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    rotation: mathutils.Euler
    """ Values for changes in rotation

    :type: mathutils.Euler
    """

    scale: mathutils.Vector
    """ Values for changes in scale

    :type: mathutils.Vector
    """

    seed: int
    """ Random seed

    :type: int
    """

    stroke_location: mathutils.Vector
    """ Value for changes in location

    :type: mathutils.Vector
    """

    stroke_rotation: mathutils.Euler
    """ Value for changes in rotation

    :type: mathutils.Euler
    """

    stroke_scale: mathutils.Vector
    """ Value for changes in scale

    :type: mathutils.Vector
    """

    stroke_start_offset: int
    """ Offset starting point

    :type: int
    """

    stroke_step: int
    """ Number of elements that will be grouped

    :type: int
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    use_uniform_random_scale: bool
    """ Use the same random seed for each scale axis for a uniform scale

    :type: bool
    """

    vertex_group_name: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilOpacityModifier(Modifier, bpy_struct):
    color_factor: float
    """ Factor of opacity

    :type: float
    """

    color_mode: str
    """ Attributes to modify

    :type: str
    """

    custom_curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    hardness_factor: float
    """ Factor of stroke hardness

    :type: float
    """

    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group weights

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    use_custom_curve: bool
    """ Use a custom curve to define a factor along the strokes

    :type: bool
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    use_uniform_opacity: bool
    """ Replace the stroke opacity instead of modulating each point

    :type: bool
    """

    use_weight_as_factor: bool
    """ Use vertex group weight as factor instead of influence

    :type: bool
    """

    vertex_group_name: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilSmoothModifier(Modifier, bpy_struct):
    """Smooth effect modifier"""

    custom_curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    factor: float
    """ Amount of smooth to apply

    :type: float
    """

    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group weights

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    step: int
    """ Number of times to apply smooth (high numbers can reduce fps)

    :type: int
    """

    use_custom_curve: bool
    """ Use a custom curve to define a factor along the strokes

    :type: bool
    """

    use_edit_position: bool
    """ The modifier affects the position of the point

    :type: bool
    """

    use_edit_strength: bool
    """ The modifier affects the color strength of the point

    :type: bool
    """

    use_edit_thickness: bool
    """ The modifier affects the thickness of the point

    :type: bool
    """

    use_edit_uv: bool
    """ The modifier affects the UV rotation factor of the point

    :type: bool
    """

    use_keep_shape: bool
    """ Smooth the details, but keep the overall shape

    :type: bool
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    use_smooth_ends: bool
    """ Smooth ends of strokes

    :type: bool
    """

    vertex_group_name: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilSubdivModifier(Modifier, bpy_struct):
    """Subdivide Stroke modifier"""

    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group weights

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    level: int
    """ Level of subdivision

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    subdivision_type: str
    """ Select type of subdivision algorithm

    :type: str
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    vertex_group_name: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilThickModifierData(Modifier, bpy_struct):
    """Adjust stroke thickness"""

    custom_curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group weights

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    thickness: float
    """ Absolute thickness to apply everywhere

    :type: float
    """

    thickness_factor: float
    """ Factor to multiply the thickness with

    :type: float
    """

    use_custom_curve: bool
    """ Use a custom curve to define a factor along the strokes

    :type: bool
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    use_uniform_thickness: bool
    """ Replace the stroke thickness

    :type: bool
    """

    use_weight_factor: bool
    """ Use weight to modulate effect

    :type: bool
    """

    vertex_group_name: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GreasePencilTintModifier(Modifier, bpy_struct):
    color: mathutils.Color
    """ Color used for tinting

    :type: mathutils.Color
    """

    color_mode: str
    """ Attributes to modify

    :type: str
    """

    color_ramp: ColorRamp
    """ Gradient tinting colors

    :type: ColorRamp
    """

    custom_curve: CurveMapping
    """ Custom curve to apply effect

    :type: CurveMapping
    """

    factor: float
    """ Factor for tinting

    :type: float
    """

    invert_layer_filter: bool
    """ Invert layer filter

    :type: bool
    """

    invert_layer_pass_filter: bool
    """ Invert layer pass filter

    :type: bool
    """

    invert_material_filter: bool
    """ Invert material filter

    :type: bool
    """

    invert_material_pass_filter: bool
    """ Invert material pass filter

    :type: bool
    """

    invert_vertex_group: bool
    """ Invert vertex group weights

    :type: bool
    """

    layer_filter: str
    """ Layer name

    :type: str
    """

    layer_pass_filter: int
    """ Layer pass filter

    :type: int
    """

    material_filter: Material
    """ Material used for filtering

    :type: Material
    """

    material_pass_filter: int
    """ Material pass

    :type: int
    """

    object: Object
    """ Object used for the gradient direction

    :type: Object
    """

    open_influence_panel: bool
    """ 

    :type: bool
    """

    radius: float
    """ Influence distance from the object

    :type: float
    """

    tint_mode: str
    """ 

    :type: str
    """

    use_custom_curve: bool
    """ Use a custom curve to define a factor along the strokes

    :type: bool
    """

    use_layer_pass_filter: bool
    """ Use layer pass filter

    :type: bool
    """

    use_material_pass_filter: bool
    """ Use material pass filter

    :type: bool
    """

    use_weight_as_factor: bool
    """ Use vertex group weight as factor instead of influence

    :type: bool
    """

    vertex_group_name: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class HookModifier(Modifier, bpy_struct):
    """Hook modifier to modify the location of vertices"""

    center: mathutils.Vector
    """ Center of the hook, used for falloff and display

    :type: mathutils.Vector
    """

    falloff_curve: CurveMapping
    """ Custom falloff curve

    :type: CurveMapping
    """

    falloff_radius: float
    """ If not zero, the distance from the hook where influence ends

    :type: float
    """

    falloff_type: str
    """ 

    :type: str
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    matrix_inverse: mathutils.Matrix
    """ Reverse the transformation between this object and its target

    :type: mathutils.Matrix
    """

    object: Object
    """ Parent Object for hook, also recalculates and clears offset

    :type: Object
    """

    strength: float
    """ Relative force of the hook

    :type: float
    """

    subtarget: str
    """ Name of Parent Bone for hook (if applicable), also recalculates and clears offset

    :type: str
    """

    use_falloff_uniform: bool
    """ Compensate for non-uniform object scale

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    vertex_indices: bpy_prop_array[int]
    """ Indices of vertices bound to the modifier. For Bézier curves, handles count as additional vertices

    :type: bpy_prop_array[int]
    """

    def vertex_indices_set(self, indices: collections.abc.Iterable[int] | None):
        """Validates and assigns the array of vertex indices bound to the modifier

        :param indices: Vertex Indices
        :type indices: collections.abc.Iterable[int] | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LaplacianDeformModifier(Modifier, bpy_struct):
    """Mesh deform modifier"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    is_bind: bool
    """ Whether geometry has been bound to anchors

    :type: bool
    """

    iterations: int
    """ 

    :type: int
    """

    vertex_group: str
    """ Name of Vertex Group which determines Anchors

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LaplacianSmoothModifier(Modifier, bpy_struct):
    """Smoothing effect modifier"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    iterations: int
    """ 

    :type: int
    """

    lambda_border: float
    """ Lambda factor in border

    :type: float
    """

    lambda_factor: float
    """ Smooth effect factor

    :type: float
    """

    use_normalized: bool
    """ Improve and stabilize the enhanced shape

    :type: bool
    """

    use_volume_preserve: bool
    """ Apply volume preservation after smooth

    :type: bool
    """

    use_x: bool
    """ Smooth object along X axis

    :type: bool
    """

    use_y: bool
    """ Smooth object along Y axis

    :type: bool
    """

    use_z: bool
    """ Smooth object along Z axis

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LatticeModifier(Modifier, bpy_struct):
    """Lattice deformation modifier"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object: Object
    """ Lattice object to deform with

    :type: Object
    """

    strength: float
    """ Strength of modifier effect

    :type: float
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskModifier(Modifier, bpy_struct):
    """Mask modifier to hide parts of the mesh"""

    armature: Object
    """ Armature to use as source of bones to mask

    :type: Object
    """

    invert_vertex_group: bool
    """ Use vertices that are not part of region defined

    :type: bool
    """

    mode: str
    """ 

    :type: str
    """

    threshold: float
    """ Weights over this threshold remain

    :type: float
    """

    use_smooth: bool
    """ Use vertex group weights to cut faces at the weight contour

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshCacheModifier(Modifier, bpy_struct):
    """Cache Mesh"""

    cache_format: str
    """ 

    :type: str
    """

    deform_mode: str
    """ 

    :type: str
    """

    eval_factor: float
    """ Evaluation time in seconds

    :type: float
    """

    eval_frame: float
    """ The frame to evaluate (starting at 0)

    :type: float
    """

    eval_time: float
    """ Evaluation time in seconds

    :type: float
    """

    factor: float
    """ Influence of the deformation

    :type: float
    """

    filepath: str
    """ Path to external displacements file

    :type: str
    """

    flip_axis: typing.Any
    forward_axis: str
    """ 

    :type: str
    """

    frame_scale: float
    """ Evaluation time in seconds

    :type: float
    """

    frame_start: float
    """ Add this to the start frame

    :type: float
    """

    interpolation: str
    """ 

    :type: str
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    play_mode: str
    """ 

    :type: str
    """

    time_mode: str
    """ Method to control playback time

    :type: str
    """

    up_axis: str
    """ 

    :type: str
    """

    vertex_group: str
    """ Name of the Vertex Group which determines the influence of the modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshDeformModifier(Modifier, bpy_struct):
    """Mesh deformation modifier to deform with other meshes"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    is_bound: bool
    """ Whether geometry has been bound to control cage

    :type: bool
    """

    object: Object
    """ Mesh object to deform with

    :type: Object
    """

    precision: int
    """ The grid size for binding

    :type: int
    """

    use_dynamic_bind: bool
    """ Recompute binding dynamically on top of other deformers (slower and more memory consuming)

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshSequenceCacheModifier(Modifier, bpy_struct):
    """Cache Mesh"""

    cache_file: CacheFile
    """ 

    :type: CacheFile
    """

    object_path: str
    """ Path to the object in the Alembic archive used to lookup geometric data

    :type: str
    """

    read_data: set[str]
    """ Data to read from the cache

    :type: set[str]
    """

    use_vertex_interpolation: bool
    """ Allow interpolation of vertex positions

    :type: bool
    """

    velocity_scale: float
    """ Multiplier used to control the magnitude of the velocity vectors for time effects

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MeshToVolumeModifier(Modifier, bpy_struct):
    density: float
    """ Density of the new volume

    :type: float
    """

    interior_band_width: float
    """ Width of the gradient inside of the mesh

    :type: float
    """

    object: Object
    """ Object

    :type: Object
    """

    resolution_mode: str
    """ Mode for how the desired voxel size is specified

    :type: str
    """

    voxel_amount: int
    """ Approximate number of voxels along one axis

    :type: int
    """

    voxel_size: float
    """ Smaller values result in a higher resolution output

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MirrorModifier(Modifier, bpy_struct):
    """Mirroring modifier"""

    bisect_threshold: float
    """ Distance from the bisect plane within which vertices are removed

    :type: float
    """

    merge_threshold: float
    """ Distance within which mirrored vertices are merged

    :type: float
    """

    mirror_object: Object
    """ Object to use as mirror

    :type: Object
    """

    mirror_offset_u: float
    """ Amount to offset mirrored UVs flipping point from the 0.5 on the U axis

    :type: float
    """

    mirror_offset_v: float
    """ Amount to offset mirrored UVs flipping point from the 0.5 point on the V axis

    :type: float
    """

    offset_u: float
    """ Mirrored UV offset on the U axis

    :type: float
    """

    offset_v: float
    """ Mirrored UV offset on the V axis

    :type: float
    """

    use_axis: list[bool]
    """ Enable axis mirror

    :type: list[bool]
    """

    use_bisect_axis: list[bool]
    """ Cuts the mesh across the mirror plane

    :type: list[bool]
    """

    use_bisect_flip_axis: list[bool]
    """ Flips the direction of the slice

    :type: list[bool]
    """

    use_clip: bool
    """ Prevent vertices from going through the mirror during transform

    :type: bool
    """

    use_mirror_merge: bool
    """ Merge vertices within the merge threshold

    :type: bool
    """

    use_mirror_u: bool
    """ Mirror the U texture coordinate around the flip offset point

    :type: bool
    """

    use_mirror_udim: bool
    """ Mirror the texture coordinate around each tile center

    :type: bool
    """

    use_mirror_v: bool
    """ Mirror the V texture coordinate around the flip offset point

    :type: bool
    """

    use_mirror_vertex_groups: bool
    """ Mirror vertex groups (e.g. .R->.L)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MultiresModifier(Modifier, bpy_struct):
    """Multiresolution mesh modifier"""

    boundary_smooth: str
    """ Controls how open boundaries are smoothed

    :type: str
    """

    filepath: str
    """ Path to external displacements file

    :type: str
    """

    is_external: bool
    """ Store multires displacements outside the .blend file, to save memory

    :type: bool
    """

    levels: int
    """ Number of subdivisions to use in the viewport

    :type: int
    """

    quality: int
    """ Accuracy of vertex positions, lower value is faster but less precise

    :type: int
    """

    render_levels: int
    """ The subdivision level visible at render time

    :type: int
    """

    sculpt_levels: int
    """ Number of subdivisions to use in sculpt mode

    :type: int
    """

    show_only_control_edges: bool
    """ Skip drawing/rendering of interior subdivided edges

    :type: bool
    """

    total_levels: int
    """ Number of subdivisions for which displacements are stored

    :type: int
    """

    use_creases: bool
    """ Use mesh crease information to sharpen edges or corners

    :type: bool
    """

    use_custom_normals: bool
    """ Interpolates existing custom normals to resulting mesh

    :type: bool
    """

    use_sculpt_base_mesh: bool
    """ Make Sculpt Mode tools deform the base mesh while previewing the displacement of higher subdivision levels

    :type: bool
    """

    uv_smooth: str
    """ Controls how smoothing is applied to UVs

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodesModifier(Modifier, bpy_struct):
    bake_directory: str
    """ Location on disk where the bake data is stored

    :type: str
    """

    bakes: NodesModifierBakes
    """ 

    :type: NodesModifierBakes
    """

    node_group: NodeTree
    """ Node group that controls what this modifier does

    :type: NodeTree
    """

    open_bake_data_blocks_panel: bool
    """ 

    :type: bool
    """

    open_bake_panel: bool
    """ 

    :type: bool
    """

    open_manage_panel: bool
    """ 

    :type: bool
    """

    open_named_attributes_panel: bool
    """ 

    :type: bool
    """

    open_output_attributes_panel: bool
    """ 

    :type: bool
    """

    panels: NodesModifierPanels
    """ 

    :type: NodesModifierPanels
    """

    show_group_selector: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NormalEditModifier(Modifier, bpy_struct):
    """Modifier affecting/generating custom normals"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    mix_factor: float
    """ How much of generated normals to mix with existing ones

    :type: float
    """

    mix_limit: float
    """ Maximum angle between old and new normals

    :type: float
    """

    mix_mode: str
    """ How to mix generated normals with existing ones

    :type: str
    """

    mode: str
    """ How to affect (generate) normals

    :type: str
    """

    no_polynors_fix: bool
    """ Do not flip polygons when their normals are not consistent with their newly computed custom vertex normals

    :type: bool
    """

    offset: mathutils.Vector
    """ Offset from object's center

    :type: mathutils.Vector
    """

    target: Object
    """ Target object used to affect normals

    :type: Object
    """

    use_direction_parallel: bool
    """ Use same direction for all normals, from origin to target's center (Directional mode only)

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for selecting/weighting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OceanModifier(Modifier, bpy_struct):
    """Simulate an ocean surface"""

    bake_foam_fade: float
    """ How much foam accumulates over time (baked ocean only)

    :type: float
    """

    choppiness: float
    """ Choppiness of the wave's crest (adds some horizontal component to the displacement)

    :type: float
    """

    damping: float
    """ Damp reflected waves going in opposite direction to the wind

    :type: float
    """

    depth: float
    """ Depth of the solid ground below the water surface

    :type: float
    """

    fetch_jonswap: float
    """ This is the distance from a lee shore, called the fetch, or the distance over which the wind blows with constant velocity. Used by 'JONSWAP' and 'TMA' models

    :type: float
    """

    filepath: str
    """ Path to a folder to store external baked images

    :type: str
    """

    foam_coverage: float
    """ Amount of generated foam

    :type: float
    """

    foam_layer_name: str
    """ Name of the vertex color layer used for foam

    :type: str
    """

    frame_end: int
    """ End frame of the ocean baking

    :type: int
    """

    frame_start: int
    """ Start frame of the ocean baking

    :type: int
    """

    geometry_mode: str
    """ Method of modifying geometry

    :type: str
    """

    invert_spray: bool
    """ Invert the spray direction map

    :type: bool
    """

    is_cached: bool
    """ Whether the ocean is using cached data or simulating

    :type: bool
    """

    random_seed: int
    """ Seed of the random generator

    :type: int
    """

    repeat_x: int
    """ Repetitions of the generated surface in X

    :type: int
    """

    repeat_y: int
    """ Repetitions of the generated surface in Y

    :type: int
    """

    resolution: int
    """ Resolution of the generated surface for rendering and baking

    :type: int
    """

    sharpen_peak_jonswap: float
    """ Peak sharpening for 'JONSWAP' and 'TMA' models

    :type: float
    """

    size: float
    """ Surface scale factor (does not affect the height of the waves)

    :type: float
    """

    spatial_size: int
    """ Size of the simulation domain (in meters), and of the generated geometry (in BU)

    :type: int
    """

    spectrum: str
    """ Spectrum to use

    :type: str
    """

    spray_layer_name: str
    """ Name of the vertex color layer used for the spray direction map

    :type: str
    """

    time: float
    """ Current time of the simulation

    :type: float
    """

    use_foam: bool
    """ Generate foam mask as a vertex color channel

    :type: bool
    """

    use_normals: bool
    """ Output normals for bump mapping - disabling can speed up performance if it's not needed

    :type: bool
    """

    use_spray: bool
    """ Generate map of spray direction as a vertex color channel

    :type: bool
    """

    viewport_resolution: int
    """ Viewport resolution of the generated surface

    :type: int
    """

    wave_alignment: float
    """ How much the waves are aligned to each other

    :type: float
    """

    wave_direction: float
    """ Main direction of the waves when they are (partially) aligned

    :type: float
    """

    wave_scale: float
    """ Scale of the displacement effect

    :type: float
    """

    wave_scale_min: float
    """ Shortest allowed wavelength

    :type: float
    """

    wind_velocity: float
    """ Wind speed

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleInstanceModifier(Modifier, bpy_struct):
    """Particle system instancing modifier"""

    axis: str
    """ Pole axis for rotation

    :type: str
    """

    index_layer_name: str
    """ Custom data layer name for the index

    :type: str
    """

    object: Object
    """ Object that has the particle system

    :type: Object
    """

    particle_amount: float
    """ Amount of particles to use for instancing

    :type: float
    """

    particle_offset: float
    """ Relative offset of particles to use for instancing, to avoid overlap of multiple instances

    :type: float
    """

    particle_system: ParticleSystem
    """ 

    :type: ParticleSystem
    """

    particle_system_index: int
    """ 

    :type: int
    """

    position: float
    """ Position along path

    :type: float
    """

    random_position: float
    """ Randomize position along path

    :type: float
    """

    random_rotation: float
    """ Randomize rotation around path

    :type: float
    """

    rotation: float
    """ Rotation around path

    :type: float
    """

    show_alive: bool
    """ Show instances when particles are alive

    :type: bool
    """

    show_dead: bool
    """ Show instances when particles are dead

    :type: bool
    """

    show_unborn: bool
    """ Show instances when particles are unborn

    :type: bool
    """

    space: str
    """ Space to use for copying mesh data

    :type: str
    """

    use_children: bool
    """ Create instances from child particles

    :type: bool
    """

    use_normal: bool
    """ Create instances from normal particles

    :type: bool
    """

    use_path: bool
    """ Create instances along particle paths

    :type: bool
    """

    use_preserve_shape: bool
    """ Don't stretch the object

    :type: bool
    """

    use_size: bool
    """ Use particle size to scale the instances

    :type: bool
    """

    value_layer_name: str
    """ Custom data layer name for the randomized value

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleSystemModifier(Modifier, bpy_struct):
    """Particle system simulation modifier"""

    particle_system: ParticleSystem
    """ Particle System that this modifier controls

    :type: ParticleSystem
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RemeshModifier(Modifier, bpy_struct):
    """Generate a new surface with regular topology that follows the shape of the input mesh"""

    adaptivity: float
    """ Reduces the final face count by simplifying geometry where detail is not needed, generating triangles. A value greater than 0 disables Fix Poles

    :type: float
    """

    mode: str
    """ 

    :type: str
    """

    octree_depth: int
    """ Resolution of the octree; higher values give finer details

    :type: int
    """

    scale: float
    """ The ratio of the largest dimension of the model over the size of the grid

    :type: float
    """

    sharpness: float
    """ Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input

    :type: float
    """

    threshold: float
    """ If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component

    :type: float
    """

    use_remove_disconnected: bool
    """ 

    :type: bool
    """

    use_smooth_shade: bool
    """ Output faces with smooth shading rather than flat shaded

    :type: bool
    """

    voxel_size: float
    """ Size of the voxel in object space used for volume evaluation. Lower values preserve finer details

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ScrewModifier(Modifier, bpy_struct):
    """Revolve edges"""

    angle: float
    """ Angle of revolution

    :type: float
    """

    axis: str
    """ Screw axis

    :type: str
    """

    iterations: int
    """ Number of times to apply the screw operation

    :type: int
    """

    merge_threshold: float
    """ Limit below which to merge vertices

    :type: float
    """

    object: Object
    """ Object to define the screw axis

    :type: Object
    """

    render_steps: int
    """ Number of steps in the revolution

    :type: int
    """

    screw_offset: float
    """ Offset the revolution along its axis

    :type: float
    """

    steps: int
    """ Number of steps in the revolution

    :type: int
    """

    use_merge_vertices: bool
    """ Merge adjacent vertices (screw offset must be zero)

    :type: bool
    """

    use_normal_calculate: bool
    """ Calculate the order of edges (needed for meshes, but not curves)

    :type: bool
    """

    use_normal_flip: bool
    """ Flip normals of lathed faces

    :type: bool
    """

    use_object_screw_offset: bool
    """ Use the distance between the objects to make a screw

    :type: bool
    """

    use_smooth_shade: bool
    """ Output faces with smooth shading rather than flat shaded

    :type: bool
    """

    use_stretch_u: bool
    """ Stretch the U coordinates between 0 and 1 when UVs are present

    :type: bool
    """

    use_stretch_v: bool
    """ Stretch the V coordinates between 0 and 1 when UVs are present

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShrinkwrapModifier(Modifier, bpy_struct):
    """Shrink wrapping modifier to shrink wrap and object to a target"""

    auxiliary_target: Object
    """ Additional mesh target to shrink to

    :type: Object
    """

    cull_face: str
    """ Stop vertices from projecting to a face on the target when facing towards/away

    :type: str
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    offset: float
    """ Distance to keep from the target

    :type: float
    """

    project_limit: float
    """ Limit the distance used for projection (zero disables)

    :type: float
    """

    subsurf_levels: int
    """ Number of subdivisions that must be performed before extracting vertices' positions and normals

    :type: int
    """

    target: Object
    """ Mesh target to shrink to

    :type: Object
    """

    use_invert_cull: bool
    """ When projecting in the negative direction invert the face cull mode

    :type: bool
    """

    use_negative_direction: bool
    """ Allow vertices to move in the negative direction of axis

    :type: bool
    """

    use_positive_direction: bool
    """ Allow vertices to move in the positive direction of axis

    :type: bool
    """

    use_project_x: bool
    """ 

    :type: bool
    """

    use_project_y: bool
    """ 

    :type: bool
    """

    use_project_z: bool
    """ 

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    wrap_method: str
    """ 

    :type: str
    """

    wrap_mode: str
    """ Select how vertices are constrained to the target surface

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SimpleDeformModifier(Modifier, bpy_struct):
    """Simple deformation modifier to apply effects such as twisting and bending"""

    angle: float
    """ Angle of deformation

    :type: float
    """

    deform_axis: str
    """ Deform around local axis

    :type: str
    """

    deform_method: str
    """ 

    :type: str
    """

    factor: float
    """ Amount to deform object

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    limits: bpy_prop_array[float]
    """ Lower/Upper limits for deform

    :type: bpy_prop_array[float]
    """

    lock_x: bool
    """ Do not allow deformation along the X axis

    :type: bool
    """

    lock_y: bool
    """ Do not allow deformation along the Y axis

    :type: bool
    """

    lock_z: bool
    """ Do not allow deformation along the Z axis

    :type: bool
    """

    origin: Object
    """ Offset the origin and orientation of the deformation

    :type: Object
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SkinModifier(Modifier, bpy_struct):
    """Generate Skin"""

    branch_smoothing: float
    """ Smooth complex geometry around branches

    :type: float
    """

    use_smooth_shade: bool
    """ Output faces with smooth shading rather than flat shaded

    :type: bool
    """

    use_x_symmetry: bool
    """ Avoid making unsymmetrical quads across the X axis

    :type: bool
    """

    use_y_symmetry: bool
    """ Avoid making unsymmetrical quads across the Y axis

    :type: bool
    """

    use_z_symmetry: bool
    """ Avoid making unsymmetrical quads across the Z axis

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SmoothModifier(Modifier, bpy_struct):
    """Smoothing effect modifier"""

    factor: float
    """ Strength of modifier effect

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    iterations: int
    """ 

    :type: int
    """

    use_x: bool
    """ Smooth object along X axis

    :type: bool
    """

    use_y: bool
    """ Smooth object along Y axis

    :type: bool
    """

    use_z: bool
    """ Smooth object along Z axis

    :type: bool
    """

    vertex_group: str
    """ Name of Vertex Group which determines influence of modifier per point

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SoftBodyModifier(Modifier, bpy_struct):
    """Soft body simulation modifier"""

    point_cache: PointCache
    """ 

    :type: PointCache
    """

    settings: SoftBodySettings
    """ 

    :type: SoftBodySettings
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SolidifyModifier(Modifier, bpy_struct):
    """Create a solid skin, compensating for sharp angles"""

    bevel_convex: float
    """ Edge bevel weight to be added to outside edges

    :type: float
    """

    edge_crease_inner: float
    """ Assign a crease to inner edges

    :type: float
    """

    edge_crease_outer: float
    """ Assign a crease to outer edges

    :type: float
    """

    edge_crease_rim: float
    """ Assign a crease to the edges making up the rim

    :type: float
    """

    invert_vertex_group: bool
    """ Invert the vertex group influence

    :type: bool
    """

    material_offset: int
    """ Offset material index of generated faces

    :type: int
    """

    material_offset_rim: int
    """ Offset material index of generated rim faces

    :type: int
    """

    nonmanifold_boundary_mode: str
    """ Selects the boundary adjustment algorithm

    :type: str
    """

    nonmanifold_merge_threshold: float
    """ Distance within which degenerated geometry is merged

    :type: float
    """

    nonmanifold_thickness_mode: str
    """ Selects the used thickness algorithm

    :type: str
    """

    offset: float
    """ Offset the thickness from the center

    :type: float
    """

    rim_vertex_group: str
    """ Vertex group that the generated rim geometry will be weighted to

    :type: str
    """

    shell_vertex_group: str
    """ Vertex group that the generated shell geometry will be weighted to

    :type: str
    """

    solidify_mode: str
    """ Selects the used algorithm

    :type: str
    """

    thickness: float
    """ Thickness of the shell

    :type: float
    """

    thickness_clamp: float
    """ Offset clamp based on geometry scale

    :type: float
    """

    thickness_vertex_group: float
    """ Thickness factor to use for zero vertex group influence

    :type: float
    """

    use_even_offset: bool
    """ Maintain thickness by adjusting for sharp corners (slow, disable when not needed)

    :type: bool
    """

    use_flat_faces: bool
    """ Make faces use the minimal vertex weight assigned to their vertices (ensures new faces remain parallel to their original ones, slow, disable when not needed)

    :type: bool
    """

    use_flip_normals: bool
    """ Invert the face direction

    :type: bool
    """

    use_quality_normals: bool
    """ Calculate normals which result in more even thickness (slow, disable when not needed)

    :type: bool
    """

    use_rim: bool
    """ Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)

    :type: bool
    """

    use_rim_only: bool
    """ Only add the rim to the original data

    :type: bool
    """

    use_thickness_angle_clamp: bool
    """ Clamp thickness based on angles

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SubsurfModifier(Modifier, bpy_struct):
    """Subdivision surface modifier"""

    boundary_smooth: str
    """ Controls how open boundaries are smoothed

    :type: str
    """

    levels: int
    """ Number of subdivisions to perform

    :type: int
    """

    quality: int
    """ Accuracy of vertex positions, lower value is faster but less precise

    :type: int
    """

    render_levels: int
    """ Number of subdivisions to perform when rendering

    :type: int
    """

    show_only_control_edges: bool
    """ Skip displaying interior subdivided edges

    :type: bool
    """

    subdivision_type: str
    """ Select type of subdivision algorithm

    :type: str
    """

    use_creases: bool
    """ Use mesh crease information to sharpen edges or corners

    :type: bool
    """

    use_custom_normals: bool
    """ Interpolates existing custom normals to resulting mesh

    :type: bool
    """

    use_limit_surface: bool
    """ Place vertices at the surface that would be produced with infinite levels of subdivision (smoothest possible shape)

    :type: bool
    """

    uv_smooth: str
    """ Controls how smoothing is applied to UVs

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SurfaceDeformModifier(Modifier, bpy_struct):
    falloff: float
    """ Controls how much nearby polygons influence deformation

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    is_bound: bool
    """ Whether geometry has been bound to target mesh

    :type: bool
    """

    strength: float
    """ Strength of modifier deformations

    :type: float
    """

    target: Object
    """ Mesh object to deform with

    :type: Object
    """

    use_sparse_bind: bool
    """ Only record binding data for vertices matching the vertex group at the time of bind

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for selecting/weighting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SurfaceModifier(Modifier, bpy_struct):
    """Surface modifier defining modifier stack position used for surface fields"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TriangulateModifier(Modifier, bpy_struct):
    """Triangulate Mesh"""

    keep_custom_normals: bool
    """ Try to preserve custom normals.
Warning: Depending on chosen triangulation method, shading may not be fully preserved, "Fixed" method usually gives the best result here

    :type: bool
    """

    min_vertices: int
    """ Triangulate only polygons with vertex count greater than or equal to this number

    :type: int
    """

    ngon_method: str
    """ Method for splitting the n-gons into triangles

    :type: str
    """

    quad_method: str
    """ Method for splitting the quads into triangles

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UVProjectModifier(Modifier, bpy_struct):
    """UV projection modifier to set UVs from a projector"""

    aspect_x: float
    """ Horizontal aspect ratio (only used for camera projectors)

    :type: float
    """

    aspect_y: float
    """ Vertical aspect ratio (only used for camera projectors)

    :type: float
    """

    projector_count: int
    """ Number of projectors to use

    :type: int
    """

    projectors: bpy_prop_collection[UVProjector]
    """ 

    :type: bpy_prop_collection[UVProjector]
    """

    scale_x: float
    """ Horizontal scale (only used for camera projectors)

    :type: float
    """

    scale_y: float
    """ Vertical scale (only used for camera projectors)

    :type: float
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UVWarpModifier(Modifier, bpy_struct):
    """Add target position to UV coordinates"""

    axis_u: str
    """ Pole axis for rotation

    :type: str
    """

    axis_v: str
    """ Pole axis for rotation

    :type: str
    """

    bone_from: str
    """ Bone defining offset

    :type: str
    """

    bone_to: str
    """ Bone defining offset

    :type: str
    """

    center: bpy_prop_array[float]
    """ Center point for rotate/scale

    :type: bpy_prop_array[float]
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object_from: Object
    """ Object defining offset

    :type: Object
    """

    object_to: Object
    """ Object defining offset

    :type: Object
    """

    offset: bpy_prop_array[float]
    """ 2D Offset for the warp

    :type: bpy_prop_array[float]
    """

    rotation: float
    """ 2D Rotation for the warp

    :type: float
    """

    scale: bpy_prop_array[float]
    """ 2D Scale for the warp

    :type: bpy_prop_array[float]
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VertexWeightEditModifier(Modifier, bpy_struct):
    """Edit the weights of vertices in a group"""

    add_threshold: float
    """ Lower (inclusive) bound for a vertex's weight to be added to the vgroup

    :type: float
    """

    default_weight: float
    """ Default weight a vertex will have if it is not in the vgroup

    :type: float
    """

    falloff_type: str
    """ How weights are mapped to their new values

    :type: str
    """

    invert_falloff: bool
    """ Invert the resulting falloff weight

    :type: bool
    """

    invert_mask_vertex_group: bool
    """ Invert vertex group mask influence

    :type: bool
    """

    map_curve: CurveMapping
    """ Custom mapping curve

    :type: CurveMapping
    """

    mask_constant: float
    """ Global influence of current modifications on vgroup

    :type: float
    """

    mask_tex_map_bone: str
    """ Which bone to take texture coordinates from

    :type: str
    """

    mask_tex_map_object: Object
    """ Which object to take texture coordinates from

    :type: Object
    """

    mask_tex_mapping: str
    """ Which texture coordinates to use for mapping

    :type: str
    """

    mask_tex_use_channel: str
    """ Which texture channel to use for masking

    :type: str
    """

    mask_tex_uv_layer: str
    """ UV map name

    :type: str
    """

    mask_texture: Texture
    """ Masking texture

    :type: Texture
    """

    mask_vertex_group: str
    """ Masking vertex group name

    :type: str
    """

    normalize: bool
    """ Normalize the resulting weights (otherwise they are only clamped within 0.0 to 1.0 range)

    :type: bool
    """

    remove_threshold: float
    """ Upper (inclusive) bound for a vertex's weight to be removed from the vgroup

    :type: float
    """

    use_add: bool
    """ Add vertices with weight over threshold to vgroup

    :type: bool
    """

    use_remove: bool
    """ Remove vertices with weight below threshold from vgroup

    :type: bool
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VertexWeightMixModifier(Modifier, bpy_struct):
    """Mix the weights of two vertex groups"""

    default_weight_a: float
    """ Default weight a vertex will have if it is not in the first A vgroup

    :type: float
    """

    default_weight_b: float
    """ Default weight a vertex will have if it is not in the second B vgroup

    :type: float
    """

    invert_mask_vertex_group: bool
    """ Invert vertex group mask influence

    :type: bool
    """

    invert_vertex_group_a: bool
    """ Invert the influence of vertex group A

    :type: bool
    """

    invert_vertex_group_b: bool
    """ Invert the influence of vertex group B

    :type: bool
    """

    mask_constant: float
    """ Global influence of current modifications on vgroup

    :type: float
    """

    mask_tex_map_bone: str
    """ Which bone to take texture coordinates from

    :type: str
    """

    mask_tex_map_object: Object
    """ Which object to take texture coordinates from

    :type: Object
    """

    mask_tex_mapping: str
    """ Which texture coordinates to use for mapping

    :type: str
    """

    mask_tex_use_channel: str
    """ Which texture channel to use for masking

    :type: str
    """

    mask_tex_uv_layer: str
    """ UV map name

    :type: str
    """

    mask_texture: Texture
    """ Masking texture

    :type: Texture
    """

    mask_vertex_group: str
    """ Masking vertex group name

    :type: str
    """

    mix_mode: str
    """ How weights from vgroup B affect weights of vgroup A

    :type: str
    """

    mix_set: str
    """ Which vertices should be affected

    :type: str
    """

    normalize: bool
    """ Normalize the resulting weights (otherwise they are only clamped within 0.0 to 1.0 range)

    :type: bool
    """

    vertex_group_a: str
    """ First vertex group name

    :type: str
    """

    vertex_group_b: str
    """ Second vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VertexWeightProximityModifier(Modifier, bpy_struct):
    """Set the weights of vertices in a group from a target object's distance"""

    falloff_type: str
    """ How weights are mapped to their new values

    :type: str
    """

    invert_falloff: bool
    """ Invert the resulting falloff weight

    :type: bool
    """

    invert_mask_vertex_group: bool
    """ Invert vertex group mask influence

    :type: bool
    """

    map_curve: CurveMapping
    """ Custom mapping curve

    :type: CurveMapping
    """

    mask_constant: float
    """ Global influence of current modifications on vgroup

    :type: float
    """

    mask_tex_map_bone: str
    """ Which bone to take texture coordinates from

    :type: str
    """

    mask_tex_map_object: Object
    """ Which object to take texture coordinates from

    :type: Object
    """

    mask_tex_mapping: str
    """ Which texture coordinates to use for mapping

    :type: str
    """

    mask_tex_use_channel: str
    """ Which texture channel to use for masking

    :type: str
    """

    mask_tex_uv_layer: str
    """ UV map name

    :type: str
    """

    mask_texture: Texture
    """ Masking texture

    :type: Texture
    """

    mask_vertex_group: str
    """ Masking vertex group name

    :type: str
    """

    max_dist: float
    """ Distance mapping to weight 1.0

    :type: float
    """

    min_dist: float
    """ Distance mapping to weight 0.0

    :type: float
    """

    normalize: bool
    """ Normalize the resulting weights (otherwise they are only clamped within 0.0 to 1.0 range)

    :type: bool
    """

    proximity_geometry: set[str]
    """ Use the shortest computed distance to target object's geometry as weight

    :type: set[str]
    """

    proximity_mode: str
    """ Which distances to target object to use

    :type: str
    """

    target: Object
    """ Object to calculate vertices distances from

    :type: Object
    """

    vertex_group: str
    """ Vertex group name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VolumeDisplaceModifier(Modifier, bpy_struct):
    strength: float
    """ Strength of the displacement

    :type: float
    """

    texture: Texture
    """ 

    :type: Texture
    """

    texture_map_mode: str
    """ 

    :type: str
    """

    texture_map_object: Object
    """ Object to use for texture mapping

    :type: Object
    """

    texture_mid_level: mathutils.Vector
    """ Subtracted from the texture color to get a displacement vector

    :type: mathutils.Vector
    """

    texture_sample_radius: float
    """ Smaller values result in better performance but might cut off the volume

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VolumeToMeshModifier(Modifier, bpy_struct):
    adaptivity: float
    """ Reduces the final face count by simplifying geometry where detail is not needed

    :type: float
    """

    grid_name: str
    """ Grid in the volume object that is converted to a mesh

    :type: str
    """

    object: Object
    """ Object

    :type: Object
    """

    resolution_mode: str
    """ Mode for how the desired voxel size is specified

    :type: str
    """

    threshold: float
    """ Voxels with a larger value are inside the generated mesh

    :type: float
    """

    use_smooth_shade: bool
    """ Output faces with smooth shading rather than flat shaded

    :type: bool
    """

    voxel_amount: int
    """ Approximate number of voxels along one axis

    :type: int
    """

    voxel_size: float
    """ Smaller values result in a higher resolution output

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WarpModifier(Modifier, bpy_struct):
    """Warp modifier"""

    bone_from: str
    """ Bone to transform from

    :type: str
    """

    bone_to: str
    """ Bone defining offset

    :type: str
    """

    falloff_curve: CurveMapping
    """ Custom falloff curve

    :type: CurveMapping
    """

    falloff_radius: float
    """ Radius to apply

    :type: float
    """

    falloff_type: str
    """ 

    :type: str
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    object_from: Object
    """ Object to transform from

    :type: Object
    """

    object_to: Object
    """ Object to transform to

    :type: Object
    """

    strength: float
    """ 

    :type: float
    """

    texture: Texture
    """ 

    :type: Texture
    """

    texture_coords: str
    """ 

    :type: str
    """

    texture_coords_bone: str
    """ Bone to set the texture coordinates

    :type: str
    """

    texture_coords_object: Object
    """ Object to set the texture coordinates

    :type: Object
    """

    use_volume_preserve: bool
    """ Preserve volume when rotations are used

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    vertex_group: str
    """ Vertex group name for modulating the deform

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WaveModifier(Modifier, bpy_struct):
    """Wave effect modifier"""

    damping_time: float
    """ Number of frames in which the wave damps out after it dies

    :type: float
    """

    falloff_radius: float
    """ Distance after which it fades out

    :type: float
    """

    height: float
    """ Height of the wave

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    lifetime: float
    """ Lifetime of the wave in frames, zero means infinite

    :type: float
    """

    narrowness: float
    """ Distance between the top and the base of a wave, the higher the value, the more narrow the wave

    :type: float
    """

    speed: float
    """ Speed of the wave, towards the starting point when negative

    :type: float
    """

    start_position_object: Object
    """ Object which defines the wave center

    :type: Object
    """

    start_position_x: float
    """ X coordinate of the start position

    :type: float
    """

    start_position_y: float
    """ Y coordinate of the start position

    :type: float
    """

    texture: Texture
    """ 

    :type: Texture
    """

    texture_coords: str
    """ 

    :type: str
    """

    texture_coords_bone: str
    """ Bone to set the texture coordinates

    :type: str
    """

    texture_coords_object: Object
    """ Object to set the texture coordinates

    :type: Object
    """

    time_offset: float
    """ Either the starting frame (for positive speed) or ending frame (for negative speed)

    :type: float
    """

    use_cyclic: bool
    """ Cyclic wave effect

    :type: bool
    """

    use_normal: bool
    """ Displace along normals

    :type: bool
    """

    use_normal_x: bool
    """ Enable displacement along the X normal

    :type: bool
    """

    use_normal_y: bool
    """ Enable displacement along the Y normal

    :type: bool
    """

    use_normal_z: bool
    """ Enable displacement along the Z normal

    :type: bool
    """

    use_x: bool
    """ X axis motion

    :type: bool
    """

    use_y: bool
    """ Y axis motion

    :type: bool
    """

    uv_layer: str
    """ UV map name

    :type: str
    """

    vertex_group: str
    """ Vertex group name for modulating the wave

    :type: str
    """

    width: float
    """ Distance between the waves

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WeightedNormalModifier(Modifier, bpy_struct):
    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    keep_sharp: bool
    """ Keep sharp edges as computed for default split normals, instead of setting a single weighted normal for each vertex

    :type: bool
    """

    mode: str
    """ Weighted vertex normal mode to use

    :type: str
    """

    thresh: float
    """ Threshold value for different weights to be considered equal

    :type: float
    """

    use_face_influence: bool
    """ Use influence of face for weighting

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for modifying the selected areas

    :type: str
    """

    weight: int
    """ Corrective factor applied to faces' weights, 50 is neutral, lower values increase weight of weak faces, higher values increase weight of strong faces

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WeldModifier(Modifier, bpy_struct):
    """Weld modifier"""

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    loose_edges: bool
    """ Collapse edges without faces, cloth sewing edges

    :type: bool
    """

    merge_threshold: float
    """ Limit below which to merge vertices

    :type: float
    """

    mode: str
    """ Mode defines the merge rule

    :type: str
    """

    vertex_group: str
    """ Vertex group name for selecting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WireframeModifier(Modifier, bpy_struct):
    """Wireframe effect modifier"""

    crease_weight: float
    """ Crease weight (if active)

    :type: float
    """

    invert_vertex_group: bool
    """ Invert vertex group influence

    :type: bool
    """

    material_offset: int
    """ Offset material index of generated faces

    :type: int
    """

    offset: float
    """ Offset the thickness from the center

    :type: float
    """

    thickness: float
    """ Thickness factor

    :type: float
    """

    thickness_vertex_group: float
    """ Thickness factor to use for zero vertex group influence

    :type: float
    """

    use_boundary: bool
    """ Support face boundaries

    :type: bool
    """

    use_crease: bool
    """ Crease hub edges for improved subdivision surface

    :type: bool
    """

    use_even_offset: bool
    """ Scale the offset to give more even thickness

    :type: bool
    """

    use_relative_offset: bool
    """ Scale the offset by surrounding geometry

    :type: bool
    """

    use_replace: bool
    """ Remove original geometry

    :type: bool
    """

    vertex_group: str
    """ Vertex group name for selecting the affected areas

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeCustomGroup(Node, bpy_struct):
    """Base node type for custom registered node group types"""

    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeInternal(Node, bpy_struct):
    @classmethod
    def poll(cls, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node type can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """
        ...

    def poll_instance(self, node_tree: NodeTree | None) -> bool:
        """If non-null output is returned, the node can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: NodeTree | None
        :return:
        :rtype: bool
        """
        ...

    def update(self):
        """Update on node graph topology changes (adding or removing nodes and links)"""
        ...

    def draw_buttons(self, context: Context, layout: UILayout):
        """Draw node buttons

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def draw_buttons_ext(self, context: Context, layout: UILayout):
        """Draw node buttons in the sidebar

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketStandard(NodeSocket, bpy_struct):
    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    def draw(
        self, context: Context, layout: UILayout, node: Node, text: str | typing.Any
    ):
        """Draw socket

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        :param node: Node, Node the socket belongs to
        :type node: Node
        :param text: Text, Text label to draw alongside properties
        :type text: str | typing.Any
        """
        ...

    def draw_color(self, context: Context, node: Node) -> bpy_prop_array[float]:
        """Color of the socket icon

        :param context:
        :type context: Context
        :param node: Node, Node the socket belongs to
        :type node: Node
        :return: Color
        :rtype: bpy_prop_array[float]
        """
        ...

    @classmethod
    def draw_color_simple(cls) -> bpy_prop_array[float]:
        """Color of the socket icon

        :return: Color
        :rtype: bpy_prop_array[float]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfacePanel(NodeTreeInterfaceItem, bpy_struct):
    """Declaration of a node panel"""

    default_closed: bool
    """ Panel is closed by default on new nodes

    :type: bool
    """

    description: str
    """ Panel description

    :type: str
    """

    interface_items: bpy_prop_collection[NodeTreeInterfaceItem]
    """ Items in the node panel

    :type: bpy_prop_collection[NodeTreeInterfaceItem]
    """

    name: str
    """ Panel name

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocket(NodeTreeInterfaceItem, bpy_struct):
    """Declaration of a node socket"""

    attribute_domain: str
    """ Attribute domain used by the geometry nodes modifier to create an attribute output

    :type: str
    """

    bl_socket_idname: str
    """ Name of the socket type

    :type: str
    """

    default_attribute_name: str
    """ The attribute name used by default when the node group is used by a geometry nodes modifier

    :type: str
    """

    default_input: str
    """ Input to use when the socket is unconnected. Requires "Hide Value"

    :type: str
    """

    description: str
    """ Socket description

    :type: str
    """

    force_non_field: bool
    """ Only allow single value inputs rather than fields

    :type: bool
    """

    hide_in_modifier: bool
    """ Don't show the input value in the geometry nodes modifier interface

    :type: bool
    """

    hide_value: bool
    """ Hide the socket input value even when the socket is not connected

    :type: bool
    """

    identifier: str
    """ Unique identifier for mapping sockets

    :type: str
    """

    in_out: str
    """ Input or output socket type

    :type: str
    """

    layer_selection_field: bool
    """ Take Grease Pencil Layer or Layer Group as selection field

    :type: bool
    """

    name: str
    """ Socket name

    :type: str
    """

    socket_type: str
    """ Type of the socket generated by this interface item

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw properties of the socket interface

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurvesSculpt(Paint, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GpPaint(Paint, bpy_struct):
    color_mode: str
    """ Paint Mode

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GpSculptPaint(Paint, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GpVertexPaint(Paint, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GpWeightPaint(Paint, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ImagePaint(Paint, bpy_struct):
    """Properties of image and texture painting mode"""

    canvas: Image
    """ Image used as canvas

    :type: Image
    """

    clone_image: Image
    """ Image used as clone source

    :type: Image
    """

    dither: float
    """ Amount of dithering when painting on byte images

    :type: float
    """

    interpolation: str
    """ Texture filtering type

    :type: str
    """

    invert_stencil: bool
    """ Invert the stencil layer

    :type: bool
    """

    missing_materials: bool
    """ The mesh is missing materials

    :type: bool
    """

    missing_stencil: bool
    """ Image Painting does not have a stencil

    :type: bool
    """

    missing_texture: bool
    """ Image Painting does not have a texture to paint on

    :type: bool
    """

    missing_uvs: bool
    """ A UV layer is missing on the mesh

    :type: bool
    """

    mode: str
    """ Mode of operation for projection painting

    :type: str
    """

    normal_angle: int
    """ Paint most on faces pointing towards the view according to this angle

    :type: int
    """

    screen_grab_size: bpy_prop_array[int]
    """ Size to capture the image for re-projecting

    :type: bpy_prop_array[int]
    """

    seam_bleed: int
    """ Extend paint beyond the faces UVs to reduce seams (in pixels, slower)

    :type: int
    """

    stencil_color: mathutils.Color
    """ Stencil color in the viewport

    :type: mathutils.Color
    """

    stencil_image: Image
    """ Image used as stencil

    :type: Image
    """

    use_backface_culling: bool
    """ Ignore faces pointing away from the view (faster)

    :type: bool
    """

    use_clone_layer: bool
    """ Use another UV map as clone source, otherwise use the 3D cursor as the source

    :type: bool
    """

    use_normal_falloff: bool
    """ Paint most on faces pointing towards the view

    :type: bool
    """

    use_occlude: bool
    """ Only paint onto the faces directly under the brush (slower)

    :type: bool
    """

    use_stencil_layer: bool
    """ Set the mask layer from the UV map buttons

    :type: bool
    """

    def detect_data(self) -> bool:
        """Check if required texpaint data exist

        :return:
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class Sculpt(Paint, bpy_struct):
    automasking_boundary_edges_propagation_steps: int
    """ Distance where boundary edge automasking is going to protect vertices from the fully masked edge

    :type: int
    """

    automasking_cavity_blur_steps: int
    """ The number of times the cavity mask is blurred

    :type: int
    """

    automasking_cavity_curve: CurveMapping
    """ Curve used for the sensitivity

    :type: CurveMapping
    """

    automasking_cavity_curve_op: CurveMapping
    """ Curve used for the sensitivity

    :type: CurveMapping
    """

    automasking_cavity_factor: float
    """ The contrast of the cavity mask

    :type: float
    """

    automasking_start_normal_falloff: float
    """ Extend the angular range with a falloff gradient

    :type: float
    """

    automasking_start_normal_limit: float
    """ The range of angles that will be affected

    :type: float
    """

    automasking_view_normal_falloff: float
    """ Extend the angular range with a falloff gradient

    :type: float
    """

    automasking_view_normal_limit: float
    """ The range of angles that will be affected

    :type: float
    """

    constant_detail_resolution: float
    """ Maximum edge length for dynamic topology sculpting (as divisor of Blender unit - higher value means smaller edge length)

    :type: float
    """

    detail_percent: float
    """ Maximum edge length for dynamic topology sculpting (in brush percenage)

    :type: float
    """

    detail_refine_method: str
    """ In dynamic-topology mode, how to add or remove mesh detail

    :type: str
    """

    detail_size: float
    """ Maximum edge length for dynamic topology sculpting (in pixels)

    :type: float
    """

    detail_type_method: str
    """ In dynamic-topology mode, how mesh detail size is calculated

    :type: str
    """

    gravity: float
    """ Amount of gravity after each dab

    :type: float
    """

    gravity_object: Object
    """ Object whose Z axis defines orientation of gravity

    :type: Object
    """

    lock_x: bool
    """ Disallow changes to the X axis of vertices

    :type: bool
    """

    lock_y: bool
    """ Disallow changes to the Y axis of vertices

    :type: bool
    """

    lock_z: bool
    """ Disallow changes to the Z axis of vertices

    :type: bool
    """

    radial_symmetry: bpy_prop_array[int]
    """ Number of times to copy strokes across the surface

    :type: bpy_prop_array[int]
    """

    symmetrize_direction: str
    """ Source and destination for symmetrize operator

    :type: str
    """

    transform_mode: str
    """ How the transformation is going to be applied to the target

    :type: str
    """

    use_automasking_boundary_edges: bool
    """ Do not affect non manifold boundary edges

    :type: bool
    """

    use_automasking_boundary_face_sets: bool
    """ Do not affect vertices that belong to a Face Set boundary

    :type: bool
    """

    use_automasking_cavity: bool
    """ Do not affect vertices on peaks, based on the surface curvature

    :type: bool
    """

    use_automasking_cavity_inverted: bool
    """ Do not affect vertices within crevices, based on the surface curvature

    :type: bool
    """

    use_automasking_custom_cavity_curve: bool
    """ Use custom curve

    :type: bool
    """

    use_automasking_face_sets: bool
    """ Affect only vertices that share Face Sets with the active vertex

    :type: bool
    """

    use_automasking_start_normal: bool
    """ Affect only vertices with a similar normal to where the stroke starts

    :type: bool
    """

    use_automasking_topology: bool
    """ Affect only vertices connected to the active vertex under the brush

    :type: bool
    """

    use_automasking_view_normal: bool
    """ Affect only vertices with a normal that faces the viewer

    :type: bool
    """

    use_automasking_view_occlusion: bool
    """ Only affect vertices that are not occluded by other faces. (Slower performance)

    :type: bool
    """

    use_deform_only: bool
    """ Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UvSculpt(Paint, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VertexPaint(Paint, bpy_struct):
    """Properties of vertex and weight paint mode"""

    radial_symmetry: bpy_prop_array[int]
    """ Number of times to copy strokes across the surface

    :type: bpy_prop_array[int]
    """

    use_group_restrict: bool
    """ Restrict painting to vertices in the group

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BoolProperty(Property, bpy_struct):
    """RNA boolean property definition"""

    array_dimensions: bpy_prop_array[int]
    """ Length of each dimension of the array

    :type: bpy_prop_array[int]
    """

    array_length: int
    """ Maximum length of the array, 0 means unlimited

    :type: int
    """

    default: bool
    """ Default value for this number

    :type: bool
    """

    default_array: list[bool]
    """ Default value for this array

    :type: list[bool]
    """

    is_array: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CollectionProperty(Property, bpy_struct):
    """RNA collection property to define lists, arrays and mappings"""

    fixed_type: Struct
    """ Fixed pointer type, empty if variable type

    :type: Struct
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EnumProperty(Property, bpy_struct):
    """RNA enumeration property definition, to choose from a number of predefined options"""

    default: str
    """ Default value for this enum

    :type: str
    """

    default_flag: set[str]
    """ Default value for this enum

    :type: set[str]
    """

    enum_items: bpy_prop_collection[EnumPropertyItem]
    """ Possible values for the property

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    enum_items_static: bpy_prop_collection[EnumPropertyItem]
    """ Possible values for the property (never calls optional dynamic generation of those)

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    enum_items_static_ui: bpy_prop_collection[EnumPropertyItem]
    """ Possible values for the property (never calls optional dynamic generation of those). Includes UI elements (separators and section headings)

    :type: bpy_prop_collection[EnumPropertyItem]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FloatProperty(Property, bpy_struct):
    """RNA floating-point number (single precision) property definition"""

    array_dimensions: bpy_prop_array[int]
    """ Length of each dimension of the array

    :type: bpy_prop_array[int]
    """

    array_length: int
    """ Maximum length of the array, 0 means unlimited

    :type: int
    """

    default: float
    """ Default value for this number

    :type: float
    """

    default_array: bpy_prop_array[float]
    """ Default value for this array

    :type: bpy_prop_array[float]
    """

    hard_max: float
    """ Maximum value used by buttons

    :type: float
    """

    hard_min: float
    """ Minimum value used by buttons

    :type: float
    """

    is_array: bool
    """ 

    :type: bool
    """

    precision: int
    """ Number of digits after the dot used by buttons. Fraction is automatically hidden for exact integer values of fields with unit 'NONE' or 'TIME' (frame count) and step divisible by 100

    :type: int
    """

    soft_max: float
    """ Maximum value used by buttons

    :type: float
    """

    soft_min: float
    """ Minimum value used by buttons

    :type: float
    """

    step: float
    """ Step size used by number buttons, for floats 1/100th of the step size

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IntProperty(Property, bpy_struct):
    """RNA integer number property definition"""

    array_dimensions: bpy_prop_array[int]
    """ Length of each dimension of the array

    :type: bpy_prop_array[int]
    """

    array_length: int
    """ Maximum length of the array, 0 means unlimited

    :type: int
    """

    default: int
    """ Default value for this number

    :type: int
    """

    default_array: bpy_prop_array[int]
    """ Default value for this array

    :type: bpy_prop_array[int]
    """

    hard_max: int
    """ Maximum value used by buttons

    :type: int
    """

    hard_min: int
    """ Minimum value used by buttons

    :type: int
    """

    is_array: bool
    """ 

    :type: bool
    """

    soft_max: int
    """ Maximum value used by buttons

    :type: int
    """

    soft_min: int
    """ Minimum value used by buttons

    :type: int
    """

    step: int
    """ Step size used by number buttons, for floats 1/100th of the step size

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PointerProperty(Property, bpy_struct):
    """RNA pointer property to point to another RNA struct"""

    fixed_type: Struct
    """ Fixed pointer type, empty if variable type

    :type: Struct
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class StringProperty(Property, bpy_struct):
    """RNA text string property definition"""

    default: str
    """ String default value

    :type: str
    """

    length_max: int
    """ Maximum length of the string, 0 means unlimited

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AssetHandle(PropertyGroup, bpy_struct):
    """Reference to some asset"""

    file_data: FileSelectEntry
    """ TEMPORARY, DO NOT USE - File data used to refer to the asset

    :type: FileSelectEntry
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OperatorFileListElement(PropertyGroup, bpy_struct):
    name: str
    """ Name of a file or directory within a file list

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OperatorMousePath(PropertyGroup, bpy_struct):
    """Mouse path values for operators that record such paths"""

    loc: mathutils.Vector
    """ Mouse location

    :type: mathutils.Vector
    """

    time: float
    """ Time of mouse location

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OperatorStrokeElement(PropertyGroup, bpy_struct):
    is_start: bool
    """ 

    :type: bool
    """

    location: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    mouse: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    mouse_event: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    pen_flip: bool
    """ 

    :type: bool
    """

    pressure: float
    """ Tablet pressure

    :type: float
    """

    size: float
    """ Brush size in screen space

    :type: float
    """

    time: float
    """ 

    :type: float
    """

    x_tilt: float
    """ 

    :type: float
    """

    y_tilt: float
    """ 

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SelectedUvElement(PropertyGroup, bpy_struct):
    element_index: int
    """ 

    :type: int
    """

    face_index: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class HydraRenderEngine(RenderEngine, bpy_struct):
    """Base class from USD Hydra based renderers"""

    def get_render_settings(self, engine_type):
        """Provide render settings for HdRenderDelegate.

        :param engine_type:
        """
        ...

    def render(self, depsgraph):
        """

        :param depsgraph:
        """
        ...

    def update(self, data, depsgraph):
        """

        :param data:
        :param depsgraph:
        """
        ...

    def view_draw(self, context, depsgraph):
        """

        :param context:
        :param depsgraph:
        """
        ...

    def view_update(self, context, depsgraph):
        """

        :param context:
        :param depsgraph:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class EffectSequence(Sequence, bpy_struct):
    """Sequence strip applying an effect on the images created by other strips"""

    alpha_mode: str
    """ Representation of alpha information in the RGBA pixels

    :type: str
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    multiply_alpha: bool
    """ Multiply alpha along with color channels

    :type: bool
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or time-code index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ImageSequence(Sequence, bpy_struct):
    """Sequence strip to load one or more images"""

    alpha_mode: str
    """ Representation of alpha information in the RGBA pixels

    :type: str
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    directory: str
    """ 

    :type: str
    """

    elements: SequenceElements
    """ 

    :type: SequenceElements
    """

    multiply_alpha: bool
    """ Multiply alpha along with color channels

    :type: bool
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3D

    :type: Stereo3dFormat
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_multiview: bool
    """ Use Multiple Views (when available)

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or time-code index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    views_format: str
    """ Mode to load image views

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MaskSequence(Sequence, bpy_struct):
    """Sequence strip to load a video from a mask"""

    alpha_mode: str
    """ Representation of alpha information in the RGBA pixels

    :type: str
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    mask: Mask
    """ Mask that this sequence uses

    :type: Mask
    """

    multiply_alpha: bool
    """ Multiply alpha along with color channels

    :type: bool
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MetaSequence(Sequence, bpy_struct):
    """Sequence strip to group other strips as a single sequence strip"""

    alpha_mode: str
    """ Representation of alpha information in the RGBA pixels

    :type: str
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    channels: bpy_prop_collection[SequenceTimelineChannel]
    """ 

    :type: bpy_prop_collection[SequenceTimelineChannel]
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    multiply_alpha: bool
    """ Multiply alpha along with color channels

    :type: bool
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    sequences: SequencesMeta
    """ Sequences nested in meta strip

    :type: SequencesMeta
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or time-code index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    def separate(self):
        """Separate meta"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieClipSequence(Sequence, bpy_struct):
    """Sequence strip to load a video from the clip editor"""

    alpha_mode: str
    """ Representation of alpha information in the RGBA pixels

    :type: str
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    fps: float
    """ Frames per second

    :type: float
    """

    multiply_alpha: bool
    """ Multiply alpha along with color channels

    :type: bool
    """

    stabilize2d: bool
    """ Use the 2D stabilized version of the clip

    :type: bool
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    undistort: bool
    """ Use the undistorted version of the clip

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MovieSequence(Sequence, bpy_struct):
    """Sequence strip to load a video"""

    alpha_mode: str
    """ Representation of alpha information in the RGBA pixels

    :type: str
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    colorspace_settings: ColorManagedInputColorspaceSettings
    """ Input color space settings

    :type: ColorManagedInputColorspaceSettings
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    elements: bpy_prop_collection[SequenceElement]
    """ 

    :type: bpy_prop_collection[SequenceElement]
    """

    filepath: str
    """ 

    :type: str
    """

    fps: float
    """ Frames per second

    :type: float
    """

    multiply_alpha: bool
    """ Multiply alpha along with color channels

    :type: bool
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    retiming_keys: RetimingKeys
    """ 

    :type: RetimingKeys
    """

    stereo_3d_format: Stereo3dFormat
    """ Settings for stereo 3D

    :type: Stereo3dFormat
    """

    stream_index: int
    """ For files with several movie streams, use the stream with the given index

    :type: int
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_multiview: bool
    """ Use Multiple Views (when available)

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or time-code index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    views_format: str
    """ Mode to load movie views

    :type: str
    """

    def reload_if_needed(self) -> bool:
        """reload_if_needed

        :return: True if the strip can produce frames, False otherwise
        :rtype: bool
        """
        ...

    def metadata(self) -> IDPropertyWrapPtr:
        """Retrieve metadata of the movie file

        :return: Dict-like object containing the metadata
        :rtype: IDPropertyWrapPtr
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SceneSequence(Sequence, bpy_struct):
    """Sequence strip using the rendered image of a scene"""

    alpha_mode: str
    """ Representation of alpha information in the RGBA pixels

    :type: str
    """

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    color_multiply: float
    """ 

    :type: float
    """

    color_saturation: float
    """ Adjust the intensity of the input's color

    :type: float
    """

    crop: SequenceCrop
    """ 

    :type: SequenceCrop
    """

    fps: float
    """ Frames per second

    :type: float
    """

    multiply_alpha: bool
    """ Multiply alpha along with color channels

    :type: bool
    """

    proxy: SequenceProxy
    """ 

    :type: SequenceProxy
    """

    scene: Scene
    """ Scene that this sequence uses

    :type: Scene
    """

    scene_camera: Object
    """ Override the scene's active camera

    :type: Object
    """

    scene_input: str
    """ Input type to use for the Scene strip

    :type: str
    """

    strobe: float
    """ Only display every nth frame

    :type: float
    """

    transform: SequenceTransform
    """ 

    :type: SequenceTransform
    """

    use_annotations: bool
    """ Show Annotations in OpenGL previews

    :type: bool
    """

    use_deinterlace: bool
    """ Remove fields from video movies

    :type: bool
    """

    use_flip_x: bool
    """ Flip on the X axis

    :type: bool
    """

    use_flip_y: bool
    """ Flip on the Y axis

    :type: bool
    """

    use_float: bool
    """ Convert input to float data

    :type: bool
    """

    use_proxy: bool
    """ Use a preview proxy and/or time-code index for this strip

    :type: bool
    """

    use_reverse_frames: bool
    """ Reverse frame order

    :type: bool
    """

    volume: float
    """ Playback volume of the sound

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SoundSequence(Sequence, bpy_struct):
    """Sequence strip defining a sound to be played over a period of time"""

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    pan: float
    """ Playback panning of the sound (only for Mono sources)

    :type: float
    """

    show_waveform: bool
    """ Display the audio waveform inside the strip

    :type: bool
    """

    sound: Sound
    """ Sound data-block used by this sequence

    :type: Sound
    """

    volume: float
    """ Playback volume of the sound

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequenceColorBalance(SequenceColorBalanceData, bpy_struct):
    """Color balance parameters for a sequence strip"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BrightContrastModifier(SequenceModifier, bpy_struct):
    """Bright/contrast modifier data for sequence strip"""

    bright: float
    """ Adjust the luminosity of the colors

    :type: float
    """

    contrast: float
    """ Adjust the difference in luminosity between pixels

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorBalanceModifier(SequenceModifier, bpy_struct):
    """Color balance modifier for sequence strip"""

    color_balance: SequenceColorBalanceData
    """ 

    :type: SequenceColorBalanceData
    """

    color_multiply: float
    """ Multiply the intensity of each pixel

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CurvesModifier(SequenceModifier, bpy_struct):
    """RGB curves modifier for sequence strip"""

    curve_mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class HueCorrectModifier(SequenceModifier, bpy_struct):
    """Hue correction modifier for sequence strip"""

    curve_mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SequencerTonemapModifierData(SequenceModifier, bpy_struct):
    """Tone mapping modifier"""

    adaptation: float
    """ If 0, global; if 1, based on pixel intensity

    :type: float
    """

    contrast: float
    """ Set to 0 to use estimate from input image

    :type: float
    """

    correction: float
    """ If 0, same for all channels; if 1, each independent

    :type: float
    """

    gamma: float
    """ If not used, set to 1

    :type: float
    """

    intensity: float
    """ If less than zero, darkens image; otherwise, makes it brighter

    :type: float
    """

    key: float
    """ The value the average luminance is mapped to

    :type: float
    """

    offset: float
    """ Normally always 1, but can be used as an extra control to alter the brightness curve

    :type: float
    """

    tonemap_type: str
    """ Tone mapping algorithm

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SoundEqualizerModifier(SequenceModifier, bpy_struct):
    """Equalize audio"""

    graphics: bpy_prop_collection[EQCurveMappingData]
    """ Graphical definition equalization

    :type: bpy_prop_collection[EQCurveMappingData]
    """

    def new_graphic(
        self, min_freq: float | None, max_freq: float | None
    ) -> EQCurveMappingData:
        """Add a new EQ band

        :param min_freq: Minimum Frequency, Minimum Frequency
        :type min_freq: float | None
        :param max_freq: Maximum Frequency, Maximum Frequency
        :type max_freq: float | None
        :return: Newly created graphical Equalizer definition
        :rtype: EQCurveMappingData
        """
        ...

    def clear_soundeqs(self):
        """Remove all graphical equalizers from the Equalizer modifier"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WhiteBalanceModifier(SequenceModifier, bpy_struct):
    """White balance modifier for sequence strip"""

    white_value: mathutils.Color
    """ This color defines white in the strip

    :type: mathutils.Color
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxBlur(ShaderFx, bpy_struct):
    """Gaussian Blur effect"""

    rotation: float
    """ Rotation of the effect

    :type: float
    """

    samples: int
    """ Number of Blur Samples (zero, disable blur)

    :type: int
    """

    size: mathutils.Vector
    """ Factor of Blur

    :type: mathutils.Vector
    """

    use_dof_mode: bool
    """ Blur using camera depth of field

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxColorize(ShaderFx, bpy_struct):
    """Colorize effect"""

    factor: float
    """ Mix factor

    :type: float
    """

    high_color: bpy_prop_array[float]
    """ Second color used for effect

    :type: bpy_prop_array[float]
    """

    low_color: bpy_prop_array[float]
    """ First color used for effect

    :type: bpy_prop_array[float]
    """

    mode: str
    """ Effect mode

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxFlip(ShaderFx, bpy_struct):
    """Flip effect"""

    use_flip_x: bool
    """ Flip image horizontally

    :type: bool
    """

    use_flip_y: bool
    """ Flip image vertically

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxGlow(ShaderFx, bpy_struct):
    """Glow effect"""

    blend_mode: str
    """ Blend mode

    :type: str
    """

    glow_color: mathutils.Color
    """ Color used for generated glow

    :type: mathutils.Color
    """

    mode: str
    """ Glow mode

    :type: str
    """

    opacity: float
    """ Effect Opacity

    :type: float
    """

    rotation: float
    """ Rotation of the effect

    :type: float
    """

    samples: int
    """ Number of Blur Samples

    :type: int
    """

    select_color: mathutils.Color
    """ Color selected to apply glow

    :type: mathutils.Color
    """

    size: mathutils.Vector
    """ Size of the effect

    :type: mathutils.Vector
    """

    threshold: float
    """ Limit to select color for glow effect

    :type: float
    """

    use_glow_under: bool
    """ Glow only areas with alpha (not supported with Regular blend mode)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxPixel(ShaderFx, bpy_struct):
    """Pixelate effect"""

    size: bpy_prop_array[int]
    """ Pixel size

    :type: bpy_prop_array[int]
    """

    use_antialiasing: bool
    """ Antialias pixels

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxRim(ShaderFx, bpy_struct):
    """Rim effect"""

    blur: bpy_prop_array[int]
    """ Number of pixels for blurring rim (set to 0 to disable)

    :type: bpy_prop_array[int]
    """

    mask_color: mathutils.Color
    """ Color that must be kept

    :type: mathutils.Color
    """

    mode: str
    """ Blend mode

    :type: str
    """

    offset: bpy_prop_array[int]
    """ Offset of the rim

    :type: bpy_prop_array[int]
    """

    rim_color: mathutils.Color
    """ Color used for Rim

    :type: mathutils.Color
    """

    samples: int
    """ Number of Blur Samples (zero, disable blur)

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxShadow(ShaderFx, bpy_struct):
    """Shadow effect"""

    amplitude: float
    """ Amplitude of Wave

    :type: float
    """

    blur: bpy_prop_array[int]
    """ Number of pixels for blurring shadow (set to 0 to disable)

    :type: bpy_prop_array[int]
    """

    object: Object
    """ Object to determine center of rotation

    :type: Object
    """

    offset: bpy_prop_array[int]
    """ Offset of the shadow

    :type: bpy_prop_array[int]
    """

    orientation: str
    """ Direction of the wave

    :type: str
    """

    period: float
    """ Period of Wave

    :type: float
    """

    phase: float
    """ Phase Shift of Wave

    :type: float
    """

    rotation: float
    """ Rotation around center or object

    :type: float
    """

    samples: int
    """ Number of Blur Samples (zero, disable blur)

    :type: int
    """

    scale: mathutils.Vector
    """ Scale of the shadow

    :type: mathutils.Vector
    """

    shadow_color: bpy_prop_array[float]
    """ Color used for Shadow

    :type: bpy_prop_array[float]
    """

    use_object: bool
    """ Use object as center of rotation

    :type: bool
    """

    use_wave: bool
    """ Use wave effect

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxSwirl(ShaderFx, bpy_struct):
    """Swirl effect"""

    angle: float
    """ Angle of rotation

    :type: float
    """

    object: Object
    """ Object to determine center location

    :type: Object
    """

    radius: int
    """ Radius to apply

    :type: int
    """

    use_transparent: bool
    """ Make image transparent outside of radius

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderFxWave(ShaderFx, bpy_struct):
    """Wave Deformation effect"""

    amplitude: float
    """ Amplitude of Wave

    :type: float
    """

    orientation: str
    """ Direction of the wave

    :type: str
    """

    period: float
    """ Period of Wave

    :type: float
    """

    phase: float
    """ Phase Shift of Wave

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpaceClipEditor(Space, bpy_struct):
    """Clip editor space data"""

    annotation_source: str
    """ Where the annotation comes from

    :type: str
    """

    blend_factor: float
    """ Overlay blending factor of rasterized mask

    :type: float
    """

    clip: MovieClip
    """ Movie clip displayed and edited in this space

    :type: MovieClip
    """

    clip_user: MovieClipUser
    """ Parameters defining which frame of the movie clip is displayed

    :type: MovieClipUser
    """

    cursor_location: mathutils.Vector
    """ 2D cursor location for this view

    :type: mathutils.Vector
    """

    lock_selection: bool
    """ Lock viewport to selected markers during playback

    :type: bool
    """

    lock_time_cursor: bool
    """ Lock curves view to time cursor during playback and tracking

    :type: bool
    """

    mask: Mask
    """ Mask displayed and edited in this space

    :type: Mask
    """

    mask_display_type: str
    """ Display type for mask splines

    :type: str
    """

    mask_overlay_mode: str
    """ Overlay mode of rasterized mask

    :type: str
    """

    mode: str
    """ Editing context being displayed

    :type: str
    """

    path_length: int
    """ Length of displaying path, in frames

    :type: int
    """

    pivot_point: str
    """ Pivot center for rotation/scaling

    :type: str
    """

    scopes: MovieClipScopes
    """ Scopes to visualize movie clip statistics

    :type: MovieClipScopes
    """

    show_annotation: bool
    """ Show annotations for this view

    :type: bool
    """

    show_blue_channel: bool
    """ Show blue channel in the frame

    :type: bool
    """

    show_bundles: bool
    """ Show projection of 3D markers into footage

    :type: bool
    """

    show_disabled: bool
    """ Show disabled tracks from the footage

    :type: bool
    """

    show_filters: bool
    """ Show filters for graph editor

    :type: bool
    """

    show_gizmo: bool
    """ Show gizmos of all types

    :type: bool
    """

    show_gizmo_navigate: bool
    """ Viewport navigation gizmo

    :type: bool
    """

    show_graph_frames: bool
    """ Show curve for per-frame average error (camera motion should be solved first)

    :type: bool
    """

    show_graph_hidden: bool
    """ Include channels from objects/bone that are not visible

    :type: bool
    """

    show_graph_only_selected: bool
    """ Only include channels relating to selected objects and data

    :type: bool
    """

    show_graph_tracks_error: bool
    """ Display the reprojection error curve for selected tracks

    :type: bool
    """

    show_graph_tracks_motion: bool
    """ Display the speed curves (in "x" direction red, in "y" direction green) for the selected tracks

    :type: bool
    """

    show_green_channel: bool
    """ Show green channel in the frame

    :type: bool
    """

    show_grid: bool
    """ Show grid showing lens distortion

    :type: bool
    """

    show_marker_pattern: bool
    """ Show pattern boundbox for markers

    :type: bool
    """

    show_marker_search: bool
    """ Show search boundbox for markers

    :type: bool
    """

    show_mask_overlay: bool
    """ 

    :type: bool
    """

    show_mask_spline: bool
    """ 

    :type: bool
    """

    show_metadata: bool
    """ Show metadata of clip

    :type: bool
    """

    show_names: bool
    """ Show track names and status

    :type: bool
    """

    show_red_channel: bool
    """ Show red channel in the frame

    :type: bool
    """

    show_region_hud: bool
    """ 

    :type: bool
    """

    show_region_toolbar: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_stable: bool
    """ Show stable footage in editor (if stabilization is enabled)

    :type: bool
    """

    show_tiny_markers: bool
    """ Show markers in a more compact manner

    :type: bool
    """

    show_track_path: bool
    """ Show path of how track moves

    :type: bool
    """

    use_grayscale_preview: bool
    """ Display frame in grayscale mode

    :type: bool
    """

    use_manual_calibration: bool
    """ Use manual calibration helpers

    :type: bool
    """

    use_mute_footage: bool
    """ Mute footage and show black background instead

    :type: bool
    """

    view: str
    """ Type of the clip editor view

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceConsole(Space, bpy_struct):
    """Interactive Python console"""

    font_size: int
    """ Font size to use for displaying the text

    :type: int
    """

    history: bpy_prop_collection[ConsoleLine]
    """ Command history

    :type: bpy_prop_collection[ConsoleLine]
    """

    language: str
    """ Command line prompt language

    :type: str
    """

    prompt: str
    """ Command line prompt

    :type: str
    """

    scrollback: bpy_prop_collection[ConsoleLine]
    """ Command output

    :type: bpy_prop_collection[ConsoleLine]
    """

    select_end: int
    """ 

    :type: int
    """

    select_start: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceDopeSheetEditor(Space, bpy_struct):
    """Dope Sheet space data"""

    action: Action
    """ Action displayed and edited in this space

    :type: Action
    """

    cache_cloth: bool
    """ Show the active object's cloth point cache

    :type: bool
    """

    cache_dynamicpaint: bool
    """ Show the active object's Dynamic Paint cache

    :type: bool
    """

    cache_particles: bool
    """ Show the active object's particle point cache

    :type: bool
    """

    cache_rigidbody: bool
    """ Show the active object's Rigid Body cache

    :type: bool
    """

    cache_simulation_nodes: bool
    """ Show the active object's simulation nodes cache and bake data

    :type: bool
    """

    cache_smoke: bool
    """ Show the active object's smoke cache

    :type: bool
    """

    cache_softbody: bool
    """ Show the active object's softbody point cache

    :type: bool
    """

    dopesheet: DopeSheet
    """ Settings for filtering animation data

    :type: DopeSheet
    """

    mode: str
    """ Editing context being displayed

    :type: str
    """

    show_cache: bool
    """ Show the status of cached frames in the timeline

    :type: bool
    """

    show_extremes: bool
    """ Mark keyframes where the key value flow changes direction, based on comparison with adjacent keys

    :type: bool
    """

    show_interpolation: bool
    """ Display keyframe handle types and non-Bézier interpolation modes

    :type: bool
    """

    show_markers: bool
    """ If any exists, show markers in a separate row at the bottom of the editor

    :type: bool
    """

    show_pose_markers: bool
    """ Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)

    :type: bool
    """

    show_region_channels: bool
    """ 

    :type: bool
    """

    show_region_hud: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_sliders: bool
    """ Show sliders beside F-Curve channels

    :type: bool
    """

    ui_mode: str
    """ Editing context being displayed

    :type: str
    """

    use_auto_merge_keyframes: bool
    """ Automatically merge nearby keyframes

    :type: bool
    """

    use_marker_sync: bool
    """ Sync Markers with keyframe edits

    :type: bool
    """

    use_realtime_update: bool
    """ When transforming keyframes, changes to the animation data are flushed to other views

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceFileBrowser(Space, bpy_struct):
    """File browser space data"""

    active_operator: Operator
    """ 

    :type: Operator
    """

    bookmarks: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ User's bookmarks

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    bookmarks_active: int
    """ Index of active bookmark (-1 if none)

    :type: int
    """

    browse_mode: str
    """ Type of the File Editor view (regular file browsing or asset browsing)

    :type: str
    """

    operator: Operator
    """ 

    :type: Operator
    """

    params: FileSelectParams
    """ Parameters and Settings for the Filebrowser

    :type: FileSelectParams
    """

    recent_folders: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ 

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    recent_folders_active: int
    """ Index of active recent folder (-1 if none)

    :type: int
    """

    show_region_tool_props: bool
    """ 

    :type: bool
    """

    show_region_toolbar: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    system_bookmarks: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ System's bookmarks

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    system_bookmarks_active: int
    """ Index of active system bookmark (-1 if none)

    :type: int
    """

    system_folders: bpy_prop_collection[FileBrowserFSMenuEntry]
    """ System's folders (usually root, available hard drives, etc)

    :type: bpy_prop_collection[FileBrowserFSMenuEntry]
    """

    system_folders_active: int
    """ Index of active system folder (-1 if none)

    :type: int
    """

    def activate_asset_by_id(
        self, id_to_activate: ID | None, deferred: bool | typing.Any | None = False
    ):
        """Activate and select the asset entry that represents the given ID

        :param id_to_activate: id_to_activate
        :type id_to_activate: ID | None
        :param deferred: Whether to activate the ID immediately (false) or after the file browser refreshes (true)
        :type deferred: bool | typing.Any | None
        """
        ...

    def activate_file_by_relative_path(self, relative_path: str | typing.Any = ""):
        """Set active file and add to selection based on relative path to current File Browser directory

        :param relative_path: relative_path
        :type relative_path: str | typing.Any
        """
        ...

    def deselect_all(self):
        """Deselect all files"""
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceGraphEditor(Space, bpy_struct):
    """Graph Editor space data"""

    autolock_translation_axis: bool
    """ Automatically locks the movement of keyframes to the dominant axis

    :type: bool
    """

    cursor_position_x: float
    """ Graph Editor 2D-Value cursor - X-Value component

    :type: float
    """

    cursor_position_y: float
    """ Graph Editor 2D-Value cursor - Y-Value component

    :type: float
    """

    dopesheet: DopeSheet
    """ Settings for filtering animation data

    :type: DopeSheet
    """

    has_ghost_curves: bool
    """ Graph Editor instance has some ghost curves stored

    :type: bool
    """

    mode: str
    """ Editing context being displayed

    :type: str
    """

    pivot_point: str
    """ Pivot center for rotation/scaling

    :type: str
    """

    show_cursor: bool
    """ Show 2D cursor

    :type: bool
    """

    show_extrapolation: bool
    """ 

    :type: bool
    """

    show_handles: bool
    """ Show handles of Bézier control points

    :type: bool
    """

    show_markers: bool
    """ If any exists, show markers in a separate row at the bottom of the editor

    :type: bool
    """

    show_region_channels: bool
    """ 

    :type: bool
    """

    show_region_hud: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_sliders: bool
    """ Show sliders beside F-Curve channels

    :type: bool
    """

    use_auto_merge_keyframes: bool
    """ Automatically merge nearby keyframes

    :type: bool
    """

    use_auto_normalization: bool
    """ Automatically recalculate curve normalization on every curve edit

    :type: bool
    """

    use_normalization: bool
    """ Display curves in normalized range from -1 to 1, for easier editing of multiple curves with different ranges

    :type: bool
    """

    use_only_selected_keyframe_handles: bool
    """ Only show and edit handles of selected keyframes

    :type: bool
    """

    use_realtime_update: bool
    """ When transforming keyframes, changes to the animation data are flushed to other views

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceImageEditor(Space, bpy_struct):
    """Image and UV editor space data"""

    blend_factor: float
    """ Overlay blending factor of rasterized mask

    :type: float
    """

    cursor_location: mathutils.Vector
    """ 2D cursor location for this view

    :type: mathutils.Vector
    """

    display_channels: str
    """ Channels of the image to display

    :type: str
    """

    grease_pencil: GreasePencil
    """ Grease pencil data for this space

    :type: GreasePencil
    """

    image: Image
    """ Image displayed and edited in this space

    :type: Image
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    mask: Mask
    """ Mask displayed and edited in this space

    :type: Mask
    """

    mask_display_type: str
    """ Display type for mask splines

    :type: str
    """

    mask_overlay_mode: str
    """ Overlay mode of rasterized mask

    :type: str
    """

    mode: str
    """ Editing context being displayed

    :type: str
    """

    overlay: SpaceImageOverlay
    """ Settings for display of overlays in the UV/Image editor

    :type: SpaceImageOverlay
    """

    pivot_point: str
    """ Rotation/Scaling Pivot

    :type: str
    """

    sample_histogram: Histogram
    """ Sampled colors along line

    :type: Histogram
    """

    scopes: Scopes
    """ Scopes to visualize image statistics

    :type: Scopes
    """

    show_annotation: bool
    """ Show annotations for this view

    :type: bool
    """

    show_gizmo: bool
    """ Show gizmos of all types

    :type: bool
    """

    show_gizmo_navigate: bool
    """ Viewport navigation gizmo

    :type: bool
    """

    show_mask_overlay: bool
    """ 

    :type: bool
    """

    show_mask_spline: bool
    """ 

    :type: bool
    """

    show_maskedit: bool
    """ Show Mask editing related properties

    :type: bool
    """

    show_paint: bool
    """ Show paint related properties

    :type: bool
    """

    show_region_hud: bool
    """ 

    :type: bool
    """

    show_region_tool_header: bool
    """ 

    :type: bool
    """

    show_region_toolbar: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_render: bool
    """ Show render related properties

    :type: bool
    """

    show_repeat: bool
    """ Display the image repeated outside of the main view

    :type: bool
    """

    show_stereo_3d: bool
    """ Display the image in Stereo 3D

    :type: bool
    """

    show_uvedit: bool
    """ Show UV editing related properties

    :type: bool
    """

    ui_mode: str
    """ Editing context being displayed

    :type: str
    """

    use_image_pin: bool
    """ Display current image regardless of object selection

    :type: bool
    """

    use_realtime_update: bool
    """ Update other affected window spaces automatically to reflect changes during interactive operations such as transform

    :type: bool
    """

    uv_editor: SpaceUVEditor
    """ UV editor settings

    :type: SpaceUVEditor
    """

    zoom: bpy_prop_array[float]
    """ Zoom factor

    :type: bpy_prop_array[float]
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceInfo(Space, bpy_struct):
    """Info space data"""

    show_report_debug: bool
    """ Display debug reporting info

    :type: bool
    """

    show_report_error: bool
    """ Display error text

    :type: bool
    """

    show_report_info: bool
    """ Display general information

    :type: bool
    """

    show_report_operator: bool
    """ Display the operator log

    :type: bool
    """

    show_report_warning: bool
    """ Display warnings

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceNLA(Space, bpy_struct):
    """NLA editor space data"""

    dopesheet: DopeSheet
    """ Settings for filtering animation data

    :type: DopeSheet
    """

    show_local_markers: bool
    """ Show action-local markers on the strips, useful when synchronizing timing across strips

    :type: bool
    """

    show_markers: bool
    """ If any exists, show markers in a separate row at the bottom of the editor

    :type: bool
    """

    show_region_channels: bool
    """ 

    :type: bool
    """

    show_region_hud: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_strip_curves: bool
    """ Show influence F-Curves on strips

    :type: bool
    """

    use_realtime_update: bool
    """ When transforming strips, changes to the animation data are flushed to other views

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceNodeEditor(Space, bpy_struct):
    """Node editor space data"""

    backdrop_channels: str
    """ Channels of the image to draw

    :type: str
    """

    backdrop_offset: bpy_prop_array[float]
    """ Backdrop offset

    :type: bpy_prop_array[float]
    """

    backdrop_zoom: float
    """ Backdrop zoom factor

    :type: float
    """

    cursor_location: mathutils.Vector
    """ Location for adding new nodes

    :type: mathutils.Vector
    """

    edit_tree: NodeTree
    """ Node tree being displayed and edited

    :type: NodeTree
    """

    geometry_nodes_tool_tree: NodeTree
    """ Node group to edit as node tool

    :type: NodeTree
    """

    geometry_nodes_type: str
    """ 

    :type: str
    """

    id: ID
    """ Data-block whose nodes are being edited

    :type: ID
    """

    id_from: ID
    """ Data-block from which the edited data-block is linked

    :type: ID
    """

    insert_offset_direction: str
    """ Direction to offset nodes on insertion

    :type: str
    """

    node_tree: NodeTree
    """ Base node tree from context

    :type: NodeTree
    """

    overlay: SpaceNodeOverlay
    """ Settings for display of overlays in the Node Editor

    :type: SpaceNodeOverlay
    """

    path: SpaceNodeEditorPath
    """ Path from the data-block to the currently edited node tree

    :type: SpaceNodeEditorPath
    """

    pin: bool
    """ Use the pinned node tree

    :type: bool
    """

    shader_type: str
    """ Type of data to take shader from

    :type: str
    """

    show_annotation: bool
    """ Show annotations for this view

    :type: bool
    """

    show_backdrop: bool
    """ Use active Viewer Node output as backdrop for compositing nodes

    :type: bool
    """

    show_region_toolbar: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    supports_previews: bool
    """ Whether the node editor's type supports displaying node previews

    :type: bool
    """

    texture_type: str
    """ Type of data to take texture from

    :type: str
    """

    tree_type: str
    """ Node tree type to display and edit

    :type: str
    """

    use_auto_render: bool
    """ Re-render and composite changed layers on 3D edits

    :type: bool
    """

    def cursor_location_from_region(self, x: int | None, y: int | None):
        """Set the cursor location using region coordinates

        :param x: x, Region x coordinate
        :type x: int | None
        :param y: y, Region y coordinate
        :type y: int | None
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceOutliner(Space, bpy_struct):
    """Outliner space data"""

    display_mode: str
    """ Type of information to display

    :type: str
    """

    filter_id_type: str
    """ Data-block type to show

    :type: str
    """

    filter_invert: bool
    """ Invert the object state filter

    :type: bool
    """

    filter_state: str
    """ 

    :type: str
    """

    filter_text: str
    """ Live search filtering string

    :type: str
    """

    lib_override_view_mode: str
    """ Choose different visualizations of library override data

    :type: str
    """

    show_mode_column: bool
    """ Show the mode column for mode toggle and activation

    :type: bool
    """

    show_restrict_column_enable: bool
    """ Exclude from view layer

    :type: bool
    """

    show_restrict_column_hide: bool
    """ Temporarily hide in viewport

    :type: bool
    """

    show_restrict_column_holdout: bool
    """ Holdout

    :type: bool
    """

    show_restrict_column_indirect_only: bool
    """ Indirect only

    :type: bool
    """

    show_restrict_column_render: bool
    """ Globally disable in renders

    :type: bool
    """

    show_restrict_column_select: bool
    """ Selectable

    :type: bool
    """

    show_restrict_column_viewport: bool
    """ Globally disable in viewports

    :type: bool
    """

    use_filter_case_sensitive: bool
    """ Only use case sensitive matches of search string

    :type: bool
    """

    use_filter_children: bool
    """ Show children

    :type: bool
    """

    use_filter_collection: bool
    """ Show collections

    :type: bool
    """

    use_filter_complete: bool
    """ Only use complete matches of search string

    :type: bool
    """

    use_filter_id_type: bool
    """ Show only data-blocks of one type

    :type: bool
    """

    use_filter_lib_override_system: bool
    """ For libraries with overrides created, show the overridden values that are defined/controlled automatically (e.g. to make users of an overridden data-block point to the override data, not the original linked data)

    :type: bool
    """

    use_filter_object: bool
    """ Show objects

    :type: bool
    """

    use_filter_object_armature: bool
    """ Show armature objects

    :type: bool
    """

    use_filter_object_camera: bool
    """ Show camera objects

    :type: bool
    """

    use_filter_object_content: bool
    """ Show what is inside the objects elements

    :type: bool
    """

    use_filter_object_empty: bool
    """ Show empty objects

    :type: bool
    """

    use_filter_object_grease_pencil: bool
    """ Show grease pencil objects

    :type: bool
    """

    use_filter_object_light: bool
    """ Show light objects

    :type: bool
    """

    use_filter_object_mesh: bool
    """ Show mesh objects

    :type: bool
    """

    use_filter_object_others: bool
    """ Show curves, lattices, light probes, fonts, ...

    :type: bool
    """

    use_filter_view_layers: bool
    """ Show all the view layers

    :type: bool
    """

    use_sort_alpha: bool
    """ 

    :type: bool
    """

    use_sync_select: bool
    """ Sync outliner selection with other editors

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpacePreferences(Space, bpy_struct):
    """Blender preferences space data"""

    filter_text: str
    """ Search term for filtering in the UI

    :type: str
    """

    filter_type: str
    """ Filter method

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceProperties(Space, bpy_struct):
    """Properties space data"""

    context: str
    """ 

    :type: str
    """

    outliner_sync: str
    """ Change to the corresponding tab when outliner data icons are clicked

    :type: str
    """

    pin_id: ID
    """ 

    :type: ID
    """

    search_filter: str
    """ Live search filtering string

    :type: str
    """

    tab_search_results: bool
    """ Whether or not each visible tab has a search result

    :type: bool
    """

    use_pin_id: bool
    """ Use the pinned context

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceSequenceEditor(Space, bpy_struct):
    """Sequence editor space data"""

    cursor_location: mathutils.Vector
    """ 2D cursor location for this view

    :type: mathutils.Vector
    """

    display_channel: int
    """ The channel number shown in the image preview. 0 is the result of all strips combined

    :type: int
    """

    display_mode: str
    """ View mode to use for displaying sequencer output

    :type: str
    """

    grease_pencil: GreasePencil
    """ Grease Pencil data for this Preview region

    :type: GreasePencil
    """

    overlay_frame_type: str
    """ Overlay display method

    :type: str
    """

    preview_channels: str
    """ Channels of the preview to display

    :type: str
    """

    preview_overlay: SequencerPreviewOverlay
    """ Settings for display of overlays

    :type: SequencerPreviewOverlay
    """

    proxy_render_size: str
    """ Display preview using full resolution or different proxy resolutions

    :type: str
    """

    show_backdrop: bool
    """ Display result under strips

    :type: bool
    """

    show_frames: bool
    """ Display frames rather than seconds

    :type: bool
    """

    show_gizmo: bool
    """ Show gizmos of all types

    :type: bool
    """

    show_gizmo_context: bool
    """ Context sensitive gizmos for the active item

    :type: bool
    """

    show_gizmo_navigate: bool
    """ Viewport navigation gizmo

    :type: bool
    """

    show_gizmo_tool: bool
    """ Active tool gizmo

    :type: bool
    """

    show_markers: bool
    """ If any exists, show markers in a separate row at the bottom of the editor

    :type: bool
    """

    show_overexposed: int
    """ Show overexposed areas with zebra stripes

    :type: int
    """

    show_overlays: bool
    """ 

    :type: bool
    """

    show_region_channels: bool
    """ 

    :type: bool
    """

    show_region_hud: bool
    """ 

    :type: bool
    """

    show_region_tool_header: bool
    """ 

    :type: bool
    """

    show_region_toolbar: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_seconds: bool
    """ Show timing in seconds not frames

    :type: bool
    """

    show_separate_color: bool
    """ Separate color channels in preview

    :type: bool
    """

    show_transform_preview: bool
    """ Show preview of the transformed frames

    :type: bool
    """

    timeline_overlay: SequencerTimelineOverlay
    """ Settings for display of overlays

    :type: SequencerTimelineOverlay
    """

    use_clamp_view: bool
    """ Limit timeline height to maximum used channel slot

    :type: bool
    """

    use_marker_sync: bool
    """ Transform markers as well as strips

    :type: bool
    """

    use_proxies: bool
    """ Use optimized files for faster scrubbing when available

    :type: bool
    """

    use_zoom_to_fit: bool
    """ Automatically zoom preview image to make it fully fit the region

    :type: bool
    """

    view_type: str
    """ Type of the Sequencer view (sequencer, preview or both)

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceSpreadsheet(Space, bpy_struct):
    """Spreadsheet space data"""

    attribute_domain: str
    """ Attribute domain to display

    :type: str
    """

    columns: bpy_prop_collection[SpreadsheetColumn]
    """ Persistent data associated with spreadsheet columns

    :type: bpy_prop_collection[SpreadsheetColumn]
    """

    display_viewer_path_collapsed: bool
    """ 

    :type: bool
    """

    geometry_component_type: str
    """ Part of the geometry to display data from

    :type: str
    """

    is_pinned: bool
    """ Context path is pinned

    :type: bool
    """

    object_eval_state: str
    """ 

    :type: str
    """

    row_filters: bpy_prop_collection[SpreadsheetRowFilter]
    """ Filters to remove rows from the displayed data

    :type: bpy_prop_collection[SpreadsheetRowFilter]
    """

    show_only_selected: bool
    """ Only include rows that correspond to selected elements

    :type: bool
    """

    show_region_channels: bool
    """ 

    :type: bool
    """

    show_region_footer: bool
    """ 

    :type: bool
    """

    show_region_toolbar: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    use_filter: bool
    """ 

    :type: bool
    """

    viewer_path: ViewerPath
    """ Path to the data that is displayed in the spreadsheet

    :type: ViewerPath
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceTextEditor(Space, bpy_struct):
    """Text editor space data"""

    find_text: str
    """ Text to search for with the find tool

    :type: str
    """

    font_size: int
    """ Font size to use for displaying the text

    :type: int
    """

    margin_column: int
    """ Column number to show right margin at

    :type: int
    """

    replace_text: str
    """ Text to replace selected text with using the replace tool

    :type: str
    """

    show_line_highlight: bool
    """ Highlight the current line

    :type: bool
    """

    show_line_numbers: bool
    """ Show line numbers next to the text

    :type: bool
    """

    show_margin: bool
    """ Show right margin

    :type: bool
    """

    show_region_footer: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_syntax_highlight: bool
    """ Syntax highlight for scripting

    :type: bool
    """

    show_word_wrap: bool
    """ Wrap words if there is not enough horizontal space

    :type: bool
    """

    tab_width: int
    """ Number of spaces to display tabs with

    :type: int
    """

    text: Text
    """ Text displayed and edited in this space

    :type: Text
    """

    top: int
    """ Top line visible

    :type: int
    """

    use_find_all: bool
    """ Search in all text data-blocks, instead of only the active one

    :type: bool
    """

    use_find_wrap: bool
    """ Search again from the start of the file when reaching the end

    :type: bool
    """

    use_live_edit: bool
    """ Run Python while editing

    :type: bool
    """

    use_match_case: bool
    """ Search string is sensitive to uppercase and lowercase letters

    :type: bool
    """

    use_overwrite: bool
    """ Overwrite characters when typing rather than inserting them

    :type: bool
    """

    visible_lines: int
    """ Amount of lines that can be visible in current editor

    :type: int
    """

    def is_syntax_highlight_supported(self) -> bool:
        """Returns True if the editor supports syntax highlighting for the current text datablock

        :return:
        :rtype: bool
        """
        ...

    def region_location_from_cursor(
        self, line: int | None, column: int | None
    ) -> bpy_prop_array[int]:
        """Retrieve the region position from the given line and character position

        :param line: Line, Line index
        :type line: int | None
        :param column: Column, Column index
        :type column: int | None
        :return: Region coordinates
        :rtype: bpy_prop_array[int]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class SpaceView3D(Space, bpy_struct):
    """3D View space data"""

    camera: Object
    """ Active camera used in this view (when unlocked from the scene's active camera)

    :type: Object
    """

    clip_end: float
    """ 3D View far clipping distance

    :type: float
    """

    clip_start: float
    """ 3D View near clipping distance (perspective view only)

    :type: float
    """

    icon_from_show_object_viewport: int
    """ 

    :type: int
    """

    lens: float
    """ Viewport lens angle

    :type: float
    """

    local_view: SpaceView3D
    """ Display an isolated subset of objects, apart from the scene visibility

    :type: SpaceView3D
    """

    lock_bone: str
    """ 3D View center is locked to this bone's position

    :type: str
    """

    lock_camera: bool
    """ Enable view navigation within the camera view

    :type: bool
    """

    lock_cursor: bool
    """ 3D View center is locked to the cursor's position

    :type: bool
    """

    lock_object: Object
    """ 3D View center is locked to this object's position

    :type: Object
    """

    mirror_xr_session: bool
    """ Synchronize the viewer perspective of virtual reality sessions with this 3D viewport

    :type: bool
    """

    overlay: View3DOverlay
    """ Settings for display of overlays in the 3D viewport

    :type: View3DOverlay
    """

    region_3d: RegionView3D
    """ 3D region for this space. When the space is in quad view, the camera region

    :type: RegionView3D
    """

    region_quadviews: bpy_prop_collection[RegionView3D]
    """ 3D regions (the third one defines quad view settings, the fourth one is same as 'region_3d')

    :type: bpy_prop_collection[RegionView3D]
    """

    render_border_max_x: float
    """ Maximum X value for the render region

    :type: float
    """

    render_border_max_y: float
    """ Maximum Y value for the render region

    :type: float
    """

    render_border_min_x: float
    """ Minimum X value for the render region

    :type: float
    """

    render_border_min_y: float
    """ Minimum Y value for the render region

    :type: float
    """

    shading: View3DShading
    """ Settings for shading in the 3D viewport

    :type: View3DShading
    """

    show_bundle_names: bool
    """ Show names for reconstructed tracks objects

    :type: bool
    """

    show_camera_path: bool
    """ Show reconstructed camera path

    :type: bool
    """

    show_gizmo: bool
    """ Show gizmos of all types

    :type: bool
    """

    show_gizmo_camera_dof_distance: bool
    """ Gizmo to adjust camera focus distance (depends on limits display)

    :type: bool
    """

    show_gizmo_camera_lens: bool
    """ Gizmo to adjust camera focal length or orthographic scale

    :type: bool
    """

    show_gizmo_context: bool
    """ Context sensitive gizmos for the active item

    :type: bool
    """

    show_gizmo_empty_force_field: bool
    """ Gizmo to adjust the force field

    :type: bool
    """

    show_gizmo_empty_image: bool
    """ Gizmo to adjust image size and position

    :type: bool
    """

    show_gizmo_light_look_at: bool
    """ Gizmo to adjust the direction of the light

    :type: bool
    """

    show_gizmo_light_size: bool
    """ Gizmo to adjust spot and area size

    :type: bool
    """

    show_gizmo_navigate: bool
    """ Viewport navigation gizmo

    :type: bool
    """

    show_gizmo_object_rotate: bool
    """ Gizmo to adjust rotation

    :type: bool
    """

    show_gizmo_object_scale: bool
    """ Gizmo to adjust scale

    :type: bool
    """

    show_gizmo_object_translate: bool
    """ Gizmo to adjust location

    :type: bool
    """

    show_gizmo_tool: bool
    """ Active tool gizmo

    :type: bool
    """

    show_object_select_armature: bool
    """ Allow selection of armatures

    :type: bool
    """

    show_object_select_camera: bool
    """ Allow selection of cameras

    :type: bool
    """

    show_object_select_curve: bool
    """ Allow selection of curves

    :type: bool
    """

    show_object_select_curves: bool
    """ Allow selection of hair curves

    :type: bool
    """

    show_object_select_empty: bool
    """ Allow selection of empties

    :type: bool
    """

    show_object_select_font: bool
    """ Allow selection of text objects

    :type: bool
    """

    show_object_select_grease_pencil: bool
    """ Allow selection of grease pencil objects

    :type: bool
    """

    show_object_select_lattice: bool
    """ Allow selection of lattices

    :type: bool
    """

    show_object_select_light: bool
    """ Allow selection of lights

    :type: bool
    """

    show_object_select_light_probe: bool
    """ Allow selection of light probes

    :type: bool
    """

    show_object_select_mesh: bool
    """ Allow selection of mesh objects

    :type: bool
    """

    show_object_select_meta: bool
    """ Allow selection of metaballs

    :type: bool
    """

    show_object_select_pointcloud: bool
    """ Allow selection of point clouds

    :type: bool
    """

    show_object_select_speaker: bool
    """ Allow selection of speakers

    :type: bool
    """

    show_object_select_surf: bool
    """ Allow selection of surfaces

    :type: bool
    """

    show_object_select_volume: bool
    """ Allow selection of volumes

    :type: bool
    """

    show_object_viewport_armature: bool
    """ Show armatures

    :type: bool
    """

    show_object_viewport_camera: bool
    """ Show cameras

    :type: bool
    """

    show_object_viewport_curve: bool
    """ Show curves

    :type: bool
    """

    show_object_viewport_curves: bool
    """ Show hair curves

    :type: bool
    """

    show_object_viewport_empty: bool
    """ Show empties

    :type: bool
    """

    show_object_viewport_font: bool
    """ Show text objects

    :type: bool
    """

    show_object_viewport_grease_pencil: bool
    """ Show grease pencil objects

    :type: bool
    """

    show_object_viewport_lattice: bool
    """ Show lattices

    :type: bool
    """

    show_object_viewport_light: bool
    """ Show lights

    :type: bool
    """

    show_object_viewport_light_probe: bool
    """ Show light probes

    :type: bool
    """

    show_object_viewport_mesh: bool
    """ Show mesh objects

    :type: bool
    """

    show_object_viewport_meta: bool
    """ Show metaballs

    :type: bool
    """

    show_object_viewport_pointcloud: bool
    """ Show point clouds

    :type: bool
    """

    show_object_viewport_speaker: bool
    """ Show speakers

    :type: bool
    """

    show_object_viewport_surf: bool
    """ Show surfaces

    :type: bool
    """

    show_object_viewport_volume: bool
    """ Show volumes

    :type: bool
    """

    show_reconstruction: bool
    """ Display reconstruction data from active movie clip

    :type: bool
    """

    show_region_asset_shelf: bool
    """ 

    :type: bool
    """

    show_region_hud: bool
    """ 

    :type: bool
    """

    show_region_tool_header: bool
    """ 

    :type: bool
    """

    show_region_toolbar: bool
    """ 

    :type: bool
    """

    show_region_ui: bool
    """ 

    :type: bool
    """

    show_stereo_3d_cameras: bool
    """ Show the left and right cameras

    :type: bool
    """

    show_stereo_3d_convergence_plane: bool
    """ Show the stereo 3D convergence plane

    :type: bool
    """

    show_stereo_3d_volume: bool
    """ Show the stereo 3D frustum volume

    :type: bool
    """

    show_viewer: bool
    """ Display non-final geometry from viewer nodes

    :type: bool
    """

    stereo_3d_camera: str
    """ 

    :type: str
    """

    stereo_3d_convergence_plane_alpha: float
    """ Opacity (alpha) of the convergence plane

    :type: float
    """

    stereo_3d_eye: str
    """ Current stereo eye being displayed

    :type: str
    """

    stereo_3d_volume_alpha: float
    """ Opacity (alpha) of the cameras' frustum volume

    :type: float
    """

    tracks_display_size: float
    """ Display size of tracks from reconstructed data

    :type: float
    """

    tracks_display_type: str
    """ Viewport display style for tracks

    :type: str
    """

    use_local_camera: bool
    """ Use a local camera in this view, rather than scene's active camera

    :type: bool
    """

    use_local_collections: bool
    """ Display a different set of collections in this viewport

    :type: bool
    """

    use_render_border: bool
    """ Use a region within the frame size for rendered viewport (when not viewing through the camera)

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_add(
        cls,
        callback: typing.Any | None,
        args: tuple | None,
        region_type: str | None,
        draw_type: str | None,
    ) -> typing.Any:
        """Add a new draw handler to this space type.
        It will be called every time the specified region in the space type will be drawn.
        Note: All arguments are positional only for now.

                :param callback: A function that will be called when the region is drawn.
        It gets the specified arguments as input.
                :type callback: typing.Any | None
                :param args: Arguments that will be passed to the callback.
                :type args: tuple | None
                :param region_type: The region type the callback draws in; usually WINDOW. (`bpy.types.Region.type`)
                :type region_type: str | None
                :param draw_type: Usually POST_PIXEL for 2D drawing and POST_VIEW for 3D drawing. In some cases PRE_VIEW can be used. BACKDROP can be used for backdrops in the node editor.
                :type draw_type: str | None
                :return: Handler that can be removed later on.
                :rtype: typing.Any
        """
        ...

    @classmethod
    def draw_handler_remove(cls, handler: typing.Any | None, region_type: str | None):
        """Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any | None
        :param region_type: Region type the callback was added to.
        :type region_type: str | None
        """
        ...

class BrushTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a Brush data-block"""

    angle: float
    """ Brush texture rotation

    :type: float
    """

    has_random_texture_angle: bool
    """ 

    :type: bool
    """

    has_texture_angle: bool
    """ 

    :type: bool
    """

    has_texture_angle_source: bool
    """ 

    :type: bool
    """

    map_mode: str
    """ 

    :type: str
    """

    mask_map_mode: str
    """ 

    :type: str
    """

    random_angle: float
    """ Brush texture random angle

    :type: float
    """

    use_rake: bool
    """ 

    :type: bool
    """

    use_random: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a LineStyle data-block"""

    alpha_factor: float
    """ Amount texture affects alpha

    :type: float
    """

    diffuse_color_factor: float
    """ Amount texture affects diffuse color

    :type: float
    """

    mapping: str
    """ 

    :type: str
    """

    mapping_x: str
    """ 

    :type: str
    """

    mapping_y: str
    """ 

    :type: str
    """

    mapping_z: str
    """ 

    :type: str
    """

    texture_coords: str
    """ Texture coordinates used to map the texture onto the background

    :type: str
    """

    use_map_alpha: bool
    """ The texture affects the alpha value

    :type: bool
    """

    use_map_color_diffuse: bool
    """ The texture affects basic color of the stroke

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ParticleSettingsTextureSlot(TextureSlot, bpy_struct):
    """Texture slot for textures in a Particle Settings data-block"""

    clump_factor: float
    """ Amount texture affects child clump

    :type: float
    """

    damp_factor: float
    """ Amount texture affects particle damping

    :type: float
    """

    density_factor: float
    """ Amount texture affects particle density

    :type: float
    """

    field_factor: float
    """ Amount texture affects particle force fields

    :type: float
    """

    gravity_factor: float
    """ Amount texture affects particle gravity

    :type: float
    """

    kink_amp_factor: float
    """ Amount texture affects child kink amplitude

    :type: float
    """

    kink_freq_factor: float
    """ Amount texture affects child kink frequency

    :type: float
    """

    length_factor: float
    """ Amount texture affects child hair length

    :type: float
    """

    life_factor: float
    """ Amount texture affects particle life time

    :type: float
    """

    mapping: str
    """ 

    :type: str
    """

    mapping_x: str
    """ 

    :type: str
    """

    mapping_y: str
    """ 

    :type: str
    """

    mapping_z: str
    """ 

    :type: str
    """

    object: Object
    """ Object to use for mapping with Object texture coordinates

    :type: Object
    """

    rough_factor: float
    """ Amount texture affects child roughness

    :type: float
    """

    size_factor: float
    """ Amount texture affects physical particle size

    :type: float
    """

    texture_coords: str
    """ Texture coordinates used to map the texture onto the background

    :type: str
    """

    time_factor: float
    """ Amount texture affects particle emission time

    :type: float
    """

    twist_factor: float
    """ Amount texture affects child twist

    :type: float
    """

    use_map_clump: bool
    """ Affect the child clumping

    :type: bool
    """

    use_map_damp: bool
    """ Affect the particle velocity damping

    :type: bool
    """

    use_map_density: bool
    """ Affect the density of the particles

    :type: bool
    """

    use_map_field: bool
    """ Affect the particle force fields

    :type: bool
    """

    use_map_gravity: bool
    """ Affect the particle gravity

    :type: bool
    """

    use_map_kink_amp: bool
    """ Affect the child kink amplitude

    :type: bool
    """

    use_map_kink_freq: bool
    """ Affect the child kink frequency

    :type: bool
    """

    use_map_length: bool
    """ Affect the child hair length

    :type: bool
    """

    use_map_life: bool
    """ Affect the life time of the particles

    :type: bool
    """

    use_map_rough: bool
    """ Affect the child rough

    :type: bool
    """

    use_map_size: bool
    """ Affect the particle size

    :type: bool
    """

    use_map_time: bool
    """ Affect the emission time of the particles

    :type: bool
    """

    use_map_twist: bool
    """ Affect the child twist

    :type: bool
    """

    use_map_velocity: bool
    """ Affect the particle initial velocity

    :type: bool
    """

    uv_layer: str
    """ UV map to use for mapping with UV texture coordinates

    :type: str
    """

    velocity_factor: float
    """ Amount texture affects particle initial velocity

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ASSETBROWSER_UL_metadata_tags(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CLIP_UL_tracking_objects(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CURVES_UL_attributes(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        attribute,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param attribute:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    def filter_items(self, _context, data, property):
        """

        :param _context:
        :param data:
        :param property:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DATA_UL_bone_collections(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        armature,
        bcoll,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param armature:
        :param bcoll:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FILEBROWSER_UL_dir(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPENCIL_UL_annotation_layer(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPENCIL_UL_layer(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPENCIL_UL_masks(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPENCIL_UL_matslots(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GPENCIL_UL_vgroups(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IMAGE_UL_render_slots(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IMAGE_UL_udim_tiles(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MASK_UL_layers(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MATERIAL_UL_matslots(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MESH_UL_attributes(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        attribute,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param attribute:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    def filter_items(self, _context, data, property):
        """

        :param _context:
        :param data:
        :param property:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MESH_UL_color_attributes(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        data,
        attribute,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param data:
        :param attribute:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    def filter_items(self, _context, data, property):
        """

        :param _context:
        :param data:
        :param property:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MESH_UL_color_attributes_selector(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        attribute,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param attribute:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    def filter_items(self, _context, data, property):
        """

        :param _context:
        :param data:
        :param property:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MESH_UL_shape_keys(UIList, bpy_struct):
    def draw_item(
        self, _context, layout, _data, item, icon, active_data, _active_propname, index
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param active_data:
        :param _active_propname:
        :param index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MESH_UL_uvmaps(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MESH_UL_vgroups(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data_,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data_:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NODE_UL_bake_node_items(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NODE_UL_enum_definition_items(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NODE_UL_repeat_zone_items(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NODE_UL_simulation_zone_items(UIList, bpy_struct):
    def draw_item(
        self, context, layout, _data, item, icon, _active_data, _active_propname, _index
    ):
        """

        :param context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PARTICLE_UL_particle_systems(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
        _flt_flag,
    ):
        """

        :param _context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        :param _flt_flag:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PHYSICS_UL_dynapaint_surfaces(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class POINTCLOUD_UL_attributes(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        attribute,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param attribute:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    def filter_items(self, _context, data, property):
        """

        :param _context:
        :param data:
        :param property:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RENDER_UL_renderviews(UIList, bpy_struct):
    def draw_item(
        self, _context, layout, _data, item, icon, _active_data, _active_propname, index
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SCENE_UL_gltf2_filter_action(UIList, bpy_struct):
    def draw_item(
        self, context, layout, data, item, icon, active_data, active_propname, index
    ):
        """

        :param context:
        :param layout:
        :param data:
        :param item:
        :param icon:
        :param active_data:
        :param active_propname:
        :param index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SCENE_UL_keying_set_paths(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TEXTURE_UL_texpaintslots(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TEXTURE_UL_texslots(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class UI_UL_list(UIList, bpy_struct):
    @staticmethod
    def filter_items_by_name(
        pattern, bitflag, items, propname="name", flags=None, reverse=False
    ):
        """Set FILTER_ITEM for items which name matches filter_name one (case-insensitive).
        pattern is the filtering pattern.
        propname is the name of the string property to use for filtering.
        flags must be a list of integers the same length as items, or None!
        return a list of flags (based on given flags if not None),
        or an empty list if no flags were given and no filtering has been done.

                :param pattern:
                :param bitflag:
                :param items:
                :param propname:
                :param flags:
                :param reverse:
        """
        ...

    @staticmethod
    def sort_items_helper(sort_data, key, reverse=False):
        """Common sorting utility. Returns a neworder list mapping org_idx -> new_idx.
        sort_data must be an (unordered) list of tuples [(org_idx, ...), (org_idx, ...), ...].
        key must be the same kind of callable you would use for sorted() builtin function.
        reverse will reverse the sorting!

                :param sort_data:
                :param key:
                :param reverse:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class USERPREF_UL_asset_libraries(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class USERPREF_UL_extension_repos(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        item,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VIEWLAYER_UL_aov(UIList, bpy_struct):
    def draw_item(
        self, _context, layout, _data, item, icon, _active_data, _active_propname
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VIEWLAYER_UL_linesets(UIList, bpy_struct):
    def draw_item(
        self, _context, layout, _data, item, icon, _active_data, _active_propname, index
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param item:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VOLUME_UL_grids(UIList, bpy_struct):
    def draw_item(
        self,
        _context,
        layout,
        _data,
        grid,
        _icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param _context:
        :param layout:
        :param _data:
        :param grid:
        :param _icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WORKSPACE_UL_addons_items(UIList, bpy_struct):
    def draw_item(
        self,
        context,
        layout,
        _data,
        addon,
        icon,
        _active_data,
        _active_propname,
        _index,
    ):
        """

        :param context:
        :param layout:
        :param _data:
        :param addon:
        :param icon:
        :param _active_data:
        :param _active_propname:
        :param _index:
        """
        ...

    def filter_items(self, _context, data, property):
        """

        :param _context:
        :param data:
        :param property:
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GroupNodeViewerPathElem(ViewerPathElem, bpy_struct):
    node_id: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class IDViewerPathElem(ViewerPathElem, bpy_struct):
    id: ID
    """ 

    :type: ID
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ModifierViewerPathElem(ViewerPathElem, bpy_struct):
    modifier_name: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class RepeatZoneViewerPathElem(ViewerPathElem, bpy_struct):
    repeat_output_node_id: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SimulationZoneViewerPathElem(ViewerPathElem, bpy_struct):
    sim_output_node_id: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ViewerNodeViewerPathElem(ViewerPathElem, bpy_struct):
    node_id: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SurfaceCurve(Curve, ID, bpy_struct):
    """Curve data-block used for storing surfaces"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextCurve(Curve, ID, bpy_struct):
    """Curve data-block used for storing text"""

    active_textbox: int | None
    """ 

    :type: int | None
    """

    align_x: str
    """ Text horizontal alignment from the object center

    :type: str
    """

    align_y: str
    """ Text vertical alignment from the object center

    :type: str
    """

    body: str
    """ Content of this text object

    :type: str
    """

    body_format: bpy_prop_collection[TextCharacterFormat]
    """ Stores the style of each character

    :type: bpy_prop_collection[TextCharacterFormat]
    """

    edit_format: TextCharacterFormat
    """ Editing settings character formatting

    :type: TextCharacterFormat
    """

    family: str
    """ Use objects as font characters (give font objects a common name followed by the character they represent, eg. 'family-a', 'family-b', etc, set this setting to 'family-', and turn on Vertex Instancing)

    :type: str
    """

    follow_curve: Object
    """ Curve deforming text object

    :type: Object
    """

    font: VectorFont
    """ 

    :type: VectorFont
    """

    font_bold: VectorFont
    """ 

    :type: VectorFont
    """

    font_bold_italic: VectorFont
    """ 

    :type: VectorFont
    """

    font_italic: VectorFont
    """ 

    :type: VectorFont
    """

    has_selection: bool
    """ Whether there is any text selected

    :type: bool
    """

    is_select_bold: bool
    """ Whether the selected text is bold

    :type: bool
    """

    is_select_italic: bool
    """ Whether the selected text is italics

    :type: bool
    """

    is_select_smallcaps: bool
    """ Whether the selected text is small caps

    :type: bool
    """

    is_select_underline: bool
    """ Whether the selected text is underlined

    :type: bool
    """

    offset_x: float
    """ Horizontal offset from the object origin

    :type: float
    """

    offset_y: float
    """ Vertical offset from the object origin

    :type: float
    """

    overflow: str
    """ Handle the text behavior when it doesn't fit in the text boxes

    :type: str
    """

    shear: float
    """ Italic angle of the characters

    :type: float
    """

    size: float
    """ 

    :type: float
    """

    small_caps_scale: float
    """ Scale of small capitals

    :type: float
    """

    space_character: float
    """ 

    :type: float
    """

    space_line: float
    """ 

    :type: float
    """

    space_word: float
    """ 

    :type: float
    """

    text_boxes: bpy_prop_collection[TextBox]
    """ 

    :type: bpy_prop_collection[TextBox]
    """

    underline_height: float
    """ 

    :type: float
    """

    underline_position: float
    """ Vertical position of underline

    :type: float
    """

    use_fast_edit: bool
    """ Don't fill polygons while editing

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AreaLight(Light, ID, bpy_struct):
    """Directional area Light"""

    contact_shadow_bias: float
    """ Bias to avoid self shadowing

    :type: float
    """

    contact_shadow_distance: float
    """ World space distance in which to search for screen space occluder

    :type: float
    """

    contact_shadow_thickness: float
    """ Pixel thickness used to detect occlusion

    :type: float
    """

    energy: float
    """ Light energy emitted over the entire area of the light in all directions

    :type: float
    """

    shadow_buffer_bias: float
    """ Bias for reducing self shadowing

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_color: mathutils.Color
    """ Color of shadows cast by the light

    :type: mathutils.Color
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    shadow_softness_factor: float
    """ Scale light shape for smaller penumbra

    :type: float
    """

    shape: str
    """ Shape of the area Light

    :type: str
    """

    size: float
    """ Size of the area of the area light, X direction size for rectangle shapes

    :type: float
    """

    size_y: float
    """ Size of the area of the area light in the Y direction for rectangle shapes

    :type: float
    """

    spread: float
    """ How widely the emitted light fans out, as in the case of a gridded softbox

    :type: float
    """

    use_contact_shadow: bool
    """ Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class PointLight(Light, ID, bpy_struct):
    """Omnidirectional point Light"""

    contact_shadow_bias: float
    """ Bias to avoid self shadowing

    :type: float
    """

    contact_shadow_distance: float
    """ World space distance in which to search for screen space occluder

    :type: float
    """

    contact_shadow_thickness: float
    """ Pixel thickness used to detect occlusion

    :type: float
    """

    energy: float
    """ Light energy emitted over the entire area of the light in all directions

    :type: float
    """

    shadow_buffer_bias: float
    """ Bias for reducing self shadowing

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_color: mathutils.Color
    """ Color of shadows cast by the light

    :type: mathutils.Color
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    shadow_softness_factor: float
    """ Scale light shape for smaller penumbra

    :type: float
    """

    use_contact_shadow: bool
    """ Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    use_soft_falloff: bool
    """ Apply falloff to avoid sharp edges when the light geometry intersects with other objects

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpotLight(Light, ID, bpy_struct):
    """Directional cone Light"""

    contact_shadow_bias: float
    """ Bias to avoid self shadowing

    :type: float
    """

    contact_shadow_distance: float
    """ World space distance in which to search for screen space occluder

    :type: float
    """

    contact_shadow_thickness: float
    """ Pixel thickness used to detect occlusion

    :type: float
    """

    energy: float
    """ The energy this light would emit over its entire area if it wasn't limited by the spot angle

    :type: float
    """

    shadow_buffer_bias: float
    """ Bias for reducing self shadowing

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_color: mathutils.Color
    """ Color of shadows cast by the light

    :type: mathutils.Color
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    shadow_softness_factor: float
    """ Scale light shape for smaller penumbra

    :type: float
    """

    show_cone: bool
    """ Display transparent cone in 3D view to visualize which objects are contained in it

    :type: bool
    """

    spot_blend: float
    """ The softness of the spotlight edge

    :type: float
    """

    spot_size: float
    """ Angle of the spotlight beam

    :type: float
    """

    use_contact_shadow: bool
    """ Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    use_soft_falloff: bool
    """ Apply falloff to avoid sharp edges when the light geometry intersects with other objects

    :type: bool
    """

    use_square: bool
    """ Cast a square spot light shape

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SunLight(Light, ID, bpy_struct):
    """Constant direction parallel ray Light"""

    angle: float
    """ Angular diameter of the Sun as seen from the Earth

    :type: float
    """

    contact_shadow_bias: float
    """ Bias to avoid self shadowing

    :type: float
    """

    contact_shadow_distance: float
    """ World space distance in which to search for screen space occluder

    :type: float
    """

    contact_shadow_thickness: float
    """ Pixel thickness used to detect occlusion

    :type: float
    """

    energy: float
    """ Sunlight strength in watts per meter squared (W/m²)

    :type: float
    """

    shadow_buffer_bias: float
    """ Bias for reducing self shadowing

    :type: float
    """

    shadow_buffer_clip_start: float
    """ Shadow map clip start, below which objects will not generate shadows

    :type: float
    """

    shadow_cascade_count: int
    """ Number of texture used by the cascaded shadow map

    :type: int
    """

    shadow_cascade_exponent: float
    """ Higher value increase resolution towards the viewpoint

    :type: float
    """

    shadow_cascade_fade: float
    """ How smooth is the transition between each cascade

    :type: float
    """

    shadow_cascade_max_distance: float
    """ End distance of the cascaded shadow map (only in perspective view)

    :type: float
    """

    shadow_color: mathutils.Color
    """ Color of shadows cast by the light

    :type: mathutils.Color
    """

    shadow_soft_size: float
    """ Light size for ray shadow sampling (Raytraced shadows)

    :type: float
    """

    shadow_softness_factor: float
    """ Scale light shape for smaller penumbra

    :type: float
    """

    shadow_trace_distance: float
    """ Maximum distance a shadow map tracing ray can travel

    :type: float
    """

    use_contact_shadow: bool
    """ Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps

    :type: bool
    """

    use_shadow: bool
    """ 

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeTree(NodeTree, ID, bpy_struct):
    """Node tree consisting of linked nodes used for compositing"""

    chunk_size: str
    """ Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)

    :type: str
    """

    edit_quality: str
    """ Quality when editing

    :type: str
    """

    execution_mode: str
    """ Set how compositing is executed

    :type: str
    """

    precision: str
    """ The precision of compositor intermediate result

    :type: str
    """

    render_quality: str
    """ Quality when rendering

    :type: str
    """

    use_groupnode_buffer: bool
    """ Enable buffering of group nodes

    :type: bool
    """

    use_opencl: bool
    """ Enable GPU calculations

    :type: bool
    """

    use_two_pass: bool
    """ Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes

    :type: bool
    """

    use_viewer_border: bool
    """ Use boundaries for viewer nodes and composite backdrop

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeTree(NodeTree, ID, bpy_struct):
    """Node tree consisting of linked nodes used for geometries"""

    is_mode_edit: bool
    """ The node group is used in edit mode

    :type: bool
    """

    is_mode_object: bool
    """ The node group is used in object mode

    :type: bool
    """

    is_mode_sculpt: bool
    """ The node group is used in sculpt mode

    :type: bool
    """

    is_modifier: bool
    """ The node group is used as a geometry modifier

    :type: bool
    """

    is_tool: bool
    """ The node group is used as a tool

    :type: bool
    """

    is_type_curve: bool
    """ The node group is used for curves

    :type: bool
    """

    is_type_mesh: bool
    """ The node group is used for meshes

    :type: bool
    """

    is_type_point_cloud: bool
    """ The node group is used for point clouds

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTree(NodeTree, ID, bpy_struct):
    """Node tree consisting of linked nodes used for materials (and other shading data-blocks)"""

    def get_output_node(self, target: str | None) -> ShaderNode:
        """Return active shader output node for the specified target

                :param target: Target

        ALL
        All -- Use shaders for all renderers and viewports, unless there exists a more specific output.

        EEVEE
        EEVEE -- Use shaders for EEVEE renderer.

        CYCLES
        Cycles -- Use shaders for Cycles renderer.
                :type target: str | None
                :return: Node
                :rtype: ShaderNode
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTree(NodeTree, ID, bpy_struct):
    """Node tree consisting of linked nodes used for textures"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class BlendTexture(Texture, ID, bpy_struct):
    """Procedural color blending texture"""

    progression: str
    """ Style of the color blending

    :type: str
    """

    use_flip_axis: str
    """ Flip the texture's X and Y axis

    :type: str
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CloudsTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    cloud_type: str
    """ Determine whether Noise returns grayscale or RGB values

    :type: str
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: str
    """ Noise basis used for turbulence

    :type: str
    """

    noise_depth: int
    """ Depth of the cloud calculation

    :type: int
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: str
    """ 

    :type: str
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class DistortedNoiseTexture(Texture, ID, bpy_struct):
    """Procedural distorted noise texture"""

    distortion: float
    """ Amount of distortion

    :type: float
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: str
    """ Noise basis used for turbulence

    :type: str
    """

    noise_distortion: str
    """ Noise basis for the distortion

    :type: str
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ImageTexture(Texture, ID, bpy_struct):
    checker_distance: float
    """ Distance between checker tiles

    :type: float
    """

    crop_max_x: float
    """ Maximum X value to crop the image

    :type: float
    """

    crop_max_y: float
    """ Maximum Y value to crop the image

    :type: float
    """

    crop_min_x: float
    """ Minimum X value to crop the image

    :type: float
    """

    crop_min_y: float
    """ Minimum Y value to crop the image

    :type: float
    """

    extension: str
    """ How the image is extrapolated past its original bounds

    :type: str
    """

    filter_eccentricity: int
    """ Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)

    :type: int
    """

    filter_lightprobes: int
    """ Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)

    :type: int
    """

    filter_size: float
    """ Multiply the filter size used by MIP Map and Interpolation

    :type: float
    """

    filter_type: str
    """ Texture filter to use for sampling image

    :type: str
    """

    image: Image
    """ 

    :type: Image
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    invert_alpha: bool
    """ Invert all the alpha values in the image

    :type: bool
    """

    repeat_x: int
    """ Repetition multiplier in the X direction

    :type: int
    """

    repeat_y: int
    """ Repetition multiplier in the Y direction

    :type: int
    """

    use_alpha: bool
    """ Use the alpha channel information in the image

    :type: bool
    """

    use_calculate_alpha: bool
    """ Calculate an alpha channel based on RGB values in the image

    :type: bool
    """

    use_checker_even: bool
    """ Even checker tiles

    :type: bool
    """

    use_checker_odd: bool
    """ Odd checker tiles

    :type: bool
    """

    use_filter_size_min: bool
    """ Use Filter Size as a minimal filter value in pixels

    :type: bool
    """

    use_flip_axis: bool
    """ Flip the texture's X and Y axis

    :type: bool
    """

    use_interpolation: bool
    """ Interpolate pixels using selected filter

    :type: bool
    """

    use_mipmap: bool
    """ Use auto-generated MIP maps for the image

    :type: bool
    """

    use_mipmap_gauss: bool
    """ Use Gauss filter to sample down MIP maps

    :type: bool
    """

    use_mirror_x: bool
    """ Mirror the image repetition on the X direction

    :type: bool
    """

    use_mirror_y: bool
    """ Mirror the image repetition on the Y direction

    :type: bool
    """

    use_normal_map: bool
    """ Use image RGB values for normal mapping

    :type: bool
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MagicTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    noise_depth: int
    """ Depth of the noise

    :type: int
    """

    turbulence: float
    """ Turbulence of the noise

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MarbleTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    marble_type: str
    """ 

    :type: str
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: str
    """ Noise basis used for turbulence

    :type: str
    """

    noise_basis_2: str
    """ 

    :type: str
    """

    noise_depth: int
    """ Depth of the cloud calculation

    :type: int
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: str
    """ 

    :type: str
    """

    turbulence: float
    """ Turbulence of the bandnoise and ringnoise types

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MusgraveTexture(Texture, ID, bpy_struct):
    """Procedural musgrave texture"""

    dimension_max: float
    """ Highest fractal dimension

    :type: float
    """

    gain: float
    """ The gain multiplier

    :type: float
    """

    lacunarity: float
    """ Gap between successive frequencies

    :type: float
    """

    musgrave_type: str
    """ Fractal noise algorithm

    :type: str
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: str
    """ Noise basis used for turbulence

    :type: str
    """

    noise_intensity: float
    """ Intensity of the noise

    :type: float
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    octaves: float
    """ Number of frequencies used

    :type: float
    """

    offset: float
    """ The fractal offset

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NoiseTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class StucciTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    noise_basis: str
    """ Noise basis used for turbulence

    :type: str
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: str
    """ 

    :type: str
    """

    stucci_type: str
    """ 

    :type: str
    """

    turbulence: float
    """ Turbulence of the noise

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class VoronoiTexture(Texture, ID, bpy_struct):
    """Procedural voronoi texture"""

    color_mode: str
    """ 

    :type: str
    """

    distance_metric: str
    """ Algorithm used to calculate distance of sample points to feature points

    :type: str
    """

    minkovsky_exponent: float
    """ Minkowski exponent

    :type: float
    """

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_intensity: float
    """ Scales the intensity of the noise

    :type: float
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    weight_1: float
    """ Voronoi feature weight 1

    :type: float
    """

    weight_2: float
    """ Voronoi feature weight 2

    :type: float
    """

    weight_3: float
    """ Voronoi feature weight 3

    :type: float
    """

    weight_4: float
    """ Voronoi feature weight 4

    :type: float
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WoodTexture(Texture, ID, bpy_struct):
    """Procedural noise texture"""

    nabla: float
    """ Size of derivative offset used for calculating normal

    :type: float
    """

    noise_basis: str
    """ Noise basis used for turbulence

    :type: str
    """

    noise_basis_2: str
    """ 

    :type: str
    """

    noise_scale: float
    """ Scaling for noise input

    :type: float
    """

    noise_type: str
    """ 

    :type: str
    """

    turbulence: float
    """ Turbulence of the bandnoise and ringnoise types

    :type: float
    """

    wood_type: str
    """ 

    :type: str
    """

    users_material: typing.Any
    """ Materials that use this texture(readonly)"""

    users_object_modifier: typing.Any
    """ Object modifiers that use this texture(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_AlongStroke(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency along stroke"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_CreaseAngle(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on the angle between two adjacent faces"""

    angle_max: float
    """ Maximum angle to modify thickness

    :type: float
    """

    angle_min: float
    """ Minimum angle to modify thickness

    :type: float
    """

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_Curvature_3D(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on the radial curvature of 3D mesh surfaces"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curvature_max: float
    """ Maximum Curvature

    :type: float
    """

    curvature_min: float
    """ Minimum Curvature

    :type: float
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_DistanceFromCamera(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency based on the distance from the camera"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_DistanceFromObject(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency based on the distance from an object"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    target: Object
    """ Target object from which the distance is measured

    :type: Object
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_Material(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Change alpha transparency based on a material attribute"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    material_attribute: str
    """ Specify which material attribute is used

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_Noise(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on random noise"""

    amplitude: float
    """ Amplitude of the noise

    :type: float
    """

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    period: float
    """ Period of the noise

    :type: float
    """

    seed: int
    """ Seed for the noise generation

    :type: int
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleAlphaModifier_Tangent(
    LineStyleAlphaModifier, LineStyleModifier, bpy_struct
):
    """Alpha transparency based on the direction of the stroke"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_AlongStroke(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color along stroke"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_CreaseAngle(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the underlying crease angle"""

    angle_max: float
    """ Maximum angle to modify thickness

    :type: float
    """

    angle_min: float
    """ Minimum angle to modify thickness

    :type: float
    """

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_Curvature_3D(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the radial curvature of 3D mesh surfaces"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    curvature_max: float
    """ Maximum Curvature

    :type: float
    """

    curvature_min: float
    """ Minimum Curvature

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_DistanceFromCamera(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the distance from the camera"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_DistanceFromObject(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the distance from an object"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    target: Object
    """ Target object from which the distance is measured

    :type: Object
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_Material(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on a material attribute"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    material_attribute: str
    """ Specify which material attribute is used

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    use_ramp: bool
    """ Use color ramp to map the BW average into an RGB color

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_Noise(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on random noise"""

    amplitude: float
    """ Amplitude of the noise

    :type: float
    """

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    period: float
    """ Period of the noise

    :type: float
    """

    seed: int
    """ Seed for the noise generation

    :type: int
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleColorModifier_Tangent(
    LineStyleColorModifier, LineStyleModifier, bpy_struct
):
    """Change line color based on the direction of a stroke"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    color_ramp: ColorRamp
    """ Color ramp used to change line color

    :type: ColorRamp
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_2DOffset(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add two-dimensional offsets to stroke backbone geometry"""

    end: float
    """ Displacement that is applied from the end of the stroke

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    start: float
    """ Displacement that is applied from the beginning of the stroke

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    x: float
    """ Displacement that is applied to the X coordinates of stroke vertices

    :type: float
    """

    y: float
    """ Displacement that is applied to the Y coordinates of stroke vertices

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_2DTransform(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Apply two-dimensional scaling and rotation to stroke backbone geometry"""

    angle: float
    """ Rotation angle

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    pivot: str
    """ Pivot of scaling and rotation operations

    :type: str
    """

    pivot_u: float
    """ Pivot in terms of the stroke point parameter u (0 <= u <= 1)

    :type: float
    """

    pivot_x: float
    """ 2D X coordinate of the absolute pivot

    :type: float
    """

    pivot_y: float
    """ 2D Y coordinate of the absolute pivot

    :type: float
    """

    scale_x: float
    """ Scaling factor that is applied along the X axis

    :type: float
    """

    scale_y: float
    """ Scaling factor that is applied along the Y axis

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_BackboneStretcher(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Stretch the beginning and the end of stroke backbone"""

    backbone_length: float
    """ Amount of backbone stretching

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_BezierCurve(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Replace stroke backbone geometry by a Bézier curve approximation of the original backbone geometry"""

    error: float
    """ Maximum distance allowed between the new Bézier curve and the original backbone geometry

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_Blueprint(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Produce a blueprint using circular, elliptic, and square contour strokes"""

    backbone_length: float
    """ Amount of backbone stretching

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    random_backbone: int
    """ Randomness of the backbone stretching

    :type: int
    """

    random_center: int
    """ Randomness of the center

    :type: int
    """

    random_radius: int
    """ Randomness of the radius

    :type: int
    """

    rounds: int
    """ Number of rounds in contour strokes

    :type: int
    """

    shape: str
    """ Select the shape of blueprint contour strokes

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_GuidingLines(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Modify the stroke geometry so that it corresponds to its main direction line"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    offset: float
    """ Displacement that is applied to the main direction line along its normal

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_PerlinNoise1D(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add one-dimensional Perlin noise to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the Perlin noise

    :type: float
    """

    angle: float
    """ Displacement direction

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    frequency: float
    """ Frequency of the Perlin noise

    :type: float
    """

    octaves: int
    """ Number of octaves (i.e., the amount of detail of the Perlin noise)

    :type: int
    """

    seed: int
    """ Seed for random number generation (if negative, time is used as a seed instead)

    :type: int
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_PerlinNoise2D(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add two-dimensional Perlin noise to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the Perlin noise

    :type: float
    """

    angle: float
    """ Displacement direction

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    frequency: float
    """ Frequency of the Perlin noise

    :type: float
    """

    octaves: int
    """ Number of octaves (i.e., the amount of detail of the Perlin noise)

    :type: int
    """

    seed: int
    """ Seed for random number generation (if negative, time is used as a seed instead)

    :type: int
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_Polygonalization(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Modify the stroke geometry so that it looks more 'polygonal'"""

    error: float
    """ Maximum distance between the original stroke and its polygonal approximation

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_Sampling(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Specify a new sampling value that determines the resolution of stroke polylines"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    sampling: float
    """ New sampling value to be used for subsequent modifiers

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_Simplification(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Simplify the stroke set"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    tolerance: float
    """ Distance below which segments will be merged

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_SinusDisplacement(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add sinus displacement to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the sinus displacement

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    phase: float
    """ Phase of the sinus displacement

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    wavelength: float
    """ Wavelength of the sinus displacement

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_SpatialNoise(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Add spatial noise to stroke backbone geometry"""

    amplitude: float
    """ Amplitude of the spatial noise

    :type: float
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    octaves: int
    """ Number of octaves (i.e., the amount of detail of the spatial noise)

    :type: int
    """

    scale: float
    """ Scale of the spatial noise

    :type: float
    """

    smooth: bool
    """ If true, the spatial noise is smooth

    :type: bool
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    use_pure_random: bool
    """ If true, the spatial noise does not show any coherence

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleGeometryModifier_TipRemover(
    LineStyleGeometryModifier, LineStyleModifier, bpy_struct
):
    """Remove a piece of stroke at the beginning and the end of stroke backbone"""

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    tip_length: float
    """ Length of tips to be removed

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_AlongStroke(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness along stroke"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_Calligraphy(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness so that stroke looks like made with a calligraphic pen"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    orientation: float
    """ Angle of the main direction

    :type: float
    """

    thickness_max: float
    """ Maximum thickness in the main direction

    :type: float
    """

    thickness_min: float
    """ Minimum thickness in the direction perpendicular to the main direction

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_CreaseAngle(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Line thickness based on the angle between two adjacent faces"""

    angle_max: float
    """ Maximum angle to modify thickness

    :type: float
    """

    angle_min: float
    """ Minimum angle to modify thickness

    :type: float
    """

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    thickness_max: float
    """ Maximum thickness

    :type: float
    """

    thickness_min: float
    """ Minimum thickness

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_Curvature_3D(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Line thickness based on the radial curvature of 3D mesh surfaces"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curvature_max: float
    """ Maximum Curvature

    :type: float
    """

    curvature_min: float
    """ Minimum Curvature

    :type: float
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    thickness_max: float
    """ Maximum thickness

    :type: float
    """

    thickness_min: float
    """ Minimum thickness

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_DistanceFromCamera(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness based on the distance from the camera"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_DistanceFromObject(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness based on the distance from an object"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    range_max: float
    """ Upper bound of the input range the mapping is applied

    :type: float
    """

    range_min: float
    """ Lower bound of the input range the mapping is applied

    :type: float
    """

    target: Object
    """ Target object from which the distance is measured

    :type: Object
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_Material(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Change line thickness based on a material attribute"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    material_attribute: str
    """ Specify which material attribute is used

    :type: str
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    value_max: float
    """ Maximum output value of the mapping

    :type: float
    """

    value_min: float
    """ Minimum output value of the mapping

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_Noise(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Line thickness based on random noise"""

    amplitude: float
    """ Amplitude of the noise

    :type: float
    """

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    period: float
    """ Period of the noise

    :type: float
    """

    seed: int
    """ Seed for the noise generation

    :type: int
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    use_asymmetric: bool
    """ Allow thickness to be assigned asymmetrically

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class LineStyleThicknessModifier_Tangent(
    LineStyleThicknessModifier, LineStyleModifier, bpy_struct
):
    """Thickness based on the direction of the stroke"""

    blend: str
    """ Specify how the modifier value is blended into the base value

    :type: str
    """

    curve: CurveMapping
    """ Curve used for the curve mapping

    :type: CurveMapping
    """

    expanded: bool
    """ True if the modifier tab is expanded

    :type: bool
    """

    influence: float
    """ Influence factor by which the modifier changes the property

    :type: float
    """

    invert: bool
    """ Invert the fade-out direction of the linear mapping

    :type: bool
    """

    mapping: str
    """ Select the mapping type

    :type: str
    """

    thickness_max: float
    """ Maximum thickness

    :type: float
    """

    thickness_min: float
    """ Minimum thickness

    :type: float
    """

    type: str
    """ Type of the modifier

    :type: str
    """

    use: bool
    """ Enable or disable this modifier during stroke rendering

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNode(NodeInternal, Node, bpy_struct):
    def tag_need_exec(self):
        """Tag the node for compositor update"""
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNode(NodeInternal, Node, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNode(NodeInternal, Node, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeFrame(NodeInternal, Node, bpy_struct):
    """Collect related nodes together in a common area. Useful for organization when the re-usability of a node group is not required"""

    label_size: int
    """ Font size to use for displaying the label

    :type: int
    """

    shrink: bool
    """ Shrink the frame to minimal bounding box

    :type: bool
    """

    text: Text
    """ 

    :type: Text
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeGroup(NodeInternal, Node, bpy_struct):
    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeGroupInput(NodeInternal, Node, bpy_struct):
    """Expose connected data from inside a node group as inputs to its interface"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeGroupOutput(NodeInternal, Node, bpy_struct):
    """Output data from inside of a node group"""

    is_active_output: bool
    """ True if this node is used as the active group output

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeReroute(NodeInternal, Node, bpy_struct):
    """A single-socket organization tool that supports one input and multiple outputs"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNode(NodeInternal, Node, bpy_struct):
    """Material shader node"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNode(NodeInternal, Node, bpy_struct):
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketBool(NodeSocketStandard, NodeSocket, bpy_struct):
    """Boolean value socket of a node"""

    default_value: bool
    """ Input value used for unconnected socket

    :type: bool
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketCollection(NodeSocketStandard, NodeSocket, bpy_struct):
    """Collection socket of a node"""

    default_value: Collection
    """ Input value used for unconnected socket

    :type: Collection
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketColor(NodeSocketStandard, NodeSocket, bpy_struct):
    """RGBA color socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloat(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloatAngle(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloatDistance(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloatFactor(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloatPercentage(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloatTime(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloatTimeAbsolute(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketFloatUnsigned(NodeSocketStandard, NodeSocket, bpy_struct):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketGeometry(NodeSocketStandard, NodeSocket, bpy_struct):
    """Geometry socket of a node"""

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketImage(NodeSocketStandard, NodeSocket, bpy_struct):
    """Image socket of a node"""

    default_value: Image
    """ Input value used for unconnected socket

    :type: Image
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketInt(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketIntFactor(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketIntPercentage(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketIntUnsigned(NodeSocketStandard, NodeSocket, bpy_struct):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketMaterial(NodeSocketStandard, NodeSocket, bpy_struct):
    """Material socket of a node"""

    default_value: Material
    """ Input value used for unconnected socket

    :type: Material
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketMenu(NodeSocketStandard, NodeSocket, bpy_struct):
    """Menu socket of a node"""

    default_value: str
    """ Input value used for unconnected socket

    :type: str
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketObject(NodeSocketStandard, NodeSocket, bpy_struct):
    """Object socket of a node"""

    default_value: Object
    """ Input value used for unconnected socket

    :type: Object
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketRotation(NodeSocketStandard, NodeSocket, bpy_struct):
    """Rotation value socket of a node"""

    default_value: mathutils.Euler
    """ Input value used for unconnected socket

    :type: mathutils.Euler
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketShader(NodeSocketStandard, NodeSocket, bpy_struct):
    """Shader socket of a node"""

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketString(NodeSocketStandard, NodeSocket, bpy_struct):
    """String socket of a node"""

    default_value: str
    """ Input value used for unconnected socket

    :type: str
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketTexture(NodeSocketStandard, NodeSocket, bpy_struct):
    """Texture socket of a node"""

    default_value: Texture
    """ Input value used for unconnected socket

    :type: Texture
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVector(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVectorAcceleration(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVectorDirection(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVectorEuler(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: mathutils.Euler
    """ Input value used for unconnected socket

    :type: mathutils.Euler
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVectorTranslation(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVectorVelocity(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVectorXYZ(NodeSocketStandard, NodeSocket, bpy_struct):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeSocketVirtual(NodeSocketStandard, NodeSocket, bpy_struct):
    """Virtual socket of a node"""

    links: typing.Any
    """ List of node links from or to this socket.(readonly)"""

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketBool(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Boolean value socket of a node"""

    default_value: bool
    """ Input value used for unconnected socket

    :type: bool
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketCollection(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Collection socket of a node"""

    default_value: Collection
    """ Input value used for unconnected socket

    :type: Collection
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketColor(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """RGBA color socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloat(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloatAngle(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloatDistance(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloatFactor(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloatPercentage(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloatTime(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloatTimeAbsolute(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketFloatUnsigned(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Floating-point number socket of a node"""

    default_value: float
    """ Input value used for unconnected socket

    :type: float
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketGeometry(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Geometry socket of a node"""

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketImage(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Image socket of a node"""

    default_value: Image
    """ Input value used for unconnected socket

    :type: Image
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketInt(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketIntFactor(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketIntPercentage(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketIntUnsigned(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Integer number socket of a node"""

    default_value: int
    """ Input value used for unconnected socket

    :type: int
    """

    max_value: int
    """ Maximum value

    :type: int
    """

    min_value: int
    """ Minimum value

    :type: int
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketMaterial(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Material socket of a node"""

    default_value: Material
    """ Input value used for unconnected socket

    :type: Material
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketMenu(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Menu socket of a node"""

    default_value: str
    """ Input value used for unconnected socket

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketObject(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Object socket of a node"""

    default_value: Object
    """ Input value used for unconnected socket

    :type: Object
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketRotation(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Rotation value socket of a node"""

    default_value: mathutils.Euler
    """ Input value used for unconnected socket

    :type: mathutils.Euler
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketShader(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Shader socket of a node"""

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketString(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """String socket of a node"""

    default_value: str
    """ Input value used for unconnected socket

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketTexture(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """Texture socket of a node"""

    default_value: Texture
    """ Input value used for unconnected socket

    :type: Texture
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketVector(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """3D vector socket of a node"""

    default_value: bpy_prop_array[float]
    """ Input value used for unconnected socket

    :type: bpy_prop_array[float]
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketVectorAcceleration(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketVectorDirection(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketVectorEuler(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """3D vector socket of a node"""

    default_value: mathutils.Euler
    """ Input value used for unconnected socket

    :type: mathutils.Euler
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketVectorTranslation(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketVectorVelocity(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class NodeTreeInterfaceSocketVectorXYZ(
    NodeTreeInterfaceSocket, NodeTreeInterfaceItem, bpy_struct
):
    """3D vector socket of a node"""

    default_value: mathutils.Vector
    """ Input value used for unconnected socket

    :type: mathutils.Vector
    """

    max_value: float
    """ Maximum value

    :type: float
    """

    min_value: float
    """ Minimum value

    :type: float
    """

    subtype: str
    """ Subtype of the default value

    :type: str
    """

    def draw(self, context: Context, layout: UILayout):
        """Draw interface socket settings

        :param context:
        :type context: Context
        :param layout: Layout, Layout in the UI
        :type layout: UILayout
        """
        ...

    def init_socket(self, node: Node, socket: NodeSocket, data_path: str | typing.Any):
        """Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: Node
        :param socket: Socket, Socket to initialize
        :type socket: NodeSocket
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str | typing.Any
        """
        ...

    def from_socket(self, node: Node, socket: NodeSocket):
        """Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: Node
        :param socket: Socket, Original socket
        :type socket: NodeSocket
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AddSequence(EffectSequence, Sequence, bpy_struct):
    """Add Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AdjustmentSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip to perform filter adjustments to layers below"""

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AlphaOverSequence(EffectSequence, Sequence, bpy_struct):
    """Alpha Over Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class AlphaUnderSequence(EffectSequence, Sequence, bpy_struct):
    """Alpha Under Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorMixSequence(EffectSequence, Sequence, bpy_struct):
    """Color Mix Sequence"""

    blend_effect: str
    """ Method for controlling how the strip combines with other strips

    :type: str
    """

    factor: float
    """ Percentage of how much the strip's colors affect other strips

    :type: float
    """

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ColorSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating an image filled with a single color"""

    color: mathutils.Color
    """ Effect Strip color

    :type: mathutils.Color
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CrossSequence(EffectSequence, Sequence, bpy_struct):
    """Cross Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GammaCrossSequence(EffectSequence, Sequence, bpy_struct):
    """Gamma Cross Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GaussianBlurSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating a gaussian blur"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    size_x: float
    """ Size of the blur along X axis

    :type: float
    """

    size_y: float
    """ Size of the blur along Y axis

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GlowSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating a glow effect"""

    blur_radius: float
    """ Radius of glow effect

    :type: float
    """

    boost_factor: float
    """ Brightness multiplier

    :type: float
    """

    clamp: float
    """ Brightness limit of intensity

    :type: float
    """

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    quality: int
    """ Accuracy of the blur effect

    :type: int
    """

    threshold: float
    """ Minimum intensity to trigger a glow

    :type: float
    """

    use_only_boost: bool
    """ Show the glow buffer only

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MulticamSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip to perform multicam editing"""

    animation_offset_end: int
    """ Animation end offset (trim end)

    :type: int
    """

    animation_offset_start: int
    """ Animation start offset (trim start)

    :type: int
    """

    input_count: int
    """ 

    :type: int
    """

    multicam_source: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class MultiplySequence(EffectSequence, Sequence, bpy_struct):
    """Multiply Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class OverDropSequence(EffectSequence, Sequence, bpy_struct):
    """Over Drop Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SpeedControlSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip to control the speed of other strips"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    speed_control: str
    """ Speed control method

    :type: str
    """

    speed_factor: float
    """ Multiply the current speed of the sequence with this number or remap current frame to this frame

    :type: float
    """

    speed_frame_number: float
    """ Frame number of input strip

    :type: float
    """

    speed_length: float
    """ Percentage of input strip length

    :type: float
    """

    use_frame_interpolate: bool
    """ Do crossfade blending between current and next frame

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class SubtractSequence(EffectSequence, Sequence, bpy_struct):
    """Subtract Sequence"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating text"""

    align_x: str
    """ Align the text along the X axis, relative to the text bounds

    :type: str
    """

    align_y: str
    """ Align the text along the Y axis, relative to the text bounds

    :type: str
    """

    box_color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    box_margin: float
    """ Box margin as factor of image width

    :type: float
    """

    color: bpy_prop_array[float]
    """ Text color

    :type: bpy_prop_array[float]
    """

    font: VectorFont
    """ Font of the text. Falls back to the UI font by default

    :type: VectorFont
    """

    font_size: float
    """ Size of the text

    :type: float
    """

    input_count: int
    """ 

    :type: int
    """

    location: mathutils.Vector
    """ Location of the text

    :type: mathutils.Vector
    """

    shadow_color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    text: str
    """ Text that will be displayed

    :type: str
    """

    use_bold: bool
    """ Display text as bold

    :type: bool
    """

    use_box: bool
    """ Display colored box behind text

    :type: bool
    """

    use_italic: bool
    """ Display text as italic

    :type: bool
    """

    use_shadow: bool
    """ Display shadow behind text

    :type: bool
    """

    wrap_width: float
    """ Word wrap width as factor, zero disables

    :type: float
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TransformSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip applying affine transformations to other strips"""

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    interpolation: str
    """ Method to determine how missing pixels are created

    :type: str
    """

    rotation_start: float
    """ Degrees to rotate the input

    :type: float
    """

    scale_start_x: float
    """ Amount to scale the input in the X axis

    :type: float
    """

    scale_start_y: float
    """ Amount to scale the input in the Y axis

    :type: float
    """

    translate_start_x: float
    """ Amount to move the input on the X axis

    :type: float
    """

    translate_start_y: float
    """ Amount to move the input on the Y axis

    :type: float
    """

    translation_unit: str
    """ Unit of measure to translate the input

    :type: str
    """

    use_uniform_scale: bool
    """ Scale uniformly, preserving aspect ratio

    :type: bool
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class WipeSequence(EffectSequence, Sequence, bpy_struct):
    """Sequence strip creating a wipe transition"""

    angle: float
    """ Angle of the transition

    :type: float
    """

    blur_width: float
    """ Width of the blur for the transition, in percentage relative to the image size

    :type: float
    """

    direction: str
    """ Whether to fade in or out

    :type: str
    """

    input_1: Sequence
    """ First input for the effect strip

    :type: Sequence
    """

    input_2: Sequence
    """ Second input for the effect strip

    :type: Sequence
    """

    input_count: int
    """ 

    :type: int
    """

    transition_type: str
    """ 

    :type: str
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeAlphaOver(CompositorNode, NodeInternal, Node, bpy_struct):
    premul: float
    """ Mix Factor

    :type: float
    """

    use_premultiply: bool
    """ 

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeAntiAliasing(CompositorNode, NodeInternal, Node, bpy_struct):
    contrast_limit: float
    """ How much to eliminate spurious edges to avoid artifacts (the larger value makes less active; the value 2.0, for example, means discard a detected edge if there is a neighboring edge that has 2.0 times bigger contrast than the current one)

    :type: float
    """

    corner_rounding: float
    """ How much sharp corners will be rounded

    :type: float
    """

    threshold: float
    """ Threshold to detect edges (smaller threshold makes more sensitive detection)

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeBilateralblur(CompositorNode, NodeInternal, Node, bpy_struct):
    iterations: int
    """ 

    :type: int
    """

    sigma_color: float
    """ 

    :type: float
    """

    sigma_space: float
    """ 

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    aspect_correction: str
    """ Type of aspect correction to use

    :type: str
    """

    factor: float
    """ 

    :type: float
    """

    factor_x: float
    """ 

    :type: float
    """

    factor_y: float
    """ 

    :type: float
    """

    filter_type: str
    """ 

    :type: str
    """

    size_x: int
    """ 

    :type: int
    """

    size_y: int
    """ 

    :type: int
    """

    use_bokeh: bool
    """ Use circular filter (slower)

    :type: bool
    """

    use_extended_bounds: bool
    """ Extend bounds of the input image to fully fit blurred image

    :type: bool
    """

    use_gamma_correction: bool
    """ Apply filter on gamma corrected values

    :type: bool
    """

    use_relative: bool
    """ Use relative (percent) values to define blur radius

    :type: bool
    """

    use_variable_size: bool
    """ Support variable blur per pixel when using an image for size input

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeBokehBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    blur_max: float
    """ Blur limit, maximum CoC radius

    :type: float
    """

    use_extended_bounds: bool
    """ Extend bounds of the input image to fully fit blurred image

    :type: bool
    """

    use_variable_size: bool
    """ Support variable blur per pixel when using an image for size input

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeBokehImage(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float
    """ Angle of the bokeh

    :type: float
    """

    catadioptric: float
    """ Level of catadioptric of the bokeh

    :type: float
    """

    flaps: int
    """ Number of flaps

    :type: int
    """

    rounding: float
    """ Level of rounding of the bokeh

    :type: float
    """

    shift: float
    """ Shift of the lens components

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeBoxMask(CompositorNode, NodeInternal, Node, bpy_struct):
    height: float
    """ Height of the box

    :type: float
    """

    mask_type: str
    """ 

    :type: str
    """

    rotation: float
    """ Rotation angle of the box

    :type: float
    """

    width: float
    """ Width of the box

    :type: float
    """

    x: float
    """ X position of the middle of the box

    :type: float
    """

    y: float
    """ Y position of the middle of the box

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeBrightContrast(CompositorNode, NodeInternal, Node, bpy_struct):
    use_premultiply: bool
    """ Keep output image premultiplied alpha

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeChannelMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    color_space: str
    """ 

    :type: str
    """

    limit_channel: str
    """ Limit by this channel's value

    :type: str
    """

    limit_max: float
    """ Values higher than this setting are 100% opaque

    :type: float
    """

    limit_method: str
    """ Algorithm to use to limit channel

    :type: str
    """

    limit_min: float
    """ Values lower than this setting are 100% keyed

    :type: float
    """

    matte_channel: str
    """ Channel used to determine matte

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeChromaMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    gain: float
    """ Alpha falloff

    :type: float
    """

    lift: float
    """ Alpha lift

    :type: float
    """

    shadow_adjust: float
    """ Adjusts the brightness of any shadows captured

    :type: float
    """

    threshold: float
    """ Tolerance below which colors will be considered as exact matches

    :type: float
    """

    tolerance: float
    """ Tolerance for a color to be considered a keying color

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeColorBalance(CompositorNode, NodeInternal, Node, bpy_struct):
    correction_method: str
    """ 

    :type: str
    """

    gain: mathutils.Color
    """ Correction for highlights

    :type: mathutils.Color
    """

    gamma: mathutils.Color
    """ Correction for midtones

    :type: mathutils.Color
    """

    lift: mathutils.Color
    """ Correction for shadows

    :type: mathutils.Color
    """

    offset: mathutils.Color
    """ Correction for entire tonal range

    :type: mathutils.Color
    """

    offset_basis: float
    """ Support negative color by using this as the RGB basis

    :type: float
    """

    power: mathutils.Color
    """ Correction for midtones

    :type: mathutils.Color
    """

    slope: mathutils.Color
    """ Correction for highlights

    :type: mathutils.Color
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeColorCorrection(CompositorNode, NodeInternal, Node, bpy_struct):
    blue: bool
    """ Blue channel active

    :type: bool
    """

    green: bool
    """ Green channel active

    :type: bool
    """

    highlights_contrast: float
    """ Highlights contrast

    :type: float
    """

    highlights_gain: float
    """ Highlights gain

    :type: float
    """

    highlights_gamma: float
    """ Highlights gamma

    :type: float
    """

    highlights_lift: float
    """ Highlights lift

    :type: float
    """

    highlights_saturation: float
    """ Highlights saturation

    :type: float
    """

    master_contrast: float
    """ Master contrast

    :type: float
    """

    master_gain: float
    """ Master gain

    :type: float
    """

    master_gamma: float
    """ Master gamma

    :type: float
    """

    master_lift: float
    """ Master lift

    :type: float
    """

    master_saturation: float
    """ Master saturation

    :type: float
    """

    midtones_contrast: float
    """ Midtones contrast

    :type: float
    """

    midtones_end: float
    """ End of midtones

    :type: float
    """

    midtones_gain: float
    """ Midtones gain

    :type: float
    """

    midtones_gamma: float
    """ Midtones gamma

    :type: float
    """

    midtones_lift: float
    """ Midtones lift

    :type: float
    """

    midtones_saturation: float
    """ Midtones saturation

    :type: float
    """

    midtones_start: float
    """ Start of midtones

    :type: float
    """

    red: bool
    """ Red channel active

    :type: bool
    """

    shadows_contrast: float
    """ Shadows contrast

    :type: float
    """

    shadows_gain: float
    """ Shadows gain

    :type: float
    """

    shadows_gamma: float
    """ Shadows gamma

    :type: float
    """

    shadows_lift: float
    """ Shadows lift

    :type: float
    """

    shadows_saturation: float
    """ Shadows saturation

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeColorMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    color_hue: float
    """ Hue tolerance for colors to be considered a keying color

    :type: float
    """

    color_saturation: float
    """ Saturation tolerance for the color

    :type: float
    """

    color_value: float
    """ Value tolerance for the color

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeColorSpill(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: str
    """ 

    :type: str
    """

    limit_channel: str
    """ 

    :type: str
    """

    limit_method: str
    """ 

    :type: str
    """

    ratio: float
    """ Scale limit by value

    :type: float
    """

    unspill_blue: float
    """ Blue spillmap scale

    :type: float
    """

    unspill_green: float
    """ Green spillmap scale

    :type: float
    """

    unspill_red: float
    """ Red spillmap scale

    :type: float
    """

    use_unspill: bool
    """ Compensate all channels (differently) by hand

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCombHSVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCombRGBA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCombYCCA(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCombYUVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCombineColor(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ Mode of color processing

    :type: str
    """

    ycc_mode: str
    """ Color space used for YCbCrA processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCombineXYZ(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeComposite(CompositorNode, NodeInternal, Node, bpy_struct):
    use_alpha: bool
    """ Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeConvertColorSpace(CompositorNode, NodeInternal, Node, bpy_struct):
    from_color_space: str
    """ Color space of the input image

    :type: str
    """

    to_color_space: str
    """ Color space of the output image

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCornerPin(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCrop(CompositorNode, NodeInternal, Node, bpy_struct):
    max_x: int
    """ 

    :type: int
    """

    max_y: int
    """ 

    :type: int
    """

    min_x: int
    """ 

    :type: int
    """

    min_y: int
    """ 

    :type: int
    """

    rel_max_x: float
    """ 

    :type: float
    """

    rel_max_y: float
    """ 

    :type: float
    """

    rel_min_x: float
    """ 

    :type: float
    """

    rel_min_y: float
    """ 

    :type: float
    """

    relative: bool
    """ Use relative values to crop image

    :type: bool
    """

    use_crop_size: bool
    """ Whether to crop the size of the input image

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCryptomatte(CompositorNode, NodeInternal, Node, bpy_struct):
    add: mathutils.Color
    """ Add object or material to matte, by picking a color from the Pick output

    :type: mathutils.Color
    """

    matte_id: str
    """ List of object and material crypto IDs to include in matte

    :type: str
    """

    remove: mathutils.Color
    """ Remove object or material from matte, by picking a color from the Pick output

    :type: mathutils.Color
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCryptomatteV2(CompositorNode, NodeInternal, Node, bpy_struct):
    add: mathutils.Color
    """ Add object or material to matte, by picking a color from the Pick output

    :type: mathutils.Color
    """

    entries: bpy_prop_collection[CryptomatteEntry]
    """ 

    :type: bpy_prop_collection[CryptomatteEntry]
    """

    frame_duration: int
    """ Number of images of a movie to use

    :type: int
    """

    frame_offset: int
    """ Offset the number of the frame to use in the animation

    :type: int
    """

    frame_start: int
    """ Global starting frame of the movie/sequence, assuming first picture has a #1

    :type: int
    """

    has_layers: bool
    """ True if this image has any named layer

    :type: bool
    """

    has_views: bool
    """ True if this image has multiple views

    :type: bool
    """

    image: Image
    """ 

    :type: Image
    """

    layer: str
    """ 

    :type: str
    """

    layer_name: str
    """ What Cryptomatte layer is used

    :type: str
    """

    matte_id: str
    """ List of object and material crypto IDs to include in matte

    :type: str
    """

    remove: mathutils.Color
    """ Remove object or material from matte, by picking a color from the Pick output

    :type: mathutils.Color
    """

    scene: Scene
    """ 

    :type: Scene
    """

    source: str
    """ Where the Cryptomatte passes are loaded from

    :type: str
    """

    use_auto_refresh: bool
    """ Always refresh image on frame changes

    :type: bool
    """

    use_cyclic: bool
    """ Cycle the images in the movie

    :type: bool
    """

    view: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCurveRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCurveVec(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeCustomGroup(CompositorNode, NodeInternal, Node, bpy_struct):
    """Custom Compositor Group Node for Python nodes"""

    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float
    """ 

    :type: float
    """

    center_x: float
    """ 

    :type: float
    """

    center_y: float
    """ 

    :type: float
    """

    distance: float
    """ 

    :type: float
    """

    iterations: int
    """ 

    :type: int
    """

    spin: float
    """ 

    :type: float
    """

    zoom: float
    """ 

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDefocus(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float
    """ Bokeh shape rotation offset

    :type: float
    """

    blur_max: float
    """ Blur limit, maximum CoC radius

    :type: float
    """

    bokeh: str
    """ 

    :type: str
    """

    f_stop: float
    """ Amount of focal blur, 128 (infinity) is perfect focus, half the value doubles the blur radius

    :type: float
    """

    scene: Scene
    """ Scene from which to select the active camera (render scene if undefined)

    :type: Scene
    """

    threshold: float
    """ CoC radius threshold, prevents background bleed on in-focus midground, 0 is disabled

    :type: float
    """

    use_gamma_correction: bool
    """ Enable gamma correction before and after main process

    :type: bool
    """

    use_preview: bool
    """ Enable low quality mode, useful for preview

    :type: bool
    """

    use_zbuffer: bool
    """ Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)

    :type: bool
    """

    z_scale: float
    """ Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDenoise(CompositorNode, NodeInternal, Node, bpy_struct):
    prefilter: str
    """ Denoising prefilter

    :type: str
    """

    use_hdr: bool
    """ Process HDR images

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDespeckle(CompositorNode, NodeInternal, Node, bpy_struct):
    threshold: float
    """ Threshold for detecting pixels to despeckle

    :type: float
    """

    threshold_neighbor: float
    """ Threshold for the number of neighbor pixels that must match

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDiffMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    falloff: float
    """ Color distances below this additional threshold are partially keyed

    :type: float
    """

    tolerance: float
    """ Color distances below this threshold are keyed

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDilateErode(CompositorNode, NodeInternal, Node, bpy_struct):
    distance: int
    """ Distance to grow/shrink (number of iterations)

    :type: int
    """

    edge: float
    """ Edge to inset

    :type: float
    """

    falloff: str
    """ Falloff type the feather

    :type: str
    """

    mode: str
    """ Growing/shrinking mode

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDisplace(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDistanceMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: str
    """ 

    :type: str
    """

    falloff: float
    """ Color distances below this additional threshold are partially keyed

    :type: float
    """

    tolerance: float
    """ Color distances below this threshold are keyed

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeDoubleEdgeMask(CompositorNode, NodeInternal, Node, bpy_struct):
    edge_mode: str
    """ 

    :type: str
    """

    inner_mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeEllipseMask(CompositorNode, NodeInternal, Node, bpy_struct):
    height: float
    """ Height of the ellipse

    :type: float
    """

    mask_type: str
    """ 

    :type: str
    """

    rotation: float
    """ Rotation angle of the ellipse

    :type: float
    """

    width: float
    """ Width of the ellipse

    :type: float
    """

    x: float
    """ X position of the middle of the ellipse

    :type: float
    """

    y: float
    """ Y position of the middle of the ellipse

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeExposure(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeFilter(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeFlip(CompositorNode, NodeInternal, Node, bpy_struct):
    axis: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeGamma(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeGlare(CompositorNode, NodeInternal, Node, bpy_struct):
    angle_offset: float
    """ Streak angle offset

    :type: float
    """

    color_modulation: float
    """ Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect

    :type: float
    """

    fade: float
    """ Streak fade-out factor

    :type: float
    """

    glare_type: str
    """ 

    :type: str
    """

    iterations: int
    """ 

    :type: int
    """

    mix: float
    """ -1 is original image only, 0 is exact 50/50 mix, 1 is processed image only

    :type: float
    """

    quality: str
    """ If not set to high quality, the effect will be applied to a low-res copy of the source image

    :type: str
    """

    size: int
    """ Glow/glare size (not actual size; relative to initial size of bright area of pixels)

    :type: int
    """

    streaks: int
    """ Total number of streaks

    :type: int
    """

    threshold: float
    """ The glare filter will only be applied to pixels brighter than this value

    :type: float
    """

    use_rotate_45: bool
    """ Simple star filter: add 45 degree rotation offset

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeGroup(CompositorNode, NodeInternal, Node, bpy_struct):
    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeHueCorrect(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeHueSat(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeIDMask(CompositorNode, NodeInternal, Node, bpy_struct):
    index: int
    """ Pass index number to convert to alpha

    :type: int
    """

    use_antialiasing: bool
    """ Apply an anti-aliasing filter to the mask

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeImage(CompositorNode, NodeInternal, Node, bpy_struct):
    frame_duration: int
    """ Number of images of a movie to use

    :type: int
    """

    frame_offset: int
    """ Offset the number of the frame to use in the animation

    :type: int
    """

    frame_start: int
    """ Global starting frame of the movie/sequence, assuming first picture has a #1

    :type: int
    """

    has_layers: bool
    """ True if this image has any named layer

    :type: bool
    """

    has_views: bool
    """ True if this image has multiple views

    :type: bool
    """

    image: Image
    """ 

    :type: Image
    """

    layer: str
    """ 

    :type: str
    """

    use_auto_refresh: bool
    """ Always refresh image on frame changes

    :type: bool
    """

    use_cyclic: bool
    """ Cycle the images in the movie

    :type: bool
    """

    use_straight_alpha_output: bool
    """ Put node output buffer to straight alpha instead of premultiplied

    :type: bool
    """

    view: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeInpaint(CompositorNode, NodeInternal, Node, bpy_struct):
    distance: int
    """ Distance to inpaint (number of iterations)

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeInvert(CompositorNode, NodeInternal, Node, bpy_struct):
    invert_alpha: bool
    """ 

    :type: bool
    """

    invert_rgb: bool
    """ 

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeKeying(CompositorNode, NodeInternal, Node, bpy_struct):
    blur_post: int
    """ Matte blur size which applies after clipping and dilate/eroding

    :type: int
    """

    blur_pre: int
    """ Chroma pre-blur size which applies before running keyer

    :type: int
    """

    clip_black: float
    """ Value of non-scaled matte pixel which considers as fully background pixel

    :type: float
    """

    clip_white: float
    """ Value of non-scaled matte pixel which considers as fully foreground pixel

    :type: float
    """

    despill_balance: float
    """ Balance between non-key colors used to detect amount of key color to be removed

    :type: float
    """

    despill_factor: float
    """ Factor of despilling screen color from image

    :type: float
    """

    dilate_distance: int
    """ Distance to grow/shrink the matte

    :type: int
    """

    edge_kernel_radius: int
    """ Radius of kernel used to detect whether pixel belongs to edge

    :type: int
    """

    edge_kernel_tolerance: float
    """ Tolerance to pixels inside kernel which are treating as belonging to the same plane

    :type: float
    """

    feather_distance: int
    """ Distance to grow/shrink the feather

    :type: int
    """

    feather_falloff: str
    """ Falloff type the feather

    :type: str
    """

    screen_balance: float
    """ Balance between two non-primary channels primary channel is comparing against

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeKeyingScreen(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip
    """ 

    :type: MovieClip
    """

    smoothness: float
    """ 

    :type: float
    """

    tracking_object: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeKuwahara(CompositorNode, NodeInternal, Node, bpy_struct):
    eccentricity: float
    """ Controls how directional the filter is. 0 means the filter is completely omnidirectional while 2 means it is maximally directed along the edges of the image

    :type: float
    """

    sharpness: float
    """ Controls the sharpness of the filter. 0 means completely smooth while 1 means completely sharp

    :type: float
    """

    uniformity: int
    """ Controls the uniformity of the direction of the filter. Higher values produces more uniform directions

    :type: int
    """

    use_high_precision: bool
    """ Uses a more precise but slower method. Use if the output contains undesirable noise

    :type: bool
    """

    variation: str
    """ Variation of Kuwahara filter to use

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeLensdist(CompositorNode, NodeInternal, Node, bpy_struct):
    use_fit: bool
    """ For positive distortion factor only: scale image such that black areas are not visible

    :type: bool
    """

    use_jitter: bool
    """ Enable/disable jittering (faster, but also noisier)

    :type: bool
    """

    use_projector: bool
    """ Enable/disable projector mode (the effect is applied in horizontal direction only)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeLevels(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeLumaMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    limit_max: float
    """ Values higher than this setting are 100% opaque

    :type: float
    """

    limit_min: float
    """ Values lower than this setting are 100% keyed

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMapRange(CompositorNode, NodeInternal, Node, bpy_struct):
    use_clamp: bool
    """ Clamp the result of the node to the target range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMapUV(CompositorNode, NodeInternal, Node, bpy_struct):
    alpha: int
    """ 

    :type: int
    """

    filter_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMapValue(CompositorNode, NodeInternal, Node, bpy_struct):
    max: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    min: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    offset: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    size: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    use_max: bool
    """ 

    :type: bool
    """

    use_min: bool
    """ 

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMask(CompositorNode, NodeInternal, Node, bpy_struct):
    mask: Mask
    """ 

    :type: Mask
    """

    motion_blur_samples: int
    """ Number of motion blur samples

    :type: int
    """

    motion_blur_shutter: float
    """ Exposure for motion blur as a factor of FPS

    :type: float
    """

    size_source: str
    """ Where to get the mask size from for aspect/size information

    :type: str
    """

    size_x: int
    """ 

    :type: int
    """

    size_y: int
    """ 

    :type: int
    """

    use_feather: bool
    """ Use feather information from the mask

    :type: bool
    """

    use_motion_blur: bool
    """ Use multi-sampled motion blur of the mask

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMath(CompositorNode, NodeInternal, Node, bpy_struct):
    operation: str
    """ 

    :type: str
    """

    use_clamp: bool
    """ Clamp result of the node to 0.0 to 1.0 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMixRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    blend_type: str
    """ 

    :type: str
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0.0 to 1.0 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMovieClip(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip
    """ 

    :type: MovieClip
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeMovieDistortion(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip
    """ 

    :type: MovieClip
    """

    distortion_type: str
    """ Distortion to use to filter image

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeNormal(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeNormalize(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeOutputFile(CompositorNode, NodeInternal, Node, bpy_struct):
    active_input_index: int | None
    """ Active input index in details view list

    :type: int | None
    """

    base_path: str
    """ Base output path for the image

    :type: str
    """

    file_slots: CompositorNodeOutputFileFileSlots
    """ 

    :type: CompositorNodeOutputFileFileSlots
    """

    format: ImageFormatSettings
    """ 

    :type: ImageFormatSettings
    """

    layer_slots: CompositorNodeOutputFileLayerSlots
    """ 

    :type: CompositorNodeOutputFileLayerSlots
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodePixelate(CompositorNode, NodeInternal, Node, bpy_struct):
    pixel_size: int
    """ Pixel size of the output image

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodePlaneTrackDeform(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip
    """ 

    :type: MovieClip
    """

    motion_blur_samples: int
    """ Number of motion blur samples

    :type: int
    """

    motion_blur_shutter: float
    """ Exposure for motion blur as a factor of FPS

    :type: float
    """

    plane_track_name: str
    """ 

    :type: str
    """

    tracking_object: str
    """ 

    :type: str
    """

    use_motion_blur: bool
    """ Use multi-sampled motion blur of the mask

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodePosterize(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodePremulKey(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: str
    """ Conversion between premultiplied alpha and key alpha

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeRGBToBW(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeRLayers(CompositorNode, NodeInternal, Node, bpy_struct):
    layer: str
    """ 

    :type: str
    """

    scene: Scene
    """ 

    :type: Scene
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeRotate(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: str
    """ Method to use to filter rotation

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeScale(CompositorNode, NodeInternal, Node, bpy_struct):
    frame_method: str
    """ How the image fits in the camera frame

    :type: str
    """

    offset_x: float
    """ Offset image horizontally (factor of image size)

    :type: float
    """

    offset_y: float
    """ Offset image vertically (factor of image size)

    :type: float
    """

    space: str
    """ Coordinate space to scale relative to

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSceneTime(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSepHSVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSepRGBA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSepYCCA(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSepYUVA(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSeparateColor(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ Mode of color processing

    :type: str
    """

    ycc_mode: str
    """ Color space used for YCbCrA processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSeparateXYZ(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSetAlpha(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSplit(CompositorNode, NodeInternal, Node, bpy_struct):
    axis: str
    """ 

    :type: str
    """

    factor: int
    """ 

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeStabilize(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip
    """ 

    :type: MovieClip
    """

    filter_type: str
    """ Method to use to filter stabilization

    :type: str
    """

    invert: bool
    """ Invert stabilization to re-introduce motion to the frame

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSunBeams(CompositorNode, NodeInternal, Node, bpy_struct):
    ray_length: float
    """ Length of rays as a factor of the image size

    :type: float
    """

    source: bpy_prop_array[float]
    """ Source point of rays as a factor of the image width and height

    :type: bpy_prop_array[float]
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSwitch(CompositorNode, NodeInternal, Node, bpy_struct):
    check: bool
    """ Off: first socket, On: second socket

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeSwitchView(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeTexture(CompositorNode, NodeInternal, Node, bpy_struct):
    node_output: int
    """ For node-based textures, which output node to use

    :type: int
    """

    texture: Texture
    """ 

    :type: Texture
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeTime(CompositorNode, NodeInternal, Node, bpy_struct):
    curve: CurveMapping
    """ 

    :type: CurveMapping
    """

    frame_end: int
    """ 

    :type: int
    """

    frame_start: int
    """ 

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeTonemap(CompositorNode, NodeInternal, Node, bpy_struct):
    adaptation: float
    """ If 0, global; if 1, based on pixel intensity

    :type: float
    """

    contrast: float
    """ Set to 0 to use estimate from input image

    :type: float
    """

    correction: float
    """ If 0, same for all channels; if 1, each independent

    :type: float
    """

    gamma: float
    """ If not used, set to 1

    :type: float
    """

    intensity: float
    """ If less than zero, darkens image; otherwise, makes it brighter

    :type: float
    """

    key: float
    """ The value the average luminance is mapped to

    :type: float
    """

    offset: float
    """ Normally always 1, but can be used as an extra control to alter the brightness curve

    :type: float
    """

    tonemap_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeTrackPos(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: MovieClip
    """ 

    :type: MovieClip
    """

    frame_relative: int
    """ Frame to be used for relative position

    :type: int
    """

    position: str
    """ Which marker position to use for output

    :type: str
    """

    track_name: str
    """ 

    :type: str
    """

    tracking_object: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeTransform(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: str
    """ Method to use to filter transform

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeTranslate(CompositorNode, NodeInternal, Node, bpy_struct):
    use_relative: bool
    """ Use relative (fraction of input image size) values to define translation

    :type: bool
    """

    wrap_axis: str
    """ Wrap image on a specific axis

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeValToRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeValue(CompositorNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeVecBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    factor: float
    """ Scaling factor for motion vectors (actually, 'shutter speed', in frames)

    :type: float
    """

    samples: int
    """ 

    :type: int
    """

    speed_max: int
    """ Maximum speed, or zero for none

    :type: int
    """

    speed_min: int
    """ Minimum speed for a pixel to be blurred (used to separate background from foreground)

    :type: int
    """

    use_curved: bool
    """ Interpolate between frames in a Bézier curve, rather than linearly

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeViewer(CompositorNode, NodeInternal, Node, bpy_struct):
    center_x: float
    """ 

    :type: float
    """

    center_y: float
    """ 

    :type: float
    """

    tile_order: str
    """ Tile order

    :type: str
    """

    use_alpha: bool
    """ Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class CompositorNodeZcombine(CompositorNode, NodeInternal, Node, bpy_struct):
    use_alpha: bool
    """ Take alpha channel into account when doing the Z operation

    :type: bool
    """

    use_antialias_z: bool
    """ Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def update(self): ...
    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeAlignEulerToVector(FunctionNode, NodeInternal, Node, bpy_struct):
    axis: str
    """ Axis to align to the vector

    :type: str
    """

    pivot_axis: str
    """ Axis to rotate around

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeAxisAngleToRotation(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeBooleanMath(FunctionNode, NodeInternal, Node, bpy_struct):
    operation: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeCombineColor(FunctionNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ Mode of color processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeCompare(FunctionNode, NodeInternal, Node, bpy_struct):
    data_type: str
    """ 

    :type: str
    """

    mode: str
    """ 

    :type: str
    """

    operation: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeEulerToRotation(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeFloatToInt(FunctionNode, NodeInternal, Node, bpy_struct):
    rounding_mode: str
    """ Method used to convert the float to an integer

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeInputBool(FunctionNode, NodeInternal, Node, bpy_struct):
    boolean: bool
    """ Input value used for unconnected socket

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeInputColor(FunctionNode, NodeInternal, Node, bpy_struct):
    color: bpy_prop_array[float]
    """ 

    :type: bpy_prop_array[float]
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeInputInt(FunctionNode, NodeInternal, Node, bpy_struct):
    integer: int
    """ Input value used for unconnected socket

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeInputSpecialCharacters(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeInputString(FunctionNode, NodeInternal, Node, bpy_struct):
    string: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeInputVector(FunctionNode, NodeInternal, Node, bpy_struct):
    vector: mathutils.Vector
    """ 

    :type: mathutils.Vector
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeInvertRotation(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeQuaternionToRotation(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeRandomValue(FunctionNode, NodeInternal, Node, bpy_struct):
    data_type: str
    """ Type of data stored in attribute

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeReplaceString(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeRotateEuler(FunctionNode, NodeInternal, Node, bpy_struct):
    rotation_type: str
    """ Method used to describe the rotation

    :type: str
    """

    space: str
    """ Base orientation for rotation

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeRotateRotation(FunctionNode, NodeInternal, Node, bpy_struct):
    rotation_space: str
    """ Base orientation for the rotation

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeRotateVector(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeRotationToAxisAngle(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeRotationToEuler(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeRotationToQuaternion(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeSeparateColor(FunctionNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ Mode of color processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeSliceString(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeStringLength(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class FunctionNodeValueToString(FunctionNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeAccumulateField(GeometryNode, NodeInternal, Node, bpy_struct):
    """Add the values of an evaluated field together and output the running total for each element"""

    data_type: str
    """ Type of data stored in attribute

    :type: str
    """

    domain: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeAttributeDomainSize(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the number of elements in a geometry for each attribute domain"""

    component: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeAttributeStatistic(GeometryNode, NodeInternal, Node, bpy_struct):
    """Calculate statistics about a data set from a field evaluated on a geometry"""

    data_type: str
    """ The data type the attribute is converted to before calculating the results

    :type: str
    """

    domain: str
    """ Which domain to read the data from

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeBake(GeometryNode, NodeInternal, Node, bpy_struct):
    """Cache the incoming data so that it can be used without recomputation"""

    active_index: int | None
    """ Index of the active item

    :type: int | None
    """

    active_item: RepeatItem | None
    """ Index of the active item

    :type: RepeatItem | None
    """

    bake_items: NodeGeometryBakeItems
    """ 

    :type: NodeGeometryBakeItems
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeBlurAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """Mix attribute values of neighboring elements"""

    data_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeBoundBox(GeometryNode, NodeInternal, Node, bpy_struct):
    """Calculate the limits of a geometry's positions and generate a box mesh with those dimensions"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCaptureAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """Store the result of a field on a geometry and output the data as a node socket. Allows remembering or interpolating data as the geometry changes, such as positions before deformation"""

    data_type: str
    """ Type of data stored in attribute

    :type: str
    """

    domain: str
    """ Which domain to store the data in

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCollectionInfo(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve geometry instances from a collection"""

    transform_space: str
    """ The transformation of the instances output. Does not affect the internal geometry

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeConvexHull(GeometryNode, NodeInternal, Node, bpy_struct):
    """Create a mesh that encloses all points in the input geometry with the smallest number of points"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCornersOfEdge(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve face corners connected to edges"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCornersOfFace(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve corners that make up a face"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCornersOfVertex(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve face corners connected to vertices"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveArc(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a poly spline arc"""

    mode: str
    """ Method used to determine radius and placement

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveEndpointSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """Provide a selection for an arbitrary number of endpoints in each spline"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveHandleTypeSelection(
    GeometryNode, NodeInternal, Node, bpy_struct
):
    """Provide a selection based on the handle types of Bézier control points"""

    handle_type: str
    """ 

    :type: str
    """

    mode: typing.Any
    """ Whether to check the type of left and right handles"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveLength(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the length of all splines added together"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveOfPoint(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the curve a control point is part of"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurvePrimitiveBezierSegment(
    GeometryNode, NodeInternal, Node, bpy_struct
):
    """Generate a 2D Bézier spline from the given control points and handles"""

    mode: str
    """ Method used to determine control handles

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurvePrimitiveCircle(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a poly spline circle"""

    mode: str
    """ Method used to determine radius and placement

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurvePrimitiveLine(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a poly spline line with two points"""

    mode: str
    """ Method used to determine radius and placement

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurvePrimitiveQuadrilateral(
    GeometryNode, NodeInternal, Node, bpy_struct
):
    """Generate a polygon with four points"""

    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveQuadraticBezier(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a poly spline in a parabola shape with control points positions"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveSetHandles(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the handle type for the control points of a Bézier curve"""

    handle_type: str
    """ 

    :type: str
    """

    mode: typing.Any
    """ Whether to update left and right handles"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveSpiral(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a poly spline in a spiral shape"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveSplineType(GeometryNode, NodeInternal, Node, bpy_struct):
    """Change the type of curves"""

    spline_type: str
    """ The curve type to change the selected curves to

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveStar(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a poly spline in a star pattern by connecting alternating points of two circles"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveToMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """Convert curves into a mesh, optionally with a custom profile shape defined by curves"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCurveToPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a point cloud by sampling positions along curves"""

    mode: str
    """ How to generate points from the input curve

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeCustomGroup(GeometryNode, NodeInternal, Node, bpy_struct):
    """Custom Geometry Group Node for Python nodes"""

    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeDeformCurvesOnSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """Translate and rotate curves based on changes between the object's original and evaluated surface mesh"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeDeleteGeometry(GeometryNode, NodeInternal, Node, bpy_struct):
    """Remove selected elements of a geometry"""

    domain: str
    """ Which domain to delete in

    :type: str
    """

    mode: str
    """ Which parts of the mesh component to delete

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeDistributePointsInVolume(
    GeometryNode, NodeInternal, Node, bpy_struct
):
    """Generate points inside a volume"""

    mode: str
    """ Method to use for scattering points

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeDistributePointsOnFaces(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate points spread out on the surface of a mesh"""

    distribute_method: str
    """ Method to use for scattering points

    :type: str
    """

    use_legacy_normal: bool
    """ Output the normal and rotation values that have been output before the node started taking smooth normals into account

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeDualMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """Convert Faces into vertices and vertices into faces"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeDuplicateElements(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate an arbitrary number copies of each selected input element"""

    domain: str
    """ Which domain to duplicate

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeEdgePathsToCurves(GeometryNode, NodeInternal, Node, bpy_struct):
    """Output curves following paths across mesh edges"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeEdgePathsToSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """Output a selection of edges by following paths across mesh edges"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeEdgesOfCorner(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the edges on both sides of a face corner"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeEdgesOfVertex(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the edges connected to each vertex"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeEdgesToFaceGroups(GeometryNode, NodeInternal, Node, bpy_struct):
    """Group faces into regions surrounded by the selected boundary edges"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeExtrudeMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate new vertices, edges, or faces from selected elements and move them based on an offset while keeping them connected by their boundary"""

    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeFaceOfCorner(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the face each face corner is part of"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeFieldAtIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve data of other elements in the context's geometry"""

    data_type: str
    """ 

    :type: str
    """

    domain: str
    """ Domain the field is evaluated in

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeFieldOnDomain(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve values from a field on a different domain besides the domain from the context"""

    data_type: str
    """ 

    :type: str
    """

    domain: str
    """ Domain the field is evaluated in

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeFillCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a mesh on the XY plane with faces on the inside of input curves"""

    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeFilletCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Round corners by generating circular arcs on each control point"""

    mode: str
    """ How to choose number of vertices on fillet

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeFlipFaces(GeometryNode, NodeInternal, Node, bpy_struct):
    """Reverse the order of the vertices and edges of selected faces, flipping their normal direction"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeGeometryToInstance(GeometryNode, NodeInternal, Node, bpy_struct):
    """Convert each input geometry into an instance, which can be much faster than the Join Geometry node when the inputs are large"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeGetNamedGrid(GeometryNode, NodeInternal, Node, bpy_struct):
    """Get volume grid from a volume geometry with the specified name"""

    data_type: str
    """ Type of grid data

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeGroup(GeometryNode, NodeInternal, Node, bpy_struct):
    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeImageInfo(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve information about an image"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeImageTexture(GeometryNode, NodeInternal, Node, bpy_struct):
    """Sample values from an image texture"""

    extension: str
    """ How the image is extrapolated past its original bounds

    :type: str
    """

    interpolation: str
    """ Method for smoothing values between pixels

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeIndexOfNearest(GeometryNode, NodeInternal, Node, bpy_struct):
    """Find the nearest element in a group. Similar to the "Sample Nearest" node"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeIndexSwitch(GeometryNode, NodeInternal, Node, bpy_struct):
    """Choose between an arbitrary number of values with an index"""

    data_type: str
    """ 

    :type: str
    """

    index_switch_items: NodeIndexSwitchItems
    """ 

    :type: NodeIndexSwitchItems
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputActiveCamera(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the scene's active camera"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputCurveHandlePositions(
    GeometryNode, NodeInternal, Node, bpy_struct
):
    """Retrieve the position of each Bézier control point's handles"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputCurveTilt(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the angle at each control point used to twist the curve's normal around its tangent"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputEdgeSmooth(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve whether each edge is marked for smooth or split normals"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputID(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve a stable random identifier value from the "id" attribute on the point domain, or the index if the attribute does not exist"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputImage(GeometryNode, NodeInternal, Node, bpy_struct):
    """Input image"""

    image: Image
    """ 

    :type: Image
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve an integer value indicating the position of each element in the list, starting at zero"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputInstanceRotation(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the rotation of each instance in the geometry"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputInstanceScale(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the scale of each instance in the geometry"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMaterial(GeometryNode, NodeInternal, Node, bpy_struct):
    """Output a single material"""

    material: Material
    """ 

    :type: Material
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMaterialIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the index of the material used for each element in the geometry's list of materials"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshEdgeAngle(GeometryNode, NodeInternal, Node, bpy_struct):
    """Calculate the surface area of each face in a mesh"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshEdgeNeighbors(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the number of faces that use each edge as one of their sides"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshEdgeVertices(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve topology information relating to each edge of a mesh"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshFaceArea(GeometryNode, NodeInternal, Node, bpy_struct):
    """Calculate the surface area of a mesh's faces"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshFaceIsPlanar(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve whether all triangles in a face are on the same plane, i.e. whether they have the same normal"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshFaceNeighbors(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve topology information relating to each face of a mesh"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshIsland(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve information about separate connected regions in a mesh"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputMeshVertexNeighbors(
    GeometryNode, NodeInternal, Node, bpy_struct
):
    """Retrieve topology information relating to each vertex of a mesh"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputNamedAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the data of a specified attribute"""

    data_type: str
    """ The data type used to read the attribute values

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputNamedLayerSelection(
    GeometryNode, NodeInternal, Node, bpy_struct
):
    """Output a selection of a grease pencil layer"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputNormal(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve a unit length vector indicating the direction pointing away from the geometry at each element"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputPosition(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve a vector indicating the location of each element"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputRadius(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the radius at each point on curve or point cloud geometry"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputSceneTime(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the current time in the scene's animation in units of seconds or frames"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputShadeSmooth(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve whether each face is marked for smooth or sharp normals"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputShortestEdgePaths(GeometryNode, NodeInternal, Node, bpy_struct):
    """Find the shortest paths along mesh edges to selected end vertices, with customizable cost per edge"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputSplineCyclic(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve whether each spline endpoint connects to the beginning"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputSplineResolution(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the number of evaluated points that will be generated for every control point on curves"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInputTangent(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the direction of curves at each control point"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInstanceOnPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a reference to geometry at each of the input points, without duplicating its underlying data"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInstancesToPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate points at the origins of instances.
    Note: Nested instances are not affected by this node
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeInterpolateCurves(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate new curves on points by interpolating between existing curves"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeIsViewport(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve whether the nodes are being evaluated for the viewport rather than the final render"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeJoinGeometry(GeometryNode, NodeInternal, Node, bpy_struct):
    """Merge separately generated geometries into a single one"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMaterialSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """Provide a selection of faces that use the specified material"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMenuSwitch(GeometryNode, NodeInternal, Node, bpy_struct):
    """Select from multiple inputs by name"""

    data_type: str
    """ 

    :type: str
    """

    enum_definition: NodeEnumDefinition
    """ Definition of enum items

    :type: NodeEnumDefinition
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMergeByDistance(GeometryNode, NodeInternal, Node, bpy_struct):
    """Merge vertices or points within a given distance"""

    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshBoolean(GeometryNode, NodeInternal, Node, bpy_struct):
    """Cut, subtract, or join multiple mesh inputs"""

    operation: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshCircle(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a circular ring of edges"""

    fill_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshCone(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a cone mesh"""

    fill_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshCube(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a cuboid mesh with variable side lengths and subdivisions"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshCylinder(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a cylinder mesh"""

    fill_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshFaceSetBoundaries(GeometryNode, NodeInternal, Node, bpy_struct):
    """Find edges on the boundaries between groups of faces with the same ID value"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshGrid(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a planar mesh on the XY plane"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshIcoSphere(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a spherical mesh that consists of equally sized triangles"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshLine(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate vertices in a line and connect them with edges"""

    count_mode: str
    """ 

    :type: str
    """

    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshToCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a curve from a mesh"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshToPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a point cloud from a mesh's vertices"""

    mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshToVolume(GeometryNode, NodeInternal, Node, bpy_struct):
    """Create a fog volume with the shape of the input mesh's surface"""

    resolution_mode: str
    """ How the voxel size is specified

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeMeshUVSphere(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a spherical mesh with quads, except for triangles at the top and bottom"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeObjectInfo(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve information from an object"""

    transform_space: str
    """ The transformation of the vector and geometry outputs

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeOffsetCornerInFace(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve corners in the same face as another"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeOffsetPointInCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Offset a control point index within its curve"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodePoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a point cloud with positions and radii defined by fields"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodePointsOfCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve a point index within a curve"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodePointsToCurves(GeometryNode, NodeInternal, Node, bpy_struct):
    """Split all points to curve by its group ID and reorder by weight"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodePointsToVertices(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a mesh vertex for each point cloud point"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodePointsToVolume(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a fog volume sphere around every point"""

    resolution_mode: str
    """ How the voxel size is specified

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeProximity(GeometryNode, NodeInternal, Node, bpy_struct):
    """Compute the closest location on the target geometry"""

    target_element: str
    """ Element of the target geometry to calculate the distance from

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeRaycast(GeometryNode, NodeInternal, Node, bpy_struct):
    """Cast rays from the context geometry onto a target geometry, and retrieve information from each hit point"""

    data_type: str
    """ Type of data stored in attribute

    :type: str
    """

    mapping: str
    """ Mapping from the target geometry to hit points

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeRealizeInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """Convert instances into real geometry data"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeRemoveAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """Delete an attribute with a specified name from a geometry. Typically used to optimize performance"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeRepeatInput(GeometryNode, NodeInternal, Node, bpy_struct):
    paired_output: Node
    """ Zone output node that this input node is paired with

    :type: Node
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def pair_with_output(self, output_node: GeometryNode | None) -> bool:
        """Pair a zone input node with an output node.

        :param output_node: Output Node, Zone output node to pair with
        :type output_node: GeometryNode | None
        :return: Result, True if pairing the node was successful
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeRepeatOutput(GeometryNode, NodeInternal, Node, bpy_struct):
    active_index: int | None
    """ Index of the active item

    :type: int | None
    """

    active_item: RepeatItem | None
    """ Index of the active item

    :type: RepeatItem | None
    """

    inspection_index: int
    """ Iteration index that is used by inspection features like the viewer node or socket inspection

    :type: int
    """

    repeat_items: NodeGeometryRepeatOutputItems
    """ 

    :type: NodeGeometryRepeatOutputItems
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeReplaceMaterial(GeometryNode, NodeInternal, Node, bpy_struct):
    """Swap one material with another"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeResampleCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a poly spline for each input spline"""

    mode: str
    """ How to specify the amount of samples

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeReverseCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Change the direction of curves by swapping their start and end data"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeRotateInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """Rotate geometry instances in local or global space"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSampleCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve data from a point on a curve at a certain distance from its start"""

    data_type: str
    """ 

    :type: str
    """

    mode: str
    """ Method for sampling input

    :type: str
    """

    use_all_curves: bool
    """ Sample lengths based on the total length of all curves, rather than using a length inside each selected curve

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSampleIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve values from specific geometry elements"""

    clamp: bool
    """ Clamp the indices to the size of the attribute domain instead of outputting a default value for invalid indices

    :type: bool
    """

    data_type: str
    """ 

    :type: str
    """

    domain: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSampleNearest(GeometryNode, NodeInternal, Node, bpy_struct):
    """Find the element of a geometry closest to a position. Similar to the "Index of Nearest" node"""

    domain: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSampleNearestSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """Calculate the interpolated value of a mesh attribute on the closest point of its surface"""

    data_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSampleUVSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """Calculate the interpolated values of a mesh attribute at a UV coordinate"""

    data_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeScaleElements(GeometryNode, NodeInternal, Node, bpy_struct):
    """Scale groups of connected edges and faces"""

    domain: str
    """ Element type to transform

    :type: str
    """

    scale_mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeScaleInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """Scale geometry instances in local or global space"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSelfObject(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the object that contains the geometry nodes modifier currently being executed"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSeparateComponents(GeometryNode, NodeInternal, Node, bpy_struct):
    """Split a geometry into a separate output for each type of data in the geometry"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSeparateGeometry(GeometryNode, NodeInternal, Node, bpy_struct):
    """Split a geometry into two geometry outputs based on a selection"""

    domain: str
    """ Which domain to separate on

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetCurveHandlePositions(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the positions for the handles of Bézier curves"""

    mode: str
    """ Whether to update left and right handles

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetCurveNormal(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the evaluation mode for curve normals"""

    mode: str
    """ Mode for curve normal evaluation

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetCurveRadius(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the radius of the curve at each control point"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetCurveTilt(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the tilt angle at each curve control point"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetID(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the id attribute on the input geometry, mainly used internally for randomizing"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetMaterial(GeometryNode, NodeInternal, Node, bpy_struct):
    """Assign a material to geometry elements"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetMaterialIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the material index for each selected geometry element"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetPointRadius(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the display size of point cloud points"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetPosition(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set the location of each point"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetShadeSmooth(GeometryNode, NodeInternal, Node, bpy_struct):
    """Control the smoothness of mesh normals around each face by changing the "shade smooth" attribute"""

    domain: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetSplineCyclic(GeometryNode, NodeInternal, Node, bpy_struct):
    """Control whether each spline loops back on itself by changing the "cyclic" attribute"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSetSplineResolution(GeometryNode, NodeInternal, Node, bpy_struct):
    """Control how many evaluated points should be generated on every curve segment"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSimulationInput(GeometryNode, NodeInternal, Node, bpy_struct):
    """Input data for the simulation zone"""

    paired_output: Node
    """ Zone output node that this input node is paired with

    :type: Node
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def pair_with_output(self, output_node: GeometryNode | None) -> bool:
        """Pair a zone input node with an output node.

        :param output_node: Output Node, Zone output node to pair with
        :type output_node: GeometryNode | None
        :return: Result, True if pairing the node was successful
        :rtype: bool
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSimulationOutput(GeometryNode, NodeInternal, Node, bpy_struct):
    """Output data from the simulation zone"""

    active_index: int | None
    """ Index of the active item

    :type: int | None
    """

    active_item: SimulationStateItem | None
    """ Index of the active item

    :type: SimulationStateItem | None
    """

    state_items: NodeGeometrySimulationOutputItems
    """ 

    :type: NodeGeometrySimulationOutputItems
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSortElements(GeometryNode, NodeInternal, Node, bpy_struct):
    """Rearrange geometry elements, changing their indices"""

    domain: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSplineLength(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the total length of each spline, as a distance or as a number of points"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSplineParameter(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve how far along each spline a control point is"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSplitEdges(GeometryNode, NodeInternal, Node, bpy_struct):
    """Duplicate mesh edges and break connections with the surrounding faces"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSplitToInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """Create separate geometries containing the elements from the same group"""

    domain: str
    """ Attribute domain for the Selection and Group ID inputs

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeStoreNamedAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """Store the result of a field on a geometry as an attribute with the specified name"""

    data_type: str
    """ Type of data stored in attribute

    :type: str
    """

    domain: str
    """ Which domain to store the data in

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeStoreNamedGrid(GeometryNode, NodeInternal, Node, bpy_struct):
    """Store grid data in a volume geometry with the specified name"""

    data_type: str
    """ Type of grid data

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeStringJoin(GeometryNode, NodeInternal, Node, bpy_struct):
    """Combine any number of input strings"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeStringToCurves(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a paragraph of text with a specific font, using a curve instance to store each character"""

    align_x: str
    """ Text horizontal alignment from the object center

    :type: str
    """

    align_y: str
    """ Text vertical alignment from the object center

    :type: str
    """

    font: VectorFont
    """ Font of the text. Falls back to the UI font by default

    :type: VectorFont
    """

    overflow: str
    """ Handle the text behavior when it doesn't fit in the text boxes

    :type: str
    """

    pivot_mode: str
    """ Pivot point position relative to character

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSubdivideCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Dividing each curve segment into a specified number of pieces"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSubdivideMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """Divide mesh faces into smaller ones without changing the shape or volume, using linear interpolation to place the new vertices"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSubdivisionSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """Divide mesh faces to form a smooth surface, using the Catmull-Clark subdivision method"""

    boundary_smooth: str
    """ Controls how open boundaries are smoothed

    :type: str
    """

    uv_smooth: str
    """ Controls how smoothing is applied to UVs

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeSwitch(GeometryNode, NodeInternal, Node, bpy_struct):
    """Switch between two inputs"""

    input_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeTool3DCursor(GeometryNode, NodeInternal, Node, bpy_struct):
    """The scene's 3D cursor location and rotation"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeToolFaceSet(GeometryNode, NodeInternal, Node, bpy_struct):
    """Each face's sculpt face set value"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeToolSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """User selection of the edited geometry, for tool execution"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeToolSetFaceSet(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set sculpt face set values for faces"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeToolSetSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """Set selection of the edited geometry, for tool execution"""

    domain: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeTransform(GeometryNode, NodeInternal, Node, bpy_struct):
    """Translate, rotate or scale the geometry"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeTranslateInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """Move top-level geometry instances in local or global space"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeTriangulate(GeometryNode, NodeInternal, Node, bpy_struct):
    """Convert all faces in a mesh to triangular faces"""

    ngon_method: str
    """ Method for splitting the n-gons into triangles

    :type: str
    """

    quad_method: str
    """ Method for splitting the quads into triangles

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeTrimCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """Shorten curves by removing portions at the start or end"""

    mode: str
    """ How to find endpoint positions for the trimmed spline

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeUVPackIslands(GeometryNode, NodeInternal, Node, bpy_struct):
    """Scale islands of a UV map and move them so they fill the UV space as much as possible"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeUVUnwrap(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a UV map based on seam edges"""

    method: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeVertexOfCorner(GeometryNode, NodeInternal, Node, bpy_struct):
    """Retrieve the vertex each face corner is attached to"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeViewer(GeometryNode, NodeInternal, Node, bpy_struct):
    """Display the input data in the Spreadsheet Editor"""

    data_type: str
    """ 

    :type: str
    """

    domain: str
    """ Domain to evaluate the field on

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeVolumeCube(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a dense volume with a field that controls the density at each grid voxel based on its position"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class GeometryNodeVolumeToMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """Generate a mesh on the "surface" of a volume"""

    resolution_mode: str
    """ How the voxel size is specified

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeAddShader(ShaderNode, NodeInternal, Node, bpy_struct):
    """Add two Shaders together"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeAmbientOcclusion(ShaderNode, NodeInternal, Node, bpy_struct):
    """Compute how much the hemisphere above the shading point is occluded, for example to add weathering effects to corners.
    Note: For Cycles, this may slow down renders significantly
    """

    inside: bool
    """ Trace rays towards the inside of the object

    :type: bool
    """

    only_local: bool
    """ Only consider the object itself when computing AO

    :type: bool
    """

    samples: int
    """ Number of rays to trace per shader evaluation

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeAttribute(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve attributes attached to objects or geometry"""

    attribute_name: str
    """ 

    :type: str
    """

    attribute_type: str
    """ General type of the attribute

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBackground(ShaderNode, NodeInternal, Node, bpy_struct):
    """Add background light emission.
    Note: This node should only be used for the world surface output
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBevel(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generates normals with round corners.
    Note: only supported in Cycles, and may slow down renders
    """

    samples: int
    """ Number of rays to trace per shader evaluation

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBlackbody(ShaderNode, NodeInternal, Node, bpy_struct):
    """Convert a blackbody temperature to an RGB value"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBrightContrast(ShaderNode, NodeInternal, Node, bpy_struct):
    """Control the brightness and contrast of the input color"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfAnisotropic(ShaderNode, NodeInternal, Node, bpy_struct):
    """Reflection with microfacet distribution, used for materials such as metal or mirrors"""

    distribution: str
    """ Light scattering distribution on rough surface

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfDiffuse(ShaderNode, NodeInternal, Node, bpy_struct):
    """Lambertian and Oren-Nayar diffuse reflection"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfGlass(ShaderNode, NodeInternal, Node, bpy_struct):
    """Glass-like shader mixing refraction and reflection at grazing angles"""

    distribution: str
    """ Light scattering distribution on rough surface

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfHair(ShaderNode, NodeInternal, Node, bpy_struct):
    """Reflection and transmission shaders optimized for hair rendering"""

    component: str
    """ Hair BSDF component to use

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfHairPrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    """Physically-based, easy-to-use shader for rendering hair and fur"""

    model: str
    """ Select from Chiang or Huang model

    :type: str
    """

    parametrization: str
    """ Select the shader's color parametrization

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfPrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    """Physically-based, easy-to-use shader for rendering surface materials, based on the Disney principled model also known as the "PBR" shader"""

    distribution: str
    """ Light scattering distribution on rough surface

    :type: str
    """

    subsurface_method: str
    """ Method for rendering subsurface scattering

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfRefraction(ShaderNode, NodeInternal, Node, bpy_struct):
    """Glossy refraction with sharp or microfacet distribution, typically used for materials that transmit light"""

    distribution: str
    """ Light scattering distribution on rough surface

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfSheen(ShaderNode, NodeInternal, Node, bpy_struct):
    """Reflection for materials such as cloth.
    Typically mixed with other shaders (such as a Diffuse Shader) and is not particularly useful on its own
    """

    distribution: str
    """ Sheen shading model

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfToon(ShaderNode, NodeInternal, Node, bpy_struct):
    """Diffuse and Glossy shaders with cartoon light effects"""

    component: str
    """ Toon BSDF component to use

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfTranslucent(ShaderNode, NodeInternal, Node, bpy_struct):
    """Lambertian diffuse transmission"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBsdfTransparent(ShaderNode, NodeInternal, Node, bpy_struct):
    """Transparency without refraction, passing straight through the surface as if there were no geometry"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeBump(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a perturbed normal from a height texture for bump mapping. Typically used for faking highly detailed surfaces"""

    invert: bool
    """ Invert the bump mapping direction to push into the surface instead of out

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeCameraData(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve information about the camera and how it relates to the current shading point's position"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeClamp(ShaderNode, NodeInternal, Node, bpy_struct):
    """Clamp a value between a minimum and a maximum"""

    clamp_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeCombineColor(ShaderNode, NodeInternal, Node, bpy_struct):
    """Create a color from individual components using multiple models"""

    mode: str
    """ Mode of color processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeCombineHSV(ShaderNode, NodeInternal, Node, bpy_struct):
    """Create a color from its hue, saturation, and value channels"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeCombineRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a color from its red, green, and blue channels (Deprecated)"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeCombineXYZ(ShaderNode, NodeInternal, Node, bpy_struct):
    """Create a vector from X, Y, and Z components"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeCustomGroup(ShaderNode, NodeInternal, Node, bpy_struct):
    """Custom Shader Group Node for Python nodes"""

    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeDisplacement(ShaderNode, NodeInternal, Node, bpy_struct):
    """Displace the surface along the surface normal"""

    space: str
    """ Space of the input height

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeEeveeSpecular(ShaderNode, NodeInternal, Node, bpy_struct):
    """Similar to the Principled BSDF node but uses the specular workflow instead of metallic, which functions by specifying the facing (along normal) reflection color. Energy is not conserved, so the result may not be physically accurate"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeEmission(ShaderNode, NodeInternal, Node, bpy_struct):
    """Lambertian emission shader"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeFloatCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    """Map an input float to a curve and outputs a float value"""

    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeFresnel(ShaderNode, NodeInternal, Node, bpy_struct):
    """Produce a blending factor depending on the angle between the surface normal and the view direction using Fresnel equations.
    Typically used for mixing reflections at grazing angles
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeGamma(ShaderNode, NodeInternal, Node, bpy_struct):
    """Apply a gamma correction"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeGroup(ShaderNode, NodeInternal, Node, bpy_struct):
    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeHairInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve hair curve information"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeHoldout(ShaderNode, NodeInternal, Node, bpy_struct):
    """Create a "hole" in the image with zero alpha transparency, which is useful for compositing.
    Note: the holdout shader can only create alpha when transparency is enabled in the film settings
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeHueSaturation(ShaderNode, NodeInternal, Node, bpy_struct):
    """Apply a color transformation in the HSV color model"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeInvert(ShaderNode, NodeInternal, Node, bpy_struct):
    """Invert a color, producing a negative"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeLayerWeight(ShaderNode, NodeInternal, Node, bpy_struct):
    """Produce a blending factor depending on the angle between the surface normal and the view direction.
    Typically used for layering shaders with the Mix Shader node
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeLightFalloff(ShaderNode, NodeInternal, Node, bpy_struct):
    """Manipulate how light intensity decreases over distance. Typically used for non-physically-based effects; in reality light always falls off quadratically"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeLightPath(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve the type of incoming ray for which the shader is being executed.
    Typically used for non-physically-based tricks
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeMapRange(ShaderNode, NodeInternal, Node, bpy_struct):
    """Remap a value from a range to a target range"""

    clamp: bool
    """ Clamp the result to the target range [To Min, To Max]

    :type: bool
    """

    data_type: str
    """ 

    :type: str
    """

    interpolation_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeMapping(ShaderNode, NodeInternal, Node, bpy_struct):
    """Transform the input vector by applying translation, rotation, and scale"""

    vector_type: str
    """ Type of vector that the mapping transforms

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeMath(ShaderNode, NodeInternal, Node, bpy_struct):
    """Perform math operations"""

    operation: str
    """ 

    :type: str
    """

    use_clamp: bool
    """ Clamp result of the node to 0.0 to 1.0 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeMix(ShaderNode, NodeInternal, Node, bpy_struct):
    """Mix values by a factor"""

    blend_type: str
    """ 

    :type: str
    """

    clamp_factor: bool
    """ Clamp the factor to [0,1] range

    :type: bool
    """

    clamp_result: bool
    """ Clamp the result to [0,1] range

    :type: bool
    """

    data_type: str
    """ 

    :type: str
    """

    factor_mode: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeMixRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """Mix two input colors"""

    blend_type: str
    """ 

    :type: str
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0.0 to 1.0 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeMixShader(ShaderNode, NodeInternal, Node, bpy_struct):
    """Mix two shaders together. Typically used for material layering"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeNewGeometry(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve geometric information about the current shading point"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeNormal(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a normal vector and a dot product"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeNormalMap(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a perturbed normal from an RGB normal map image. Typically used for faking highly detailed surfaces"""

    space: str
    """ Space of the input normal

    :type: str
    """

    uv_map: str
    """ UV Map for tangent space maps

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeObjectInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve information about the object instance"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeOutputAOV(ShaderNode, NodeInternal, Node, bpy_struct):
    """Arbitrary Output Variables.
    Provide custom render passes for arbitrary shader node outputs
    """

    name: str
    """ Name of the AOV that this output writes to

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeOutputLight(ShaderNode, NodeInternal, Node, bpy_struct):
    """Output light information to a light object"""

    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    target: str
    """ Which renderer and viewport shading types to use the shaders for

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeOutputLineStyle(ShaderNode, NodeInternal, Node, bpy_struct):
    blend_type: str
    """ 

    :type: str
    """

    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    target: str
    """ Which renderer and viewport shading types to use the shaders for

    :type: str
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0.0 to 1.0 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeOutputMaterial(ShaderNode, NodeInternal, Node, bpy_struct):
    """Output surface material information for use in rendering"""

    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    target: str
    """ Which renderer and viewport shading types to use the shaders for

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeOutputWorld(ShaderNode, NodeInternal, Node, bpy_struct):
    """Output light color information to the scene's World"""

    is_active_output: bool
    """ True if this node is used as the active output

    :type: bool
    """

    target: str
    """ Which renderer and viewport shading types to use the shaders for

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeParticleInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve the data of the particle that spawned the object instance, for example to give variation to multiple instances of an object"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodePointInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve information about points in a point cloud"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """A color picker"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeRGBCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    """Apply color corrections for each color channel"""

    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeRGBToBW(ShaderNode, NodeInternal, Node, bpy_struct):
    """Convert a color's luminance to a grayscale value"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeScript(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate an OSL shader from a file or text data-block.
    Note: OSL shaders are not supported on all GPU backends
    """

    bytecode: str
    """ Compile bytecode for shader script node

    :type: str
    """

    bytecode_hash: str
    """ Hash of compile bytecode, for quick equality checking

    :type: str
    """

    filepath: str
    """ Shader script path

    :type: str
    """

    mode: str
    """ 

    :type: str
    """

    script: Text
    """ Internal shader script to define the shader

    :type: Text
    """

    use_auto_update: bool
    """ Automatically update the shader when the .osl file changes (external scripts only)

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeSeparateColor(ShaderNode, NodeInternal, Node, bpy_struct):
    """Split a color into its individual components using multiple models"""

    mode: str
    """ Mode of color processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeSeparateHSV(ShaderNode, NodeInternal, Node, bpy_struct):
    """Split a color into its hue, saturation, and value channels"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeSeparateRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """Split a color into its red, green, and blue channels (Deprecated)"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeSeparateXYZ(ShaderNode, NodeInternal, Node, bpy_struct):
    """Split a vector into its X, Y, and Z components"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeShaderToRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """Convert rendering effect (such as light and shadow) to color. Typically used for non-photorealistic rendering, to apply additional effects on the output of BSDFs.
    Note: only supported in EEVEE
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeSqueeze(ShaderNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeSubsurfaceScattering(ShaderNode, NodeInternal, Node, bpy_struct):
    """Subsurface multiple scattering shader to simulate light entering the surface and bouncing internally.
    Typically used for materials such as skin, wax, marble or milk
    """

    falloff: str
    """ Method for rendering subsurface scattering

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTangent(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a tangent direction for the Anisotropic BSDF"""

    axis: str
    """ Axis for radial tangents

    :type: str
    """

    direction_type: str
    """ Method to use for the tangent

    :type: str
    """

    uv_map: str
    """ UV Map for tangent generated from UV

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexBrick(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a procedural texture producing bricks"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    offset: float
    """ 

    :type: float
    """

    offset_frequency: int
    """ 

    :type: int
    """

    squash: float
    """ 

    :type: float
    """

    squash_frequency: int
    """ 

    :type: int
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexChecker(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a checkerboard texture"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexCoord(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve multiple types of texture coordinates.
    Typically used as inputs for texture nodes
    """

    from_instancer: bool
    """ Use the parent of the instance object if possible

    :type: bool
    """

    object: Object
    """ Use coordinates from this object (for object texture coordinates output)

    :type: Object
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexEnvironment(ShaderNode, NodeInternal, Node, bpy_struct):
    """Sample an image file as an environment texture. Typically used to light the scene with the background node"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    image: Image
    """ 

    :type: Image
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    interpolation: str
    """ Texture interpolation

    :type: str
    """

    projection: str
    """ Projection of the input image

    :type: str
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexGradient(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate interpolated color and intensity values based on the input vector"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    gradient_type: str
    """ Style of the color blending

    :type: str
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexIES(ShaderNode, NodeInternal, Node, bpy_struct):
    """Used to match real world lights with IES files, which store the directional intensity distribution of light sources"""

    filepath: str
    """ IES light path

    :type: str
    """

    ies: Text
    """ Internal IES file

    :type: Text
    """

    mode: str
    """ Whether the IES file is loaded from disk or from a text data-block

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexImage(ShaderNode, NodeInternal, Node, bpy_struct):
    """Sample an image file as a texture"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    extension: str
    """ How the image is extrapolated past its original bounds

    :type: str
    """

    image: Image
    """ 

    :type: Image
    """

    image_user: ImageUser
    """ Parameters defining which layer, pass and frame of the image is displayed

    :type: ImageUser
    """

    interpolation: str
    """ Texture interpolation

    :type: str
    """

    projection: str
    """ Method to project 2D image on object with a 3D texture vector

    :type: str
    """

    projection_blend: float
    """ For box projection, amount of blend to use between sides

    :type: float
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexMagic(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a psychedelic color texture"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    turbulence_depth: int
    """ Level of detail in the added turbulent noise

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexNoise(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate fractal Perlin noise"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    noise_dimensions: str
    """ Number of dimensions to output noise for

    :type: str
    """

    noise_type: str
    """ Type of the Noise texture

    :type: str
    """

    normalize: bool
    """ Normalize outputs to 0.0 to 1.0 range

    :type: bool
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexPointDensity(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a volumetric point for each particle or vertex of another object"""

    interpolation: str
    """ Texture interpolation

    :type: str
    """

    object: Object
    """ Object to take point data from

    :type: Object
    """

    particle_color_source: str
    """ Data to derive color results from

    :type: str
    """

    particle_system: ParticleSystem
    """ Particle System to render as points

    :type: ParticleSystem
    """

    point_source: str
    """ Point data to use as renderable point density

    :type: str
    """

    radius: float
    """ Radius from the shaded sample to look for points within

    :type: float
    """

    resolution: int
    """ Resolution used by the texture holding the point density

    :type: int
    """

    space: str
    """ Coordinate system to calculate voxels in

    :type: str
    """

    vertex_attribute_name: str
    """ Vertex attribute to use for color

    :type: str
    """

    vertex_color_source: str
    """ Data to derive color results from

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    def cache_point_density(self, depsgraph: Depsgraph | None = None):
        """Cache point density data for later calculation

        :param depsgraph:
        :type depsgraph: Depsgraph | None
        """
        ...

    def calc_point_density(
        self, depsgraph: Depsgraph | None = None
    ) -> bpy_prop_array[float]:
        """Calculate point density

        :param depsgraph:
        :type depsgraph: Depsgraph | None
        :return: RGBA Values
        :rtype: bpy_prop_array[float]
        """
        ...

    def calc_point_density_minmax(self, depsgraph: Depsgraph | None = None):
        """Calculate point density

                :param depsgraph:
                :type depsgraph: Depsgraph | None
                :return: min, min, `mathutils.Vector` of 3 items in [-inf, inf]

        max, max, `mathutils.Vector` of 3 items in [-inf, inf]
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexSky(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate a procedural sky texture"""

    air_density: float
    """ Density of air molecules

    :type: float
    """

    altitude: float
    """ Height from sea level

    :type: float
    """

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    dust_density: float
    """ Density of dust molecules and water droplets

    :type: float
    """

    ground_albedo: float
    """ Ground color that is subtly reflected in the sky

    :type: float
    """

    ozone_density: float
    """ Density of ozone layer

    :type: float
    """

    sky_type: str
    """ Which sky model should be used

    :type: str
    """

    sun_direction: mathutils.Vector
    """ Direction from where the sun is shining

    :type: mathutils.Vector
    """

    sun_disc: bool
    """ Include the sun itself in the output

    :type: bool
    """

    sun_elevation: float
    """ Sun angle from horizon

    :type: float
    """

    sun_intensity: float
    """ Strength of sun

    :type: float
    """

    sun_rotation: float
    """ Rotation of sun around zenith

    :type: float
    """

    sun_size: float
    """ Size of sun disc

    :type: float
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    turbidity: float
    """ Atmospheric turbidity

    :type: float
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexVoronoi(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate Worley noise based on the distance to random points. Typically used to generate textures such as stones, water, or biological cells"""

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    distance: str
    """ The distance metric used to compute the texture

    :type: str
    """

    feature: str
    """ The Voronoi feature that the node will compute

    :type: str
    """

    normalize: bool
    """ Normalize output Distance to 0.0 to 1.0 range

    :type: bool
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    voronoi_dimensions: str
    """ Number of dimensions to output noise for

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexWave(ShaderNode, NodeInternal, Node, bpy_struct):
    """Generate procedural bands or rings with noise"""

    bands_direction: str
    """ 

    :type: str
    """

    color_mapping: ColorMapping
    """ Color mapping settings

    :type: ColorMapping
    """

    rings_direction: str
    """ 

    :type: str
    """

    texture_mapping: TexMapping
    """ Texture coordinate mapping settings

    :type: TexMapping
    """

    wave_profile: str
    """ 

    :type: str
    """

    wave_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeTexWhiteNoise(ShaderNode, NodeInternal, Node, bpy_struct):
    """Return a random value or color based on an input seed"""

    noise_dimensions: str
    """ Number of dimensions to output noise for

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeUVAlongStroke(ShaderNode, NodeInternal, Node, bpy_struct):
    use_tips: bool
    """ Lower half of the texture is for tips of the stroke

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeUVMap(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve a UV map from the geometry, or the default fallback if none is specified"""

    from_instancer: bool
    """ Use the parent of the instance object if possible

    :type: bool
    """

    uv_map: str
    """ UV coordinates to be used for mapping

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeValToRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """Map values to colors with the use of a gradient"""

    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeValue(ShaderNode, NodeInternal, Node, bpy_struct):
    """Used to Input numerical values to other nodes in the tree"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVectorCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    """Map an input vectors to curves, used to fine-tune the interpolation of the input"""

    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVectorDisplacement(ShaderNode, NodeInternal, Node, bpy_struct):
    """Displace the surface along an arbitrary direction"""

    space: str
    """ Space of the input height

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVectorMath(ShaderNode, NodeInternal, Node, bpy_struct):
    """Perform vector math operation"""

    operation: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVectorRotate(ShaderNode, NodeInternal, Node, bpy_struct):
    """Rotate a vector around a pivot point (center)"""

    invert: bool
    """ Invert angle

    :type: bool
    """

    rotation_type: str
    """ Type of rotation

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVectorTransform(ShaderNode, NodeInternal, Node, bpy_struct):
    """Convert a vector, point, or normal between world, camera, and object coordinate space"""

    convert_from: str
    """ Space to convert from

    :type: str
    """

    convert_to: str
    """ Space to convert to

    :type: str
    """

    vector_type: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVertexColor(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve a color attribute, or the default fallback if none is specified"""

    layer_name: str
    """ Color Attribute

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVolumeAbsorption(ShaderNode, NodeInternal, Node, bpy_struct):
    """Absorb light as it passes through the volume"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVolumeInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """Read volume data attributes from volume grids"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVolumePrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    """Combine all volume shading components into a single easy to use node"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeVolumeScatter(ShaderNode, NodeInternal, Node, bpy_struct):
    """Scatter light as it passes through the volume, often used to add fog to a scene"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeWavelength(ShaderNode, NodeInternal, Node, bpy_struct):
    """Convert a wavelength value to an RGB value"""

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class ShaderNodeWireframe(ShaderNode, NodeInternal, Node, bpy_struct):
    """Retrieve the edges of an object as it appears to Cycles.
    Note: as meshes are triangulated before being processed by Cycles, topology will always appear triangulated
    """

    use_pixel_size: bool
    """ Use screen pixel size instead of world units

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeAt(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeBricks(TextureNode, NodeInternal, Node, bpy_struct):
    offset: float
    """ 

    :type: float
    """

    offset_frequency: int
    """ Offset every N rows

    :type: int
    """

    squash: float
    """ 

    :type: float
    """

    squash_frequency: int
    """ Squash every N rows

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeChecker(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeCombineColor(TextureNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ Mode of color processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeCompose(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeCoordinates(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeCurveRGB(TextureNode, NodeInternal, Node, bpy_struct):
    mapping: CurveMapping
    """ 

    :type: CurveMapping
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeCurveTime(TextureNode, NodeInternal, Node, bpy_struct):
    curve: CurveMapping
    """ 

    :type: CurveMapping
    """

    frame_end: int
    """ 

    :type: int
    """

    frame_start: int
    """ 

    :type: int
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeDecompose(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeDistance(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeGroup(TextureNode, NodeInternal, Node, bpy_struct):
    node_tree: NodeTree
    """ 

    :type: NodeTree
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeHueSaturation(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeImage(TextureNode, NodeInternal, Node, bpy_struct):
    image: Image
    """ 

    :type: Image
    """

    image_user: ImageUser
    """ Parameters defining the image duration, offset and related settings

    :type: ImageUser
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeInvert(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeMath(TextureNode, NodeInternal, Node, bpy_struct):
    operation: str
    """ 

    :type: str
    """

    use_clamp: bool
    """ Clamp result of the node to 0.0 to 1.0 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeMixRGB(TextureNode, NodeInternal, Node, bpy_struct):
    blend_type: str
    """ 

    :type: str
    """

    use_alpha: bool
    """ Include alpha of second input in this operation

    :type: bool
    """

    use_clamp: bool
    """ Clamp result of the node to 0.0 to 1.0 range

    :type: bool
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeOutput(TextureNode, NodeInternal, Node, bpy_struct):
    filepath: str
    """ 

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeRGBToBW(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeRotate(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeScale(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeSeparateColor(TextureNode, NodeInternal, Node, bpy_struct):
    mode: str
    """ Mode of color processing

    :type: str
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexBlend(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexClouds(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexDistNoise(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexMagic(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexMarble(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexMusgrave(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexNoise(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexStucci(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexVoronoi(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexWood(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTexture(TextureNode, NodeInternal, Node, bpy_struct):
    node_output: int
    """ For node-based textures, which output node to use

    :type: int
    """

    texture: Texture
    """ 

    :type: Texture
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeTranslate(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeValToNor(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeValToRGB(TextureNode, NodeInternal, Node, bpy_struct):
    color_ramp: ColorRamp
    """ 

    :type: ColorRamp
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

class TextureNodeViewer(TextureNode, NodeInternal, Node, bpy_struct):
    @classmethod
    def is_registered_node_type(cls) -> bool:
        """True if a registered node type

        :return: Result
        :rtype: bool
        """
        ...

    @classmethod
    def input_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Input socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def output_template(cls, index: int | None) -> NodeInternalSocketTemplate:
        """Output socket template

        :param index: Index
        :type index: int | None
        :return: result
        :rtype: NodeInternalSocketTemplate
        """
        ...

    @classmethod
    def bl_rna_get_subclass(cls, id: str | None, default=None) -> Struct:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The RNA type or default when not found.
        :rtype: Struct
        """
        ...

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str | None, default=None) -> typing.Any:
        """

        :param id: The RNA type identifier.
        :type id: str | None
        :param default:
        :return: The class or default when not found.
        :rtype: typing.Any
        """
        ...

ANIM_MT_keyframe_insert_pie: bl_ui.anim.ANIM_MT_keyframe_insert_pie

ANIM_OT_keying_set_export: bl_operators.anim.ANIM_OT_keying_set_export

ARMATURE_MT_collection_context_menu: bl_ui.properties_data_armature.ARMATURE_MT_collection_context_menu

ARMATURE_MT_collection_tree_context_menu: bl_ui.properties_data_armature.ARMATURE_MT_collection_tree_context_menu

ARMATURE_OT_collection_remove_unused: bl_operators.anim.ARMATURE_OT_collection_remove_unused

ARMATURE_OT_collection_show_all: bl_operators.anim.ARMATURE_OT_collection_show_all

ARMATURE_OT_collection_unsolo_all: bl_operators.anim.ARMATURE_OT_collection_unsolo_all

ARMATURE_OT_copy_bone_color_to_selected: bl_operators.anim.ARMATURE_OT_copy_bone_color_to_selected

ASSETBROWSER_MT_catalog: bl_ui.space_filebrowser.ASSETBROWSER_MT_catalog

ASSETBROWSER_MT_context_menu: bl_ui.space_filebrowser.ASSETBROWSER_MT_context_menu

ASSETBROWSER_MT_editor_menus: bl_ui.space_filebrowser.ASSETBROWSER_MT_editor_menus

ASSETBROWSER_MT_metadata_preview_menu: bl_ui.space_filebrowser.ASSETBROWSER_MT_metadata_preview_menu

ASSETBROWSER_MT_select: bl_ui.space_filebrowser.ASSETBROWSER_MT_select

ASSETBROWSER_MT_view: bl_ui.space_filebrowser.ASSETBROWSER_MT_view

ASSETBROWSER_PT_display: bl_ui.space_filebrowser.ASSETBROWSER_PT_display

ASSETBROWSER_PT_filter: bl_ui.space_filebrowser.ASSETBROWSER_PT_filter

ASSETBROWSER_PT_metadata: bl_ui.space_filebrowser.ASSETBROWSER_PT_metadata

ASSETBROWSER_PT_metadata_preview: bl_ui.space_filebrowser.ASSETBROWSER_PT_metadata_preview

ASSETBROWSER_PT_metadata_tags: bl_ui.space_filebrowser.ASSETBROWSER_PT_metadata_tags

ASSETBROWSER_UL_metadata_tags: bl_ui.space_filebrowser.ASSETBROWSER_UL_metadata_tags

ASSETSHELF_PT_display: bl_ui.asset_shelf.ASSETSHELF_PT_display

ASSET_OT_open_containing_blend_file: bl_operators.assets.ASSET_OT_open_containing_blend_file

ASSET_OT_tag_add: bl_operators.assets.ASSET_OT_tag_add

ASSET_OT_tag_remove: bl_operators.assets.ASSET_OT_tag_remove

BONE_PT_bActionConstraint: bl_ui.properties_constraint.BONE_PT_bActionConstraint

BONE_PT_bActionConstraint_action: bl_ui.properties_constraint.BONE_PT_bActionConstraint_action

BONE_PT_bActionConstraint_target: bl_ui.properties_constraint.BONE_PT_bActionConstraint_target

BONE_PT_bArmatureConstraint: bl_ui.properties_constraint.BONE_PT_bArmatureConstraint

BONE_PT_bArmatureConstraint_bones: bl_ui.properties_constraint.BONE_PT_bArmatureConstraint_bones

BONE_PT_bCameraSolverConstraint: bl_ui.properties_constraint.BONE_PT_bCameraSolverConstraint

BONE_PT_bChildOfConstraint: bl_ui.properties_constraint.BONE_PT_bChildOfConstraint

BONE_PT_bClampToConstraint: bl_ui.properties_constraint.BONE_PT_bClampToConstraint

BONE_PT_bDampTrackConstraint: bl_ui.properties_constraint.BONE_PT_bDampTrackConstraint

BONE_PT_bDistLimitConstraint: bl_ui.properties_constraint.BONE_PT_bDistLimitConstraint

BONE_PT_bFollowPathConstraint: bl_ui.properties_constraint.BONE_PT_bFollowPathConstraint

BONE_PT_bFollowTrackConstraint: bl_ui.properties_constraint.BONE_PT_bFollowTrackConstraint

BONE_PT_bKinematicConstraint: bl_ui.properties_constraint.BONE_PT_bKinematicConstraint

BONE_PT_bLocLimitConstraint: bl_ui.properties_constraint.BONE_PT_bLocLimitConstraint

BONE_PT_bLocateLikeConstraint: bl_ui.properties_constraint.BONE_PT_bLocateLikeConstraint

BONE_PT_bLockTrackConstraint: bl_ui.properties_constraint.BONE_PT_bLockTrackConstraint

BONE_PT_bMinMaxConstraint: bl_ui.properties_constraint.BONE_PT_bMinMaxConstraint

BONE_PT_bObjectSolverConstraint: bl_ui.properties_constraint.BONE_PT_bObjectSolverConstraint

BONE_PT_bPivotConstraint: bl_ui.properties_constraint.BONE_PT_bPivotConstraint

BONE_PT_bPythonConstraint: bl_ui.properties_constraint.BONE_PT_bPythonConstraint

BONE_PT_bRotLimitConstraint: bl_ui.properties_constraint.BONE_PT_bRotLimitConstraint

BONE_PT_bRotateLikeConstraint: bl_ui.properties_constraint.BONE_PT_bRotateLikeConstraint

BONE_PT_bSameVolumeConstraint: bl_ui.properties_constraint.BONE_PT_bSameVolumeConstraint

BONE_PT_bShrinkwrapConstraint: bl_ui.properties_constraint.BONE_PT_bShrinkwrapConstraint

BONE_PT_bSizeLikeConstraint: bl_ui.properties_constraint.BONE_PT_bSizeLikeConstraint

BONE_PT_bSizeLimitConstraint: bl_ui.properties_constraint.BONE_PT_bSizeLimitConstraint

BONE_PT_bSplineIKConstraint: bl_ui.properties_constraint.BONE_PT_bSplineIKConstraint

BONE_PT_bSplineIKConstraint_chain_scaling: bl_ui.properties_constraint.BONE_PT_bSplineIKConstraint_chain_scaling

BONE_PT_bSplineIKConstraint_fitting: bl_ui.properties_constraint.BONE_PT_bSplineIKConstraint_fitting

BONE_PT_bStretchToConstraint: bl_ui.properties_constraint.BONE_PT_bStretchToConstraint

BONE_PT_bTrackToConstraint: bl_ui.properties_constraint.BONE_PT_bTrackToConstraint

BONE_PT_bTransLikeConstraint: bl_ui.properties_constraint.BONE_PT_bTransLikeConstraint

BONE_PT_bTransformCacheConstraint: bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint

BONE_PT_bTransformCacheConstraint_layers: bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_layers

BONE_PT_bTransformCacheConstraint_procedural: bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_procedural

BONE_PT_bTransformCacheConstraint_time: bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_time

BONE_PT_bTransformCacheConstraint_velocity: bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_velocity

BONE_PT_bTransformConstraint: bl_ui.properties_constraint.BONE_PT_bTransformConstraint

BONE_PT_bTransformConstraint_from: bl_ui.properties_constraint.BONE_PT_bTransformConstraint_from

BONE_PT_bTransformConstraint_to: bl_ui.properties_constraint.BONE_PT_bTransformConstraint_to

BONE_PT_collections: bl_ui.properties_data_bone.BONE_PT_collections

BONE_PT_constraints: bl_ui.properties_constraint.BONE_PT_constraints

BONE_PT_context_bone: bl_ui.properties_data_bone.BONE_PT_context_bone

BONE_PT_curved: bl_ui.properties_data_bone.BONE_PT_curved

BONE_PT_custom_props: bl_ui.properties_data_bone.BONE_PT_custom_props

BONE_PT_deform: bl_ui.properties_data_bone.BONE_PT_deform

BONE_PT_display: bl_ui.properties_data_bone.BONE_PT_display

BONE_PT_display_custom_shape: bl_ui.properties_data_bone.BONE_PT_display_custom_shape

BONE_PT_inverse_kinematics: bl_ui.properties_data_bone.BONE_PT_inverse_kinematics

BONE_PT_relations: bl_ui.properties_data_bone.BONE_PT_relations

BONE_PT_transform: bl_ui.properties_data_bone.BONE_PT_transform

CAMERA_PT_presets: bl_ui.properties_data_camera.CAMERA_PT_presets

CAMERA_PT_safe_areas_presets: bl_ui.properties_data_camera.CAMERA_PT_safe_areas_presets

CLIP_HT_header: bl_ui.space_clip.CLIP_HT_header

CLIP_MT_clip: bl_ui.space_clip.CLIP_MT_clip

CLIP_MT_marker_pie: bl_ui.space_clip.CLIP_MT_marker_pie

CLIP_MT_masking_editor_menus: bl_ui.space_clip.CLIP_MT_masking_editor_menus

CLIP_MT_pivot_pie: bl_ui.space_clip.CLIP_MT_pivot_pie

CLIP_MT_plane_track_image_context_menu: bl_ui.space_clip.CLIP_MT_plane_track_image_context_menu

CLIP_MT_proxy: bl_ui.space_clip.CLIP_MT_proxy

CLIP_MT_reconstruction: bl_ui.space_clip.CLIP_MT_reconstruction

CLIP_MT_reconstruction_pie: bl_ui.space_clip.CLIP_MT_reconstruction_pie

CLIP_MT_select: bl_ui.space_clip.CLIP_MT_select

CLIP_MT_select_grouped: bl_ui.space_clip.CLIP_MT_select_grouped

CLIP_MT_solving_pie: bl_ui.space_clip.CLIP_MT_solving_pie

CLIP_MT_stabilize_2d_context_menu: bl_ui.space_clip.CLIP_MT_stabilize_2d_context_menu

CLIP_MT_stabilize_2d_rotation_context_menu: bl_ui.space_clip.CLIP_MT_stabilize_2d_rotation_context_menu

CLIP_MT_track: bl_ui.space_clip.CLIP_MT_track

CLIP_MT_track_animation: bl_ui.space_clip.CLIP_MT_track_animation

CLIP_MT_track_cleanup: bl_ui.space_clip.CLIP_MT_track_cleanup

CLIP_MT_track_clear: bl_ui.space_clip.CLIP_MT_track_clear

CLIP_MT_track_motion: bl_ui.space_clip.CLIP_MT_track_motion

CLIP_MT_track_refine: bl_ui.space_clip.CLIP_MT_track_refine

CLIP_MT_track_transform: bl_ui.space_clip.CLIP_MT_track_transform

CLIP_MT_track_visibility: bl_ui.space_clip.CLIP_MT_track_visibility

CLIP_MT_tracking_context_menu: bl_ui.space_clip.CLIP_MT_tracking_context_menu

CLIP_MT_tracking_editor_menus: bl_ui.space_clip.CLIP_MT_tracking_editor_menus

CLIP_MT_tracking_pie: bl_ui.space_clip.CLIP_MT_tracking_pie

CLIP_MT_view: bl_ui.space_clip.CLIP_MT_view

CLIP_MT_view_pie: bl_ui.space_clip.CLIP_MT_view_pie

CLIP_MT_view_zoom: bl_ui.space_clip.CLIP_MT_view_zoom

CLIP_OT_bundles_to_mesh: bl_operators.clip.CLIP_OT_bundles_to_mesh

CLIP_OT_constraint_to_fcurve: bl_operators.clip.CLIP_OT_constraint_to_fcurve

CLIP_OT_delete_proxy: bl_operators.clip.CLIP_OT_delete_proxy

CLIP_OT_filter_tracks: bl_operators.clip.CLIP_OT_filter_tracks

CLIP_OT_set_active_clip: bl_operators.clip.CLIP_OT_set_active_clip

CLIP_OT_set_viewport_background: bl_operators.clip.CLIP_OT_set_viewport_background

CLIP_OT_setup_tracking_scene: bl_operators.clip.CLIP_OT_setup_tracking_scene

CLIP_OT_track_settings_as_default: bl_operators.clip.CLIP_OT_track_settings_as_default

CLIP_OT_track_settings_to_track: bl_operators.clip.CLIP_OT_track_settings_to_track

CLIP_OT_track_to_empty: bl_operators.clip.CLIP_OT_track_to_empty

CLIP_PT_2d_cursor: bl_ui.space_clip.CLIP_PT_2d_cursor

CLIP_PT_active_mask_point: bl_ui.space_clip.CLIP_PT_active_mask_point

CLIP_PT_active_mask_spline: bl_ui.space_clip.CLIP_PT_active_mask_spline

CLIP_PT_annotation: bl_ui.space_clip.CLIP_PT_annotation

CLIP_PT_camera_presets: bl_ui.space_clip.CLIP_PT_camera_presets

CLIP_PT_clip_display: bl_ui.space_clip.CLIP_PT_clip_display

CLIP_PT_display: bl_ui.space_clip.CLIP_PT_display

CLIP_PT_footage: bl_ui.space_clip.CLIP_PT_footage

CLIP_PT_gizmo_display: bl_ui.space_clip.CLIP_PT_gizmo_display

CLIP_PT_marker: bl_ui.space_clip.CLIP_PT_marker

CLIP_PT_marker_display: bl_ui.space_clip.CLIP_PT_marker_display

CLIP_PT_mask: bl_ui.space_clip.CLIP_PT_mask

CLIP_PT_mask_display: bl_ui.space_clip.CLIP_PT_mask_display

CLIP_PT_mask_layers: bl_ui.space_clip.CLIP_PT_mask_layers

CLIP_PT_objects: bl_ui.space_clip.CLIP_PT_objects

CLIP_PT_plane_track: bl_ui.space_clip.CLIP_PT_plane_track

CLIP_PT_proportional_edit: bl_ui.space_clip.CLIP_PT_proportional_edit

CLIP_PT_proxy: bl_ui.space_clip.CLIP_PT_proxy

CLIP_PT_stabilization: bl_ui.space_clip.CLIP_PT_stabilization

CLIP_PT_tools_cleanup: bl_ui.space_clip.CLIP_PT_tools_cleanup

CLIP_PT_tools_clip: bl_ui.space_clip.CLIP_PT_tools_clip

CLIP_PT_tools_geometry: bl_ui.space_clip.CLIP_PT_tools_geometry

CLIP_PT_tools_grease_pencil_draw: bl_ui.space_clip.CLIP_PT_tools_grease_pencil_draw

CLIP_PT_tools_marker: bl_ui.space_clip.CLIP_PT_tools_marker

CLIP_PT_tools_mask_tools: bl_ui.space_clip.CLIP_PT_tools_mask_tools

CLIP_PT_tools_mask_transforms: bl_ui.space_clip.CLIP_PT_tools_mask_transforms

CLIP_PT_tools_object: bl_ui.space_clip.CLIP_PT_tools_object

CLIP_PT_tools_orientation: bl_ui.space_clip.CLIP_PT_tools_orientation

CLIP_PT_tools_plane_tracking: bl_ui.space_clip.CLIP_PT_tools_plane_tracking

CLIP_PT_tools_scenesetup: bl_ui.space_clip.CLIP_PT_tools_scenesetup

CLIP_PT_tools_solve: bl_ui.space_clip.CLIP_PT_tools_solve

CLIP_PT_tools_tracking: bl_ui.space_clip.CLIP_PT_tools_tracking

CLIP_PT_track: bl_ui.space_clip.CLIP_PT_track

CLIP_PT_track_color_presets: bl_ui.space_clip.CLIP_PT_track_color_presets

CLIP_PT_track_settings: bl_ui.space_clip.CLIP_PT_track_settings

CLIP_PT_track_settings_extras: bl_ui.space_clip.CLIP_PT_track_settings_extras

CLIP_PT_tracking_camera: bl_ui.space_clip.CLIP_PT_tracking_camera

CLIP_PT_tracking_lens: bl_ui.space_clip.CLIP_PT_tracking_lens

CLIP_PT_tracking_settings: bl_ui.space_clip.CLIP_PT_tracking_settings

CLIP_PT_tracking_settings_extras: bl_ui.space_clip.CLIP_PT_tracking_settings_extras

CLIP_PT_tracking_settings_presets: bl_ui.space_clip.CLIP_PT_tracking_settings_presets

CLIP_UL_tracking_objects: bl_ui.space_clip.CLIP_UL_tracking_objects

CLOTH_PT_presets: bl_ui.properties_physics_cloth.CLOTH_PT_presets

COLLECTION_MT_context_menu: bl_ui.properties_object.COLLECTION_MT_context_menu

COLLECTION_MT_context_menu_instance_offset: bl_ui.properties_collection.COLLECTION_MT_context_menu_instance_offset

COLLECTION_PT_collection_custom_props: bl_ui.properties_collection.COLLECTION_PT_collection_custom_props

COLLECTION_PT_collection_flags: bl_ui.properties_collection.COLLECTION_PT_collection_flags

COLLECTION_PT_instancing: bl_ui.properties_collection.COLLECTION_PT_instancing

COLLECTION_PT_lineart_collection: bl_ui.properties_collection.COLLECTION_PT_lineart_collection

CONSOLE_HT_header: bl_ui.space_console.CONSOLE_HT_header

CONSOLE_MT_console: bl_ui.space_console.CONSOLE_MT_console

CONSOLE_MT_context_menu: bl_ui.space_console.CONSOLE_MT_context_menu

CONSOLE_MT_editor_menus: bl_ui.space_console.CONSOLE_MT_editor_menus

CONSOLE_MT_language: bl_ui.space_console.CONSOLE_MT_language

CONSOLE_MT_view: bl_ui.space_console.CONSOLE_MT_view

CONSTRAINT_OT_add_target: bl_operators.constraint.CONSTRAINT_OT_add_target

CONSTRAINT_OT_disable_keep_transform: bl_operators.constraint.CONSTRAINT_OT_disable_keep_transform

CONSTRAINT_OT_normalize_target_weights: bl_operators.constraint.CONSTRAINT_OT_normalize_target_weights

CONSTRAINT_OT_remove_target: bl_operators.constraint.CONSTRAINT_OT_remove_target

CURVES_MT_add_attribute: bl_ui.properties_data_curves.CURVES_MT_add_attribute

CURVES_UL_attributes: bl_ui.properties_data_curves.CURVES_UL_attributes

DATA_PT_CURVES_attributes: bl_ui.properties_data_curves.DATA_PT_CURVES_attributes

DATA_PT_EEVEE_light: bl_ui.properties_data_light.DATA_PT_EEVEE_light

DATA_PT_EEVEE_light_distance: bl_ui.properties_data_light.DATA_PT_EEVEE_light_distance

DATA_PT_EEVEE_shadow: bl_ui.properties_data_light.DATA_PT_EEVEE_shadow

DATA_PT_EEVEE_shadow_cascaded_shadow_map: bl_ui.properties_data_light.DATA_PT_EEVEE_shadow_cascaded_shadow_map

DATA_PT_EEVEE_shadow_contact: bl_ui.properties_data_light.DATA_PT_EEVEE_shadow_contact

DATA_PT_active_spline: bl_ui.properties_data_curve.DATA_PT_active_spline

DATA_PT_bone_collections: bl_ui.properties_data_armature.DATA_PT_bone_collections

DATA_PT_camera: bl_ui.properties_data_camera.DATA_PT_camera

DATA_PT_camera_background_image: bl_ui.properties_data_camera.DATA_PT_camera_background_image

DATA_PT_camera_display: bl_ui.properties_data_camera.DATA_PT_camera_display

DATA_PT_camera_display_composition_guides: bl_ui.properties_data_camera.DATA_PT_camera_display_composition_guides

DATA_PT_camera_dof: bl_ui.properties_data_camera.DATA_PT_camera_dof

DATA_PT_camera_dof_aperture: bl_ui.properties_data_camera.DATA_PT_camera_dof_aperture

DATA_PT_camera_safe_areas: bl_ui.properties_data_camera.DATA_PT_camera_safe_areas

DATA_PT_camera_safe_areas_center_cut: bl_ui.properties_data_camera.DATA_PT_camera_safe_areas_center_cut

DATA_PT_camera_stereoscopy: bl_ui.properties_data_camera.DATA_PT_camera_stereoscopy

DATA_PT_cone: bl_ui.properties_data_speaker.DATA_PT_cone

DATA_PT_context_arm: bl_ui.properties_data_armature.DATA_PT_context_arm

DATA_PT_context_camera: bl_ui.properties_data_camera.DATA_PT_context_camera

DATA_PT_context_curve: bl_ui.properties_data_curve.DATA_PT_context_curve

DATA_PT_context_curves: bl_ui.properties_data_curves.DATA_PT_context_curves

DATA_PT_context_gpencil: bl_ui.properties_data_gpencil.DATA_PT_context_gpencil

DATA_PT_context_grease_pencil: bl_ui.properties_data_grease_pencil.DATA_PT_context_grease_pencil

DATA_PT_context_lattice: bl_ui.properties_data_lattice.DATA_PT_context_lattice

DATA_PT_context_light: bl_ui.properties_data_light.DATA_PT_context_light

DATA_PT_context_lightprobe: bl_ui.properties_data_lightprobe.DATA_PT_context_lightprobe

DATA_PT_context_mesh: bl_ui.properties_data_mesh.DATA_PT_context_mesh

DATA_PT_context_metaball: bl_ui.properties_data_metaball.DATA_PT_context_metaball

DATA_PT_context_pointcloud: bl_ui.properties_data_pointcloud.DATA_PT_context_pointcloud

DATA_PT_context_speaker: bl_ui.properties_data_speaker.DATA_PT_context_speaker

DATA_PT_context_volume: bl_ui.properties_data_volume.DATA_PT_context_volume

DATA_PT_curve_texture_space: bl_ui.properties_data_curve.DATA_PT_curve_texture_space

DATA_PT_curves_surface: bl_ui.properties_data_curves.DATA_PT_curves_surface

DATA_PT_custom_props_arm: bl_ui.properties_data_armature.DATA_PT_custom_props_arm

DATA_PT_custom_props_bcoll: bl_ui.properties_data_armature.DATA_PT_custom_props_bcoll

DATA_PT_custom_props_camera: bl_ui.properties_data_camera.DATA_PT_custom_props_camera

DATA_PT_custom_props_curve: bl_ui.properties_data_curve.DATA_PT_custom_props_curve

DATA_PT_custom_props_curves: bl_ui.properties_data_curves.DATA_PT_custom_props_curves

DATA_PT_custom_props_gpencil: bl_ui.properties_data_gpencil.DATA_PT_custom_props_gpencil

DATA_PT_custom_props_lattice: bl_ui.properties_data_lattice.DATA_PT_custom_props_lattice

DATA_PT_custom_props_light: bl_ui.properties_data_light.DATA_PT_custom_props_light

DATA_PT_custom_props_mesh: bl_ui.properties_data_mesh.DATA_PT_custom_props_mesh

DATA_PT_custom_props_metaball: bl_ui.properties_data_metaball.DATA_PT_custom_props_metaball

DATA_PT_custom_props_pointcloud: bl_ui.properties_data_pointcloud.DATA_PT_custom_props_pointcloud

DATA_PT_custom_props_speaker: bl_ui.properties_data_speaker.DATA_PT_custom_props_speaker

DATA_PT_custom_props_volume: bl_ui.properties_data_volume.DATA_PT_custom_props_volume

DATA_PT_customdata: bl_ui.properties_data_mesh.DATA_PT_customdata

DATA_PT_display: bl_ui.properties_data_armature.DATA_PT_display

DATA_PT_distance: bl_ui.properties_data_speaker.DATA_PT_distance

DATA_PT_empty: bl_ui.properties_data_empty.DATA_PT_empty

DATA_PT_empty_image: bl_ui.properties_data_empty.DATA_PT_empty_image

DATA_PT_font: bl_ui.properties_data_curve.DATA_PT_font

DATA_PT_font_transform: bl_ui.properties_data_curve.DATA_PT_font_transform

DATA_PT_geometry_curve: bl_ui.properties_data_curve.DATA_PT_geometry_curve

DATA_PT_geometry_curve_bevel: bl_ui.properties_data_curve.DATA_PT_geometry_curve_bevel

DATA_PT_geometry_curve_start_end: bl_ui.properties_data_curve.DATA_PT_geometry_curve_start_end

DATA_PT_gpencil_canvas: bl_ui.properties_data_gpencil.DATA_PT_gpencil_canvas

DATA_PT_gpencil_display: bl_ui.properties_data_gpencil.DATA_PT_gpencil_display

DATA_PT_gpencil_layer_adjustments: bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_adjustments

DATA_PT_gpencil_layer_display: bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_display

DATA_PT_gpencil_layer_masks: bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_masks

DATA_PT_gpencil_layer_relations: bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_relations

DATA_PT_gpencil_layer_transform: bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_transform

DATA_PT_gpencil_layers: bl_ui.properties_data_gpencil.DATA_PT_gpencil_layers

DATA_PT_gpencil_modifiers: bl_ui.properties_data_modifier.DATA_PT_gpencil_modifiers

DATA_PT_gpencil_onion_skinning: bl_ui.properties_data_gpencil.DATA_PT_gpencil_onion_skinning

DATA_PT_gpencil_onion_skinning_custom_colors: bl_ui.properties_data_gpencil.DATA_PT_gpencil_onion_skinning_custom_colors

DATA_PT_gpencil_onion_skinning_display: bl_ui.properties_data_gpencil.DATA_PT_gpencil_onion_skinning_display

DATA_PT_gpencil_strokes: bl_ui.properties_data_gpencil.DATA_PT_gpencil_strokes

DATA_PT_gpencil_vertex_groups: bl_ui.properties_data_gpencil.DATA_PT_gpencil_vertex_groups

DATA_PT_grease_pencil_layers: bl_ui.properties_data_grease_pencil.DATA_PT_grease_pencil_layers

DATA_PT_iksolver_itasc: bl_ui.properties_data_armature.DATA_PT_iksolver_itasc

DATA_PT_lattice: bl_ui.properties_data_lattice.DATA_PT_lattice

DATA_PT_lens: bl_ui.properties_data_camera.DATA_PT_lens

DATA_PT_light: bl_ui.properties_data_light.DATA_PT_light

DATA_PT_lightprobe: bl_ui.properties_data_lightprobe.DATA_PT_lightprobe

DATA_PT_lightprobe_display: bl_ui.properties_data_lightprobe.DATA_PT_lightprobe_display

DATA_PT_lightprobe_eevee_next: bl_ui.properties_data_lightprobe.DATA_PT_lightprobe_eevee_next

DATA_PT_lightprobe_parallax: bl_ui.properties_data_lightprobe.DATA_PT_lightprobe_parallax

DATA_PT_lightprobe_visibility: bl_ui.properties_data_lightprobe.DATA_PT_lightprobe_visibility

DATA_PT_mball_texture_space: bl_ui.properties_data_metaball.DATA_PT_mball_texture_space

DATA_PT_mesh_attributes: bl_ui.properties_data_mesh.DATA_PT_mesh_attributes

DATA_PT_metaball: bl_ui.properties_data_metaball.DATA_PT_metaball

DATA_PT_metaball_element: bl_ui.properties_data_metaball.DATA_PT_metaball_element

DATA_PT_modifiers: bl_ui.properties_data_modifier.DATA_PT_modifiers

DATA_PT_motion_paths: bl_ui.properties_data_armature.DATA_PT_motion_paths

DATA_PT_motion_paths_display: bl_ui.properties_data_armature.DATA_PT_motion_paths_display

DATA_PT_paragraph: bl_ui.properties_data_curve.DATA_PT_paragraph

DATA_PT_paragraph_alignment: bl_ui.properties_data_curve.DATA_PT_paragraph_alignment

DATA_PT_paragraph_spacing: bl_ui.properties_data_curve.DATA_PT_paragraph_spacing

DATA_PT_pathanim: bl_ui.properties_data_curve.DATA_PT_pathanim

DATA_PT_pointcloud_attributes: bl_ui.properties_data_pointcloud.DATA_PT_pointcloud_attributes

DATA_PT_pose: bl_ui.properties_data_armature.DATA_PT_pose

DATA_PT_preview: bl_ui.properties_data_light.DATA_PT_preview

DATA_PT_remesh: bl_ui.properties_data_mesh.DATA_PT_remesh

DATA_PT_shader_fx: bl_ui.properties_data_shaderfx.DATA_PT_shader_fx

DATA_PT_shape_curve: bl_ui.properties_data_curve.DATA_PT_shape_curve

DATA_PT_shape_keys: bl_ui.properties_data_mesh.DATA_PT_shape_keys

DATA_PT_speaker: bl_ui.properties_data_speaker.DATA_PT_speaker

DATA_PT_spot: bl_ui.properties_data_light.DATA_PT_spot

DATA_PT_text_boxes: bl_ui.properties_data_curve.DATA_PT_text_boxes

DATA_PT_texture_space: bl_ui.properties_data_mesh.DATA_PT_texture_space

DATA_PT_uv_texture: bl_ui.properties_data_mesh.DATA_PT_uv_texture

DATA_PT_vertex_colors: bl_ui.properties_data_mesh.DATA_PT_vertex_colors

DATA_PT_vertex_groups: bl_ui.properties_data_mesh.DATA_PT_vertex_groups

DATA_PT_volume_file: bl_ui.properties_data_volume.DATA_PT_volume_file

DATA_PT_volume_grids: bl_ui.properties_data_volume.DATA_PT_volume_grids

DATA_PT_volume_render: bl_ui.properties_data_volume.DATA_PT_volume_render

DATA_PT_volume_viewport_display: bl_ui.properties_data_volume.DATA_PT_volume_viewport_display

DATA_PT_volume_viewport_display_slicing: bl_ui.properties_data_volume.DATA_PT_volume_viewport_display_slicing

DATA_UL_bone_collections: bl_ui.properties_data_armature.DATA_UL_bone_collections

DOPESHEET_HT_header: bl_ui.space_dopesheet.DOPESHEET_HT_header

DOPESHEET_MT_channel: bl_ui.space_dopesheet.DOPESHEET_MT_channel

DOPESHEET_MT_channel_context_menu: bl_ui.space_dopesheet.DOPESHEET_MT_channel_context_menu

DOPESHEET_MT_context_menu: bl_ui.space_dopesheet.DOPESHEET_MT_context_menu

DOPESHEET_MT_delete: bl_ui.space_dopesheet.DOPESHEET_MT_delete

DOPESHEET_MT_editor_menus: bl_ui.space_dopesheet.DOPESHEET_MT_editor_menus

DOPESHEET_MT_gpencil_channel: bl_ui.space_dopesheet.DOPESHEET_MT_gpencil_channel

DOPESHEET_MT_gpencil_key: bl_ui.space_dopesheet.DOPESHEET_MT_gpencil_key

DOPESHEET_MT_key: bl_ui.space_dopesheet.DOPESHEET_MT_key

DOPESHEET_MT_key_transform: bl_ui.space_dopesheet.DOPESHEET_MT_key_transform

DOPESHEET_MT_marker: bl_ui.space_dopesheet.DOPESHEET_MT_marker

DOPESHEET_MT_select: bl_ui.space_dopesheet.DOPESHEET_MT_select

DOPESHEET_MT_snap_pie: bl_ui.space_dopesheet.DOPESHEET_MT_snap_pie

DOPESHEET_MT_view: bl_ui.space_dopesheet.DOPESHEET_MT_view

DOPESHEET_MT_view_pie: bl_ui.space_dopesheet.DOPESHEET_MT_view_pie

DOPESHEET_PT_action: bl_ui.space_dopesheet.DOPESHEET_PT_action

DOPESHEET_PT_custom_props_action: bl_ui.space_dopesheet.DOPESHEET_PT_custom_props_action

DOPESHEET_PT_filters: bl_ui.space_dopesheet.DOPESHEET_PT_filters

DOPESHEET_PT_gpencil_layer_adjustments: bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_adjustments

DOPESHEET_PT_gpencil_layer_display: bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_display

DOPESHEET_PT_gpencil_layer_masks: bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_masks

DOPESHEET_PT_gpencil_layer_relations: bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_relations

DOPESHEET_PT_gpencil_layer_transform: bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_transform

DOPESHEET_PT_gpencil_mode: bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_mode

DOPESHEET_PT_proportional_edit: bl_ui.space_dopesheet.DOPESHEET_PT_proportional_edit

DOPESHEET_PT_snapping: bl_ui.space_dopesheet.DOPESHEET_PT_snapping

EEVEE_MATERIAL_PT_context_material: bl_ui.properties_material.EEVEE_MATERIAL_PT_context_material

EEVEE_MATERIAL_PT_displacement: bl_ui.properties_material.EEVEE_MATERIAL_PT_displacement

EEVEE_MATERIAL_PT_settings: bl_ui.properties_material.EEVEE_MATERIAL_PT_settings

EEVEE_MATERIAL_PT_surface: bl_ui.properties_material.EEVEE_MATERIAL_PT_surface

EEVEE_MATERIAL_PT_viewport_settings: bl_ui.properties_material.EEVEE_MATERIAL_PT_viewport_settings

EEVEE_MATERIAL_PT_volume: bl_ui.properties_material.EEVEE_MATERIAL_PT_volume

EEVEE_NEXT_MATERIAL_PT_settings: bl_ui.properties_material.EEVEE_NEXT_MATERIAL_PT_settings

EEVEE_NEXT_MATERIAL_PT_settings_surface: bl_ui.properties_material.EEVEE_NEXT_MATERIAL_PT_settings_surface

EEVEE_NEXT_MATERIAL_PT_settings_volume: bl_ui.properties_material.EEVEE_NEXT_MATERIAL_PT_settings_volume

EEVEE_WORLD_PT_mist: bl_ui.properties_world.EEVEE_WORLD_PT_mist

EEVEE_WORLD_PT_probe: bl_ui.properties_world.EEVEE_WORLD_PT_probe

EEVEE_WORLD_PT_surface: bl_ui.properties_world.EEVEE_WORLD_PT_surface

EEVEE_WORLD_PT_volume: bl_ui.properties_world.EEVEE_WORLD_PT_volume

FILEBROWSER_HT_header: bl_ui.space_filebrowser.FILEBROWSER_HT_header

FILEBROWSER_MT_bookmarks_context_menu: bl_ui.space_filebrowser.FILEBROWSER_MT_bookmarks_context_menu

FILEBROWSER_MT_bookmarks_recents_specials_menu: bl_ui.space_filebrowser.FILEBROWSER_MT_bookmarks_recents_specials_menu

FILEBROWSER_MT_context_menu: bl_ui.space_filebrowser.FILEBROWSER_MT_context_menu

FILEBROWSER_MT_editor_menus: bl_ui.space_filebrowser.FILEBROWSER_MT_editor_menus

FILEBROWSER_MT_select: bl_ui.space_filebrowser.FILEBROWSER_MT_select

FILEBROWSER_MT_view: bl_ui.space_filebrowser.FILEBROWSER_MT_view

FILEBROWSER_MT_view_pie: bl_ui.space_filebrowser.FILEBROWSER_MT_view_pie

FILEBROWSER_PT_advanced_filter: bl_ui.space_filebrowser.FILEBROWSER_PT_advanced_filter

FILEBROWSER_PT_bookmarks_favorites: bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_favorites

FILEBROWSER_PT_bookmarks_recents: bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_recents

FILEBROWSER_PT_bookmarks_system: bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_system

FILEBROWSER_PT_bookmarks_volumes: bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_volumes

FILEBROWSER_PT_directory_path: bl_ui.space_filebrowser.FILEBROWSER_PT_directory_path

FILEBROWSER_PT_display: bl_ui.space_filebrowser.FILEBROWSER_PT_display

FILEBROWSER_PT_filter: bl_ui.space_filebrowser.FILEBROWSER_PT_filter

FILEBROWSER_UL_dir: bl_ui.space_filebrowser.FILEBROWSER_UL_dir

FLUID_PT_presets: bl_ui.properties_physics_fluid.FLUID_PT_presets

GPENCIL_MT_cleanup: bl_ui.properties_grease_pencil_common.GPENCIL_MT_cleanup

GPENCIL_MT_gpencil_draw_delete: bl_ui.properties_grease_pencil_common.GPENCIL_MT_gpencil_draw_delete

GPENCIL_MT_gpencil_vertex_group: bl_ui.properties_data_gpencil.GPENCIL_MT_gpencil_vertex_group

GPENCIL_MT_layer_active: bl_ui.properties_grease_pencil_common.GPENCIL_MT_layer_active

GPENCIL_MT_layer_context_menu: bl_ui.properties_data_gpencil.GPENCIL_MT_layer_context_menu

GPENCIL_MT_layer_mask_menu: bl_ui.properties_grease_pencil_common.GPENCIL_MT_layer_mask_menu

GPENCIL_MT_material_active: bl_ui.properties_grease_pencil_common.GPENCIL_MT_material_active

GPENCIL_MT_material_context_menu: bl_ui.properties_material_gpencil.GPENCIL_MT_material_context_menu

GPENCIL_MT_move_to_layer: bl_ui.properties_grease_pencil_common.GPENCIL_MT_move_to_layer

GPENCIL_MT_snap: bl_ui.properties_grease_pencil_common.GPENCIL_MT_snap

GPENCIL_MT_snap_pie: bl_ui.properties_grease_pencil_common.GPENCIL_MT_snap_pie

GPENCIL_UL_annotation_layer: bl_ui.properties_grease_pencil_common.GPENCIL_UL_annotation_layer

GPENCIL_UL_layer: bl_ui.properties_grease_pencil_common.GPENCIL_UL_layer

GPENCIL_UL_masks: bl_ui.properties_grease_pencil_common.GPENCIL_UL_masks

GPENCIL_UL_matslots: bl_ui.properties_material_gpencil.GPENCIL_UL_matslots

GPENCIL_UL_vgroups: bl_ui.properties_data_gpencil.GPENCIL_UL_vgroups

GRAPH_HT_header: bl_ui.space_graph.GRAPH_HT_header

GRAPH_MT_channel: bl_ui.space_graph.GRAPH_MT_channel

GRAPH_MT_context_menu: bl_ui.space_graph.GRAPH_MT_context_menu

GRAPH_MT_delete: bl_ui.space_graph.GRAPH_MT_delete

GRAPH_MT_editor_menus: bl_ui.space_graph.GRAPH_MT_editor_menus

GRAPH_MT_key: bl_ui.space_graph.GRAPH_MT_key

GRAPH_MT_key_blending: bl_ui.space_graph.GRAPH_MT_key_blending

GRAPH_MT_key_density: bl_ui.space_graph.GRAPH_MT_key_density

GRAPH_MT_key_smoothing: bl_ui.space_graph.GRAPH_MT_key_smoothing

GRAPH_MT_key_snap: bl_ui.space_graph.GRAPH_MT_key_snap

GRAPH_MT_key_transform: bl_ui.space_graph.GRAPH_MT_key_transform

GRAPH_MT_marker: bl_ui.space_graph.GRAPH_MT_marker

GRAPH_MT_pivot_pie: bl_ui.space_graph.GRAPH_MT_pivot_pie

GRAPH_MT_select: bl_ui.space_graph.GRAPH_MT_select

GRAPH_MT_snap_pie: bl_ui.space_graph.GRAPH_MT_snap_pie

GRAPH_MT_view: bl_ui.space_graph.GRAPH_MT_view

GRAPH_MT_view_pie: bl_ui.space_graph.GRAPH_MT_view_pie

GRAPH_PT_filters: bl_ui.space_graph.GRAPH_PT_filters

GRAPH_PT_proportional_edit: bl_ui.space_graph.GRAPH_PT_proportional_edit

GRAPH_PT_snapping: bl_ui.space_graph.GRAPH_PT_snapping

GREASE_PENCIL_MT_grease_pencil_add_layer_extra: bl_ui.properties_data_grease_pencil.GREASE_PENCIL_MT_grease_pencil_add_layer_extra

GREASE_PENCIL_MT_layer_active: bl_ui.properties_grease_pencil_common.GREASE_PENCIL_MT_layer_active

GREASE_PENCIL_MT_move_to_layer: bl_ui.properties_grease_pencil_common.GREASE_PENCIL_MT_move_to_layer

IMAGE_HT_header: bl_ui.space_image.IMAGE_HT_header

IMAGE_HT_tool_header: bl_ui.space_image.IMAGE_HT_tool_header

IMAGE_MT_editor_menus: bl_ui.space_image.IMAGE_MT_editor_menus

IMAGE_MT_image: bl_ui.space_image.IMAGE_MT_image

IMAGE_MT_image_invert: bl_ui.space_image.IMAGE_MT_image_invert

IMAGE_MT_image_transform: bl_ui.space_image.IMAGE_MT_image_transform

IMAGE_MT_mask_context_menu: bl_ui.space_image.IMAGE_MT_mask_context_menu

IMAGE_MT_pivot_pie: bl_ui.space_image.IMAGE_MT_pivot_pie

IMAGE_MT_select: bl_ui.space_image.IMAGE_MT_select

IMAGE_MT_select_linked: bl_ui.space_image.IMAGE_MT_select_linked

IMAGE_MT_uvs: bl_ui.space_image.IMAGE_MT_uvs

IMAGE_MT_uvs_align: bl_ui.space_image.IMAGE_MT_uvs_align

IMAGE_MT_uvs_context_menu: bl_ui.space_image.IMAGE_MT_uvs_context_menu

IMAGE_MT_uvs_merge: bl_ui.space_image.IMAGE_MT_uvs_merge

IMAGE_MT_uvs_mirror: bl_ui.space_image.IMAGE_MT_uvs_mirror

IMAGE_MT_uvs_select_mode: bl_ui.space_image.IMAGE_MT_uvs_select_mode

IMAGE_MT_uvs_showhide: bl_ui.space_image.IMAGE_MT_uvs_showhide

IMAGE_MT_uvs_snap: bl_ui.space_image.IMAGE_MT_uvs_snap

IMAGE_MT_uvs_snap_pie: bl_ui.space_image.IMAGE_MT_uvs_snap_pie

IMAGE_MT_uvs_split: bl_ui.space_image.IMAGE_MT_uvs_split

IMAGE_MT_uvs_transform: bl_ui.space_image.IMAGE_MT_uvs_transform

IMAGE_MT_uvs_unwrap: bl_ui.space_image.IMAGE_MT_uvs_unwrap

IMAGE_MT_view: bl_ui.space_image.IMAGE_MT_view

IMAGE_MT_view_pie: bl_ui.space_image.IMAGE_MT_view_pie

IMAGE_MT_view_zoom: bl_ui.space_image.IMAGE_MT_view_zoom

IMAGE_PT_active_mask_point: bl_ui.space_image.IMAGE_PT_active_mask_point

IMAGE_PT_active_mask_spline: bl_ui.space_image.IMAGE_PT_active_mask_spline

IMAGE_PT_active_tool: bl_ui.space_image.IMAGE_PT_active_tool

IMAGE_PT_annotation: bl_ui.space_image.IMAGE_PT_annotation

IMAGE_PT_gizmo_display: bl_ui.space_image.IMAGE_PT_gizmo_display

IMAGE_PT_image_properties: bl_ui.space_image.IMAGE_PT_image_properties

IMAGE_PT_mask: bl_ui.space_image.IMAGE_PT_mask

IMAGE_PT_mask_display: bl_ui.space_image.IMAGE_PT_mask_display

IMAGE_PT_mask_layers: bl_ui.space_image.IMAGE_PT_mask_layers

IMAGE_PT_overlay: bl_ui.space_image.IMAGE_PT_overlay

IMAGE_PT_overlay_guides: bl_ui.space_image.IMAGE_PT_overlay_guides

IMAGE_PT_overlay_image: bl_ui.space_image.IMAGE_PT_overlay_image

IMAGE_PT_overlay_texture_paint: bl_ui.space_image.IMAGE_PT_overlay_texture_paint

IMAGE_PT_overlay_uv_edit: bl_ui.space_image.IMAGE_PT_overlay_uv_edit

IMAGE_PT_overlay_uv_edit_geometry: bl_ui.space_image.IMAGE_PT_overlay_uv_edit_geometry

IMAGE_PT_paint_clone: bl_ui.space_image.IMAGE_PT_paint_clone

IMAGE_PT_paint_color: bl_ui.space_image.IMAGE_PT_paint_color

IMAGE_PT_paint_curve: bl_ui.space_image.IMAGE_PT_paint_curve

IMAGE_PT_paint_select: bl_ui.space_image.IMAGE_PT_paint_select

IMAGE_PT_paint_settings: bl_ui.space_image.IMAGE_PT_paint_settings

IMAGE_PT_paint_settings_advanced: bl_ui.space_image.IMAGE_PT_paint_settings_advanced

IMAGE_PT_paint_stroke: bl_ui.space_image.IMAGE_PT_paint_stroke

IMAGE_PT_paint_stroke_smooth_stroke: bl_ui.space_image.IMAGE_PT_paint_stroke_smooth_stroke

IMAGE_PT_paint_swatches: bl_ui.space_image.IMAGE_PT_paint_swatches

IMAGE_PT_proportional_edit: bl_ui.space_image.IMAGE_PT_proportional_edit

IMAGE_PT_render_slots: bl_ui.space_image.IMAGE_PT_render_slots

IMAGE_PT_sample_line: bl_ui.space_image.IMAGE_PT_sample_line

IMAGE_PT_scope_sample: bl_ui.space_image.IMAGE_PT_scope_sample

IMAGE_PT_snapping: bl_ui.space_image.IMAGE_PT_snapping

IMAGE_PT_tools_active: bl_ui.space_toolsystem_toolbar.IMAGE_PT_tools_active

IMAGE_PT_tools_brush_display: bl_ui.space_image.IMAGE_PT_tools_brush_display

IMAGE_PT_tools_brush_texture: bl_ui.space_image.IMAGE_PT_tools_brush_texture

IMAGE_PT_tools_imagepaint_symmetry: bl_ui.space_image.IMAGE_PT_tools_imagepaint_symmetry

IMAGE_PT_tools_mask_texture: bl_ui.space_image.IMAGE_PT_tools_mask_texture

IMAGE_PT_udim_tiles: bl_ui.space_image.IMAGE_PT_udim_tiles

IMAGE_PT_uv_cursor: bl_ui.space_image.IMAGE_PT_uv_cursor

IMAGE_PT_uv_sculpt_brush_select: bl_ui.space_image.IMAGE_PT_uv_sculpt_brush_select

IMAGE_PT_uv_sculpt_brush_settings: bl_ui.space_image.IMAGE_PT_uv_sculpt_brush_settings

IMAGE_PT_uv_sculpt_curve: bl_ui.space_image.IMAGE_PT_uv_sculpt_curve

IMAGE_PT_uv_sculpt_options: bl_ui.space_image.IMAGE_PT_uv_sculpt_options

IMAGE_PT_view_display: bl_ui.space_image.IMAGE_PT_view_display

IMAGE_PT_view_histogram: bl_ui.space_image.IMAGE_PT_view_histogram

IMAGE_PT_view_vectorscope: bl_ui.space_image.IMAGE_PT_view_vectorscope

IMAGE_PT_view_waveform: bl_ui.space_image.IMAGE_PT_view_waveform

IMAGE_UL_render_slots: bl_ui.space_image.IMAGE_UL_render_slots

IMAGE_UL_udim_tiles: bl_ui.space_image.IMAGE_UL_udim_tiles

INFO_HT_header: bl_ui.space_info.INFO_HT_header

INFO_MT_area: bl_ui.space_info.INFO_MT_area

INFO_MT_context_menu: bl_ui.space_info.INFO_MT_context_menu

INFO_MT_editor_menus: bl_ui.space_info.INFO_MT_editor_menus

INFO_MT_info: bl_ui.space_info.INFO_MT_info

INFO_MT_view: bl_ui.space_info.INFO_MT_view

MASK_MT_add: bl_ui.properties_mask_common.MASK_MT_add

MASK_MT_animation: bl_ui.properties_mask_common.MASK_MT_animation

MASK_MT_mask: bl_ui.properties_mask_common.MASK_MT_mask

MASK_MT_select: bl_ui.properties_mask_common.MASK_MT_select

MASK_MT_transform: bl_ui.properties_mask_common.MASK_MT_transform

MASK_MT_visibility: bl_ui.properties_mask_common.MASK_MT_visibility

MASK_UL_layers: bl_ui.properties_mask_common.MASK_UL_layers

MATERIAL_MT_context_menu: bl_ui.properties_material.MATERIAL_MT_context_menu

MATERIAL_PT_custom_props: bl_ui.properties_material.MATERIAL_PT_custom_props

MATERIAL_PT_freestyle_line: bl_ui.properties_freestyle.MATERIAL_PT_freestyle_line

MATERIAL_PT_gpencil_custom_props: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_custom_props

MATERIAL_PT_gpencil_fillcolor: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_fillcolor

MATERIAL_PT_gpencil_material_presets: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_material_presets

MATERIAL_PT_gpencil_preview: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_preview

MATERIAL_PT_gpencil_settings: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_settings

MATERIAL_PT_gpencil_slots: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_slots

MATERIAL_PT_gpencil_strokecolor: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_strokecolor

MATERIAL_PT_gpencil_surface: bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_surface

MATERIAL_PT_lineart: bl_ui.properties_material.MATERIAL_PT_lineart

MATERIAL_PT_preview: bl_ui.properties_material.MATERIAL_PT_preview

MATERIAL_PT_viewport: bl_ui.properties_material.MATERIAL_PT_viewport

MATERIAL_UL_matslots: bl_ui.properties_material.MATERIAL_UL_matslots

MESH_MT_attribute_context_menu: bl_ui.properties_data_mesh.MESH_MT_attribute_context_menu

MESH_MT_color_attribute_context_menu: bl_ui.properties_data_mesh.MESH_MT_color_attribute_context_menu

MESH_MT_shape_key_context_menu: bl_ui.properties_data_mesh.MESH_MT_shape_key_context_menu

MESH_MT_vertex_group_context_menu: bl_ui.properties_data_mesh.MESH_MT_vertex_group_context_menu

MESH_UL_attributes: bl_ui.properties_data_mesh.MESH_UL_attributes

MESH_UL_color_attributes: bl_ui.properties_data_mesh.MESH_UL_color_attributes

MESH_UL_color_attributes_selector: bl_ui.properties_data_mesh.MESH_UL_color_attributes_selector

MESH_UL_shape_keys: bl_ui.properties_data_mesh.MESH_UL_shape_keys

MESH_UL_uvmaps: bl_ui.properties_data_mesh.MESH_UL_uvmaps

MESH_UL_vgroups: bl_ui.properties_data_mesh.MESH_UL_vgroups

NLA_HT_header: bl_ui.space_nla.NLA_HT_header

NLA_MT_add: bl_ui.space_nla.NLA_MT_add

NLA_MT_channel_context_menu: bl_ui.space_nla.NLA_MT_channel_context_menu

NLA_MT_context_menu: bl_ui.space_nla.NLA_MT_context_menu

NLA_MT_editor_menus: bl_ui.space_nla.NLA_MT_editor_menus

NLA_MT_marker: bl_ui.space_nla.NLA_MT_marker

NLA_MT_marker_select: bl_ui.space_nla.NLA_MT_marker_select

NLA_MT_select: bl_ui.space_nla.NLA_MT_select

NLA_MT_snap_pie: bl_ui.space_nla.NLA_MT_snap_pie

NLA_MT_strips: bl_ui.space_nla.NLA_MT_strips

NLA_MT_strips_transform: bl_ui.space_nla.NLA_MT_strips_transform

NLA_MT_tracks: bl_ui.space_nla.NLA_MT_tracks

NLA_MT_view: bl_ui.space_nla.NLA_MT_view

NLA_MT_view_pie: bl_ui.space_nla.NLA_MT_view_pie

NLA_OT_bake: bl_operators.anim.NLA_OT_bake

NLA_PT_action: bl_ui.space_nla.NLA_PT_action

NLA_PT_filters: bl_ui.space_nla.NLA_PT_filters

NLA_PT_snapping: bl_ui.space_nla.NLA_PT_snapping

NODE_HT_header: bl_ui.space_node.NODE_HT_header

NODE_MT_add: bl_ui.space_node.NODE_MT_add

NODE_MT_category_GEO_GROUP: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_GROUP

NODE_MT_category_GEO_OUTPUT: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_OUTPUT

NODE_MT_category_GEO_POINT: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_POINT

NODE_MT_category_GEO_TEXT: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_TEXT

NODE_MT_category_GEO_TEXTURE: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_TEXTURE

NODE_MT_category_GEO_UTILITIES: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UTILITIES

NODE_MT_category_GEO_UTILITIES_DEPRECATED: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UTILITIES_DEPRECATED

NODE_MT_category_GEO_UTILITIES_FIELD: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UTILITIES_FIELD

NODE_MT_category_GEO_UTILITIES_MATH: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UTILITIES_MATH

NODE_MT_category_GEO_UTILITIES_ROTATION: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UTILITIES_ROTATION

NODE_MT_category_GEO_UV: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UV

NODE_MT_category_GEO_VECTOR: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_VECTOR

NODE_MT_category_GEO_VOLUME: bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_VOLUME

NODE_MT_category_PRIMITIVES_MESH: bl_ui.node_add_menu_geometry.NODE_MT_category_PRIMITIVES_MESH

NODE_MT_category_compositor_color: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_color

NODE_MT_category_compositor_color_adjust: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_color_adjust

NODE_MT_category_compositor_color_mix: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_color_mix

NODE_MT_category_compositor_filter: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_filter

NODE_MT_category_compositor_filter_blur: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_filter_blur

NODE_MT_category_compositor_group: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_group

NODE_MT_category_compositor_input: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_input

NODE_MT_category_compositor_input_constant: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_input_constant

NODE_MT_category_compositor_input_scene: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_input_scene

NODE_MT_category_compositor_keying: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_keying

NODE_MT_category_compositor_mask: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_mask

NODE_MT_category_compositor_output: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_output

NODE_MT_category_compositor_tracking: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_tracking

NODE_MT_category_compositor_transform: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_transform

NODE_MT_category_compositor_utilities: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_utilities

NODE_MT_category_compositor_vector: bl_ui.node_add_menu_compositor.NODE_MT_category_compositor_vector

NODE_MT_category_layout: bl_ui.node_add_menu.NODE_MT_category_layout

NODE_MT_category_shader_color: bl_ui.node_add_menu_shader.NODE_MT_category_shader_color

NODE_MT_category_shader_converter: bl_ui.node_add_menu_shader.NODE_MT_category_shader_converter

NODE_MT_category_shader_group: bl_ui.node_add_menu_shader.NODE_MT_category_shader_group

NODE_MT_category_shader_input: bl_ui.node_add_menu_shader.NODE_MT_category_shader_input

NODE_MT_category_shader_output: bl_ui.node_add_menu_shader.NODE_MT_category_shader_output

NODE_MT_category_shader_script: bl_ui.node_add_menu_shader.NODE_MT_category_shader_script

NODE_MT_category_shader_shader: bl_ui.node_add_menu_shader.NODE_MT_category_shader_shader

NODE_MT_category_shader_texture: bl_ui.node_add_menu_shader.NODE_MT_category_shader_texture

NODE_MT_category_shader_vector: bl_ui.node_add_menu_shader.NODE_MT_category_shader_vector

NODE_MT_category_simulation: bl_ui.node_add_menu_geometry.NODE_MT_category_simulation

NODE_MT_category_texture_color: bl_ui.node_add_menu_texture.NODE_MT_category_texture_color

NODE_MT_category_texture_converter: bl_ui.node_add_menu_texture.NODE_MT_category_texture_converter

NODE_MT_category_texture_distort: bl_ui.node_add_menu_texture.NODE_MT_category_texture_distort

NODE_MT_category_texture_group: bl_ui.node_add_menu_texture.NODE_MT_category_texture_group

NODE_MT_category_texture_input: bl_ui.node_add_menu_texture.NODE_MT_category_texture_input

NODE_MT_category_texture_output: bl_ui.node_add_menu_texture.NODE_MT_category_texture_output

NODE_MT_category_texture_pattern: bl_ui.node_add_menu_texture.NODE_MT_category_texture_pattern

NODE_MT_category_texture_texture: bl_ui.node_add_menu_texture.NODE_MT_category_texture_texture

NODE_MT_compositor_node_add_all: bl_ui.node_add_menu_compositor.NODE_MT_compositor_node_add_all

NODE_MT_context_menu: bl_ui.space_node.NODE_MT_context_menu

NODE_MT_context_menu_select_menu: bl_ui.space_node.NODE_MT_context_menu_select_menu

NODE_MT_context_menu_show_hide_menu: bl_ui.space_node.NODE_MT_context_menu_show_hide_menu

NODE_MT_editor_menus: bl_ui.space_node.NODE_MT_editor_menus

NODE_MT_geometry_node_GEO_ATTRIBUTE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_ATTRIBUTE

NODE_MT_geometry_node_GEO_COLOR: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_COLOR

NODE_MT_geometry_node_GEO_CURVE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_CURVE

NODE_MT_geometry_node_GEO_CURVE_OPERATIONS: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_CURVE_OPERATIONS

NODE_MT_geometry_node_GEO_CURVE_READ: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_CURVE_READ

NODE_MT_geometry_node_GEO_CURVE_SAMPLE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_CURVE_SAMPLE

NODE_MT_geometry_node_GEO_CURVE_WRITE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_CURVE_WRITE

NODE_MT_geometry_node_GEO_GEOMETRY: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_GEOMETRY

NODE_MT_geometry_node_GEO_GEOMETRY_OPERATIONS: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_GEOMETRY_OPERATIONS

NODE_MT_geometry_node_GEO_GEOMETRY_READ: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_GEOMETRY_READ

NODE_MT_geometry_node_GEO_GEOMETRY_SAMPLE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_GEOMETRY_SAMPLE

NODE_MT_geometry_node_GEO_GEOMETRY_WRITE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_GEOMETRY_WRITE

NODE_MT_geometry_node_GEO_INPUT: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_INPUT

NODE_MT_geometry_node_GEO_INPUT_CONSTANT: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_INPUT_CONSTANT

NODE_MT_geometry_node_GEO_INPUT_GROUP: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_INPUT_GROUP

NODE_MT_geometry_node_GEO_INPUT_SCENE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_INPUT_SCENE

NODE_MT_geometry_node_GEO_INSTANCE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_INSTANCE

NODE_MT_geometry_node_GEO_MATERIAL: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MATERIAL

NODE_MT_geometry_node_GEO_MESH: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MESH

NODE_MT_geometry_node_GEO_MESH_OPERATIONS: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MESH_OPERATIONS

NODE_MT_geometry_node_GEO_MESH_READ: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MESH_READ

NODE_MT_geometry_node_GEO_MESH_SAMPLE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MESH_SAMPLE

NODE_MT_geometry_node_GEO_MESH_WRITE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MESH_WRITE

NODE_MT_geometry_node_GEO_PRIMITIVES_CURVE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_PRIMITIVES_CURVE

NODE_MT_geometry_node_GEO_VOLUME_OPERATIONS: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_VOLUME_OPERATIONS

NODE_MT_geometry_node_GEO_VOLUME_PRIMITIVES: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_VOLUME_PRIMITIVES

NODE_MT_geometry_node_GEO_VOLUME_READ: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_VOLUME_READ

NODE_MT_geometry_node_GEO_VOLUME_WRITE: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_VOLUME_WRITE

NODE_MT_geometry_node_add_all: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_add_all

NODE_MT_geometry_node_curve_topology: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_curve_topology

NODE_MT_geometry_node_mesh_topology: bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_mesh_topology

NODE_MT_node: bl_ui.space_node.NODE_MT_node

NODE_MT_node_color_context_menu: bl_ui.space_node.NODE_MT_node_color_context_menu

NODE_MT_node_tree_interface_context_menu: bl_ui.space_node.NODE_MT_node_tree_interface_context_menu

NODE_MT_select: bl_ui.space_node.NODE_MT_select

NODE_MT_shader_node_add_all: bl_ui.node_add_menu_shader.NODE_MT_shader_node_add_all

NODE_MT_texture_node_add_all: bl_ui.node_add_menu_texture.NODE_MT_texture_node_add_all

NODE_MT_view: bl_ui.space_node.NODE_MT_view

NODE_MT_view_pie: bl_ui.space_node.NODE_MT_view_pie

NODE_OT_add_node: bl_operators.node.NODE_OT_add_node

NODE_OT_add_repeat_zone: bl_operators.node.NODE_OT_add_repeat_zone

NODE_OT_add_simulation_zone: bl_operators.node.NODE_OT_add_simulation_zone

NODE_OT_collapse_hide_unused_toggle: bl_operators.node.NODE_OT_collapse_hide_unused_toggle

NODE_OT_enum_definition_item_add: bl_operators.node.NODE_OT_enum_definition_item_add

NODE_OT_enum_definition_item_move: bl_operators.node.NODE_OT_enum_definition_item_move

NODE_OT_enum_definition_item_remove: bl_operators.node.NODE_OT_enum_definition_item_remove

NODE_OT_interface_item_duplicate: bl_operators.node.NODE_OT_interface_item_duplicate

NODE_OT_interface_item_new: bl_operators.node.NODE_OT_interface_item_new

NODE_OT_interface_item_remove: bl_operators.node.NODE_OT_interface_item_remove

NODE_OT_tree_path_parent: bl_operators.node.NODE_OT_tree_path_parent

NODE_PT_active_node_color: bl_ui.space_node.NODE_PT_active_node_color

NODE_PT_active_node_generic: bl_ui.space_node.NODE_PT_active_node_generic

NODE_PT_active_node_properties: bl_ui.space_node.NODE_PT_active_node_properties

NODE_PT_active_tool: bl_ui.space_node.NODE_PT_active_tool

NODE_PT_annotation: bl_ui.space_node.NODE_PT_annotation

NODE_PT_backdrop: bl_ui.space_node.NODE_PT_backdrop

NODE_PT_bake_node_items: bl_ui.space_node.NODE_PT_bake_node_items

NODE_PT_geometry_node_tool_mode: bl_ui.space_node.NODE_PT_geometry_node_tool_mode

NODE_PT_geometry_node_tool_object_types: bl_ui.space_node.NODE_PT_geometry_node_tool_object_types

NODE_PT_index_switch_node_items: bl_ui.space_node.NODE_PT_index_switch_node_items

NODE_PT_material_slots: bl_ui.space_node.NODE_PT_material_slots

NODE_PT_menu_switch_items: bl_ui.space_node.NODE_PT_menu_switch_items

NODE_PT_node_color_presets: bl_ui.space_node.NODE_PT_node_color_presets

NODE_PT_node_tree_interface: bl_ui.space_node.NODE_PT_node_tree_interface

NODE_PT_node_tree_properties: bl_ui.space_node.NODE_PT_node_tree_properties

NODE_PT_overlay: bl_ui.space_node.NODE_PT_overlay

NODE_PT_quality: bl_ui.space_node.NODE_PT_quality

NODE_PT_repeat_zone_items: bl_ui.space_node.NODE_PT_repeat_zone_items

NODE_PT_simulation_zone_items: bl_ui.space_node.NODE_PT_simulation_zone_items

NODE_PT_texture_mapping: bl_ui.space_node.NODE_PT_texture_mapping

NODE_PT_tools_active: bl_ui.space_toolsystem_toolbar.NODE_PT_tools_active

NODE_UL_bake_node_items: bl_ui.space_node.NODE_UL_bake_node_items

NODE_UL_enum_definition_items: bl_ui.space_node.NODE_UL_enum_definition_items

NODE_UL_repeat_zone_items: bl_ui.space_node.NODE_UL_repeat_zone_items

NODE_UL_simulation_zone_items: bl_ui.space_node.NODE_UL_simulation_zone_items

OBJECT_MT_modifier_add: bl_ui.properties_data_modifier.OBJECT_MT_modifier_add

OBJECT_MT_modifier_add_color: bl_ui.properties_data_modifier.OBJECT_MT_modifier_add_color

OBJECT_MT_modifier_add_deform: bl_ui.properties_data_modifier.OBJECT_MT_modifier_add_deform

OBJECT_MT_modifier_add_edit: bl_ui.properties_data_modifier.OBJECT_MT_modifier_add_edit

OBJECT_MT_modifier_add_generate: bl_ui.properties_data_modifier.OBJECT_MT_modifier_add_generate

OBJECT_MT_modifier_add_physics: bl_ui.properties_data_modifier.OBJECT_MT_modifier_add_physics

OBJECT_OT_assign_property_defaults: bl_operators.object.OBJECT_OT_assign_property_defaults

OBJECT_PT_bActionConstraint: bl_ui.properties_constraint.OBJECT_PT_bActionConstraint

OBJECT_PT_bActionConstraint_action: bl_ui.properties_constraint.OBJECT_PT_bActionConstraint_action

OBJECT_PT_bActionConstraint_target: bl_ui.properties_constraint.OBJECT_PT_bActionConstraint_target

OBJECT_PT_bArmatureConstraint: bl_ui.properties_constraint.OBJECT_PT_bArmatureConstraint

OBJECT_PT_bArmatureConstraint_bones: bl_ui.properties_constraint.OBJECT_PT_bArmatureConstraint_bones

OBJECT_PT_bCameraSolverConstraint: bl_ui.properties_constraint.OBJECT_PT_bCameraSolverConstraint

OBJECT_PT_bChildOfConstraint: bl_ui.properties_constraint.OBJECT_PT_bChildOfConstraint

OBJECT_PT_bClampToConstraint: bl_ui.properties_constraint.OBJECT_PT_bClampToConstraint

OBJECT_PT_bDampTrackConstraint: bl_ui.properties_constraint.OBJECT_PT_bDampTrackConstraint

OBJECT_PT_bDistLimitConstraint: bl_ui.properties_constraint.OBJECT_PT_bDistLimitConstraint

OBJECT_PT_bFollowPathConstraint: bl_ui.properties_constraint.OBJECT_PT_bFollowPathConstraint

OBJECT_PT_bFollowTrackConstraint: bl_ui.properties_constraint.OBJECT_PT_bFollowTrackConstraint

OBJECT_PT_bKinematicConstraint: bl_ui.properties_constraint.OBJECT_PT_bKinematicConstraint

OBJECT_PT_bLocLimitConstraint: bl_ui.properties_constraint.OBJECT_PT_bLocLimitConstraint

OBJECT_PT_bLocateLikeConstraint: bl_ui.properties_constraint.OBJECT_PT_bLocateLikeConstraint

OBJECT_PT_bLockTrackConstraint: bl_ui.properties_constraint.OBJECT_PT_bLockTrackConstraint

OBJECT_PT_bMinMaxConstraint: bl_ui.properties_constraint.OBJECT_PT_bMinMaxConstraint

OBJECT_PT_bObjectSolverConstraint: bl_ui.properties_constraint.OBJECT_PT_bObjectSolverConstraint

OBJECT_PT_bPivotConstraint: bl_ui.properties_constraint.OBJECT_PT_bPivotConstraint

OBJECT_PT_bPythonConstraint: bl_ui.properties_constraint.OBJECT_PT_bPythonConstraint

OBJECT_PT_bRotLimitConstraint: bl_ui.properties_constraint.OBJECT_PT_bRotLimitConstraint

OBJECT_PT_bRotateLikeConstraint: bl_ui.properties_constraint.OBJECT_PT_bRotateLikeConstraint

OBJECT_PT_bSameVolumeConstraint: bl_ui.properties_constraint.OBJECT_PT_bSameVolumeConstraint

OBJECT_PT_bShrinkwrapConstraint: bl_ui.properties_constraint.OBJECT_PT_bShrinkwrapConstraint

OBJECT_PT_bSizeLikeConstraint: bl_ui.properties_constraint.OBJECT_PT_bSizeLikeConstraint

OBJECT_PT_bSizeLimitConstraint: bl_ui.properties_constraint.OBJECT_PT_bSizeLimitConstraint

OBJECT_PT_bStretchToConstraint: bl_ui.properties_constraint.OBJECT_PT_bStretchToConstraint

OBJECT_PT_bTrackToConstraint: bl_ui.properties_constraint.OBJECT_PT_bTrackToConstraint

OBJECT_PT_bTransLikeConstraint: bl_ui.properties_constraint.OBJECT_PT_bTransLikeConstraint

OBJECT_PT_bTransformCacheConstraint: bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint

OBJECT_PT_bTransformCacheConstraint_layers: bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_layers

OBJECT_PT_bTransformCacheConstraint_procedural: bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_procedural

OBJECT_PT_bTransformCacheConstraint_time: bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_time

OBJECT_PT_bTransformCacheConstraint_velocity: bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_velocity

OBJECT_PT_bTransformConstraint: bl_ui.properties_constraint.OBJECT_PT_bTransformConstraint

OBJECT_PT_bTransformConstraint_destination: bl_ui.properties_constraint.OBJECT_PT_bTransformConstraint_destination

OBJECT_PT_bTransformConstraint_source: bl_ui.properties_constraint.OBJECT_PT_bTransformConstraint_source

OBJECT_PT_collections: bl_ui.properties_object.OBJECT_PT_collections

OBJECT_PT_constraints: bl_ui.properties_constraint.OBJECT_PT_constraints

OBJECT_PT_context_object: bl_ui.properties_object.OBJECT_PT_context_object

OBJECT_PT_custom_props: bl_ui.properties_object.OBJECT_PT_custom_props

OBJECT_PT_delta_transform: bl_ui.properties_object.OBJECT_PT_delta_transform

OBJECT_PT_display: bl_ui.properties_object.OBJECT_PT_display

OBJECT_PT_instancing: bl_ui.properties_object.OBJECT_PT_instancing

OBJECT_PT_instancing_size: bl_ui.properties_object.OBJECT_PT_instancing_size

OBJECT_PT_lineart: bl_ui.properties_object.OBJECT_PT_lineart

OBJECT_PT_motion_paths: bl_ui.properties_object.OBJECT_PT_motion_paths

OBJECT_PT_motion_paths_display: bl_ui.properties_object.OBJECT_PT_motion_paths_display

OBJECT_PT_relations: bl_ui.properties_object.OBJECT_PT_relations

OBJECT_PT_transform: bl_ui.properties_object.OBJECT_PT_transform

OBJECT_PT_visibility: bl_ui.properties_object.OBJECT_PT_visibility

OUTLINER_HT_header: bl_ui.space_outliner.OUTLINER_HT_header

OUTLINER_MT_asset: bl_ui.space_outliner.OUTLINER_MT_asset

OUTLINER_MT_collection: bl_ui.space_outliner.OUTLINER_MT_collection

OUTLINER_MT_collection_new: bl_ui.space_outliner.OUTLINER_MT_collection_new

OUTLINER_MT_collection_view_layer: bl_ui.space_outliner.OUTLINER_MT_collection_view_layer

OUTLINER_MT_collection_visibility: bl_ui.space_outliner.OUTLINER_MT_collection_visibility

OUTLINER_MT_context_menu: bl_ui.space_outliner.OUTLINER_MT_context_menu

OUTLINER_MT_context_menu_view: bl_ui.space_outliner.OUTLINER_MT_context_menu_view

OUTLINER_MT_edit_datablocks: bl_ui.space_outliner.OUTLINER_MT_edit_datablocks

OUTLINER_MT_editor_menus: bl_ui.space_outliner.OUTLINER_MT_editor_menus

OUTLINER_MT_liboverride: bl_ui.space_outliner.OUTLINER_MT_liboverride

OUTLINER_MT_object: bl_ui.space_outliner.OUTLINER_MT_object

OUTLINER_MT_view_pie: bl_ui.space_outliner.OUTLINER_MT_view_pie

OUTLINER_PT_filter: bl_ui.space_outliner.OUTLINER_PT_filter

PARTICLE_MT_context_menu: bl_ui.properties_particle.PARTICLE_MT_context_menu

PARTICLE_PT_boidbrain: bl_ui.properties_particle.PARTICLE_PT_boidbrain

PARTICLE_PT_cache: bl_ui.properties_particle.PARTICLE_PT_cache

PARTICLE_PT_children: bl_ui.properties_particle.PARTICLE_PT_children

PARTICLE_PT_children_clumping: bl_ui.properties_particle.PARTICLE_PT_children_clumping

PARTICLE_PT_children_clumping_noise: bl_ui.properties_particle.PARTICLE_PT_children_clumping_noise

PARTICLE_PT_children_kink: bl_ui.properties_particle.PARTICLE_PT_children_kink

PARTICLE_PT_children_parting: bl_ui.properties_particle.PARTICLE_PT_children_parting

PARTICLE_PT_children_roughness: bl_ui.properties_particle.PARTICLE_PT_children_roughness

PARTICLE_PT_context_particles: bl_ui.properties_particle.PARTICLE_PT_context_particles

PARTICLE_PT_custom_props: bl_ui.properties_particle.PARTICLE_PT_custom_props

PARTICLE_PT_draw: bl_ui.properties_particle.PARTICLE_PT_draw

PARTICLE_PT_emission: bl_ui.properties_particle.PARTICLE_PT_emission

PARTICLE_PT_emission_source: bl_ui.properties_particle.PARTICLE_PT_emission_source

PARTICLE_PT_field_weights: bl_ui.properties_particle.PARTICLE_PT_field_weights

PARTICLE_PT_force_fields: bl_ui.properties_particle.PARTICLE_PT_force_fields

PARTICLE_PT_force_fields_type1: bl_ui.properties_particle.PARTICLE_PT_force_fields_type1

PARTICLE_PT_force_fields_type1_falloff: bl_ui.properties_particle.PARTICLE_PT_force_fields_type1_falloff

PARTICLE_PT_force_fields_type2: bl_ui.properties_particle.PARTICLE_PT_force_fields_type2

PARTICLE_PT_force_fields_type2_falloff: bl_ui.properties_particle.PARTICLE_PT_force_fields_type2_falloff

PARTICLE_PT_hair_dynamics: bl_ui.properties_particle.PARTICLE_PT_hair_dynamics

PARTICLE_PT_hair_dynamics_collision: bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_collision

PARTICLE_PT_hair_dynamics_presets: bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_presets

PARTICLE_PT_hair_dynamics_structure: bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_structure

PARTICLE_PT_hair_dynamics_volume: bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_volume

PARTICLE_PT_hair_shape: bl_ui.properties_particle.PARTICLE_PT_hair_shape

PARTICLE_PT_physics: bl_ui.properties_particle.PARTICLE_PT_physics

PARTICLE_PT_physics_boids_battle: bl_ui.properties_particle.PARTICLE_PT_physics_boids_battle

PARTICLE_PT_physics_boids_misc: bl_ui.properties_particle.PARTICLE_PT_physics_boids_misc

PARTICLE_PT_physics_boids_movement: bl_ui.properties_particle.PARTICLE_PT_physics_boids_movement

PARTICLE_PT_physics_deflection: bl_ui.properties_particle.PARTICLE_PT_physics_deflection

PARTICLE_PT_physics_fluid_advanced: bl_ui.properties_particle.PARTICLE_PT_physics_fluid_advanced

PARTICLE_PT_physics_fluid_interaction: bl_ui.properties_particle.PARTICLE_PT_physics_fluid_interaction

PARTICLE_PT_physics_fluid_springs: bl_ui.properties_particle.PARTICLE_PT_physics_fluid_springs

PARTICLE_PT_physics_fluid_springs_advanced: bl_ui.properties_particle.PARTICLE_PT_physics_fluid_springs_advanced

PARTICLE_PT_physics_fluid_springs_viscoelastic: bl_ui.properties_particle.PARTICLE_PT_physics_fluid_springs_viscoelastic

PARTICLE_PT_physics_forces: bl_ui.properties_particle.PARTICLE_PT_physics_forces

PARTICLE_PT_physics_integration: bl_ui.properties_particle.PARTICLE_PT_physics_integration

PARTICLE_PT_physics_relations: bl_ui.properties_particle.PARTICLE_PT_physics_relations

PARTICLE_PT_render: bl_ui.properties_particle.PARTICLE_PT_render

PARTICLE_PT_render_collection: bl_ui.properties_particle.PARTICLE_PT_render_collection

PARTICLE_PT_render_collection_use_count: bl_ui.properties_particle.PARTICLE_PT_render_collection_use_count

PARTICLE_PT_render_extra: bl_ui.properties_particle.PARTICLE_PT_render_extra

PARTICLE_PT_render_object: bl_ui.properties_particle.PARTICLE_PT_render_object

PARTICLE_PT_render_path: bl_ui.properties_particle.PARTICLE_PT_render_path

PARTICLE_PT_render_path_timing: bl_ui.properties_particle.PARTICLE_PT_render_path_timing

PARTICLE_PT_rotation: bl_ui.properties_particle.PARTICLE_PT_rotation

PARTICLE_PT_rotation_angular_velocity: bl_ui.properties_particle.PARTICLE_PT_rotation_angular_velocity

PARTICLE_PT_textures: bl_ui.properties_particle.PARTICLE_PT_textures

PARTICLE_PT_velocity: bl_ui.properties_particle.PARTICLE_PT_velocity

PARTICLE_PT_vertexgroups: bl_ui.properties_particle.PARTICLE_PT_vertexgroups

PARTICLE_UL_particle_systems: bl_ui.properties_particle.PARTICLE_UL_particle_systems

PHYSICS_PT_adaptive_domain: bl_ui.properties_physics_fluid.PHYSICS_PT_adaptive_domain

PHYSICS_PT_add: bl_ui.properties_physics_common.PHYSICS_PT_add

PHYSICS_PT_borders: bl_ui.properties_physics_fluid.PHYSICS_PT_borders

PHYSICS_PT_cache: bl_ui.properties_physics_fluid.PHYSICS_PT_cache

PHYSICS_PT_cloth: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth

PHYSICS_PT_cloth_cache: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_cache

PHYSICS_PT_cloth_collision: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_collision

PHYSICS_PT_cloth_damping: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_damping

PHYSICS_PT_cloth_field_weights: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_field_weights

PHYSICS_PT_cloth_internal_springs: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_internal_springs

PHYSICS_PT_cloth_object_collision: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_object_collision

PHYSICS_PT_cloth_physical_properties: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_physical_properties

PHYSICS_PT_cloth_pressure: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_pressure

PHYSICS_PT_cloth_property_weights: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_property_weights

PHYSICS_PT_cloth_self_collision: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_self_collision

PHYSICS_PT_cloth_shape: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_shape

PHYSICS_PT_cloth_stiffness: bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_stiffness

PHYSICS_PT_collections: bl_ui.properties_physics_fluid.PHYSICS_PT_collections

PHYSICS_PT_collision: bl_ui.properties_physics_field.PHYSICS_PT_collision

PHYSICS_PT_collision_particle: bl_ui.properties_physics_field.PHYSICS_PT_collision_particle

PHYSICS_PT_collision_softbody: bl_ui.properties_physics_field.PHYSICS_PT_collision_softbody

PHYSICS_PT_diffusion: bl_ui.properties_physics_fluid.PHYSICS_PT_diffusion

PHYSICS_PT_dp_brush_source: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_source

PHYSICS_PT_dp_brush_source_color_ramp: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_source_color_ramp

PHYSICS_PT_dp_brush_velocity: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_velocity

PHYSICS_PT_dp_brush_velocity_color_ramp: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_velocity_color_ramp

PHYSICS_PT_dp_brush_velocity_smudge: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_velocity_smudge

PHYSICS_PT_dp_brush_wave: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_wave

PHYSICS_PT_dp_cache: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_cache

PHYSICS_PT_dp_canvas_initial_color: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_initial_color

PHYSICS_PT_dp_canvas_output: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_output

PHYSICS_PT_dp_canvas_output_paintmaps: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_output_paintmaps

PHYSICS_PT_dp_canvas_output_wetmaps: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_output_wetmaps

PHYSICS_PT_dp_effects: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects

PHYSICS_PT_dp_effects_drip: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_drip

PHYSICS_PT_dp_effects_drip_weights: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_drip_weights

PHYSICS_PT_dp_effects_shrink: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_shrink

PHYSICS_PT_dp_effects_spread: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_spread

PHYSICS_PT_dp_surface_canvas: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_surface_canvas

PHYSICS_PT_dp_surface_canvas_paint_dissolve: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_surface_canvas_paint_dissolve

PHYSICS_PT_dp_surface_canvas_paint_dry: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_surface_canvas_paint_dry

PHYSICS_PT_dynamic_paint: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dynamic_paint

PHYSICS_PT_dynamic_paint_settings: bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dynamic_paint_settings

PHYSICS_PT_export: bl_ui.properties_physics_fluid.PHYSICS_PT_export

PHYSICS_PT_field: bl_ui.properties_physics_field.PHYSICS_PT_field

PHYSICS_PT_field_falloff: bl_ui.properties_physics_field.PHYSICS_PT_field_falloff

PHYSICS_PT_field_falloff_angular: bl_ui.properties_physics_field.PHYSICS_PT_field_falloff_angular

PHYSICS_PT_field_falloff_radial: bl_ui.properties_physics_field.PHYSICS_PT_field_falloff_radial

PHYSICS_PT_field_settings: bl_ui.properties_physics_field.PHYSICS_PT_field_settings

PHYSICS_PT_field_settings_kink: bl_ui.properties_physics_field.PHYSICS_PT_field_settings_kink

PHYSICS_PT_field_settings_texture_select: bl_ui.properties_physics_field.PHYSICS_PT_field_settings_texture_select

PHYSICS_PT_field_weights: bl_ui.properties_physics_fluid.PHYSICS_PT_field_weights

PHYSICS_PT_fire: bl_ui.properties_physics_fluid.PHYSICS_PT_fire

PHYSICS_PT_flow_initial_velocity: bl_ui.properties_physics_fluid.PHYSICS_PT_flow_initial_velocity

PHYSICS_PT_flow_source: bl_ui.properties_physics_fluid.PHYSICS_PT_flow_source

PHYSICS_PT_flow_texture: bl_ui.properties_physics_fluid.PHYSICS_PT_flow_texture

PHYSICS_PT_fluid: bl_ui.properties_physics_fluid.PHYSICS_PT_fluid

PHYSICS_PT_fluid_domain_render: bl_ui.properties_physics_fluid.PHYSICS_PT_fluid_domain_render

PHYSICS_PT_geometry_nodes: bl_ui.properties_physics_geometry_nodes.PHYSICS_PT_geometry_nodes

PHYSICS_PT_guide: bl_ui.properties_physics_fluid.PHYSICS_PT_guide

PHYSICS_PT_liquid: bl_ui.properties_physics_fluid.PHYSICS_PT_liquid

PHYSICS_PT_mesh: bl_ui.properties_physics_fluid.PHYSICS_PT_mesh

PHYSICS_PT_noise: bl_ui.properties_physics_fluid.PHYSICS_PT_noise

PHYSICS_PT_particles: bl_ui.properties_physics_fluid.PHYSICS_PT_particles

PHYSICS_PT_rigid_body: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body

PHYSICS_PT_rigid_body_collisions: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions

PHYSICS_PT_rigid_body_collisions_collections: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions_collections

PHYSICS_PT_rigid_body_collisions_sensitivity: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions_sensitivity

PHYSICS_PT_rigid_body_collisions_surface: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions_surface

PHYSICS_PT_rigid_body_constraint: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint

PHYSICS_PT_rigid_body_constraint_limits: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_limits

PHYSICS_PT_rigid_body_constraint_limits_angular: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_limits_angular

PHYSICS_PT_rigid_body_constraint_limits_linear: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_limits_linear

PHYSICS_PT_rigid_body_constraint_motor: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_motor

PHYSICS_PT_rigid_body_constraint_motor_angular: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_motor_angular

PHYSICS_PT_rigid_body_constraint_motor_linear: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_motor_linear

PHYSICS_PT_rigid_body_constraint_objects: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_objects

PHYSICS_PT_rigid_body_constraint_override_iterations: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_override_iterations

PHYSICS_PT_rigid_body_constraint_settings: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_settings

PHYSICS_PT_rigid_body_constraint_springs: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_springs

PHYSICS_PT_rigid_body_constraint_springs_angular: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_springs_angular

PHYSICS_PT_rigid_body_constraint_springs_linear: bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_springs_linear

PHYSICS_PT_rigid_body_dynamics: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_dynamics

PHYSICS_PT_rigid_body_dynamics_deactivation: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_dynamics_deactivation

PHYSICS_PT_rigid_body_settings: bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_settings

PHYSICS_PT_settings: bl_ui.properties_physics_fluid.PHYSICS_PT_settings

PHYSICS_PT_smoke: bl_ui.properties_physics_fluid.PHYSICS_PT_smoke

PHYSICS_PT_smoke_dissolve: bl_ui.properties_physics_fluid.PHYSICS_PT_smoke_dissolve

PHYSICS_PT_softbody: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody

PHYSICS_PT_softbody_cache: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_cache

PHYSICS_PT_softbody_collision: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_collision

PHYSICS_PT_softbody_edge: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_edge

PHYSICS_PT_softbody_edge_aerodynamics: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_edge_aerodynamics

PHYSICS_PT_softbody_edge_stiffness: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_edge_stiffness

PHYSICS_PT_softbody_field_weights: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_field_weights

PHYSICS_PT_softbody_goal: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_goal

PHYSICS_PT_softbody_goal_settings: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_goal_settings

PHYSICS_PT_softbody_goal_strengths: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_goal_strengths

PHYSICS_PT_softbody_object: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_object

PHYSICS_PT_softbody_simulation: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_simulation

PHYSICS_PT_softbody_solver: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_solver

PHYSICS_PT_softbody_solver_diagnostics: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_solver_diagnostics

PHYSICS_PT_softbody_solver_helpers: bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_solver_helpers

PHYSICS_PT_viewport_display: bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display

PHYSICS_PT_viewport_display_advanced: bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_advanced

PHYSICS_PT_viewport_display_color: bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_color

PHYSICS_PT_viewport_display_debug: bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_debug

PHYSICS_PT_viewport_display_slicing: bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_slicing

PHYSICS_PT_viscosity: bl_ui.properties_physics_fluid.PHYSICS_PT_viscosity

PHYSICS_UL_dynapaint_surfaces: bl_ui.properties_physics_dynamicpaint.PHYSICS_UL_dynapaint_surfaces

POINTCLOUD_MT_add_attribute: bl_ui.properties_data_pointcloud.POINTCLOUD_MT_add_attribute

POINTCLOUD_UL_attributes: bl_ui.properties_data_pointcloud.POINTCLOUD_UL_attributes

PREFERENCES_OT_addon_disable: bl_operators.userpref.PREFERENCES_OT_addon_disable

PREFERENCES_OT_addon_enable: bl_operators.userpref.PREFERENCES_OT_addon_enable

PREFERENCES_OT_addon_expand: bl_operators.userpref.PREFERENCES_OT_addon_expand

PREFERENCES_OT_addon_install: bl_operators.userpref.PREFERENCES_OT_addon_install

PREFERENCES_OT_addon_refresh: bl_operators.userpref.PREFERENCES_OT_addon_refresh

PREFERENCES_OT_addon_remove: bl_operators.userpref.PREFERENCES_OT_addon_remove

PREFERENCES_OT_addon_show: bl_operators.userpref.PREFERENCES_OT_addon_show

PREFERENCES_OT_app_template_install: bl_operators.userpref.PREFERENCES_OT_app_template_install

PREFERENCES_OT_copy_prev: bl_operators.userpref.PREFERENCES_OT_copy_prev

PREFERENCES_OT_keyconfig_activate: bl_operators.userpref.PREFERENCES_OT_keyconfig_activate

PREFERENCES_OT_keyconfig_export: bl_operators.userpref.PREFERENCES_OT_keyconfig_export

PREFERENCES_OT_keyconfig_import: bl_operators.userpref.PREFERENCES_OT_keyconfig_import

PREFERENCES_OT_keyconfig_remove: bl_operators.userpref.PREFERENCES_OT_keyconfig_remove

PREFERENCES_OT_keyconfig_test: bl_operators.userpref.PREFERENCES_OT_keyconfig_test

PREFERENCES_OT_keyitem_add: bl_operators.userpref.PREFERENCES_OT_keyitem_add

PREFERENCES_OT_keyitem_remove: bl_operators.userpref.PREFERENCES_OT_keyitem_remove

PREFERENCES_OT_keyitem_restore: bl_operators.userpref.PREFERENCES_OT_keyitem_restore

PREFERENCES_OT_keymap_restore: bl_operators.userpref.PREFERENCES_OT_keymap_restore

PREFERENCES_OT_script_directory_remove: bl_operators.userpref.PREFERENCES_OT_script_directory_remove

PREFERENCES_OT_studiolight_copy_settings: bl_operators.userpref.PREFERENCES_OT_studiolight_copy_settings

PREFERENCES_OT_studiolight_install: bl_operators.userpref.PREFERENCES_OT_studiolight_install

PREFERENCES_OT_studiolight_new: bl_operators.userpref.PREFERENCES_OT_studiolight_new

PREFERENCES_OT_studiolight_show: bl_operators.userpref.PREFERENCES_OT_studiolight_show

PREFERENCES_OT_studiolight_uninstall: bl_operators.userpref.PREFERENCES_OT_studiolight_uninstall

PREFERENCES_OT_theme_install: bl_operators.userpref.PREFERENCES_OT_theme_install

PROPERTIES_HT_header: bl_ui.space_properties.PROPERTIES_HT_header

PROPERTIES_PT_navigation_bar: bl_ui.space_properties.PROPERTIES_PT_navigation_bar

PROPERTIES_PT_options: bl_ui.space_properties.PROPERTIES_PT_options

RENDER_MT_framerate_presets: bl_ui.properties_output.RENDER_MT_framerate_presets

RENDER_MT_lineset_context_menu: bl_ui.properties_freestyle.RENDER_MT_lineset_context_menu

RENDER_PT_color_management: bl_ui.properties_render.RENDER_PT_color_management

RENDER_PT_color_management_curves: bl_ui.properties_render.RENDER_PT_color_management_curves

RENDER_PT_color_management_display_settings: bl_ui.properties_render.RENDER_PT_color_management_display_settings

RENDER_PT_context: bl_ui.properties_render.RENDER_PT_context

RENDER_PT_eevee_ambient_occlusion: bl_ui.properties_render.RENDER_PT_eevee_ambient_occlusion

RENDER_PT_eevee_bloom: bl_ui.properties_render.RENDER_PT_eevee_bloom

RENDER_PT_eevee_depth_of_field: bl_ui.properties_render.RENDER_PT_eevee_depth_of_field

RENDER_PT_eevee_film: bl_ui.properties_render.RENDER_PT_eevee_film

RENDER_PT_eevee_hair: bl_ui.properties_render.RENDER_PT_eevee_hair

RENDER_PT_eevee_indirect_lighting: bl_ui.properties_render.RENDER_PT_eevee_indirect_lighting

RENDER_PT_eevee_indirect_lighting_display: bl_ui.properties_render.RENDER_PT_eevee_indirect_lighting_display

RENDER_PT_eevee_motion_blur: bl_ui.properties_render.RENDER_PT_eevee_motion_blur

RENDER_PT_eevee_next_denoise: bl_ui.properties_render.RENDER_PT_eevee_next_denoise

RENDER_PT_eevee_next_depth_of_field: bl_ui.properties_render.RENDER_PT_eevee_next_depth_of_field

RENDER_PT_eevee_next_film: bl_ui.properties_render.RENDER_PT_eevee_next_film

RENDER_PT_eevee_next_horizon_scan: bl_ui.properties_render.RENDER_PT_eevee_next_horizon_scan

RENDER_PT_eevee_next_light_probes: bl_ui.properties_render.RENDER_PT_eevee_next_light_probes

RENDER_PT_eevee_next_light_probes_sphere: bl_ui.properties_render.RENDER_PT_eevee_next_light_probes_sphere

RENDER_PT_eevee_next_light_probes_volume: bl_ui.properties_render.RENDER_PT_eevee_next_light_probes_volume

RENDER_PT_eevee_next_lights: bl_ui.properties_render.RENDER_PT_eevee_next_lights

RENDER_PT_eevee_next_motion_blur: bl_ui.properties_render.RENDER_PT_eevee_next_motion_blur

RENDER_PT_eevee_next_motion_blur_curve: bl_ui.properties_render.RENDER_PT_eevee_next_motion_blur_curve

RENDER_PT_eevee_next_raytracing: bl_ui.properties_render.RENDER_PT_eevee_next_raytracing

RENDER_PT_eevee_next_raytracing_presets: bl_ui.properties_render.RENDER_PT_eevee_next_raytracing_presets

RENDER_PT_eevee_next_sampling: bl_ui.properties_render.RENDER_PT_eevee_next_sampling

RENDER_PT_eevee_next_sampling_render: bl_ui.properties_render.RENDER_PT_eevee_next_sampling_render

RENDER_PT_eevee_next_sampling_viewport: bl_ui.properties_render.RENDER_PT_eevee_next_sampling_viewport

RENDER_PT_eevee_next_screen_trace: bl_ui.properties_render.RENDER_PT_eevee_next_screen_trace

RENDER_PT_eevee_next_shadows: bl_ui.properties_render.RENDER_PT_eevee_next_shadows

RENDER_PT_eevee_next_volumes: bl_ui.properties_render.RENDER_PT_eevee_next_volumes

RENDER_PT_eevee_next_volumes_lighting: bl_ui.properties_render.RENDER_PT_eevee_next_volumes_lighting

RENDER_PT_eevee_next_volumes_shadows: bl_ui.properties_render.RENDER_PT_eevee_next_volumes_shadows

RENDER_PT_eevee_performance: bl_ui.properties_render.RENDER_PT_eevee_performance

RENDER_PT_eevee_sampling: bl_ui.properties_render.RENDER_PT_eevee_sampling

RENDER_PT_eevee_screen_space_reflections: bl_ui.properties_render.RENDER_PT_eevee_screen_space_reflections

RENDER_PT_eevee_shadows: bl_ui.properties_render.RENDER_PT_eevee_shadows

RENDER_PT_eevee_subsurface_scattering: bl_ui.properties_render.RENDER_PT_eevee_subsurface_scattering

RENDER_PT_eevee_volumetric: bl_ui.properties_render.RENDER_PT_eevee_volumetric

RENDER_PT_eevee_volumetric_lighting: bl_ui.properties_render.RENDER_PT_eevee_volumetric_lighting

RENDER_PT_eevee_volumetric_shadows: bl_ui.properties_render.RENDER_PT_eevee_volumetric_shadows

RENDER_PT_encoding: bl_ui.properties_output.RENDER_PT_encoding

RENDER_PT_encoding_audio: bl_ui.properties_output.RENDER_PT_encoding_audio

RENDER_PT_encoding_video: bl_ui.properties_output.RENDER_PT_encoding_video

RENDER_PT_ffmpeg_presets: bl_ui.properties_output.RENDER_PT_ffmpeg_presets

RENDER_PT_format: bl_ui.properties_output.RENDER_PT_format

RENDER_PT_format_presets: bl_ui.properties_output.RENDER_PT_format_presets

RENDER_PT_frame_range: bl_ui.properties_output.RENDER_PT_frame_range

RENDER_PT_freestyle: bl_ui.properties_freestyle.RENDER_PT_freestyle

RENDER_PT_gpencil: bl_ui.properties_render.RENDER_PT_gpencil

RENDER_PT_hydra_debug: bl_ui.properties_render.RENDER_PT_hydra_debug

RENDER_PT_opengl_color: bl_ui.properties_render.RENDER_PT_opengl_color

RENDER_PT_opengl_film: bl_ui.properties_render.RENDER_PT_opengl_film

RENDER_PT_opengl_lighting: bl_ui.properties_render.RENDER_PT_opengl_lighting

RENDER_PT_opengl_options: bl_ui.properties_render.RENDER_PT_opengl_options

RENDER_PT_opengl_sampling: bl_ui.properties_render.RENDER_PT_opengl_sampling

RENDER_PT_output: bl_ui.properties_output.RENDER_PT_output

RENDER_PT_output_color_management: bl_ui.properties_output.RENDER_PT_output_color_management

RENDER_PT_output_views: bl_ui.properties_output.RENDER_PT_output_views

RENDER_PT_post_processing: bl_ui.properties_output.RENDER_PT_post_processing

RENDER_PT_simplify: bl_ui.properties_render.RENDER_PT_simplify

RENDER_PT_simplify_greasepencil: bl_ui.properties_render.RENDER_PT_simplify_greasepencil

RENDER_PT_simplify_render: bl_ui.properties_render.RENDER_PT_simplify_render

RENDER_PT_simplify_viewport: bl_ui.properties_render.RENDER_PT_simplify_viewport

RENDER_PT_stamp: bl_ui.properties_output.RENDER_PT_stamp

RENDER_PT_stamp_burn: bl_ui.properties_output.RENDER_PT_stamp_burn

RENDER_PT_stamp_note: bl_ui.properties_output.RENDER_PT_stamp_note

RENDER_PT_stereoscopy: bl_ui.properties_output.RENDER_PT_stereoscopy

RENDER_PT_time_stretching: bl_ui.properties_output.RENDER_PT_time_stretching

RENDER_UL_renderviews: bl_ui.properties_output.RENDER_UL_renderviews

SCENE_OT_freestyle_add_edge_marks_to_keying_set: bl_operators.freestyle.SCENE_OT_freestyle_add_edge_marks_to_keying_set

SCENE_OT_freestyle_add_face_marks_to_keying_set: bl_operators.freestyle.SCENE_OT_freestyle_add_face_marks_to_keying_set

SCENE_OT_freestyle_fill_range_by_selection: bl_operators.freestyle.SCENE_OT_freestyle_fill_range_by_selection

SCENE_OT_freestyle_module_open: bl_operators.freestyle.SCENE_OT_freestyle_module_open

SCENE_PT_audio: bl_ui.properties_scene.SCENE_PT_audio

SCENE_PT_custom_props: bl_ui.properties_scene.SCENE_PT_custom_props

SCENE_PT_keyframing_settings: bl_ui.properties_scene.SCENE_PT_keyframing_settings

SCENE_PT_keying_set_paths: bl_ui.properties_scene.SCENE_PT_keying_set_paths

SCENE_PT_keying_sets: bl_ui.properties_scene.SCENE_PT_keying_sets

SCENE_PT_physics: bl_ui.properties_scene.SCENE_PT_physics

SCENE_PT_rigid_body_cache: bl_ui.properties_scene.SCENE_PT_rigid_body_cache

SCENE_PT_rigid_body_field_weights: bl_ui.properties_scene.SCENE_PT_rigid_body_field_weights

SCENE_PT_rigid_body_world: bl_ui.properties_scene.SCENE_PT_rigid_body_world

SCENE_PT_rigid_body_world_settings: bl_ui.properties_scene.SCENE_PT_rigid_body_world_settings

SCENE_PT_scene: bl_ui.properties_scene.SCENE_PT_scene

SCENE_PT_simulation: bl_ui.properties_scene.SCENE_PT_simulation

SCENE_PT_unit: bl_ui.properties_scene.SCENE_PT_unit

SCENE_UL_keying_set_paths: bl_ui.properties_scene.SCENE_UL_keying_set_paths

SEQUENCER_HT_header: bl_ui.space_sequencer.SEQUENCER_HT_header

SEQUENCER_HT_tool_header: bl_ui.space_sequencer.SEQUENCER_HT_tool_header

SEQUENCER_MT_add: bl_ui.space_sequencer.SEQUENCER_MT_add

SEQUENCER_MT_add_effect: bl_ui.space_sequencer.SEQUENCER_MT_add_effect

SEQUENCER_MT_add_empty: bl_ui.space_sequencer.SEQUENCER_MT_add_empty

SEQUENCER_MT_add_scene: bl_ui.space_sequencer.SEQUENCER_MT_add_scene

SEQUENCER_MT_add_transitions: bl_ui.space_sequencer.SEQUENCER_MT_add_transitions

SEQUENCER_MT_change: bl_ui.space_sequencer.SEQUENCER_MT_change

SEQUENCER_MT_color_tag_picker: bl_ui.space_sequencer.SEQUENCER_MT_color_tag_picker

SEQUENCER_MT_context_menu: bl_ui.space_sequencer.SEQUENCER_MT_context_menu

SEQUENCER_MT_editor_menus: bl_ui.space_sequencer.SEQUENCER_MT_editor_menus

SEQUENCER_MT_image: bl_ui.space_sequencer.SEQUENCER_MT_image

SEQUENCER_MT_image_apply: bl_ui.space_sequencer.SEQUENCER_MT_image_apply

SEQUENCER_MT_image_clear: bl_ui.space_sequencer.SEQUENCER_MT_image_clear

SEQUENCER_MT_image_transform: bl_ui.space_sequencer.SEQUENCER_MT_image_transform

SEQUENCER_MT_marker: bl_ui.space_sequencer.SEQUENCER_MT_marker

SEQUENCER_MT_navigation: bl_ui.space_sequencer.SEQUENCER_MT_navigation

SEQUENCER_MT_pivot_pie: bl_ui.space_sequencer.SEQUENCER_MT_pivot_pie

SEQUENCER_MT_preview_context_menu: bl_ui.space_sequencer.SEQUENCER_MT_preview_context_menu

SEQUENCER_MT_preview_view_pie: bl_ui.space_sequencer.SEQUENCER_MT_preview_view_pie

SEQUENCER_MT_preview_zoom: bl_ui.space_sequencer.SEQUENCER_MT_preview_zoom

SEQUENCER_MT_proxy: bl_ui.space_sequencer.SEQUENCER_MT_proxy

SEQUENCER_MT_range: bl_ui.space_sequencer.SEQUENCER_MT_range

SEQUENCER_MT_retiming: bl_ui.space_sequencer.SEQUENCER_MT_retiming

SEQUENCER_MT_select: bl_ui.space_sequencer.SEQUENCER_MT_select

SEQUENCER_MT_select_channel: bl_ui.space_sequencer.SEQUENCER_MT_select_channel

SEQUENCER_MT_select_handle: bl_ui.space_sequencer.SEQUENCER_MT_select_handle

SEQUENCER_MT_select_linked: bl_ui.space_sequencer.SEQUENCER_MT_select_linked

SEQUENCER_MT_strip: bl_ui.space_sequencer.SEQUENCER_MT_strip

SEQUENCER_MT_strip_effect: bl_ui.space_sequencer.SEQUENCER_MT_strip_effect

SEQUENCER_MT_strip_input: bl_ui.space_sequencer.SEQUENCER_MT_strip_input

SEQUENCER_MT_strip_lock_mute: bl_ui.space_sequencer.SEQUENCER_MT_strip_lock_mute

SEQUENCER_MT_strip_movie: bl_ui.space_sequencer.SEQUENCER_MT_strip_movie

SEQUENCER_MT_strip_retiming: bl_ui.space_sequencer.SEQUENCER_MT_strip_retiming

SEQUENCER_MT_strip_transform: bl_ui.space_sequencer.SEQUENCER_MT_strip_transform

SEQUENCER_MT_view: bl_ui.space_sequencer.SEQUENCER_MT_view

SEQUENCER_MT_view_cache: bl_ui.space_sequencer.SEQUENCER_MT_view_cache

SEQUENCER_MT_view_pie: bl_ui.space_sequencer.SEQUENCER_MT_view_pie

SEQUENCER_PT_active_tool: bl_ui.space_sequencer.SEQUENCER_PT_active_tool

SEQUENCER_PT_adjust_color: bl_ui.space_sequencer.SEQUENCER_PT_adjust_color

SEQUENCER_PT_adjust_comp: bl_ui.space_sequencer.SEQUENCER_PT_adjust_comp

SEQUENCER_PT_adjust_crop: bl_ui.space_sequencer.SEQUENCER_PT_adjust_crop

SEQUENCER_PT_adjust_sound: bl_ui.space_sequencer.SEQUENCER_PT_adjust_sound

SEQUENCER_PT_adjust_transform: bl_ui.space_sequencer.SEQUENCER_PT_adjust_transform

SEQUENCER_PT_adjust_video: bl_ui.space_sequencer.SEQUENCER_PT_adjust_video

SEQUENCER_PT_annotation: bl_ui.space_sequencer.SEQUENCER_PT_annotation

SEQUENCER_PT_annotation_onion: bl_ui.space_sequencer.SEQUENCER_PT_annotation_onion

SEQUENCER_PT_cache_settings: bl_ui.space_sequencer.SEQUENCER_PT_cache_settings

SEQUENCER_PT_color_tag_picker: bl_ui.space_sequencer.SEQUENCER_PT_color_tag_picker

SEQUENCER_PT_custom_props: bl_ui.space_sequencer.SEQUENCER_PT_custom_props

SEQUENCER_PT_effect: bl_ui.space_sequencer.SEQUENCER_PT_effect

SEQUENCER_PT_effect_text_layout: bl_ui.space_sequencer.SEQUENCER_PT_effect_text_layout

SEQUENCER_PT_effect_text_style: bl_ui.space_sequencer.SEQUENCER_PT_effect_text_style

SEQUENCER_PT_frame_overlay: bl_ui.space_sequencer.SEQUENCER_PT_frame_overlay

SEQUENCER_PT_gizmo_display: bl_ui.space_sequencer.SEQUENCER_PT_gizmo_display

SEQUENCER_PT_mask: bl_ui.space_sequencer.SEQUENCER_PT_mask

SEQUENCER_PT_modifiers: bl_ui.space_sequencer.SEQUENCER_PT_modifiers

SEQUENCER_PT_overlay: bl_ui.space_sequencer.SEQUENCER_PT_overlay

SEQUENCER_PT_preview: bl_ui.space_sequencer.SEQUENCER_PT_preview

SEQUENCER_PT_preview_overlay: bl_ui.space_sequencer.SEQUENCER_PT_preview_overlay

SEQUENCER_PT_proxy_settings: bl_ui.space_sequencer.SEQUENCER_PT_proxy_settings

SEQUENCER_PT_scene: bl_ui.space_sequencer.SEQUENCER_PT_scene

SEQUENCER_PT_scene_sound: bl_ui.space_sequencer.SEQUENCER_PT_scene_sound

SEQUENCER_PT_sequencer_overlay: bl_ui.space_sequencer.SEQUENCER_PT_sequencer_overlay

SEQUENCER_PT_snapping: bl_ui.space_sequencer.SEQUENCER_PT_snapping

SEQUENCER_PT_source: bl_ui.space_sequencer.SEQUENCER_PT_source

SEQUENCER_PT_strip: bl_ui.space_sequencer.SEQUENCER_PT_strip

SEQUENCER_PT_strip_cache: bl_ui.space_sequencer.SEQUENCER_PT_strip_cache

SEQUENCER_PT_strip_proxy: bl_ui.space_sequencer.SEQUENCER_PT_strip_proxy

SEQUENCER_PT_time: bl_ui.space_sequencer.SEQUENCER_PT_time

SEQUENCER_PT_tools_active: bl_ui.space_toolsystem_toolbar.SEQUENCER_PT_tools_active

SEQUENCER_PT_view: bl_ui.space_sequencer.SEQUENCER_PT_view

SEQUENCER_PT_view_cursor: bl_ui.space_sequencer.SEQUENCER_PT_view_cursor

SEQUENCER_PT_view_safe_areas: bl_ui.space_sequencer.SEQUENCER_PT_view_safe_areas

SEQUENCER_PT_view_safe_areas_center_cut: bl_ui.space_sequencer.SEQUENCER_PT_view_safe_areas_center_cut

SPREADSHEET_HT_header: bl_ui.space_spreadsheet.SPREADSHEET_HT_header

SPREADSHEET_OT_toggle_pin: bl_operators.spreadsheet.SPREADSHEET_OT_toggle_pin

STATUSBAR_HT_header: bl_ui.space_statusbar.STATUSBAR_HT_header

TEXTURE_MT_context_menu: bl_ui.properties_texture.TEXTURE_MT_context_menu

TEXTURE_PT_blend: bl_ui.properties_texture.TEXTURE_PT_blend

TEXTURE_PT_clouds: bl_ui.properties_texture.TEXTURE_PT_clouds

TEXTURE_PT_colors: bl_ui.properties_texture.TEXTURE_PT_colors

TEXTURE_PT_colors_ramp: bl_ui.properties_texture.TEXTURE_PT_colors_ramp

TEXTURE_PT_context: bl_ui.properties_texture.TEXTURE_PT_context

TEXTURE_PT_custom_props: bl_ui.properties_texture.TEXTURE_PT_custom_props

TEXTURE_PT_distortednoise: bl_ui.properties_texture.TEXTURE_PT_distortednoise

TEXTURE_PT_image: bl_ui.properties_texture.TEXTURE_PT_image

TEXTURE_PT_image_alpha: bl_ui.properties_texture.TEXTURE_PT_image_alpha

TEXTURE_PT_image_mapping: bl_ui.properties_texture.TEXTURE_PT_image_mapping

TEXTURE_PT_image_mapping_crop: bl_ui.properties_texture.TEXTURE_PT_image_mapping_crop

TEXTURE_PT_image_sampling: bl_ui.properties_texture.TEXTURE_PT_image_sampling

TEXTURE_PT_image_settings: bl_ui.properties_texture.TEXTURE_PT_image_settings

TEXTURE_PT_influence: bl_ui.properties_texture.TEXTURE_PT_influence

TEXTURE_PT_magic: bl_ui.properties_texture.TEXTURE_PT_magic

TEXTURE_PT_mapping: bl_ui.properties_texture.TEXTURE_PT_mapping

TEXTURE_PT_marble: bl_ui.properties_texture.TEXTURE_PT_marble

TEXTURE_PT_musgrave: bl_ui.properties_texture.TEXTURE_PT_musgrave

TEXTURE_PT_node: bl_ui.properties_texture.TEXTURE_PT_node

TEXTURE_PT_preview: bl_ui.properties_texture.TEXTURE_PT_preview

TEXTURE_PT_stucci: bl_ui.properties_texture.TEXTURE_PT_stucci

TEXTURE_PT_voronoi: bl_ui.properties_texture.TEXTURE_PT_voronoi

TEXTURE_PT_voronoi_feature_weights: bl_ui.properties_texture.TEXTURE_PT_voronoi_feature_weights

TEXTURE_PT_wood: bl_ui.properties_texture.TEXTURE_PT_wood

TEXTURE_UL_texpaintslots: bl_ui.space_view3d_toolbar.TEXTURE_UL_texpaintslots

TEXTURE_UL_texslots: bl_ui.properties_texture.TEXTURE_UL_texslots

TEXT_HT_footer: bl_ui.space_text.TEXT_HT_footer

TEXT_HT_header: bl_ui.space_text.TEXT_HT_header

TEXT_MT_context_menu: bl_ui.space_text.TEXT_MT_context_menu

TEXT_MT_edit: bl_ui.space_text.TEXT_MT_edit

TEXT_MT_edit_to3d: bl_ui.space_text.TEXT_MT_edit_to3d

TEXT_MT_editor_menus: bl_ui.space_text.TEXT_MT_editor_menus

TEXT_MT_format: bl_ui.space_text.TEXT_MT_format

TEXT_MT_select: bl_ui.space_text.TEXT_MT_select

TEXT_MT_templates: bl_ui.space_text.TEXT_MT_templates

TEXT_MT_templates_osl: bl_ui.space_text.TEXT_MT_templates_osl

TEXT_MT_templates_py: bl_ui.space_text.TEXT_MT_templates_py

TEXT_MT_text: bl_ui.space_text.TEXT_MT_text

TEXT_MT_view: bl_ui.space_text.TEXT_MT_view

TEXT_MT_view_navigation: bl_ui.space_text.TEXT_MT_view_navigation

TEXT_PT_find: bl_ui.space_text.TEXT_PT_find

TEXT_PT_properties: bl_ui.space_text.TEXT_PT_properties

TIME_MT_cache: bl_ui.space_time.TIME_MT_cache

TIME_MT_editor_menus: bl_ui.space_time.TIME_MT_editor_menus

TIME_MT_marker: bl_ui.space_time.TIME_MT_marker

TIME_MT_view: bl_ui.space_time.TIME_MT_view

TIME_PT_auto_keyframing: bl_ui.space_time.TIME_PT_auto_keyframing

TIME_PT_keyframing_settings: bl_ui.space_time.TIME_PT_keyframing_settings

TIME_PT_playback: bl_ui.space_time.TIME_PT_playback

TOPBAR_HT_upper_bar: bl_ui.space_topbar.TOPBAR_HT_upper_bar

TOPBAR_MT_blender: bl_ui.space_topbar.TOPBAR_MT_blender

TOPBAR_MT_blender_system: bl_ui.space_topbar.TOPBAR_MT_blender_system

TOPBAR_MT_edit: bl_ui.space_topbar.TOPBAR_MT_edit

TOPBAR_MT_edit_armature_add: bl_ui.space_view3d.TOPBAR_MT_edit_armature_add

TOPBAR_MT_edit_curve_add: bl_ui.space_view3d.TOPBAR_MT_edit_curve_add

TOPBAR_MT_editor_menus: bl_ui.space_topbar.TOPBAR_MT_editor_menus

TOPBAR_MT_file: bl_ui.space_topbar.TOPBAR_MT_file

TOPBAR_MT_file_cleanup: bl_ui.space_topbar.TOPBAR_MT_file_cleanup

TOPBAR_MT_file_context_menu: bl_ui.space_topbar.TOPBAR_MT_file_context_menu

TOPBAR_MT_file_defaults: bl_ui.space_topbar.TOPBAR_MT_file_defaults

TOPBAR_MT_file_export: bl_ui.space_topbar.TOPBAR_MT_file_export

TOPBAR_MT_file_external_data: bl_ui.space_topbar.TOPBAR_MT_file_external_data

TOPBAR_MT_file_import: bl_ui.space_topbar.TOPBAR_MT_file_import

TOPBAR_MT_file_new: bl_ui.space_topbar.TOPBAR_MT_file_new

TOPBAR_MT_file_previews: bl_ui.space_topbar.TOPBAR_MT_file_previews

TOPBAR_MT_file_recover: bl_ui.space_topbar.TOPBAR_MT_file_recover

TOPBAR_MT_help: bl_ui.space_topbar.TOPBAR_MT_help

TOPBAR_MT_render: bl_ui.space_topbar.TOPBAR_MT_render

TOPBAR_MT_templates_more: bl_ui.space_topbar.TOPBAR_MT_templates_more

TOPBAR_MT_window: bl_ui.space_topbar.TOPBAR_MT_window

TOPBAR_MT_workspace_menu: bl_ui.space_topbar.TOPBAR_MT_workspace_menu

TOPBAR_PT_annotation_layers: bl_ui.space_view3d.TOPBAR_PT_annotation_layers

TOPBAR_PT_gpencil_layers: bl_ui.space_topbar.TOPBAR_PT_gpencil_layers

TOPBAR_PT_gpencil_materials: bl_ui.space_view3d.TOPBAR_PT_gpencil_materials

TOPBAR_PT_gpencil_primitive: bl_ui.space_topbar.TOPBAR_PT_gpencil_primitive

TOPBAR_PT_gpencil_vertexcolor: bl_ui.space_view3d.TOPBAR_PT_gpencil_vertexcolor

TOPBAR_PT_name: bl_ui.space_topbar.TOPBAR_PT_name

TOPBAR_PT_name_marker: bl_ui.space_topbar.TOPBAR_PT_name_marker

TOPBAR_PT_tool_fallback: bl_ui.space_topbar.TOPBAR_PT_tool_fallback

TOPBAR_PT_tool_settings_extra: bl_ui.space_topbar.TOPBAR_PT_tool_settings_extra

UILIST_OT_entry_add: bl_ui.generic_ui_list.UILIST_OT_entry_add

UILIST_OT_entry_move: bl_ui.generic_ui_list.UILIST_OT_entry_move

UILIST_OT_entry_remove: bl_ui.generic_ui_list.UILIST_OT_entry_remove

UI_MT_button_context_menu: bl_ui.UI_MT_button_context_menu

UI_MT_list_item_context_menu: bl_ui.UI_MT_list_item_context_menu

UI_UL_list: bl_ui.UI_UL_list

USERPREF_HT_header: bl_ui.space_userpref.USERPREF_HT_header

USERPREF_MT_editor_menus: bl_ui.space_userpref.USERPREF_MT_editor_menus

USERPREF_MT_interface_theme_presets: bl_ui.space_userpref.USERPREF_MT_interface_theme_presets

USERPREF_MT_keyconfigs: bl_ui.space_userpref.USERPREF_MT_keyconfigs

USERPREF_MT_save_load: bl_ui.space_userpref.USERPREF_MT_save_load

USERPREF_MT_view: bl_ui.space_userpref.USERPREF_MT_view

USERPREF_PT_addons: bl_ui.space_userpref.USERPREF_PT_addons

USERPREF_PT_addons_filter: bl_ui.space_userpref.USERPREF_PT_addons_filter

USERPREF_PT_animation_fcurves: bl_ui.space_userpref.USERPREF_PT_animation_fcurves

USERPREF_PT_animation_keyframes: bl_ui.space_userpref.USERPREF_PT_animation_keyframes

USERPREF_PT_animation_timeline: bl_ui.space_userpref.USERPREF_PT_animation_timeline

USERPREF_PT_edit_annotations: bl_ui.space_userpref.USERPREF_PT_edit_annotations

USERPREF_PT_edit_cursor: bl_ui.space_userpref.USERPREF_PT_edit_cursor

USERPREF_PT_edit_gpencil: bl_ui.space_userpref.USERPREF_PT_edit_gpencil

USERPREF_PT_edit_misc: bl_ui.space_userpref.USERPREF_PT_edit_misc

USERPREF_PT_edit_node_editor: bl_ui.space_userpref.USERPREF_PT_edit_node_editor

USERPREF_PT_edit_objects: bl_ui.space_userpref.USERPREF_PT_edit_objects

USERPREF_PT_edit_objects_duplicate_data: bl_ui.space_userpref.USERPREF_PT_edit_objects_duplicate_data

USERPREF_PT_edit_objects_new: bl_ui.space_userpref.USERPREF_PT_edit_objects_new

USERPREF_PT_edit_text_editor: bl_ui.space_userpref.USERPREF_PT_edit_text_editor

USERPREF_PT_edit_weight_paint: bl_ui.space_userpref.USERPREF_PT_edit_weight_paint

USERPREF_PT_experimental_debugging: bl_ui.space_userpref.USERPREF_PT_experimental_debugging

USERPREF_PT_experimental_new_features: bl_ui.space_userpref.USERPREF_PT_experimental_new_features

USERPREF_PT_experimental_prototypes: bl_ui.space_userpref.USERPREF_PT_experimental_prototypes

USERPREF_PT_extensions_repos: bl_ui.space_userpref.USERPREF_PT_extensions_repos

USERPREF_PT_file_paths_applications: bl_ui.space_userpref.USERPREF_PT_file_paths_applications

USERPREF_PT_file_paths_asset_libraries: bl_ui.space_userpref.USERPREF_PT_file_paths_asset_libraries

USERPREF_PT_file_paths_data: bl_ui.space_userpref.USERPREF_PT_file_paths_data

USERPREF_PT_file_paths_development: bl_ui.space_userpref.USERPREF_PT_file_paths_development

USERPREF_PT_file_paths_render: bl_ui.space_userpref.USERPREF_PT_file_paths_render

USERPREF_PT_file_paths_script_directories: bl_ui.space_userpref.USERPREF_PT_file_paths_script_directories

USERPREF_PT_input_keyboard: bl_ui.space_userpref.USERPREF_PT_input_keyboard

USERPREF_PT_input_mouse: bl_ui.space_userpref.USERPREF_PT_input_mouse

USERPREF_PT_input_ndof: bl_ui.space_userpref.USERPREF_PT_input_ndof

USERPREF_PT_input_tablet: bl_ui.space_userpref.USERPREF_PT_input_tablet

USERPREF_PT_input_touchpad: bl_ui.space_userpref.USERPREF_PT_input_touchpad

USERPREF_PT_interface_display: bl_ui.space_userpref.USERPREF_PT_interface_display

USERPREF_PT_interface_editors: bl_ui.space_userpref.USERPREF_PT_interface_editors

USERPREF_PT_interface_menus: bl_ui.space_userpref.USERPREF_PT_interface_menus

USERPREF_PT_interface_menus_mouse_over: bl_ui.space_userpref.USERPREF_PT_interface_menus_mouse_over

USERPREF_PT_interface_menus_pie: bl_ui.space_userpref.USERPREF_PT_interface_menus_pie

USERPREF_PT_interface_statusbar: bl_ui.space_userpref.USERPREF_PT_interface_statusbar

USERPREF_PT_interface_temporary_windows: bl_ui.space_userpref.USERPREF_PT_interface_temporary_windows

USERPREF_PT_interface_text: bl_ui.space_userpref.USERPREF_PT_interface_text

USERPREF_PT_interface_translation: bl_ui.space_userpref.USERPREF_PT_interface_translation

USERPREF_PT_keymap: bl_ui.space_userpref.USERPREF_PT_keymap

USERPREF_PT_navigation_bar: bl_ui.space_userpref.USERPREF_PT_navigation_bar

USERPREF_PT_navigation_fly_walk: bl_ui.space_userpref.USERPREF_PT_navigation_fly_walk

USERPREF_PT_navigation_fly_walk_gravity: bl_ui.space_userpref.USERPREF_PT_navigation_fly_walk_gravity

USERPREF_PT_navigation_fly_walk_navigation: bl_ui.space_userpref.USERPREF_PT_navigation_fly_walk_navigation

USERPREF_PT_navigation_orbit: bl_ui.space_userpref.USERPREF_PT_navigation_orbit

USERPREF_PT_navigation_zoom: bl_ui.space_userpref.USERPREF_PT_navigation_zoom

USERPREF_PT_ndof_settings: bl_ui.space_userpref.USERPREF_PT_ndof_settings

USERPREF_PT_save_preferences: bl_ui.space_userpref.USERPREF_PT_save_preferences

USERPREF_PT_saveload_autorun: bl_ui.space_userpref.USERPREF_PT_saveload_autorun

USERPREF_PT_saveload_blend: bl_ui.space_userpref.USERPREF_PT_saveload_blend

USERPREF_PT_saveload_file_browser: bl_ui.space_userpref.USERPREF_PT_saveload_file_browser

USERPREF_PT_studiolight_light_editor: bl_ui.space_userpref.USERPREF_PT_studiolight_light_editor

USERPREF_PT_studiolight_lights: bl_ui.space_userpref.USERPREF_PT_studiolight_lights

USERPREF_PT_studiolight_matcaps: bl_ui.space_userpref.USERPREF_PT_studiolight_matcaps

USERPREF_PT_studiolight_world: bl_ui.space_userpref.USERPREF_PT_studiolight_world

USERPREF_PT_system_cycles_devices: bl_ui.space_userpref.USERPREF_PT_system_cycles_devices

USERPREF_PT_system_memory: bl_ui.space_userpref.USERPREF_PT_system_memory

USERPREF_PT_system_os_settings: bl_ui.space_userpref.USERPREF_PT_system_os_settings

USERPREF_PT_system_sound: bl_ui.space_userpref.USERPREF_PT_system_sound

USERPREF_PT_system_video_sequencer: bl_ui.space_userpref.USERPREF_PT_system_video_sequencer

USERPREF_PT_text_editor: bl_ui.space_userpref.USERPREF_PT_text_editor

USERPREF_PT_text_editor_presets: bl_ui.space_userpref.USERPREF_PT_text_editor_presets

USERPREF_PT_theme: bl_ui.space_userpref.USERPREF_PT_theme

USERPREF_PT_theme_bone_color_sets: bl_ui.space_userpref.USERPREF_PT_theme_bone_color_sets

USERPREF_PT_theme_collection_colors: bl_ui.space_userpref.USERPREF_PT_theme_collection_colors

USERPREF_PT_theme_interface_gizmos: bl_ui.space_userpref.USERPREF_PT_theme_interface_gizmos

USERPREF_PT_theme_interface_icons: bl_ui.space_userpref.USERPREF_PT_theme_interface_icons

USERPREF_PT_theme_interface_state: bl_ui.space_userpref.USERPREF_PT_theme_interface_state

USERPREF_PT_theme_interface_styles: bl_ui.space_userpref.USERPREF_PT_theme_interface_styles

USERPREF_PT_theme_interface_transparent_checker: bl_ui.space_userpref.USERPREF_PT_theme_interface_transparent_checker

USERPREF_PT_theme_strip_colors: bl_ui.space_userpref.USERPREF_PT_theme_strip_colors

USERPREF_PT_theme_text_style: bl_ui.space_userpref.USERPREF_PT_theme_text_style

USERPREF_PT_theme_user_interface: bl_ui.space_userpref.USERPREF_PT_theme_user_interface

USERPREF_PT_viewport_display: bl_ui.space_userpref.USERPREF_PT_viewport_display

USERPREF_PT_viewport_quality: bl_ui.space_userpref.USERPREF_PT_viewport_quality

USERPREF_PT_viewport_selection: bl_ui.space_userpref.USERPREF_PT_viewport_selection

USERPREF_PT_viewport_subdivision: bl_ui.space_userpref.USERPREF_PT_viewport_subdivision

USERPREF_PT_viewport_textures: bl_ui.space_userpref.USERPREF_PT_viewport_textures

USERPREF_UL_asset_libraries: bl_ui.space_userpref.USERPREF_UL_asset_libraries

USERPREF_UL_extension_repos: bl_ui.space_userpref.USERPREF_UL_extension_repos

VIEW3D_AST_sculpt_brushes: bl_ui.space_view3d.VIEW3D_AST_sculpt_brushes

VIEW3D_HT_header: bl_ui.space_view3d.VIEW3D_HT_header

VIEW3D_HT_tool_header: bl_ui.space_view3d.VIEW3D_HT_tool_header

VIEW3D_MT_add: bl_ui.space_view3d.VIEW3D_MT_add

VIEW3D_MT_armature_add: bl_ui.space_view3d.VIEW3D_MT_armature_add

VIEW3D_MT_armature_context_menu: bl_ui.space_view3d.VIEW3D_MT_armature_context_menu

VIEW3D_MT_assign_material: bl_ui.space_view3d.VIEW3D_MT_assign_material

VIEW3D_MT_bone_collections: bl_ui.space_view3d.VIEW3D_MT_bone_collections

VIEW3D_MT_bone_options_disable: bl_ui.space_view3d.VIEW3D_MT_bone_options_disable

VIEW3D_MT_bone_options_enable: bl_ui.space_view3d.VIEW3D_MT_bone_options_enable

VIEW3D_MT_bone_options_toggle: bl_ui.space_view3d.VIEW3D_MT_bone_options_toggle

VIEW3D_MT_brush_context_menu: bl_ui.space_view3d_toolbar.VIEW3D_MT_brush_context_menu

VIEW3D_MT_brush_gpencil_context_menu: bl_ui.space_view3d_toolbar.VIEW3D_MT_brush_gpencil_context_menu

VIEW3D_MT_brush_paint_modes: bl_ui.space_view3d.VIEW3D_MT_brush_paint_modes

VIEW3D_MT_camera_add: bl_ui.space_view3d.VIEW3D_MT_camera_add

VIEW3D_MT_curve_add: bl_ui.space_view3d.VIEW3D_MT_curve_add

VIEW3D_MT_draw_gpencil: bl_ui.space_view3d.VIEW3D_MT_draw_gpencil

VIEW3D_MT_edit_armature: bl_ui.space_view3d.VIEW3D_MT_edit_armature

VIEW3D_MT_edit_armature_delete: bl_ui.space_view3d.VIEW3D_MT_edit_armature_delete

VIEW3D_MT_edit_armature_names: bl_ui.space_view3d.VIEW3D_MT_edit_armature_names

VIEW3D_MT_edit_armature_parent: bl_ui.space_view3d.VIEW3D_MT_edit_armature_parent

VIEW3D_MT_edit_armature_roll: bl_ui.space_view3d.VIEW3D_MT_edit_armature_roll

VIEW3D_MT_edit_curve: bl_ui.space_view3d.VIEW3D_MT_edit_curve

VIEW3D_MT_edit_curve_clean: bl_ui.space_view3d.VIEW3D_MT_edit_curve_clean

VIEW3D_MT_edit_curve_context_menu: bl_ui.space_view3d.VIEW3D_MT_edit_curve_context_menu

VIEW3D_MT_edit_curve_ctrlpoints: bl_ui.space_view3d.VIEW3D_MT_edit_curve_ctrlpoints

VIEW3D_MT_edit_curve_delete: bl_ui.space_view3d.VIEW3D_MT_edit_curve_delete

VIEW3D_MT_edit_curve_segments: bl_ui.space_view3d.VIEW3D_MT_edit_curve_segments

VIEW3D_MT_edit_curve_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_curve_showhide

VIEW3D_MT_edit_curves: bl_ui.space_view3d.VIEW3D_MT_edit_curves

VIEW3D_MT_edit_curves_select_more_less: bl_ui.space_view3d.VIEW3D_MT_edit_curves_select_more_less

VIEW3D_MT_edit_font: bl_ui.space_view3d.VIEW3D_MT_edit_font

VIEW3D_MT_edit_font_chars: bl_ui.space_view3d.VIEW3D_MT_edit_font_chars

VIEW3D_MT_edit_font_context_menu: bl_ui.space_view3d.VIEW3D_MT_edit_font_context_menu

VIEW3D_MT_edit_font_delete: bl_ui.space_view3d.VIEW3D_MT_edit_font_delete

VIEW3D_MT_edit_font_kerning: bl_ui.space_view3d.VIEW3D_MT_edit_font_kerning

VIEW3D_MT_edit_gpencil: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil

VIEW3D_MT_edit_gpencil_delete: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_delete

VIEW3D_MT_edit_gpencil_point: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_point

VIEW3D_MT_edit_gpencil_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_showhide

VIEW3D_MT_edit_gpencil_stroke: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_stroke

VIEW3D_MT_edit_gpencil_transform: bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_transform

VIEW3D_MT_edit_greasepencil: bl_ui.space_view3d.VIEW3D_MT_edit_greasepencil

VIEW3D_MT_edit_greasepencil_animation: bl_ui.space_view3d.VIEW3D_MT_edit_greasepencil_animation

VIEW3D_MT_edit_greasepencil_delete: bl_ui.space_view3d.VIEW3D_MT_edit_greasepencil_delete

VIEW3D_MT_edit_greasepencil_point: bl_ui.space_view3d.VIEW3D_MT_edit_greasepencil_point

VIEW3D_MT_edit_greasepencil_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_greasepencil_showhide

VIEW3D_MT_edit_greasepencil_stroke: bl_ui.space_view3d.VIEW3D_MT_edit_greasepencil_stroke

VIEW3D_MT_edit_lattice: bl_ui.space_view3d.VIEW3D_MT_edit_lattice

VIEW3D_MT_edit_lattice_context_menu: bl_ui.space_view3d.VIEW3D_MT_edit_lattice_context_menu

VIEW3D_MT_edit_mesh: bl_ui.space_view3d.VIEW3D_MT_edit_mesh

VIEW3D_MT_edit_mesh_clean: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_clean

VIEW3D_MT_edit_mesh_context_menu: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_context_menu

VIEW3D_MT_edit_mesh_delete: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_delete

VIEW3D_MT_edit_mesh_edges: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_edges

VIEW3D_MT_edit_mesh_extrude: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_extrude

VIEW3D_MT_edit_mesh_faces: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_faces

VIEW3D_MT_edit_mesh_faces_data: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_faces_data

VIEW3D_MT_edit_mesh_merge: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_merge

VIEW3D_MT_edit_mesh_normals: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals

VIEW3D_MT_edit_mesh_normals_average: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals_average

VIEW3D_MT_edit_mesh_normals_select_strength: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals_select_strength

VIEW3D_MT_edit_mesh_normals_set_strength: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals_set_strength

VIEW3D_MT_edit_mesh_select_by_trait: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_by_trait

VIEW3D_MT_edit_mesh_select_linked: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_linked

VIEW3D_MT_edit_mesh_select_loops: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_loops

VIEW3D_MT_edit_mesh_select_mode: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_mode

VIEW3D_MT_edit_mesh_select_more_less: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_more_less

VIEW3D_MT_edit_mesh_select_similar: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_similar

VIEW3D_MT_edit_mesh_shading: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_shading

VIEW3D_MT_edit_mesh_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_showhide

VIEW3D_MT_edit_mesh_split: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_split

VIEW3D_MT_edit_mesh_vertices: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_vertices

VIEW3D_MT_edit_mesh_weights: bl_ui.space_view3d.VIEW3D_MT_edit_mesh_weights

VIEW3D_MT_edit_meta: bl_ui.space_view3d.VIEW3D_MT_edit_meta

VIEW3D_MT_edit_meta_showhide: bl_ui.space_view3d.VIEW3D_MT_edit_meta_showhide

VIEW3D_MT_edit_metaball_context_menu: bl_ui.space_view3d.VIEW3D_MT_edit_metaball_context_menu

VIEW3D_MT_edit_pointcloud: bl_ui.space_view3d.VIEW3D_MT_edit_pointcloud

VIEW3D_MT_edit_surface: bl_ui.space_view3d.VIEW3D_MT_edit_surface

VIEW3D_MT_editor_menus: bl_ui.space_view3d.VIEW3D_MT_editor_menus

VIEW3D_MT_face_sets: bl_ui.space_view3d.VIEW3D_MT_face_sets

VIEW3D_MT_face_sets_init: bl_ui.space_view3d.VIEW3D_MT_face_sets_init

VIEW3D_MT_gpencil_animation: bl_ui.space_view3d.VIEW3D_MT_gpencil_animation

VIEW3D_MT_gpencil_autoweights: bl_ui.space_view3d.VIEW3D_MT_gpencil_autoweights

VIEW3D_MT_gpencil_edit_context_menu: bl_ui.space_view3d.VIEW3D_MT_gpencil_edit_context_menu

VIEW3D_MT_gpencil_simplify: bl_ui.space_view3d.VIEW3D_MT_gpencil_simplify

VIEW3D_MT_gpencil_vertex_group: bl_ui.space_view3d.VIEW3D_MT_gpencil_vertex_group

VIEW3D_MT_grease_pencil_add: bl_ui.space_view3d.VIEW3D_MT_grease_pencil_add

VIEW3D_MT_grease_pencil_assign_material: bl_ui.space_view3d.VIEW3D_MT_grease_pencil_assign_material

VIEW3D_MT_greasepencil_edit_context_menu: bl_ui.space_view3d.VIEW3D_MT_greasepencil_edit_context_menu

VIEW3D_MT_greasepencil_material_active: bl_ui.space_view3d.VIEW3D_MT_greasepencil_material_active

VIEW3D_MT_hook: bl_ui.space_view3d.VIEW3D_MT_hook

VIEW3D_MT_image_add: bl_ui.space_view3d.VIEW3D_MT_image_add

VIEW3D_MT_light_add: bl_ui.space_view3d.VIEW3D_MT_light_add

VIEW3D_MT_lightprobe_add: bl_ui.space_view3d.VIEW3D_MT_lightprobe_add

VIEW3D_MT_make_links: bl_ui.space_view3d.VIEW3D_MT_make_links

VIEW3D_MT_make_single_user: bl_ui.space_view3d.VIEW3D_MT_make_single_user

VIEW3D_MT_mask: bl_ui.space_view3d.VIEW3D_MT_mask

VIEW3D_MT_mesh_add: bl_ui.space_view3d.VIEW3D_MT_mesh_add

VIEW3D_MT_metaball_add: bl_ui.space_view3d.VIEW3D_MT_metaball_add

VIEW3D_MT_mirror: bl_ui.space_view3d.VIEW3D_MT_mirror

VIEW3D_MT_object: bl_ui.space_view3d.VIEW3D_MT_object

VIEW3D_MT_object_animation: bl_ui.space_view3d.VIEW3D_MT_object_animation

VIEW3D_MT_object_apply: bl_ui.space_view3d.VIEW3D_MT_object_apply

VIEW3D_MT_object_asset: bl_ui.space_view3d.VIEW3D_MT_object_asset

VIEW3D_MT_object_cleanup: bl_ui.space_view3d.VIEW3D_MT_object_cleanup

VIEW3D_MT_object_clear: bl_ui.space_view3d.VIEW3D_MT_object_clear

VIEW3D_MT_object_collection: bl_ui.space_view3d.VIEW3D_MT_object_collection

VIEW3D_MT_object_constraints: bl_ui.space_view3d.VIEW3D_MT_object_constraints

VIEW3D_MT_object_context_menu: bl_ui.space_view3d.VIEW3D_MT_object_context_menu

VIEW3D_MT_object_convert: bl_ui.space_view3d.VIEW3D_MT_object_convert

VIEW3D_MT_object_liboverride: bl_ui.space_view3d.VIEW3D_MT_object_liboverride

VIEW3D_MT_object_mode_pie: bl_ui.space_view3d.VIEW3D_MT_object_mode_pie

VIEW3D_MT_object_parent: bl_ui.space_view3d.VIEW3D_MT_object_parent

VIEW3D_MT_object_quick_effects: bl_ui.space_view3d.VIEW3D_MT_object_quick_effects

VIEW3D_MT_object_relations: bl_ui.space_view3d.VIEW3D_MT_object_relations

VIEW3D_MT_object_rigid_body: bl_ui.space_view3d.VIEW3D_MT_object_rigid_body

VIEW3D_MT_object_shading: bl_ui.space_view3d.VIEW3D_MT_object_shading

VIEW3D_MT_object_showhide: bl_ui.space_view3d.VIEW3D_MT_object_showhide

VIEW3D_MT_object_track: bl_ui.space_view3d.VIEW3D_MT_object_track

VIEW3D_MT_orientations_pie: bl_ui.space_view3d.VIEW3D_MT_orientations_pie

VIEW3D_MT_paint_gpencil: bl_ui.space_view3d.VIEW3D_MT_paint_gpencil

VIEW3D_MT_paint_grease_pencil: bl_ui.space_view3d.VIEW3D_MT_paint_grease_pencil

VIEW3D_MT_paint_vertex: bl_ui.space_view3d.VIEW3D_MT_paint_vertex

VIEW3D_MT_paint_weight: bl_ui.space_view3d.VIEW3D_MT_paint_weight

VIEW3D_MT_paint_weight_lock: bl_ui.space_view3d.VIEW3D_MT_paint_weight_lock

VIEW3D_MT_particle: bl_ui.space_view3d.VIEW3D_MT_particle

VIEW3D_MT_particle_context_menu: bl_ui.space_view3d.VIEW3D_MT_particle_context_menu

VIEW3D_MT_particle_showhide: bl_ui.space_view3d.VIEW3D_MT_particle_showhide

VIEW3D_MT_pivot_pie: bl_ui.space_view3d.VIEW3D_MT_pivot_pie

VIEW3D_MT_pose: bl_ui.space_view3d.VIEW3D_MT_pose

VIEW3D_MT_pose_apply: bl_ui.space_view3d.VIEW3D_MT_pose_apply

VIEW3D_MT_pose_constraints: bl_ui.space_view3d.VIEW3D_MT_pose_constraints

VIEW3D_MT_pose_context_menu: bl_ui.space_view3d.VIEW3D_MT_pose_context_menu

VIEW3D_MT_pose_ik: bl_ui.space_view3d.VIEW3D_MT_pose_ik

VIEW3D_MT_pose_motion: bl_ui.space_view3d.VIEW3D_MT_pose_motion

VIEW3D_MT_pose_names: bl_ui.space_view3d.VIEW3D_MT_pose_names

VIEW3D_MT_pose_propagate: bl_ui.space_view3d.VIEW3D_MT_pose_propagate

VIEW3D_MT_pose_showhide: bl_ui.space_view3d.VIEW3D_MT_pose_showhide

VIEW3D_MT_pose_slide: bl_ui.space_view3d.VIEW3D_MT_pose_slide

VIEW3D_MT_pose_transform: bl_ui.space_view3d.VIEW3D_MT_pose_transform

VIEW3D_MT_proportional_editing_falloff_pie: bl_ui.space_view3d.VIEW3D_MT_proportional_editing_falloff_pie

VIEW3D_MT_random_mask: bl_ui.space_view3d.VIEW3D_MT_random_mask

VIEW3D_MT_sculpt: bl_ui.space_view3d.VIEW3D_MT_sculpt

VIEW3D_MT_sculpt_automasking_pie: bl_ui.space_view3d.VIEW3D_MT_sculpt_automasking_pie

VIEW3D_MT_sculpt_curves: bl_ui.space_view3d.VIEW3D_MT_sculpt_curves

VIEW3D_MT_sculpt_face_sets_edit_pie: bl_ui.space_view3d.VIEW3D_MT_sculpt_face_sets_edit_pie

VIEW3D_MT_sculpt_gpencil_automasking_pie: bl_ui.space_view3d.VIEW3D_MT_sculpt_gpencil_automasking_pie

VIEW3D_MT_sculpt_mask_edit_pie: bl_ui.space_view3d.VIEW3D_MT_sculpt_mask_edit_pie

VIEW3D_MT_sculpt_set_pivot: bl_ui.space_view3d.VIEW3D_MT_sculpt_set_pivot

VIEW3D_MT_select_edit_armature: bl_ui.space_view3d.VIEW3D_MT_select_edit_armature

VIEW3D_MT_select_edit_curve: bl_ui.space_view3d.VIEW3D_MT_select_edit_curve

VIEW3D_MT_select_edit_curves: bl_ui.space_view3d.VIEW3D_MT_select_edit_curves

VIEW3D_MT_select_edit_gpencil: bl_ui.space_view3d.VIEW3D_MT_select_edit_gpencil

VIEW3D_MT_select_edit_grease_pencil: bl_ui.space_view3d.VIEW3D_MT_select_edit_grease_pencil

VIEW3D_MT_select_edit_lattice: bl_ui.space_view3d.VIEW3D_MT_select_edit_lattice

VIEW3D_MT_select_edit_mesh: bl_ui.space_view3d.VIEW3D_MT_select_edit_mesh

VIEW3D_MT_select_edit_metaball: bl_ui.space_view3d.VIEW3D_MT_select_edit_metaball

VIEW3D_MT_select_edit_point_cloud: bl_ui.space_view3d.VIEW3D_MT_select_edit_point_cloud

VIEW3D_MT_select_edit_surface: bl_ui.space_view3d.VIEW3D_MT_select_edit_surface

VIEW3D_MT_select_edit_text: bl_ui.space_view3d.VIEW3D_MT_select_edit_text

VIEW3D_MT_select_object: bl_ui.space_view3d.VIEW3D_MT_select_object

VIEW3D_MT_select_object_more_less: bl_ui.space_view3d.VIEW3D_MT_select_object_more_less

VIEW3D_MT_select_paint_mask: bl_ui.space_view3d.VIEW3D_MT_select_paint_mask

VIEW3D_MT_select_paint_mask_vertex: bl_ui.space_view3d.VIEW3D_MT_select_paint_mask_vertex

VIEW3D_MT_select_particle: bl_ui.space_view3d.VIEW3D_MT_select_particle

VIEW3D_MT_select_pose: bl_ui.space_view3d.VIEW3D_MT_select_pose

VIEW3D_MT_select_pose_more_less: bl_ui.space_view3d.VIEW3D_MT_select_pose_more_less

VIEW3D_MT_select_sculpt_curves: bl_ui.space_view3d.VIEW3D_MT_select_sculpt_curves

VIEW3D_MT_shading_ex_pie: bl_ui.space_view3d.VIEW3D_MT_shading_ex_pie

VIEW3D_MT_shading_pie: bl_ui.space_view3d.VIEW3D_MT_shading_pie

VIEW3D_MT_snap: bl_ui.space_view3d.VIEW3D_MT_snap

VIEW3D_MT_snap_pie: bl_ui.space_view3d.VIEW3D_MT_snap_pie

VIEW3D_MT_surface_add: bl_ui.space_view3d.VIEW3D_MT_surface_add

VIEW3D_MT_tools_projectpaint_clone: bl_ui.properties_paint_common.VIEW3D_MT_tools_projectpaint_clone

VIEW3D_MT_tools_projectpaint_stencil: bl_ui.space_view3d_toolbar.VIEW3D_MT_tools_projectpaint_stencil

VIEW3D_MT_tools_projectpaint_uvlayer: bl_ui.space_view3d_toolbar.VIEW3D_MT_tools_projectpaint_uvlayer

VIEW3D_MT_transform: bl_ui.space_view3d.VIEW3D_MT_transform

VIEW3D_MT_transform_armature: bl_ui.space_view3d.VIEW3D_MT_transform_armature

VIEW3D_MT_transform_gizmo_pie: bl_ui.space_view3d.VIEW3D_MT_transform_gizmo_pie

VIEW3D_MT_transform_object: bl_ui.space_view3d.VIEW3D_MT_transform_object

VIEW3D_MT_uv_map: bl_ui.space_view3d.VIEW3D_MT_uv_map

VIEW3D_MT_vertex_group: bl_ui.space_view3d.VIEW3D_MT_vertex_group

VIEW3D_MT_view: bl_ui.space_view3d.VIEW3D_MT_view

VIEW3D_MT_view_align: bl_ui.space_view3d.VIEW3D_MT_view_align

VIEW3D_MT_view_align_selected: bl_ui.space_view3d.VIEW3D_MT_view_align_selected

VIEW3D_MT_view_cameras: bl_ui.space_view3d.VIEW3D_MT_view_cameras

VIEW3D_MT_view_local: bl_ui.space_view3d.VIEW3D_MT_view_local

VIEW3D_MT_view_navigation: bl_ui.space_view3d.VIEW3D_MT_view_navigation

VIEW3D_MT_view_pie: bl_ui.space_view3d.VIEW3D_MT_view_pie

VIEW3D_MT_view_regions: bl_ui.space_view3d.VIEW3D_MT_view_regions

VIEW3D_MT_view_viewpoint: bl_ui.space_view3d.VIEW3D_MT_view_viewpoint

VIEW3D_MT_volume_add: bl_ui.space_view3d.VIEW3D_MT_volume_add

VIEW3D_MT_weight_gpencil: bl_ui.space_view3d.VIEW3D_MT_weight_gpencil

VIEW3D_MT_wpaint_vgroup_lock_pie: bl_ui.space_view3d.VIEW3D_MT_wpaint_vgroup_lock_pie

VIEW3D_OT_edit_mesh_extrude_individual_move: bl_operators.view3d.VIEW3D_OT_edit_mesh_extrude_individual_move

VIEW3D_OT_edit_mesh_extrude_manifold_normal: bl_operators.view3d.VIEW3D_OT_edit_mesh_extrude_manifold_normal

VIEW3D_OT_transform_gizmo_set: bl_operators.view3d.VIEW3D_OT_transform_gizmo_set

VIEW3D_PT_active_tool: bl_ui.space_view3d.VIEW3D_PT_active_tool

VIEW3D_PT_active_tool_duplicate: bl_ui.space_view3d.VIEW3D_PT_active_tool_duplicate

VIEW3D_PT_annotation_onion: bl_ui.space_view3d.VIEW3D_PT_annotation_onion

VIEW3D_PT_collections: bl_ui.space_view3d.VIEW3D_PT_collections

VIEW3D_PT_context_properties: bl_ui.space_view3d.VIEW3D_PT_context_properties

VIEW3D_PT_curves_sculpt_add_shape: bl_ui.space_view3d.VIEW3D_PT_curves_sculpt_add_shape

VIEW3D_PT_curves_sculpt_grow_shrink_scaling: bl_ui.space_view3d.VIEW3D_PT_curves_sculpt_grow_shrink_scaling

VIEW3D_PT_curves_sculpt_parameter_falloff: bl_ui.space_view3d.VIEW3D_PT_curves_sculpt_parameter_falloff

VIEW3D_PT_curves_sculpt_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_curves_sculpt_symmetry

VIEW3D_PT_curves_sculpt_symmetry_for_topbar: bl_ui.space_view3d_toolbar.VIEW3D_PT_curves_sculpt_symmetry_for_topbar

VIEW3D_PT_gizmo_display: bl_ui.space_view3d.VIEW3D_PT_gizmo_display

VIEW3D_PT_gpencil_brush_presets: bl_ui.space_view3d_toolbar.VIEW3D_PT_gpencil_brush_presets

VIEW3D_PT_gpencil_curve_edit: bl_ui.space_view3d.VIEW3D_PT_gpencil_curve_edit

VIEW3D_PT_gpencil_draw_context_menu: bl_ui.space_view3d.VIEW3D_PT_gpencil_draw_context_menu

VIEW3D_PT_gpencil_guide: bl_ui.space_view3d.VIEW3D_PT_gpencil_guide

VIEW3D_PT_gpencil_lock: bl_ui.space_view3d.VIEW3D_PT_gpencil_lock

VIEW3D_PT_gpencil_multi_frame: bl_ui.space_view3d.VIEW3D_PT_gpencil_multi_frame

VIEW3D_PT_gpencil_origin: bl_ui.space_view3d.VIEW3D_PT_gpencil_origin

VIEW3D_PT_gpencil_sculpt_automasking: bl_ui.space_view3d.VIEW3D_PT_gpencil_sculpt_automasking

VIEW3D_PT_gpencil_sculpt_context_menu: bl_ui.space_view3d.VIEW3D_PT_gpencil_sculpt_context_menu

VIEW3D_PT_gpencil_vertex_context_menu: bl_ui.space_view3d.VIEW3D_PT_gpencil_vertex_context_menu

VIEW3D_PT_gpencil_weight_context_menu: bl_ui.space_view3d.VIEW3D_PT_gpencil_weight_context_menu

VIEW3D_PT_grease_pencil: bl_ui.space_view3d.VIEW3D_PT_grease_pencil

VIEW3D_PT_mask: bl_ui.space_view3d_toolbar.VIEW3D_PT_mask

VIEW3D_PT_object_type_visibility: bl_ui.space_view3d.VIEW3D_PT_object_type_visibility

VIEW3D_PT_overlay: bl_ui.space_view3d.VIEW3D_PT_overlay

VIEW3D_PT_overlay_bones: bl_ui.space_view3d.VIEW3D_PT_overlay_bones

VIEW3D_PT_overlay_edit_curve: bl_ui.space_view3d.VIEW3D_PT_overlay_edit_curve

VIEW3D_PT_overlay_edit_mesh: bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh

VIEW3D_PT_overlay_edit_mesh_freestyle: bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_freestyle

VIEW3D_PT_overlay_edit_mesh_measurement: bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_measurement

VIEW3D_PT_overlay_edit_mesh_normals: bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_normals

VIEW3D_PT_overlay_edit_mesh_shading: bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_shading

VIEW3D_PT_overlay_geometry: bl_ui.space_view3d.VIEW3D_PT_overlay_geometry

VIEW3D_PT_overlay_gpencil_options: bl_ui.space_view3d.VIEW3D_PT_overlay_gpencil_options

VIEW3D_PT_overlay_grease_pencil_options: bl_ui.space_view3d.VIEW3D_PT_overlay_grease_pencil_options

VIEW3D_PT_overlay_guides: bl_ui.space_view3d.VIEW3D_PT_overlay_guides

VIEW3D_PT_overlay_motion_tracking: bl_ui.space_view3d.VIEW3D_PT_overlay_motion_tracking

VIEW3D_PT_overlay_object: bl_ui.space_view3d.VIEW3D_PT_overlay_object

VIEW3D_PT_overlay_sculpt: bl_ui.space_view3d.VIEW3D_PT_overlay_sculpt

VIEW3D_PT_overlay_sculpt_curves: bl_ui.space_view3d.VIEW3D_PT_overlay_sculpt_curves

VIEW3D_PT_overlay_texture_paint: bl_ui.space_view3d.VIEW3D_PT_overlay_texture_paint

VIEW3D_PT_overlay_vertex_paint: bl_ui.space_view3d.VIEW3D_PT_overlay_vertex_paint

VIEW3D_PT_overlay_viewer_node: bl_ui.space_view3d.VIEW3D_PT_overlay_viewer_node

VIEW3D_PT_overlay_weight_paint: bl_ui.space_view3d.VIEW3D_PT_overlay_weight_paint

VIEW3D_PT_paint_texture_context_menu: bl_ui.space_view3d.VIEW3D_PT_paint_texture_context_menu

VIEW3D_PT_paint_vertex_context_menu: bl_ui.space_view3d.VIEW3D_PT_paint_vertex_context_menu

VIEW3D_PT_paint_weight_context_menu: bl_ui.space_view3d.VIEW3D_PT_paint_weight_context_menu

VIEW3D_PT_proportional_edit: bl_ui.space_view3d.VIEW3D_PT_proportional_edit

VIEW3D_PT_quad_view: bl_ui.space_view3d.VIEW3D_PT_quad_view

VIEW3D_PT_sculpt_automasking: bl_ui.space_view3d.VIEW3D_PT_sculpt_automasking

VIEW3D_PT_sculpt_context_menu: bl_ui.space_view3d.VIEW3D_PT_sculpt_context_menu

VIEW3D_PT_sculpt_dyntopo: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_dyntopo

VIEW3D_PT_sculpt_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_options

VIEW3D_PT_sculpt_options_gravity: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_options_gravity

VIEW3D_PT_sculpt_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_symmetry

VIEW3D_PT_sculpt_symmetry_for_topbar: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_symmetry_for_topbar

VIEW3D_PT_sculpt_voxel_remesh: bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_voxel_remesh

VIEW3D_PT_shading: bl_ui.space_view3d.VIEW3D_PT_shading

VIEW3D_PT_shading_color: bl_ui.space_view3d.VIEW3D_PT_shading_color

VIEW3D_PT_shading_compositor: bl_ui.space_view3d.VIEW3D_PT_shading_compositor

VIEW3D_PT_shading_lighting: bl_ui.space_view3d.VIEW3D_PT_shading_lighting

VIEW3D_PT_shading_options: bl_ui.space_view3d.VIEW3D_PT_shading_options

VIEW3D_PT_shading_options_shadow: bl_ui.space_view3d.VIEW3D_PT_shading_options_shadow

VIEW3D_PT_shading_options_ssao: bl_ui.space_view3d.VIEW3D_PT_shading_options_ssao

VIEW3D_PT_shading_render_pass: bl_ui.space_view3d.VIEW3D_PT_shading_render_pass

VIEW3D_PT_slots_color_attributes: bl_ui.space_view3d_toolbar.VIEW3D_PT_slots_color_attributes

VIEW3D_PT_slots_paint_canvas: bl_ui.space_view3d_toolbar.VIEW3D_PT_slots_paint_canvas

VIEW3D_PT_slots_projectpaint: bl_ui.space_view3d_toolbar.VIEW3D_PT_slots_projectpaint

VIEW3D_PT_slots_vertex_groups: bl_ui.space_view3d_toolbar.VIEW3D_PT_slots_vertex_groups

VIEW3D_PT_snapping: bl_ui.space_view3d.VIEW3D_PT_snapping

VIEW3D_PT_stencil_projectpaint: bl_ui.space_view3d_toolbar.VIEW3D_PT_stencil_projectpaint

VIEW3D_PT_tools_active: bl_ui.space_toolsystem_toolbar.VIEW3D_PT_tools_active

VIEW3D_PT_tools_armatureedit_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_armatureedit_options

VIEW3D_PT_tools_brush_clone: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_clone

VIEW3D_PT_tools_brush_color: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_color

VIEW3D_PT_tools_brush_display: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_display

VIEW3D_PT_tools_brush_falloff: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_falloff

VIEW3D_PT_tools_brush_falloff_frontface: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_falloff_frontface

VIEW3D_PT_tools_brush_falloff_normal: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_falloff_normal

VIEW3D_PT_tools_brush_select: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_select

VIEW3D_PT_tools_brush_settings: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_settings

VIEW3D_PT_tools_brush_settings_advanced: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_settings_advanced

VIEW3D_PT_tools_brush_stroke: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_stroke

VIEW3D_PT_tools_brush_stroke_smooth_stroke: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_stroke_smooth_stroke

VIEW3D_PT_tools_brush_swatches: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_swatches

VIEW3D_PT_tools_brush_texture: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_texture

VIEW3D_PT_tools_grease_pencil_brush_advanced: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_advanced

VIEW3D_PT_tools_grease_pencil_brush_gap_closure: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_gap_closure

VIEW3D_PT_tools_grease_pencil_brush_mix_palette: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_mix_palette

VIEW3D_PT_tools_grease_pencil_brush_mixcolor: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_mixcolor

VIEW3D_PT_tools_grease_pencil_brush_paint_falloff: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_paint_falloff

VIEW3D_PT_tools_grease_pencil_brush_post_processing: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_post_processing

VIEW3D_PT_tools_grease_pencil_brush_random: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_random

VIEW3D_PT_tools_grease_pencil_brush_sculpt_falloff: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_sculpt_falloff

VIEW3D_PT_tools_grease_pencil_brush_select: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_select

VIEW3D_PT_tools_grease_pencil_brush_settings: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_settings

VIEW3D_PT_tools_grease_pencil_brush_stabilizer: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_stabilizer

VIEW3D_PT_tools_grease_pencil_brush_stroke: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_stroke

VIEW3D_PT_tools_grease_pencil_brush_vertex_color: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_vertex_color

VIEW3D_PT_tools_grease_pencil_brush_vertex_falloff: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_vertex_falloff

VIEW3D_PT_tools_grease_pencil_brush_vertex_palette: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_vertex_palette

VIEW3D_PT_tools_grease_pencil_brush_weight_falloff: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_weight_falloff

VIEW3D_PT_tools_grease_pencil_paint_appearance: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_paint_appearance

VIEW3D_PT_tools_grease_pencil_sculpt_appearance: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_appearance

VIEW3D_PT_tools_grease_pencil_sculpt_brush_advanced: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_brush_advanced

VIEW3D_PT_tools_grease_pencil_sculpt_brush_popover: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_brush_popover

VIEW3D_PT_tools_grease_pencil_sculpt_select: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_select

VIEW3D_PT_tools_grease_pencil_sculpt_settings: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_settings

VIEW3D_PT_tools_grease_pencil_vertex_appearance: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_vertex_appearance

VIEW3D_PT_tools_grease_pencil_vertex_paint_select: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_vertex_paint_select

VIEW3D_PT_tools_grease_pencil_vertex_paint_settings: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_vertex_paint_settings

VIEW3D_PT_tools_grease_pencil_weight_appearance: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_weight_appearance

VIEW3D_PT_tools_grease_pencil_weight_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_weight_options

VIEW3D_PT_tools_grease_pencil_weight_paint_select: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_weight_paint_select

VIEW3D_PT_tools_grease_pencil_weight_paint_settings: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_weight_paint_settings

VIEW3D_PT_tools_imagepaint_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_options

VIEW3D_PT_tools_imagepaint_options_cavity: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_options_cavity

VIEW3D_PT_tools_imagepaint_options_external: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_options_external

VIEW3D_PT_tools_imagepaint_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_symmetry

VIEW3D_PT_tools_mask_texture: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_mask_texture

VIEW3D_PT_tools_meshedit_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshedit_options

VIEW3D_PT_tools_meshedit_options_transform: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshedit_options_transform

VIEW3D_PT_tools_meshedit_options_uvs: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshedit_options_uvs

VIEW3D_PT_tools_object_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_object_options

VIEW3D_PT_tools_object_options_transform: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_object_options_transform

VIEW3D_PT_tools_particlemode: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode

VIEW3D_PT_tools_particlemode_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode_options

VIEW3D_PT_tools_particlemode_options_display: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode_options_display

VIEW3D_PT_tools_particlemode_options_shapecut: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode_options_shapecut

VIEW3D_PT_tools_posemode_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_posemode_options

VIEW3D_PT_tools_vertexpaint_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint_options

VIEW3D_PT_tools_vertexpaint_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint_symmetry

VIEW3D_PT_tools_vertexpaint_symmetry_for_topbar: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint_symmetry_for_topbar

VIEW3D_PT_tools_weight_gradient: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weight_gradient

VIEW3D_PT_tools_weightpaint_options: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_options

VIEW3D_PT_tools_weightpaint_symmetry: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_symmetry

VIEW3D_PT_tools_weightpaint_symmetry_for_topbar: bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_symmetry_for_topbar

VIEW3D_PT_transform_orientations: bl_ui.space_view3d.VIEW3D_PT_transform_orientations

VIEW3D_PT_view3d_cursor: bl_ui.space_view3d.VIEW3D_PT_view3d_cursor

VIEW3D_PT_view3d_lock: bl_ui.space_view3d.VIEW3D_PT_view3d_lock

VIEW3D_PT_view3d_properties: bl_ui.space_view3d.VIEW3D_PT_view3d_properties

VIEW3D_PT_view3d_stereo: bl_ui.space_view3d.VIEW3D_PT_view3d_stereo

VIEW3D_PT_viewport_debug: bl_ui.space_view3d.VIEW3D_PT_viewport_debug

VIEWLAYER_MT_lightgroup_sync: bl_ui.properties_view_layer.VIEWLAYER_MT_lightgroup_sync

VIEWLAYER_PT_eevee_layer_passes_data: bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_layer_passes_data

VIEWLAYER_PT_eevee_layer_passes_effects: bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_layer_passes_effects

VIEWLAYER_PT_eevee_layer_passes_light: bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_layer_passes_light

VIEWLAYER_PT_eevee_next_layer_passes_data: bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_next_layer_passes_data

VIEWLAYER_PT_eevee_next_layer_passes_light: bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_next_layer_passes_light

VIEWLAYER_PT_filter: bl_ui.properties_view_layer.VIEWLAYER_PT_filter

VIEWLAYER_PT_freestyle: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle

VIEWLAYER_PT_freestyle_edge_detection: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_edge_detection

VIEWLAYER_PT_freestyle_lineset: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset

VIEWLAYER_PT_freestyle_lineset_collection: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_collection

VIEWLAYER_PT_freestyle_lineset_edgetype: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_edgetype

VIEWLAYER_PT_freestyle_lineset_facemarks: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_facemarks

VIEWLAYER_PT_freestyle_lineset_visibilty: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_visibilty

VIEWLAYER_PT_freestyle_linestyle_alpha: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_alpha

VIEWLAYER_PT_freestyle_linestyle_color: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_color

VIEWLAYER_PT_freestyle_linestyle_geometry: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_geometry

VIEWLAYER_PT_freestyle_linestyle_strokes: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes

VIEWLAYER_PT_freestyle_linestyle_strokes_chaining: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_chaining

VIEWLAYER_PT_freestyle_linestyle_strokes_dashedline: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_dashedline

VIEWLAYER_PT_freestyle_linestyle_strokes_selection: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_selection

VIEWLAYER_PT_freestyle_linestyle_strokes_sorting: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_sorting

VIEWLAYER_PT_freestyle_linestyle_strokes_splitting: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_splitting

VIEWLAYER_PT_freestyle_linestyle_strokes_splitting_pattern: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_splitting_pattern

VIEWLAYER_PT_freestyle_linestyle_texture: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_texture

VIEWLAYER_PT_freestyle_linestyle_thickness: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_thickness

VIEWLAYER_PT_freestyle_style_modules: bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_style_modules

VIEWLAYER_PT_layer: bl_ui.properties_view_layer.VIEWLAYER_PT_layer

VIEWLAYER_PT_layer_custom_props: bl_ui.properties_view_layer.VIEWLAYER_PT_layer_custom_props

VIEWLAYER_PT_layer_passes: bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes

VIEWLAYER_PT_layer_passes_aov: bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes_aov

VIEWLAYER_PT_layer_passes_cryptomatte: bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes_cryptomatte

VIEWLAYER_PT_layer_passes_lightgroups: bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes_lightgroups

VIEWLAYER_PT_workbench_layer_passes_data: bl_ui.properties_view_layer.VIEWLAYER_PT_workbench_layer_passes_data

VIEWLAYER_UL_aov: bl_ui.properties_view_layer.VIEWLAYER_UL_aov

VIEWLAYER_UL_linesets: bl_ui.properties_freestyle.VIEWLAYER_UL_linesets

VOLUME_UL_grids: bl_ui.properties_data_volume.VOLUME_UL_grids

WM_MT_operator_presets: bl_operators.presets.WM_MT_operator_presets

WM_MT_region_toggle_pie: bl_operators.wm.WM_MT_region_toggle_pie

WM_MT_splash: bl_operators.wm.WM_MT_splash

WM_MT_splash_about: bl_operators.wm.WM_MT_splash_about

WM_MT_splash_quick_setup: bl_operators.wm.WM_MT_splash_quick_setup

WM_MT_toolsystem_submenu: bl_ui.space_toolsystem_common.WM_MT_toolsystem_submenu

WM_OT_batch_rename: bl_operators.wm.WM_OT_batch_rename

WM_OT_blend_strings_utf8_validate: bl_operators.file.WM_OT_blend_strings_utf8_validate

WM_OT_context_collection_boolean_set: bl_operators.wm.WM_OT_context_collection_boolean_set

WM_OT_context_cycle_array: bl_operators.wm.WM_OT_context_cycle_array

WM_OT_context_cycle_enum: bl_operators.wm.WM_OT_context_cycle_enum

WM_OT_context_cycle_int: bl_operators.wm.WM_OT_context_cycle_int

WM_OT_context_menu_enum: bl_operators.wm.WM_OT_context_menu_enum

WM_OT_context_modal_mouse: bl_operators.wm.WM_OT_context_modal_mouse

WM_OT_context_pie_enum: bl_operators.wm.WM_OT_context_pie_enum

WM_OT_context_scale_float: bl_operators.wm.WM_OT_context_scale_float

WM_OT_context_scale_int: bl_operators.wm.WM_OT_context_scale_int

WM_OT_context_set_boolean: bl_operators.wm.WM_OT_context_set_boolean

WM_OT_context_set_enum: bl_operators.wm.WM_OT_context_set_enum

WM_OT_context_set_float: bl_operators.wm.WM_OT_context_set_float

WM_OT_context_set_id: bl_operators.wm.WM_OT_context_set_id

WM_OT_context_set_int: bl_operators.wm.WM_OT_context_set_int

WM_OT_context_set_string: bl_operators.wm.WM_OT_context_set_string

WM_OT_context_set_value: bl_operators.wm.WM_OT_context_set_value

WM_OT_context_toggle: bl_operators.wm.WM_OT_context_toggle

WM_OT_context_toggle_enum: bl_operators.wm.WM_OT_context_toggle_enum

WM_OT_doc_view: bl_operators.wm.WM_OT_doc_view

WM_OT_doc_view_manual: bl_operators.wm.WM_OT_doc_view_manual

WM_OT_drop_blend_file: bl_operators.wm.WM_OT_drop_blend_file

WM_OT_operator_cheat_sheet: bl_operators.wm.WM_OT_operator_cheat_sheet

WM_OT_operator_pie_enum: bl_operators.wm.WM_OT_operator_pie_enum

WM_OT_operator_presets_cleanup: bl_operators.presets.WM_OT_operator_presets_cleanup

WM_OT_owner_disable: bl_operators.wm.WM_OT_owner_disable

WM_OT_owner_enable: bl_operators.wm.WM_OT_owner_enable

WM_OT_path_open: bl_operators.wm.WM_OT_path_open

WM_OT_previews_batch_clear: bl_operators.file.WM_OT_previews_batch_clear

WM_OT_previews_batch_generate: bl_operators.file.WM_OT_previews_batch_generate

WM_OT_properties_add: bl_operators.wm.WM_OT_properties_add

WM_OT_properties_context_change: bl_operators.wm.WM_OT_properties_context_change

WM_OT_properties_edit: bl_operators.wm.WM_OT_properties_edit

WM_OT_properties_edit_value: bl_operators.wm.WM_OT_properties_edit_value

WM_OT_properties_remove: bl_operators.wm.WM_OT_properties_remove

WM_OT_sysinfo: bl_operators.wm.WM_OT_sysinfo

WM_OT_tool_set_by_id: bl_operators.wm.WM_OT_tool_set_by_id

WM_OT_tool_set_by_index: bl_operators.wm.WM_OT_tool_set_by_index

WM_OT_toolbar: bl_operators.wm.WM_OT_toolbar

WM_OT_toolbar_fallback_pie: bl_operators.wm.WM_OT_toolbar_fallback_pie

WM_OT_toolbar_prompt: bl_operators.wm.WM_OT_toolbar_prompt

WM_OT_url_open: bl_operators.wm.WM_OT_url_open

WM_OT_url_open_preset: bl_operators.wm.WM_OT_url_open_preset

WORKSPACE_PT_addons: bl_ui.properties_workspace.WORKSPACE_PT_addons

WORKSPACE_PT_custom_props: bl_ui.properties_workspace.WORKSPACE_PT_custom_props

WORKSPACE_PT_main: bl_ui.properties_workspace.WORKSPACE_PT_main

WORKSPACE_UL_addons_items: bl_ui.properties_workspace.WORKSPACE_UL_addons_items

WORLD_PT_context_world: bl_ui.properties_world.WORLD_PT_context_world

WORLD_PT_custom_props: bl_ui.properties_world.WORLD_PT_custom_props

WORLD_PT_viewport_display: bl_ui.properties_world.WORLD_PT_viewport_display
